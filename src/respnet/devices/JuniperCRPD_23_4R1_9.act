import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_junos_conf_root__configuration__rcsid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__system__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__system(yang.adata.MNode):
    host_name: ?str

    mut def __init__(self, host_name: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.host_name = host_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__system:
        if n != None:
            return junos_conf_root__configuration__system(host_name=n.get_opt_str("host-name"))
        return junos_conf_root__configuration__system()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__system:
        if n != None:
            return junos_conf_root__configuration__system(host_name=yang.gdata.from_xml_opt_str(n, "host-name"))
        return junos_conf_root__configuration__system()


mut def from_json_junos_conf_root__configuration__interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__native_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__alias(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name=yang.gdata.from_xml_str(n, "name"))

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry.from_xml(node))
        return res


class junos_conf_root__configuration__interfaces__interface__unit__family__inet(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__inet__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet__address.from_gdata(n.get_opt_list("address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return None


mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(name=yang.gdata.from_xml_str(n, "name"))

class junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry.from_xml(node))
        return res


class junos_conf_root__configuration__interfaces__interface__unit__family__inet6(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet6(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address.from_gdata(n.get_opt_list("address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet6(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return None


mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(name=yang.gdata.from_xml_str(n, "name"))

class junos_conf_root__configuration__interfaces__interface__unit__family__iso__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry.from_xml(node))
        return res


class junos_conf_root__configuration__interfaces__interface__unit__family__iso(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__iso__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__iso__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__iso:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__iso(address=junos_conf_root__configuration__interfaces__interface__unit__family__iso__address.from_gdata(n.get_opt_list("address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__iso:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__iso(address=junos_conf_root__configuration__interfaces__interface__unit__family__iso__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return None


class junos_conf_root__configuration__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet
    inet6: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6
    iso: ?junos_conf_root__configuration__interfaces__interface__unit__family__iso

    mut def __init__(self, inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet=None, inet6: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6=None, iso: ?junos_conf_root__configuration__interfaces__interface__unit__family__iso=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.inet = inet
        self.inet6 = inet6
        self.iso = iso

    mut def create_inet(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    mut def create_inet6(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet6()
        self.inet6 = res
        return res

    mut def create_iso(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__iso()
        self.iso = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet = self.inet
        _inet6 = self.inet6
        _iso = self.iso
        if _inet is not None:
            children['inet'] = _inet.to_gdata()
        if _inet6 is not None:
            children['inet6'] = _inet6.to_gdata()
        if _iso is not None:
            children['iso'] = _iso.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family(inet=junos_conf_root__configuration__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_container("inet")), inet6=junos_conf_root__configuration__interfaces__interface__unit__family__inet6.from_gdata(n.get_opt_container("inet6")), iso=junos_conf_root__configuration__interfaces__interface__unit__family__iso.from_gdata(n.get_opt_container("iso")))
        return junos_conf_root__configuration__interfaces__interface__unit__family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__unit__family(inet=junos_conf_root__configuration__interfaces__interface__unit__family__inet.from_xml(yang.gdata.get_xml_opt_child(n, "inet")), inet6=junos_conf_root__configuration__interfaces__interface__unit__family__inet6.from_xml(yang.gdata.get_xml_opt_child(n, "inet6")), iso=junos_conf_root__configuration__interfaces__interface__unit__family__iso.from_xml(yang.gdata.get_xml_opt_child(n, "iso")))
        return junos_conf_root__configuration__interfaces__interface__unit__family()


mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__unit__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    alias: ?str
    description: ?str
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    mut def __init__(self, name: str, alias: ?str, description: ?str, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.alias = alias
        self.description = description
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        if family is not None:
            self.family = family
        else:
            self.family = junos_conf_root__configuration__interfaces__interface__unit__family()
        self.mtu = mtu
        self.mac = mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _alias = self.alias
        _description = self.description
        _vlan_id = self.vlan_id
        _encapsulation = self.encapsulation
        _family = self.family
        _mtu = self.mtu
        _mac = self.mac
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _alias is not None:
            children['alias'] = yang.gdata.Leaf('string', _alias)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('string', _vlan_id)
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        if _family is not None:
            children['family'] = _family.to_gdata()
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__interfaces__interface__unit_entry(name=n.get_str("name"), alias=n.get_opt_str("alias"), description=n.get_opt_str("description"), vlan_id=n.get_opt_str("vlan-id"), encapsulation=n.get_opt_str("encapsulation"), family=junos_conf_root__configuration__interfaces__interface__unit__family.from_gdata(n.get_opt_container("family")), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__interfaces__interface__unit_entry(name=yang.gdata.from_xml_str(n, "name"), alias=yang.gdata.from_xml_opt_str(n, "alias"), description=yang.gdata.from_xml_opt_str(n, "description"), vlan_id=yang.gdata.from_xml_opt_str(n, "vlan-id"), encapsulation=yang.gdata.from_xml_opt_str(n, "encapsulation"), family=junos_conf_root__configuration__interfaces__interface__unit__family.from_xml(yang.gdata.get_xml_opt_child(n, "family")), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"))

class junos_conf_root__configuration__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'unit'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__interfaces__interface__unit_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface__unit_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface__unit_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__interfaces__interface__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__stacked_vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__flexible_vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__vlan_vci_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__per_unit_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__no_per_unit_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__interfaces__interface__shared_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler:
        if n != None:
            return junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler()
        return None


class junos_conf_root__configuration__interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__interfaces__interface__unit
    encapsulation: ?str
    vlan_tagging: ?bool
    stacked_vlan_tagging: ?bool
    flexible_vlan_tagging: ?bool
    vlan_vci_tagging: ?bool
    per_unit_scheduler: ?bool
    no_per_unit_scheduler: ?bool
    shared_scheduler: ?bool
    hierarchical_scheduler: ?junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler

    mut def __init__(self, name: str, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__interfaces__interface__unit_entry]=[], encapsulation: ?str, vlan_tagging: ?bool, stacked_vlan_tagging: ?bool, flexible_vlan_tagging: ?bool, vlan_vci_tagging: ?bool, per_unit_scheduler: ?bool, no_per_unit_scheduler: ?bool, shared_scheduler: ?bool, hierarchical_scheduler: ?junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__interfaces__interface__unit(elements=unit)
        self.encapsulation = encapsulation
        self.vlan_tagging = vlan_tagging
        self.stacked_vlan_tagging = stacked_vlan_tagging
        self.flexible_vlan_tagging = flexible_vlan_tagging
        self.vlan_vci_tagging = vlan_vci_tagging
        self.per_unit_scheduler = per_unit_scheduler
        self.no_per_unit_scheduler = no_per_unit_scheduler
        self.shared_scheduler = shared_scheduler
        self.hierarchical_scheduler = hierarchical_scheduler

    mut def create_hierarchical_scheduler(self):
        res = junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler()
        self.hierarchical_scheduler = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _mtu = self.mtu
        _mac = self.mac
        _native_vlan_id = self.native_vlan_id
        _unit = self.unit
        _encapsulation = self.encapsulation
        _vlan_tagging = self.vlan_tagging
        _stacked_vlan_tagging = self.stacked_vlan_tagging
        _flexible_vlan_tagging = self.flexible_vlan_tagging
        _vlan_vci_tagging = self.vlan_vci_tagging
        _per_unit_scheduler = self.per_unit_scheduler
        _no_per_unit_scheduler = self.no_per_unit_scheduler
        _shared_scheduler = self.shared_scheduler
        _hierarchical_scheduler = self.hierarchical_scheduler
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        if _native_vlan_id is not None:
            children['native-vlan-id'] = yang.gdata.Leaf('union', _native_vlan_id)
        if _unit is not None:
            children['unit'] = _unit.to_gdata()
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        if _vlan_tagging is not None:
            children['vlan-tagging'] = yang.gdata.Leaf('empty', _vlan_tagging)
        if _stacked_vlan_tagging is not None:
            children['stacked-vlan-tagging'] = yang.gdata.Leaf('empty', _stacked_vlan_tagging)
        if _flexible_vlan_tagging is not None:
            children['flexible-vlan-tagging'] = yang.gdata.Leaf('empty', _flexible_vlan_tagging)
        if _vlan_vci_tagging is not None:
            children['vlan-vci-tagging'] = yang.gdata.Leaf('empty', _vlan_vci_tagging)
        if _per_unit_scheduler is not None:
            children['per-unit-scheduler'] = yang.gdata.Leaf('empty', _per_unit_scheduler)
        if _no_per_unit_scheduler is not None:
            children['no-per-unit-scheduler'] = yang.gdata.Leaf('empty', _no_per_unit_scheduler)
        if _shared_scheduler is not None:
            children['shared-scheduler'] = yang.gdata.Leaf('empty', _shared_scheduler)
        if _hierarchical_scheduler is not None:
            children['hierarchical-scheduler'] = _hierarchical_scheduler.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface_entry:
        return junos_conf_root__configuration__interfaces__interface_entry(name=n.get_str("name"), description=n.get_opt_str("description"), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"), native_vlan_id=n.get_opt_value("native-vlan-id"), unit=junos_conf_root__configuration__interfaces__interface__unit.from_gdata(n.get_opt_list("unit")), encapsulation=n.get_opt_str("encapsulation"), vlan_tagging=n.get_opt_bool("vlan-tagging"), stacked_vlan_tagging=n.get_opt_bool("stacked-vlan-tagging"), flexible_vlan_tagging=n.get_opt_bool("flexible-vlan-tagging"), vlan_vci_tagging=n.get_opt_bool("vlan-vci-tagging"), per_unit_scheduler=n.get_opt_bool("per-unit-scheduler"), no_per_unit_scheduler=n.get_opt_bool("no-per-unit-scheduler"), shared_scheduler=n.get_opt_bool("shared-scheduler"), hierarchical_scheduler=junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler.from_gdata(n.get_opt_container("hierarchical-scheduler")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__interfaces__interface_entry:
        return junos_conf_root__configuration__interfaces__interface_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"), native_vlan_id=yang.gdata.from_xml_opt_value(n, "native-vlan-id"), unit=junos_conf_root__configuration__interfaces__interface__unit.from_xml(yang.gdata.get_xml_children(n, "unit")), encapsulation=yang.gdata.from_xml_opt_str(n, "encapsulation"), vlan_tagging=yang.gdata.from_xml_opt_bool(n, "vlan-tagging"), stacked_vlan_tagging=yang.gdata.from_xml_opt_bool(n, "stacked-vlan-tagging"), flexible_vlan_tagging=yang.gdata.from_xml_opt_bool(n, "flexible-vlan-tagging"), vlan_vci_tagging=yang.gdata.from_xml_opt_bool(n, "vlan-vci-tagging"), per_unit_scheduler=yang.gdata.from_xml_opt_bool(n, "per-unit-scheduler"), no_per_unit_scheduler=yang.gdata.from_xml_opt_bool(n, "no-per-unit-scheduler"), shared_scheduler=yang.gdata.from_xml_opt_bool(n, "shared-scheduler"), hierarchical_scheduler=junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler.from_xml(yang.gdata.get_xml_opt_child(n, "hierarchical-scheduler")))

class junos_conf_root__configuration__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__interfaces__interface_entry.from_xml(node))
        return res


class junos_conf_root__configuration__interfaces(yang.adata.MNode):
    interface: junos_conf_root__configuration__interfaces__interface

    mut def __init__(self, interface: list[junos_conf_root__configuration__interfaces__interface_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.interface = junos_conf_root__configuration__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces:
        if n != None:
            return junos_conf_root__configuration__interfaces(interface=junos_conf_root__configuration__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return junos_conf_root__configuration__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__interfaces:
        if n != None:
            return junos_conf_root__configuration__interfaces(interface=junos_conf_root__configuration__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return junos_conf_root__configuration__interfaces()


mut def from_json_junos_conf_root__configuration__routing_instances__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__apply_groups(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__apply_groups_except(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__instance_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__any(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__multicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__interface__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    mut def __init__(self, name: str, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _any = self.any
        _unicast = self.unicast
        _multicast = self.multicast
        _primary = self.primary
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _any is not None:
            children['any'] = yang.gdata.Leaf('empty', _any)
        if _unicast is not None:
            children['unicast'] = yang.gdata.Leaf('empty', _unicast)
        if _multicast is not None:
            children['multicast'] = yang.gdata.Leaf('empty', _multicast)
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__routing_instances__instance__interface_entry(name=n.get_str("name"), any=n.get_opt_bool("any"), unicast=n.get_opt_bool("unicast"), multicast=n.get_opt_bool("multicast"), primary=n.get_opt_bool("primary"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__routing_instances__instance__interface_entry(name=yang.gdata.from_xml_str(n, "name"), any=yang.gdata.from_xml_opt_bool(n, "any"), unicast=yang.gdata.from_xml_opt_bool(n, "unicast"), multicast=yang.gdata.from_xml_opt_bool(n, "multicast"), primary=yang.gdata.from_xml_opt_bool(n, "primary"))

class junos_conf_root__configuration__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__routing_instances__instance__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__routing_instances__instance__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__routing_instances__instance__interface_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__routing_instances__instance__route_distinguisher__rd_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    mut def __init__(self, rd_type: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rd_type = rd_type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd_type = self.rd_type
        if _rd_type is not None:
            children['rd-type'] = yang.gdata.Leaf('string', _rd_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str("rd-type"))
        return junos_conf_root__configuration__routing_instances__instance__route_distinguisher()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__route_distinguisher(rd_type=yang.gdata.from_xml_opt_str(n, "rd-type"))
        return junos_conf_root__configuration__routing_instances__instance__route_distinguisher()


mut def from_json_junos_conf_root__configuration__routing_instances__instance__export_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__import_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__export(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_target__auto(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__routing_instances__instance__vrf_target(yang.adata.MNode):
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    mut def __init__(self, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        _import_ = self.import_
        _export = self.export
        _auto = self.auto
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        if _export is not None:
            children['export'] = yang.gdata.Leaf('string', _export)
        if _auto is not None:
            children['auto'] = yang.gdata.Leaf('empty', _auto)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_target(community=n.get_opt_str("community"), import_=n.get_opt_str("import"), export=n.get_opt_str("export"), auto=n.get_opt_bool("auto"))
        return junos_conf_root__configuration__routing_instances__instance__vrf_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_target(community=yang.gdata.from_xml_opt_str(n, "community"), import_=yang.gdata.from_xml_opt_str(n, "import"), export=yang.gdata.from_xml_opt_str(n, "export"), auto=yang.gdata.from_xml_opt_bool(n, "auto"))
        return junos_conf_root__configuration__routing_instances__instance__vrf_target()


mut def from_json_junos_conf_root__configuration__routing_instances__instance__no_vrf_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_table_label__static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__vrf_table_label__source_class_usage(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__routing_instances__instance__vrf_table_label(yang.adata.MNode):
    static: ?value
    source_class_usage: ?bool

    mut def __init__(self, static: ?value, source_class_usage: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.static = static
        self.source_class_usage = source_class_usage

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _static = self.static
        _source_class_usage = self.source_class_usage
        if _static is not None:
            children['static'] = yang.gdata.Leaf('union', _static)
        if _source_class_usage is not None:
            children['source-class-usage'] = yang.gdata.Leaf('empty', _source_class_usage)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_table_label(static=n.get_opt_value("static"), source_class_usage=n.get_opt_bool("source-class-usage"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_table_label(static=yang.gdata.from_xml_opt_value(n, "static"), source_class_usage=yang.gdata.from_xml_opt_bool(n, "source-class-usage"))
        return None


mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__export(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__as_override(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__ttl(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__no_nexthop_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(yang.adata.MNode):
    ttl: ?value
    no_nexthop_change: ?bool

    mut def __init__(self, ttl: ?value, no_nexthop_change: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.ttl = ttl
        self.no_nexthop_change = no_nexthop_change

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ttl = self.ttl
        _no_nexthop_change = self.no_nexthop_change
        if _ttl is not None:
            children['ttl'] = yang.gdata.Leaf('union', _ttl)
        if _no_nexthop_change is not None:
            children['no-nexthop-change'] = yang.gdata.Leaf('empty', _no_nexthop_change)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(ttl=n.get_opt_value("ttl"), no_nexthop_change=n.get_opt_bool("no-nexthop-change"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(ttl=yang.gdata.from_xml_opt_value(n, "ttl"), no_nexthop_change=yang.gdata.from_xml_opt_bool(n, "no-nexthop-change"))
        return None


class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(yang.adata.MNode):
    name: str
    description: ?str
    peer_as: ?str
    authentication_key: ?str
    as_override: ?bool
    authentication_algorithm: ?str
    multihop: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop

    mut def __init__(self, name: str, description: ?str, peer_as: ?str, authentication_key: ?str, as_override: ?bool, authentication_algorithm: ?str, multihop: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.description = description
        self.peer_as = peer_as
        self.authentication_key = authentication_key
        self.as_override = as_override
        self.authentication_algorithm = authentication_algorithm
        self.multihop = multihop

    mut def create_multihop(self):
        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop()
        self.multihop = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _peer_as = self.peer_as
        _authentication_key = self.authentication_key
        _as_override = self.as_override
        _authentication_algorithm = self.authentication_algorithm
        _multihop = self.multihop
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('string', _peer_as)
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        if _as_override is not None:
            children['as-override'] = yang.gdata.Leaf('empty', _as_override)
        if _authentication_algorithm is not None:
            children['authentication-algorithm'] = yang.gdata.Leaf('enumeration', _authentication_algorithm)
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(name=n.get_str("name"), description=n.get_opt_str("description"), peer_as=n.get_opt_str("peer-as"), authentication_key=n.get_opt_str("authentication-key"), as_override=n.get_opt_bool("as-override"), authentication_algorithm=n.get_opt_str("authentication-algorithm"), multihop=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop.from_gdata(n.get_opt_container("multihop")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), peer_as=yang.gdata.from_xml_opt_str(n, "peer-as"), authentication_key=yang.gdata.from_xml_opt_str(n, "authentication-key"), as_override=yang.gdata.from_xml_opt_bool(n, "as-override"), authentication_algorithm=yang.gdata.from_xml_opt_str(n, "authentication-algorithm"), multihop=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop.from_xml(yang.gdata.get_xml_opt_child(n, "multihop")))

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry.from_xml(node))
        return res


class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(yang.adata.MNode):
    name: str
    passive: ?bool
    import_: list[str]
    export: list[str]
    neighbor: junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor

    mut def __init__(self, name: str, passive: ?bool, import_: ?list[str]=None, export: ?list[str]=None, neighbor: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.passive = passive
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = []
        if export is not None:
            self.export = export
        else:
            self.export = []
        self.neighbor = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _passive = self.passive
        _neighbor = self.neighbor
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('empty', _passive)
        children['import'] = yang.gdata.LeafList(self.import_)
        children['export'] = yang.gdata.LeafList(self.export)
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry:
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(name=n.get_str("name"), passive=n.get_opt_bool("passive"), import_=n.get_opt_strs("import"), export=n.get_opt_strs("export"), neighbor=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor.from_gdata(n.get_opt_list("neighbor")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry:
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(name=yang.gdata.from_xml_str(n, "name"), passive=yang.gdata.from_xml_opt_bool(n, "passive"), import_=yang.gdata.from_xml_opt_strs(n, "import"), export=yang.gdata.from_xml_opt_strs(n, "export"), neighbor=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor.from_xml(yang.gdata.get_xml_children(n, "neighbor")))

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry.from_xml(node))
        return res


class junos_conf_root__configuration__routing_instances__instance__protocols__bgp(yang.adata.MNode):
    group: junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group

    mut def __init__(self, group: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.group = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group(elements=group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__bgp(group=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group.from_gdata(n.get_opt_list("group")))
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__bgp(group=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp()


mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__evpn__control_word(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__routing_instances__instance__protocols__evpn__no_mac_learning(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__routing_instances__instance__protocols__evpn(yang.adata.MNode):
    control_word: ?bool
    no_mac_learning: ?bool

    mut def __init__(self, control_word: ?bool, no_mac_learning: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.control_word = control_word
        self.no_mac_learning = no_mac_learning

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _control_word = self.control_word
        _no_mac_learning = self.no_mac_learning
        if _control_word is not None:
            children['control-word'] = yang.gdata.Leaf('empty', _control_word)
        if _no_mac_learning is not None:
            children['no-mac-learning'] = yang.gdata.Leaf('empty', _no_mac_learning)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__routing_instances__instance__protocols__evpn:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__evpn(control_word=n.get_opt_bool("control-word"), no_mac_learning=n.get_opt_bool("no-mac-learning"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__routing_instances__instance__protocols__evpn:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__evpn(control_word=yang.gdata.from_xml_opt_bool(n, "control-word"), no_mac_learning=yang.gdata.from_xml_opt_bool(n, "no-mac-learning"))
        return None


class junos_conf_root__configuration__routing_instances__instance__protocols(yang.adata.MNode):
    bgp: junos_conf_root__configuration__routing_instances__instance__protocols__bgp
    evpn: ?junos_conf_root__configuration__routing_instances__instance__protocols__evpn

    mut def __init__(self, bgp: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp=None, evpn: ?junos_conf_root__configuration__routing_instances__instance__protocols__evpn=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = junos_conf_root__configuration__routing_instances__instance__protocols__bgp()
        self.evpn = evpn

    mut def create_evpn(self):
        res = junos_conf_root__configuration__routing_instances__instance__protocols__evpn()
        self.evpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        _evpn = self.evpn
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__protocols(bgp=junos_conf_root__configuration__routing_instances__instance__protocols__bgp.from_gdata(n.get_opt_container("bgp")), evpn=junos_conf_root__configuration__routing_instances__instance__protocols__evpn.from_gdata(n.get_opt_container("evpn")))
        return junos_conf_root__configuration__routing_instances__instance__protocols()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols:
        if n != None:
            return junos_conf_root__configuration__routing_instances__instance__protocols(bgp=junos_conf_root__configuration__routing_instances__instance__protocols__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), evpn=junos_conf_root__configuration__routing_instances__instance__protocols__evpn.from_xml(yang.gdata.get_xml_opt_child(n, "evpn")))
        return junos_conf_root__configuration__routing_instances__instance__protocols()


class junos_conf_root__configuration__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    instance_type: ?str
    interface: junos_conf_root__configuration__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__routing_instances__instance__route_distinguisher
    export_default_action: ?str
    import_default_action: ?str
    vrf_target: junos_conf_root__configuration__routing_instances__instance__vrf_target
    no_vrf_advertise: ?bool
    vrf_table_label: ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label
    protocols: junos_conf_root__configuration__routing_instances__instance__protocols

    mut def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, instance_type: ?str, interface: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__routing_instances__instance__route_distinguisher=None, export_default_action: ?str, import_default_action: ?str, vrf_target: ?junos_conf_root__configuration__routing_instances__instance__vrf_target=None, no_vrf_advertise: ?bool, vrf_table_label: ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label=None, protocols: ?junos_conf_root__configuration__routing_instances__instance__protocols=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.instance_type = instance_type
        self.interface = junos_conf_root__configuration__routing_instances__instance__interface(elements=interface)
        if route_distinguisher is not None:
            self.route_distinguisher = route_distinguisher
        else:
            self.route_distinguisher = junos_conf_root__configuration__routing_instances__instance__route_distinguisher()
        self.export_default_action = export_default_action
        self.import_default_action = import_default_action
        if vrf_target is not None:
            self.vrf_target = vrf_target
        else:
            self.vrf_target = junos_conf_root__configuration__routing_instances__instance__vrf_target()
        self.no_vrf_advertise = no_vrf_advertise
        self.vrf_table_label = vrf_table_label
        if protocols is not None:
            self.protocols = protocols
        else:
            self.protocols = junos_conf_root__configuration__routing_instances__instance__protocols()

    mut def create_vrf_table_label(self):
        res = junos_conf_root__configuration__routing_instances__instance__vrf_table_label()
        self.vrf_table_label = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _instance_type = self.instance_type
        _interface = self.interface
        _route_distinguisher = self.route_distinguisher
        _export_default_action = self.export_default_action
        _import_default_action = self.import_default_action
        _vrf_target = self.vrf_target
        _no_vrf_advertise = self.no_vrf_advertise
        _vrf_table_label = self.vrf_table_label
        _protocols = self.protocols
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        children['apply-groups'] = yang.gdata.LeafList(self.apply_groups)
        children['apply-groups-except'] = yang.gdata.LeafList(self.apply_groups_except)
        if _instance_type is not None:
            children['instance-type'] = yang.gdata.Leaf('enumeration', _instance_type)
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        if _export_default_action is not None:
            children['export-default-action'] = yang.gdata.Leaf('enumeration', _export_default_action)
        if _import_default_action is not None:
            children['import-default-action'] = yang.gdata.Leaf('enumeration', _import_default_action)
        if _vrf_target is not None:
            children['vrf-target'] = _vrf_target.to_gdata()
        if _no_vrf_advertise is not None:
            children['no-vrf-advertise'] = yang.gdata.Leaf('empty', _no_vrf_advertise)
        if _vrf_table_label is not None:
            children['vrf-table-label'] = _vrf_table_label.to_gdata()
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance_entry:
        return junos_conf_root__configuration__routing_instances__instance_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), instance_type=n.get_opt_str("instance-type"), interface=junos_conf_root__configuration__routing_instances__instance__interface.from_gdata(n.get_opt_list("interface")), route_distinguisher=junos_conf_root__configuration__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_container("route-distinguisher")), export_default_action=n.get_opt_str("export-default-action"), import_default_action=n.get_opt_str("import-default-action"), vrf_target=junos_conf_root__configuration__routing_instances__instance__vrf_target.from_gdata(n.get_opt_container("vrf-target")), no_vrf_advertise=n.get_opt_bool("no-vrf-advertise"), vrf_table_label=junos_conf_root__configuration__routing_instances__instance__vrf_table_label.from_gdata(n.get_opt_container("vrf-table-label")), protocols=junos_conf_root__configuration__routing_instances__instance__protocols.from_gdata(n.get_opt_container("protocols")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__routing_instances__instance_entry:
        return junos_conf_root__configuration__routing_instances__instance_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), instance_type=yang.gdata.from_xml_opt_str(n, "instance-type"), interface=junos_conf_root__configuration__routing_instances__instance__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), route_distinguisher=junos_conf_root__configuration__routing_instances__instance__route_distinguisher.from_xml(yang.gdata.get_xml_opt_child(n, "route-distinguisher")), export_default_action=yang.gdata.from_xml_opt_str(n, "export-default-action"), import_default_action=yang.gdata.from_xml_opt_str(n, "import-default-action"), vrf_target=junos_conf_root__configuration__routing_instances__instance__vrf_target.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-target")), no_vrf_advertise=yang.gdata.from_xml_opt_bool(n, "no-vrf-advertise"), vrf_table_label=junos_conf_root__configuration__routing_instances__instance__vrf_table_label.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-table-label")), protocols=junos_conf_root__configuration__routing_instances__instance__protocols.from_xml(yang.gdata.get_xml_opt_child(n, "protocols")))

class junos_conf_root__configuration__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__routing_instances__instance_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__routing_instances__instance_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__routing_instances__instance_entry.from_xml(node))
        return res


class junos_conf_root__configuration__routing_instances(yang.adata.MNode):
    instance: junos_conf_root__configuration__routing_instances__instance

    mut def __init__(self, instance: list[junos_conf_root__configuration__routing_instances__instance_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.instance = junos_conf_root__configuration__routing_instances__instance(elements=instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances:
        if n != None:
            return junos_conf_root__configuration__routing_instances(instance=junos_conf_root__configuration__routing_instances__instance.from_gdata(n.get_opt_list("instance")))
        return junos_conf_root__configuration__routing_instances()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_instances:
        if n != None:
            return junos_conf_root__configuration__routing_instances(instance=junos_conf_root__configuration__routing_instances__instance.from_xml(yang.gdata.get_xml_children(n, "instance")))
        return junos_conf_root__configuration__routing_instances()


mut def from_json_junos_conf_root__configuration__groups__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__when__time__start_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__when__time__to__end_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__when__time__to(yang.adata.MNode):
    end_time: ?str

    mut def __init__(self, end_time: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.end_time = end_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _end_time = self.end_time
        if _end_time is not None:
            children['end-time'] = yang.gdata.Leaf('string', _end_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when__time__to:
        if n != None:
            return junos_conf_root__configuration__groups__when__time__to(end_time=n.get_opt_str("end-time"))
        return junos_conf_root__configuration__groups__when__time__to()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when__time__to:
        if n != None:
            return junos_conf_root__configuration__groups__when__time__to(end_time=yang.gdata.from_xml_opt_str(n, "end-time"))
        return junos_conf_root__configuration__groups__when__time__to()


class junos_conf_root__configuration__groups__when__time(yang.adata.MNode):
    start_time: ?str
    to: junos_conf_root__configuration__groups__when__time__to

    mut def __init__(self, start_time: ?str, to: ?junos_conf_root__configuration__groups__when__time__to=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.start_time = start_time
        if to is not None:
            self.to = to
        else:
            self.to = junos_conf_root__configuration__groups__when__time__to()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _start_time = self.start_time
        _to = self.to
        if _start_time is not None:
            children['start-time'] = yang.gdata.Leaf('string', _start_time)
        if _to is not None:
            children['to'] = _to.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when__time:
        if n != None:
            return junos_conf_root__configuration__groups__when__time(start_time=n.get_opt_str("start-time"), to=junos_conf_root__configuration__groups__when__time__to.from_gdata(n.get_opt_container("to")))
        return junos_conf_root__configuration__groups__when__time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when__time:
        if n != None:
            return junos_conf_root__configuration__groups__when__time(start_time=yang.gdata.from_xml_opt_str(n, "start-time"), to=junos_conf_root__configuration__groups__when__time__to.from_xml(yang.gdata.get_xml_opt_child(n, "to")))
        return junos_conf_root__configuration__groups__when__time()


mut def from_json_junos_conf_root__configuration__groups__when__chassis(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__when__model(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__when__routing_engine(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__when__member(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__when__node(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class junos_conf_root__configuration__groups__when(yang.adata.MNode):
    time: junos_conf_root__configuration__groups__when__time
    chassis: ?str
    model: ?str
    routing_engine: ?str
    member: ?str
    node: ?str

    mut def __init__(self, time: ?junos_conf_root__configuration__groups__when__time=None, chassis: ?str, model: ?str, routing_engine: ?str, member: ?str, node: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if time is not None:
            self.time = time
        else:
            self.time = junos_conf_root__configuration__groups__when__time()
        self.chassis = chassis
        self.model = model
        self.routing_engine = routing_engine
        self.member = member
        self.node = node

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _time = self.time
        _chassis = self.chassis
        _model = self.model
        _routing_engine = self.routing_engine
        _member = self.member
        _node = self.node
        if _time is not None:
            children['time'] = _time.to_gdata()
        if _chassis is not None:
            children['chassis'] = yang.gdata.Leaf('enumeration', _chassis)
        if _model is not None:
            children['model'] = yang.gdata.Leaf('string', _model)
        if _routing_engine is not None:
            children['routing-engine'] = yang.gdata.Leaf('enumeration', _routing_engine)
        if _member is not None:
            children['member'] = yang.gdata.Leaf('string', _member)
        if _node is not None:
            children['node'] = yang.gdata.Leaf('enumeration', _node)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when:
        if n != None:
            return junos_conf_root__configuration__groups__when(time=junos_conf_root__configuration__groups__when__time.from_gdata(n.get_opt_container("time")), chassis=n.get_opt_str("chassis"), model=n.get_opt_str("model"), routing_engine=n.get_opt_str("routing-engine"), member=n.get_opt_str("member"), node=n.get_opt_str("node"))
        return junos_conf_root__configuration__groups__when()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__when:
        if n != None:
            return junos_conf_root__configuration__groups__when(time=junos_conf_root__configuration__groups__when__time.from_xml(yang.gdata.get_xml_opt_child(n, "time")), chassis=yang.gdata.from_xml_opt_str(n, "chassis"), model=yang.gdata.from_xml_opt_str(n, "model"), routing_engine=yang.gdata.from_xml_opt_str(n, "routing-engine"), member=yang.gdata.from_xml_opt_str(n, "member"), node=yang.gdata.from_xml_opt_str(n, "node"))
        return junos_conf_root__configuration__groups__when()


mut def from_json_junos_conf_root__configuration__groups__rcsid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__system__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__system(yang.adata.MNode):
    host_name: ?str

    mut def __init__(self, host_name: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.host_name = host_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__system:
        if n != None:
            return junos_conf_root__configuration__groups__system(host_name=n.get_opt_str("host-name"))
        return junos_conf_root__configuration__groups__system()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__system:
        if n != None:
            return junos_conf_root__configuration__groups__system(host_name=yang.gdata.from_xml_opt_str(n, "host-name"))
        return junos_conf_root__configuration__groups__system()


mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__native_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__alias(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name=yang.gdata.from_xml_str(n, "name"))

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(yang.adata.MNode):
    address: junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address

    mut def __init__(self, address: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.address = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address.from_gdata(n.get_opt_list("address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return None


mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry(name=yang.gdata.from_xml_str(n, "name"))

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6(yang.adata.MNode):
    address: junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address

    mut def __init__(self, address: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.address = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address.from_gdata(n.get_opt_list("address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return None


mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry(name=yang.gdata.from_xml_str(n, "name"))

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso(yang.adata.MNode):
    address: junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address

    mut def __init__(self, address: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.address = junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address.from_gdata(n.get_opt_list("address")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address.from_xml(yang.gdata.get_xml_children(n, "address")))
        return None


class junos_conf_root__configuration__groups__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet
    inet6: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6
    iso: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso

    mut def __init__(self, inet: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet=None, inet6: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6=None, iso: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.inet = inet
        self.inet6 = inet6
        self.iso = iso

    mut def create_inet(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    mut def create_inet6(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6()
        self.inet6 = res
        return res

    mut def create_iso(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso()
        self.iso = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet = self.inet
        _inet6 = self.inet6
        _iso = self.iso
        if _inet is not None:
            children['inet'] = _inet.to_gdata()
        if _inet6 is not None:
            children['inet6'] = _inet6.to_gdata()
        if _iso is not None:
            children['iso'] = _iso.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family(inet=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_container("inet")), inet6=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6.from_gdata(n.get_opt_container("inet6")), iso=junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso.from_gdata(n.get_opt_container("iso")))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family(inet=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet.from_xml(yang.gdata.get_xml_opt_child(n, "inet")), inet6=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6.from_xml(yang.gdata.get_xml_opt_child(n, "inet6")), iso=junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso.from_xml(yang.gdata.get_xml_opt_child(n, "iso")))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family()


mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__unit__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    alias: ?str
    description: ?str
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__groups__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    mut def __init__(self, name: str, alias: ?str, description: ?str, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.alias = alias
        self.description = description
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        if family is not None:
            self.family = family
        else:
            self.family = junos_conf_root__configuration__groups__interfaces__interface__unit__family()
        self.mtu = mtu
        self.mac = mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _alias = self.alias
        _description = self.description
        _vlan_id = self.vlan_id
        _encapsulation = self.encapsulation
        _family = self.family
        _mtu = self.mtu
        _mac = self.mac
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _alias is not None:
            children['alias'] = yang.gdata.Leaf('string', _alias)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('string', _vlan_id)
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        if _family is not None:
            children['family'] = _family.to_gdata()
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name=n.get_str("name"), alias=n.get_opt_str("alias"), description=n.get_opt_str("description"), vlan_id=n.get_opt_str("vlan-id"), encapsulation=n.get_opt_str("encapsulation"), family=junos_conf_root__configuration__groups__interfaces__interface__unit__family.from_gdata(n.get_opt_container("family")), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name=yang.gdata.from_xml_str(n, "name"), alias=yang.gdata.from_xml_opt_str(n, "alias"), description=yang.gdata.from_xml_opt_str(n, "description"), vlan_id=yang.gdata.from_xml_opt_str(n, "vlan-id"), encapsulation=yang.gdata.from_xml_opt_str(n, "encapsulation"), family=junos_conf_root__configuration__groups__interfaces__interface__unit__family.from_xml(yang.gdata.get_xml_opt_child(n, "family")), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"))

class junos_conf_root__configuration__groups__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'unit'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__interfaces__interface__unit_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface__unit_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__stacked_vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__flexible_vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__vlan_vci_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__per_unit_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__no_per_unit_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__interfaces__interface__shared_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler()
        return None


class junos_conf_root__configuration__groups__interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__groups__interfaces__interface__unit
    encapsulation: ?str
    vlan_tagging: ?bool
    stacked_vlan_tagging: ?bool
    flexible_vlan_tagging: ?bool
    vlan_vci_tagging: ?bool
    per_unit_scheduler: ?bool
    no_per_unit_scheduler: ?bool
    shared_scheduler: ?bool
    hierarchical_scheduler: ?junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler

    mut def __init__(self, name: str, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]=[], encapsulation: ?str, vlan_tagging: ?bool, stacked_vlan_tagging: ?bool, flexible_vlan_tagging: ?bool, vlan_vci_tagging: ?bool, per_unit_scheduler: ?bool, no_per_unit_scheduler: ?bool, shared_scheduler: ?bool, hierarchical_scheduler: ?junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__groups__interfaces__interface__unit(elements=unit)
        self.encapsulation = encapsulation
        self.vlan_tagging = vlan_tagging
        self.stacked_vlan_tagging = stacked_vlan_tagging
        self.flexible_vlan_tagging = flexible_vlan_tagging
        self.vlan_vci_tagging = vlan_vci_tagging
        self.per_unit_scheduler = per_unit_scheduler
        self.no_per_unit_scheduler = no_per_unit_scheduler
        self.shared_scheduler = shared_scheduler
        self.hierarchical_scheduler = hierarchical_scheduler

    mut def create_hierarchical_scheduler(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler()
        self.hierarchical_scheduler = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _mtu = self.mtu
        _mac = self.mac
        _native_vlan_id = self.native_vlan_id
        _unit = self.unit
        _encapsulation = self.encapsulation
        _vlan_tagging = self.vlan_tagging
        _stacked_vlan_tagging = self.stacked_vlan_tagging
        _flexible_vlan_tagging = self.flexible_vlan_tagging
        _vlan_vci_tagging = self.vlan_vci_tagging
        _per_unit_scheduler = self.per_unit_scheduler
        _no_per_unit_scheduler = self.no_per_unit_scheduler
        _shared_scheduler = self.shared_scheduler
        _hierarchical_scheduler = self.hierarchical_scheduler
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        if _native_vlan_id is not None:
            children['native-vlan-id'] = yang.gdata.Leaf('union', _native_vlan_id)
        if _unit is not None:
            children['unit'] = _unit.to_gdata()
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        if _vlan_tagging is not None:
            children['vlan-tagging'] = yang.gdata.Leaf('empty', _vlan_tagging)
        if _stacked_vlan_tagging is not None:
            children['stacked-vlan-tagging'] = yang.gdata.Leaf('empty', _stacked_vlan_tagging)
        if _flexible_vlan_tagging is not None:
            children['flexible-vlan-tagging'] = yang.gdata.Leaf('empty', _flexible_vlan_tagging)
        if _vlan_vci_tagging is not None:
            children['vlan-vci-tagging'] = yang.gdata.Leaf('empty', _vlan_vci_tagging)
        if _per_unit_scheduler is not None:
            children['per-unit-scheduler'] = yang.gdata.Leaf('empty', _per_unit_scheduler)
        if _no_per_unit_scheduler is not None:
            children['no-per-unit-scheduler'] = yang.gdata.Leaf('empty', _no_per_unit_scheduler)
        if _shared_scheduler is not None:
            children['shared-scheduler'] = yang.gdata.Leaf('empty', _shared_scheduler)
        if _hierarchical_scheduler is not None:
            children['hierarchical-scheduler'] = _hierarchical_scheduler.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface_entry:
        return junos_conf_root__configuration__groups__interfaces__interface_entry(name=n.get_str("name"), description=n.get_opt_str("description"), mtu=n.get_opt_value("mtu"), mac=n.get_opt_str("mac"), native_vlan_id=n.get_opt_value("native-vlan-id"), unit=junos_conf_root__configuration__groups__interfaces__interface__unit.from_gdata(n.get_opt_list("unit")), encapsulation=n.get_opt_str("encapsulation"), vlan_tagging=n.get_opt_bool("vlan-tagging"), stacked_vlan_tagging=n.get_opt_bool("stacked-vlan-tagging"), flexible_vlan_tagging=n.get_opt_bool("flexible-vlan-tagging"), vlan_vci_tagging=n.get_opt_bool("vlan-vci-tagging"), per_unit_scheduler=n.get_opt_bool("per-unit-scheduler"), no_per_unit_scheduler=n.get_opt_bool("no-per-unit-scheduler"), shared_scheduler=n.get_opt_bool("shared-scheduler"), hierarchical_scheduler=junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler.from_gdata(n.get_opt_container("hierarchical-scheduler")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__interfaces__interface_entry:
        return junos_conf_root__configuration__groups__interfaces__interface_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), mtu=yang.gdata.from_xml_opt_value(n, "mtu"), mac=yang.gdata.from_xml_opt_str(n, "mac"), native_vlan_id=yang.gdata.from_xml_opt_value(n, "native-vlan-id"), unit=junos_conf_root__configuration__groups__interfaces__interface__unit.from_xml(yang.gdata.get_xml_children(n, "unit")), encapsulation=yang.gdata.from_xml_opt_str(n, "encapsulation"), vlan_tagging=yang.gdata.from_xml_opt_bool(n, "vlan-tagging"), stacked_vlan_tagging=yang.gdata.from_xml_opt_bool(n, "stacked-vlan-tagging"), flexible_vlan_tagging=yang.gdata.from_xml_opt_bool(n, "flexible-vlan-tagging"), vlan_vci_tagging=yang.gdata.from_xml_opt_bool(n, "vlan-vci-tagging"), per_unit_scheduler=yang.gdata.from_xml_opt_bool(n, "per-unit-scheduler"), no_per_unit_scheduler=yang.gdata.from_xml_opt_bool(n, "no-per-unit-scheduler"), shared_scheduler=yang.gdata.from_xml_opt_bool(n, "shared-scheduler"), hierarchical_scheduler=junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler.from_xml(yang.gdata.get_xml_opt_child(n, "hierarchical-scheduler")))

class junos_conf_root__configuration__groups__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__interfaces__interface_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__interfaces(yang.adata.MNode):
    interface: junos_conf_root__configuration__groups__interfaces__interface

    mut def __init__(self, interface: list[junos_conf_root__configuration__groups__interfaces__interface_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.interface = junos_conf_root__configuration__groups__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces(interface=junos_conf_root__configuration__groups__interfaces__interface.from_gdata(n.get_opt_list("interface")))
        return junos_conf_root__configuration__groups__interfaces()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__interfaces:
        if n != None:
            return junos_conf_root__configuration__groups__interfaces(interface=junos_conf_root__configuration__groups__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return junos_conf_root__configuration__groups__interfaces()


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__apply_groups(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__apply_groups_except(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__instance_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__any(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__multicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__interface__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    mut def __init__(self, name: str, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _any = self.any
        _unicast = self.unicast
        _multicast = self.multicast
        _primary = self.primary
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _any is not None:
            children['any'] = yang.gdata.Leaf('empty', _any)
        if _unicast is not None:
            children['unicast'] = yang.gdata.Leaf('empty', _unicast)
        if _multicast is not None:
            children['multicast'] = yang.gdata.Leaf('empty', _multicast)
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name=n.get_str("name"), any=n.get_opt_bool("any"), unicast=n.get_opt_bool("unicast"), multicast=n.get_opt_bool("multicast"), primary=n.get_opt_bool("primary"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name=yang.gdata.from_xml_str(n, "name"), any=yang.gdata.from_xml_opt_bool(n, "any"), unicast=yang.gdata.from_xml_opt_bool(n, "unicast"), multicast=yang.gdata.from_xml_opt_bool(n, "multicast"), primary=yang.gdata.from_xml_opt_bool(n, "primary"))

class junos_conf_root__configuration__groups__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__routing_instances__instance__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance__interface_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher__rd_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    mut def __init__(self, rd_type: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rd_type = rd_type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd_type = self.rd_type
        if _rd_type is not None:
            children['rd-type'] = yang.gdata.Leaf('string', _rd_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str("rd-type"))
        return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(rd_type=yang.gdata.from_xml_opt_str(n, "rd-type"))
        return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__export_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__import_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__export(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__auto(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(yang.adata.MNode):
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    mut def __init__(self, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        _import_ = self.import_
        _export = self.export
        _auto = self.auto
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        if _export is not None:
            children['export'] = yang.gdata.Leaf('string', _export)
        if _auto is not None:
            children['auto'] = yang.gdata.Leaf('empty', _auto)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(community=n.get_opt_str("community"), import_=n.get_opt_str("import"), export=n.get_opt_str("export"), auto=n.get_opt_bool("auto"))
        return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__vrf_target:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(community=yang.gdata.from_xml_opt_str(n, "community"), import_=yang.gdata.from_xml_opt_str(n, "import"), export=yang.gdata.from_xml_opt_str(n, "export"), auto=yang.gdata.from_xml_opt_bool(n, "auto"))
        return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__no_vrf_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label__static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label__source_class_usage(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label(yang.adata.MNode):
    static: ?value
    source_class_usage: ?bool

    mut def __init__(self, static: ?value, source_class_usage: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.static = static
        self.source_class_usage = source_class_usage

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _static = self.static
        _source_class_usage = self.source_class_usage
        if _static is not None:
            children['static'] = yang.gdata.Leaf('union', _static)
        if _source_class_usage is not None:
            children['source-class-usage'] = yang.gdata.Leaf('empty', _source_class_usage)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label(static=n.get_opt_value("static"), source_class_usage=n.get_opt_bool("source-class-usage"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label(static=yang.gdata.from_xml_opt_value(n, "static"), source_class_usage=yang.gdata.from_xml_opt_bool(n, "source-class-usage"))
        return None


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__export(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__as_override(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__authentication_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop__ttl(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop__no_nexthop_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop(yang.adata.MNode):
    ttl: ?value
    no_nexthop_change: ?bool

    mut def __init__(self, ttl: ?value, no_nexthop_change: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.ttl = ttl
        self.no_nexthop_change = no_nexthop_change

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ttl = self.ttl
        _no_nexthop_change = self.no_nexthop_change
        if _ttl is not None:
            children['ttl'] = yang.gdata.Leaf('union', _ttl)
        if _no_nexthop_change is not None:
            children['no-nexthop-change'] = yang.gdata.Leaf('empty', _no_nexthop_change)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop(ttl=n.get_opt_value("ttl"), no_nexthop_change=n.get_opt_bool("no-nexthop-change"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop(ttl=yang.gdata.from_xml_opt_value(n, "ttl"), no_nexthop_change=yang.gdata.from_xml_opt_bool(n, "no-nexthop-change"))
        return None


class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry(yang.adata.MNode):
    name: str
    description: ?str
    peer_as: ?str
    authentication_key: ?str
    as_override: ?bool
    authentication_algorithm: ?str
    multihop: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop

    mut def __init__(self, name: str, description: ?str, peer_as: ?str, authentication_key: ?str, as_override: ?bool, authentication_algorithm: ?str, multihop: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.description = description
        self.peer_as = peer_as
        self.authentication_key = authentication_key
        self.as_override = as_override
        self.authentication_algorithm = authentication_algorithm
        self.multihop = multihop

    mut def create_multihop(self):
        res = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop()
        self.multihop = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _peer_as = self.peer_as
        _authentication_key = self.authentication_key
        _as_override = self.as_override
        _authentication_algorithm = self.authentication_algorithm
        _multihop = self.multihop
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('string', _peer_as)
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        if _as_override is not None:
            children['as-override'] = yang.gdata.Leaf('empty', _as_override)
        if _authentication_algorithm is not None:
            children['authentication-algorithm'] = yang.gdata.Leaf('enumeration', _authentication_algorithm)
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry(name=n.get_str("name"), description=n.get_opt_str("description"), peer_as=n.get_opt_str("peer-as"), authentication_key=n.get_opt_str("authentication-key"), as_override=n.get_opt_bool("as-override"), authentication_algorithm=n.get_opt_str("authentication-algorithm"), multihop=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop.from_gdata(n.get_opt_container("multihop")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), peer_as=yang.gdata.from_xml_opt_str(n, "peer-as"), authentication_key=yang.gdata.from_xml_opt_str(n, "authentication-key"), as_override=yang.gdata.from_xml_opt_bool(n, "as-override"), authentication_algorithm=yang.gdata.from_xml_opt_str(n, "authentication-algorithm"), multihop=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop.from_xml(yang.gdata.get_xml_opt_child(n, "multihop")))

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry(yang.adata.MNode):
    name: str
    passive: ?bool
    import_: list[str]
    export: list[str]
    neighbor: junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor

    mut def __init__(self, name: str, passive: ?bool, import_: ?list[str]=None, export: ?list[str]=None, neighbor: list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        self.passive = passive
        if import_ is not None:
            self.import_ = import_
        else:
            self.import_ = []
        if export is not None:
            self.export = export
        else:
            self.export = []
        self.neighbor = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _passive = self.passive
        _neighbor = self.neighbor
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('empty', _passive)
        children['import'] = yang.gdata.LeafList(self.import_)
        children['export'] = yang.gdata.LeafList(self.export)
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry(name=n.get_str("name"), passive=n.get_opt_bool("passive"), import_=n.get_opt_strs("import"), export=n.get_opt_strs("export"), neighbor=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor.from_gdata(n.get_opt_list("neighbor")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry(name=yang.gdata.from_xml_str(n, "name"), passive=yang.gdata.from_xml_opt_bool(n, "passive"), import_=yang.gdata.from_xml_opt_strs(n, "import"), export=yang.gdata.from_xml_opt_strs(n, "export"), neighbor=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor.from_xml(yang.gdata.get_xml_children(n, "neighbor")))

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp(yang.adata.MNode):
    group: junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group

    mut def __init__(self, group: list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.group = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group(elements=group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp(group=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group.from_gdata(n.get_opt_list("group")))
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp(group=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group.from_xml(yang.gdata.get_xml_children(n, "group")))
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp()


mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn__control_word(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn__no_mac_learning(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn(yang.adata.MNode):
    control_word: ?bool
    no_mac_learning: ?bool

    mut def __init__(self, control_word: ?bool, no_mac_learning: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.control_word = control_word
        self.no_mac_learning = no_mac_learning

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _control_word = self.control_word
        _no_mac_learning = self.no_mac_learning
        if _control_word is not None:
            children['control-word'] = yang.gdata.Leaf('empty', _control_word)
        if _no_mac_learning is not None:
            children['no-mac-learning'] = yang.gdata.Leaf('empty', _no_mac_learning)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn(control_word=n.get_opt_bool("control-word"), no_mac_learning=n.get_opt_bool("no-mac-learning"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn(control_word=yang.gdata.from_xml_opt_bool(n, "control-word"), no_mac_learning=yang.gdata.from_xml_opt_bool(n, "no-mac-learning"))
        return None


class junos_conf_root__configuration__groups__routing_instances__instance__protocols(yang.adata.MNode):
    bgp: junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp
    evpn: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn

    mut def __init__(self, bgp: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp=None, evpn: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp()
        self.evpn = evpn

    mut def create_evpn(self):
        res = junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn()
        self.evpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        _evpn = self.evpn
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols(bgp=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp.from_gdata(n.get_opt_container("bgp")), evpn=junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn.from_gdata(n.get_opt_container("evpn")))
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols(bgp=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), evpn=junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn.from_xml(yang.gdata.get_xml_opt_child(n, "evpn")))
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols()


class junos_conf_root__configuration__groups__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    instance_type: ?str
    interface: junos_conf_root__configuration__groups__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher
    export_default_action: ?str
    import_default_action: ?str
    vrf_target: junos_conf_root__configuration__groups__routing_instances__instance__vrf_target
    no_vrf_advertise: ?bool
    vrf_table_label: ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label
    protocols: junos_conf_root__configuration__groups__routing_instances__instance__protocols

    mut def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, instance_type: ?str, interface: list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher=None, export_default_action: ?str, import_default_action: ?str, vrf_target: ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_target=None, no_vrf_advertise: ?bool, vrf_table_label: ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label=None, protocols: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if apply_groups is not None:
            self.apply_groups = apply_groups
        else:
            self.apply_groups = []
        if apply_groups_except is not None:
            self.apply_groups_except = apply_groups_except
        else:
            self.apply_groups_except = []
        self.instance_type = instance_type
        self.interface = junos_conf_root__configuration__groups__routing_instances__instance__interface(elements=interface)
        if route_distinguisher is not None:
            self.route_distinguisher = route_distinguisher
        else:
            self.route_distinguisher = junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()
        self.export_default_action = export_default_action
        self.import_default_action = import_default_action
        if vrf_target is not None:
            self.vrf_target = vrf_target
        else:
            self.vrf_target = junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()
        self.no_vrf_advertise = no_vrf_advertise
        self.vrf_table_label = vrf_table_label
        if protocols is not None:
            self.protocols = protocols
        else:
            self.protocols = junos_conf_root__configuration__groups__routing_instances__instance__protocols()

    mut def create_vrf_table_label(self):
        res = junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label()
        self.vrf_table_label = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _instance_type = self.instance_type
        _interface = self.interface
        _route_distinguisher = self.route_distinguisher
        _export_default_action = self.export_default_action
        _import_default_action = self.import_default_action
        _vrf_target = self.vrf_target
        _no_vrf_advertise = self.no_vrf_advertise
        _vrf_table_label = self.vrf_table_label
        _protocols = self.protocols
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        children['apply-groups'] = yang.gdata.LeafList(self.apply_groups)
        children['apply-groups-except'] = yang.gdata.LeafList(self.apply_groups_except)
        if _instance_type is not None:
            children['instance-type'] = yang.gdata.Leaf('enumeration', _instance_type)
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        if _export_default_action is not None:
            children['export-default-action'] = yang.gdata.Leaf('enumeration', _export_default_action)
        if _import_default_action is not None:
            children['import-default-action'] = yang.gdata.Leaf('enumeration', _import_default_action)
        if _vrf_target is not None:
            children['vrf-target'] = _vrf_target.to_gdata()
        if _no_vrf_advertise is not None:
            children['no-vrf-advertise'] = yang.gdata.Leaf('empty', _no_vrf_advertise)
        if _vrf_table_label is not None:
            children['vrf-table-label'] = _vrf_table_label.to_gdata()
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance_entry(name=n.get_str("name"), apply_groups=n.get_opt_strs("apply-groups"), apply_groups_except=n.get_opt_strs("apply-groups-except"), instance_type=n.get_opt_str("instance-type"), interface=junos_conf_root__configuration__groups__routing_instances__instance__interface.from_gdata(n.get_opt_list("interface")), route_distinguisher=junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_container("route-distinguisher")), export_default_action=n.get_opt_str("export-default-action"), import_default_action=n.get_opt_str("import-default-action"), vrf_target=junos_conf_root__configuration__groups__routing_instances__instance__vrf_target.from_gdata(n.get_opt_container("vrf-target")), no_vrf_advertise=n.get_opt_bool("no-vrf-advertise"), vrf_table_label=junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label.from_gdata(n.get_opt_container("vrf-table-label")), protocols=junos_conf_root__configuration__groups__routing_instances__instance__protocols.from_gdata(n.get_opt_container("protocols")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups__routing_instances__instance_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance_entry(name=yang.gdata.from_xml_str(n, "name"), apply_groups=yang.gdata.from_xml_opt_strs(n, "apply-groups"), apply_groups_except=yang.gdata.from_xml_opt_strs(n, "apply-groups-except"), instance_type=yang.gdata.from_xml_opt_str(n, "instance-type"), interface=junos_conf_root__configuration__groups__routing_instances__instance__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), route_distinguisher=junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher.from_xml(yang.gdata.get_xml_opt_child(n, "route-distinguisher")), export_default_action=yang.gdata.from_xml_opt_str(n, "export-default-action"), import_default_action=yang.gdata.from_xml_opt_str(n, "import-default-action"), vrf_target=junos_conf_root__configuration__groups__routing_instances__instance__vrf_target.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-target")), no_vrf_advertise=yang.gdata.from_xml_opt_bool(n, "no-vrf-advertise"), vrf_table_label=junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label.from_xml(yang.gdata.get_xml_opt_child(n, "vrf-table-label")), protocols=junos_conf_root__configuration__groups__routing_instances__instance__protocols.from_xml(yang.gdata.get_xml_opt_child(n, "protocols")))

class junos_conf_root__configuration__groups__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups__routing_instances__instance_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups__routing_instances__instance_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups__routing_instances__instance_entry.from_xml(node))
        return res


class junos_conf_root__configuration__groups__routing_instances(yang.adata.MNode):
    instance: junos_conf_root__configuration__groups__routing_instances__instance

    mut def __init__(self, instance: list[junos_conf_root__configuration__groups__routing_instances__instance_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.instance = junos_conf_root__configuration__groups__routing_instances__instance(elements=instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances(instance=junos_conf_root__configuration__groups__routing_instances__instance.from_gdata(n.get_opt_list("instance")))
        return junos_conf_root__configuration__groups__routing_instances()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__groups__routing_instances:
        if n != None:
            return junos_conf_root__configuration__groups__routing_instances(instance=junos_conf_root__configuration__groups__routing_instances__instance.from_xml(yang.gdata.get_xml_children(n, "instance")))
        return junos_conf_root__configuration__groups__routing_instances()


class junos_conf_root__configuration__groups_entry(yang.adata.MNode):
    name: str
    when: junos_conf_root__configuration__groups__when
    rcsid: ?str
    version: ?str
    system: junos_conf_root__configuration__groups__system
    interfaces: junos_conf_root__configuration__groups__interfaces
    routing_instances: junos_conf_root__configuration__groups__routing_instances

    mut def __init__(self, name: str, when: ?junos_conf_root__configuration__groups__when=None, rcsid: ?str, version: ?str, system: ?junos_conf_root__configuration__groups__system=None, interfaces: ?junos_conf_root__configuration__groups__interfaces=None, routing_instances: ?junos_conf_root__configuration__groups__routing_instances=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.name = name
        if when is not None:
            self.when = when
        else:
            self.when = junos_conf_root__configuration__groups__when()
        self.rcsid = rcsid
        self.version = version
        if system is not None:
            self.system = system
        else:
            self.system = junos_conf_root__configuration__groups__system()
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = junos_conf_root__configuration__groups__interfaces()
        if routing_instances is not None:
            self.routing_instances = routing_instances
        else:
            self.routing_instances = junos_conf_root__configuration__groups__routing_instances()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _when = self.when
        _rcsid = self.rcsid
        _version = self.version
        _system = self.system
        _interfaces = self.interfaces
        _routing_instances = self.routing_instances
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _when is not None:
            children['when'] = _when.to_gdata()
        if _rcsid is not None:
            children['rcsid'] = yang.gdata.Leaf('string', _rcsid)
        if _version is not None:
            children['version'] = yang.gdata.Leaf('string', _version)
        if _system is not None:
            children['system'] = _system.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _routing_instances is not None:
            children['routing-instances'] = _routing_instances.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups_entry:
        return junos_conf_root__configuration__groups_entry(name=n.get_str("name"), when=junos_conf_root__configuration__groups__when.from_gdata(n.get_opt_container("when")), rcsid=n.get_opt_str("rcsid"), version=n.get_opt_str("version"), system=junos_conf_root__configuration__groups__system.from_gdata(n.get_opt_container("system")), interfaces=junos_conf_root__configuration__groups__interfaces.from_gdata(n.get_opt_container("interfaces")), routing_instances=junos_conf_root__configuration__groups__routing_instances.from_gdata(n.get_opt_container("routing-instances")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__groups_entry:
        return junos_conf_root__configuration__groups_entry(name=yang.gdata.from_xml_str(n, "name"), when=junos_conf_root__configuration__groups__when.from_xml(yang.gdata.get_xml_opt_child(n, "when")), rcsid=yang.gdata.from_xml_opt_str(n, "rcsid"), version=yang.gdata.from_xml_opt_str(n, "version"), system=junos_conf_root__configuration__groups__system.from_xml(yang.gdata.get_xml_opt_child(n, "system")), interfaces=junos_conf_root__configuration__groups__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), routing_instances=junos_conf_root__configuration__groups__routing_instances.from_xml(yang.gdata.get_xml_opt_child(n, "routing-instances")))

class junos_conf_root__configuration__groups(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self._name = 'groups'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__groups_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__groups_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__groups_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__routing_options__autonomous_system__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__routing_options__autonomous_system(yang.adata.MNode):
    as_number: ?str

    mut def __init__(self, as_number: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.as_number = as_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_options__autonomous_system:
        if n != None:
            return junos_conf_root__configuration__routing_options__autonomous_system(as_number=n.get_opt_str("as-number"))
        return junos_conf_root__configuration__routing_options__autonomous_system()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_options__autonomous_system:
        if n != None:
            return junos_conf_root__configuration__routing_options__autonomous_system(as_number=yang.gdata.from_xml_opt_str(n, "as-number"))
        return junos_conf_root__configuration__routing_options__autonomous_system()


class junos_conf_root__configuration__routing_options(yang.adata.MNode):
    autonomous_system: junos_conf_root__configuration__routing_options__autonomous_system

    mut def __init__(self, autonomous_system: ?junos_conf_root__configuration__routing_options__autonomous_system=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        if autonomous_system is not None:
            self.autonomous_system = autonomous_system
        else:
            self.autonomous_system = junos_conf_root__configuration__routing_options__autonomous_system()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            children['autonomous-system'] = _autonomous_system.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_options:
        if n != None:
            return junos_conf_root__configuration__routing_options(autonomous_system=junos_conf_root__configuration__routing_options__autonomous_system.from_gdata(n.get_opt_container("autonomous-system")))
        return junos_conf_root__configuration__routing_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__routing_options:
        if n != None:
            return junos_conf_root__configuration__routing_options(autonomous_system=junos_conf_root__configuration__routing_options__autonomous_system.from_xml(yang.gdata.get_xml_opt_child(n, "autonomous-system")))
        return junos_conf_root__configuration__routing_options()


mut def from_json_junos_conf_root__configuration__protocols__bgp__path_selection__l2vpn_use_bgp_rules(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__path_selection__cisco_non_deterministic(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__path_selection__always_compare_med(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp__med_multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp__igp_multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp(yang.adata.MNode):
    med_multiplier: ?value
    igp_multiplier: ?value

    mut def __init__(self, med_multiplier: ?value, igp_multiplier: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.med_multiplier = med_multiplier
        self.igp_multiplier = igp_multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _med_multiplier = self.med_multiplier
        _igp_multiplier = self.igp_multiplier
        if _med_multiplier is not None:
            children['med-multiplier'] = yang.gdata.Leaf('union', _med_multiplier)
        if _igp_multiplier is not None:
            children['igp-multiplier'] = yang.gdata.Leaf('union', _igp_multiplier)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp(med_multiplier=n.get_opt_value("med-multiplier"), igp_multiplier=n.get_opt_value("igp-multiplier"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp(med_multiplier=yang.gdata.from_xml_opt_value(n, "med-multiplier"), igp_multiplier=yang.gdata.from_xml_opt_value(n, "igp-multiplier"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__path_selection__external_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__path_selection__as_path_ignore(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__path_selection(yang.adata.MNode):
    l2vpn_use_bgp_rules: ?bool
    cisco_non_deterministic: ?bool
    always_compare_med: ?bool
    med_plus_igp: ?junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp
    external_router_id: ?bool
    as_path_ignore: ?bool

    mut def __init__(self, l2vpn_use_bgp_rules: ?bool, cisco_non_deterministic: ?bool, always_compare_med: ?bool, med_plus_igp: ?junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp=None, external_router_id: ?bool, as_path_ignore: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.l2vpn_use_bgp_rules = l2vpn_use_bgp_rules
        self.cisco_non_deterministic = cisco_non_deterministic
        self.always_compare_med = always_compare_med
        self.med_plus_igp = med_plus_igp
        self.external_router_id = external_router_id
        self.as_path_ignore = as_path_ignore

    mut def create_med_plus_igp(self):
        res = junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp()
        self.med_plus_igp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l2vpn_use_bgp_rules = self.l2vpn_use_bgp_rules
        _cisco_non_deterministic = self.cisco_non_deterministic
        _always_compare_med = self.always_compare_med
        _med_plus_igp = self.med_plus_igp
        _external_router_id = self.external_router_id
        _as_path_ignore = self.as_path_ignore
        if _l2vpn_use_bgp_rules is not None:
            children['l2vpn-use-bgp-rules'] = yang.gdata.Leaf('empty', _l2vpn_use_bgp_rules)
        if _cisco_non_deterministic is not None:
            children['cisco-non-deterministic'] = yang.gdata.Leaf('empty', _cisco_non_deterministic)
        if _always_compare_med is not None:
            children['always-compare-med'] = yang.gdata.Leaf('empty', _always_compare_med)
        if _med_plus_igp is not None:
            children['med-plus-igp'] = _med_plus_igp.to_gdata()
        if _external_router_id is not None:
            children['external-router-id'] = yang.gdata.Leaf('empty', _external_router_id)
        if _as_path_ignore is not None:
            children['as-path-ignore'] = yang.gdata.Leaf('empty', _as_path_ignore)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__path_selection:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__path_selection(l2vpn_use_bgp_rules=n.get_opt_bool("l2vpn-use-bgp-rules"), cisco_non_deterministic=n.get_opt_bool("cisco-non-deterministic"), always_compare_med=n.get_opt_bool("always-compare-med"), med_plus_igp=junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp.from_gdata(n.get_opt_container("med-plus-igp")), external_router_id=n.get_opt_bool("external-router-id"), as_path_ignore=n.get_opt_bool("as-path-ignore"))
        return junos_conf_root__configuration__protocols__bgp__path_selection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__path_selection:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__path_selection(l2vpn_use_bgp_rules=yang.gdata.from_xml_opt_bool(n, "l2vpn-use-bgp-rules"), cisco_non_deterministic=yang.gdata.from_xml_opt_bool(n, "cisco-non-deterministic"), always_compare_med=yang.gdata.from_xml_opt_bool(n, "always-compare-med"), med_plus_igp=junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp.from_xml(yang.gdata.get_xml_opt_child(n, "med-plus-igp")), external_router_id=yang.gdata.from_xml_opt_bool(n, "external-router-id"), as_path_ignore=yang.gdata.from_xml_opt_bool(n, "as-path-ignore"))
        return junos_conf_root__configuration__protocols__bgp__path_selection()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__local_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout__forever(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout(yang.adata.MNode):
    forever: ?bool
    timeout: ?value

    mut def __init__(self, forever: ?bool, timeout: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.forever = forever
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forever = self.forever
        _timeout = self.timeout
        if _forever is not None:
            children['forever'] = yang.gdata.Leaf('empty', _forever)
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('union', _timeout)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout(forever=n.get_opt_bool("forever"), timeout=n.get_opt_value("timeout"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout(forever=yang.gdata.from_xml_opt_bool(n, "forever"), timeout=yang.gdata.from_xml_opt_value(n, "timeout"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown(yang.adata.MNode):
    limit_threshold: ?value
    idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout

    mut def __init__(self, limit_threshold: ?value, idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold
        self.idle_timeout = idle_timeout

    mut def create_idle_timeout(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout()
        self.idle_timeout = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        _idle_timeout = self.idle_timeout
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        if _idle_timeout is not None:
            children['idle-timeout'] = _idle_timeout.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown(limit_threshold=n.get_opt_value("limit-threshold"), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout.from_gdata(n.get_opt_container("idle-timeout")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout.from_xml(yang.gdata.get_xml_opt_child(n, "idle-timeout")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess(limit_threshold=n.get_opt_value("limit-threshold"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess(limit_threshold=n.get_opt_value("limit-threshold"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit(yang.adata.MNode):
    maximum: ?value
    teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown
    drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess
    hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess

    mut def __init__(self, maximum: ?value, teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown=None, drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess=None, hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.maximum = maximum
        self.teardown = teardown
        self.drop_excess = drop_excess
        self.hide_excess = hide_excess

    mut def create_teardown(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown()
        self.teardown = res
        return res

    mut def create_drop_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess()
        self.drop_excess = res
        return res

    mut def create_hide_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess()
        self.hide_excess = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        _teardown = self.teardown
        _drop_excess = self.drop_excess
        _hide_excess = self.hide_excess
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('union', _maximum)
        if _teardown is not None:
            children['teardown'] = _teardown.to_gdata()
        if _drop_excess is not None:
            children['drop-excess'] = _drop_excess.to_gdata()
        if _hide_excess is not None:
            children['hide-excess'] = _hide_excess.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit(maximum=n.get_opt_value("maximum"), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown.from_gdata(n.get_opt_container("teardown")), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess.from_gdata(n.get_opt_container("drop-excess")), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess.from_gdata(n.get_opt_container("hide-excess")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit(maximum=yang.gdata.from_xml_opt_value(n, "maximum"), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown.from_xml(yang.gdata.get_xml_opt_child(n, "teardown")), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess.from_xml(yang.gdata.get_xml_opt_child(n, "drop-excess")), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess.from_xml(yang.gdata.get_xml_opt_child(n, "hide-excess")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__forever(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(yang.adata.MNode):
    forever: ?bool
    timeout: ?value

    mut def __init__(self, forever: ?bool, timeout: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.forever = forever
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forever = self.forever
        _timeout = self.timeout
        if _forever is not None:
            children['forever'] = yang.gdata.Leaf('empty', _forever)
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('union', _timeout)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(forever=n.get_opt_bool("forever"), timeout=n.get_opt_value("timeout"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(forever=yang.gdata.from_xml_opt_bool(n, "forever"), timeout=yang.gdata.from_xml_opt_value(n, "timeout"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown(yang.adata.MNode):
    limit_threshold: ?value
    idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout

    mut def __init__(self, limit_threshold: ?value, idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold
        self.idle_timeout = idle_timeout

    mut def create_idle_timeout(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout()
        self.idle_timeout = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        _idle_timeout = self.idle_timeout
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        if _idle_timeout is not None:
            children['idle-timeout'] = _idle_timeout.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown(limit_threshold=n.get_opt_value("limit-threshold"), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout.from_gdata(n.get_opt_container("idle-timeout")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout.from_xml(yang.gdata.get_xml_opt_child(n, "idle-timeout")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess(limit_threshold=n.get_opt_value("limit-threshold"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess(limit_threshold=n.get_opt_value("limit-threshold"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit(yang.adata.MNode):
    maximum: ?value
    teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown
    drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess
    hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess

    mut def __init__(self, maximum: ?value, teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown=None, drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess=None, hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.maximum = maximum
        self.teardown = teardown
        self.drop_excess = drop_excess
        self.hide_excess = hide_excess

    mut def create_teardown(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown()
        self.teardown = res
        return res

    mut def create_drop_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess()
        self.drop_excess = res
        return res

    mut def create_hide_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess()
        self.hide_excess = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        _teardown = self.teardown
        _drop_excess = self.drop_excess
        _hide_excess = self.hide_excess
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('union', _maximum)
        if _teardown is not None:
            children['teardown'] = _teardown.to_gdata()
        if _drop_excess is not None:
            children['drop-excess'] = _drop_excess.to_gdata()
        if _hide_excess is not None:
            children['hide-excess'] = _hide_excess.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit(maximum=n.get_opt_value("maximum"), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown.from_gdata(n.get_opt_container("teardown")), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess.from_gdata(n.get_opt_container("drop-excess")), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess.from_gdata(n.get_opt_container("hide-excess")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit(maximum=yang.gdata.from_xml_opt_value(n, "maximum"), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown.from_xml(yang.gdata.get_xml_opt_child(n, "teardown")), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess.from_xml(yang.gdata.get_xml_opt_child(n, "drop-excess")), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess.from_xml(yang.gdata.get_xml_opt_child(n, "hide-excess")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group__ribgroup_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group(yang.adata.MNode):
    ribgroup_name: ?str

    mut def __init__(self, ribgroup_name: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.ribgroup_name = ribgroup_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ribgroup_name = self.ribgroup_name
        if _ribgroup_name is not None:
            children['ribgroup-name'] = yang.gdata.Leaf('string', _ribgroup_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group(ribgroup_name=n.get_opt_str("ribgroup-name"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group(ribgroup_name=yang.gdata.from_xml_opt_str(n, "ribgroup-name"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode__all_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode__equal_cost_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode(yang.adata.MNode):
    all_paths: ?bool
    equal_cost_paths: ?bool

    mut def __init__(self, all_paths: ?bool, equal_cost_paths: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.all_paths = all_paths
        self.equal_cost_paths = equal_cost_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _all_paths = self.all_paths
        _equal_cost_paths = self.equal_cost_paths
        if _all_paths is not None:
            children['all-paths'] = yang.gdata.Leaf('empty', _all_paths)
        if _equal_cost_paths is not None:
            children['equal-cost-paths'] = yang.gdata.Leaf('empty', _equal_cost_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode(all_paths=n.get_opt_bool("all-paths"), equal_cost_paths=n.get_opt_bool("equal-cost-paths"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode(all_paths=yang.gdata.from_xml_opt_bool(n, "all-paths"), equal_cost_paths=yang.gdata.from_xml_opt_bool(n, "equal-cost-paths"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__prefix_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_count(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__include_backup_path(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send(yang.adata.MNode):
    path_selection_mode: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode
    prefix_policy: list[str]
    path_count: ?value
    include_backup_path: ?value
    multipath: ?bool

    mut def __init__(self, path_selection_mode: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode=None, prefix_policy: ?list[str]=None, path_count: ?value, include_backup_path: ?value, multipath: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if path_selection_mode is not None:
            self.path_selection_mode = path_selection_mode
        else:
            self.path_selection_mode = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode()
        if prefix_policy is not None:
            self.prefix_policy = prefix_policy
        else:
            self.prefix_policy = []
        self.path_count = path_count
        self.include_backup_path = include_backup_path
        self.multipath = multipath

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _path_selection_mode = self.path_selection_mode
        _path_count = self.path_count
        _include_backup_path = self.include_backup_path
        _multipath = self.multipath
        if _path_selection_mode is not None:
            children['path-selection-mode'] = _path_selection_mode.to_gdata()
        children['prefix-policy'] = yang.gdata.LeafList(self.prefix_policy)
        if _path_count is not None:
            children['path-count'] = yang.gdata.Leaf('union', _path_count)
        if _include_backup_path is not None:
            children['include-backup-path'] = yang.gdata.Leaf('union', _include_backup_path)
        if _multipath is not None:
            children['multipath'] = yang.gdata.Leaf('empty', _multipath)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send(path_selection_mode=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode.from_gdata(n.get_opt_container("path-selection-mode")), prefix_policy=n.get_opt_strs("prefix-policy"), path_count=n.get_opt_value("path-count"), include_backup_path=n.get_opt_value("include-backup-path"), multipath=n.get_opt_bool("multipath"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send(path_selection_mode=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode.from_xml(yang.gdata.get_xml_opt_child(n, "path-selection-mode")), prefix_policy=yang.gdata.from_xml_opt_strs(n, "prefix-policy"), path_count=yang.gdata.from_xml_opt_value(n, "path-count"), include_backup_path=yang.gdata.from_xml_opt_value(n, "include-backup-path"), multipath=yang.gdata.from_xml_opt_bool(n, "multipath"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path(yang.adata.MNode):
    receive: ?bool
    send: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send

    mut def __init__(self, receive: ?bool, send: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.receive = receive
        self.send = send

    mut def create_send(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send()
        self.send = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        _send = self.send
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('empty', _receive)
        if _send is not None:
            children['send'] = _send.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path(receive=n.get_opt_bool("receive"), send=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send.from_gdata(n.get_opt_container("send")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path(receive=yang.gdata.from_xml_opt_bool(n, "receive"), send=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send.from_xml(yang.gdata.get_xml_opt_child(n, "send")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp(yang.adata.MNode):
    disable: ?bool

    mut def __init__(self, disable: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.disable = disable

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp(disable=n.get_opt_bool("disable"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp(disable=yang.gdata.from_xml_opt_bool(n, "disable"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__local_ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops__loops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops(yang.adata.MNode):
    loops: ?value

    mut def __init__(self, loops: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.loops = loops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _loops = self.loops
        if _loops is not None:
            children['loops'] = yang.gdata.Leaf('union', _loops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops(loops=n.get_opt_value("loops"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops(loops=yang.gdata.from_xml_opt_value(n, "loops"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__always_wait_for_krt_drain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay__routing_uptime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay__inbound_convergence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay(yang.adata.MNode):
    routing_uptime: ?value
    inbound_convergence: ?value

    mut def __init__(self, routing_uptime: ?value, inbound_convergence: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.routing_uptime = routing_uptime
        self.inbound_convergence = inbound_convergence

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _routing_uptime = self.routing_uptime
        _inbound_convergence = self.inbound_convergence
        if _routing_uptime is not None:
            children['routing-uptime'] = yang.gdata.Leaf('union', _routing_uptime)
        if _inbound_convergence is not None:
            children['inbound-convergence'] = yang.gdata.Leaf('union', _inbound_convergence)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay(routing_uptime=n.get_opt_value("routing-uptime"), inbound_convergence=n.get_opt_value("inbound-convergence"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay(routing_uptime=yang.gdata.from_xml_opt_value(n, "routing-uptime"), inbound_convergence=yang.gdata.from_xml_opt_value(n, "inbound-convergence"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay__route_age(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay__routing_uptime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay(yang.adata.MNode):
    route_age: ?value
    routing_uptime: ?value

    mut def __init__(self, route_age: ?value, routing_uptime: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.route_age = route_age
        self.routing_uptime = routing_uptime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_age = self.route_age
        _routing_uptime = self.routing_uptime
        if _route_age is not None:
            children['route-age'] = yang.gdata.Leaf('union', _route_age)
        if _routing_uptime is not None:
            children['routing-uptime'] = yang.gdata.Leaf('union', _routing_uptime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay(route_age=n.get_opt_value("route-age"), routing_uptime=n.get_opt_value("routing-uptime"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay(route_age=yang.gdata.from_xml_opt_value(n, "route-age"), routing_uptime=yang.gdata.from_xml_opt_value(n, "routing-uptime"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay()


class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements(yang.adata.MNode):
    always_wait_for_krt_drain: ?bool
    minimum_delay: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay
    maximum_delay: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay

    mut def __init__(self, always_wait_for_krt_drain: ?bool, minimum_delay: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay=None, maximum_delay: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.always_wait_for_krt_drain = always_wait_for_krt_drain
        if minimum_delay is not None:
            self.minimum_delay = minimum_delay
        else:
            self.minimum_delay = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay()
        if maximum_delay is not None:
            self.maximum_delay = maximum_delay
        else:
            self.maximum_delay = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always_wait_for_krt_drain = self.always_wait_for_krt_drain
        _minimum_delay = self.minimum_delay
        _maximum_delay = self.maximum_delay
        if _always_wait_for_krt_drain is not None:
            children['always-wait-for-krt-drain'] = yang.gdata.Leaf('empty', _always_wait_for_krt_drain)
        if _minimum_delay is not None:
            children['minimum-delay'] = _minimum_delay.to_gdata()
        if _maximum_delay is not None:
            children['maximum-delay'] = _maximum_delay.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements(always_wait_for_krt_drain=n.get_opt_bool("always-wait-for-krt-drain"), minimum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay.from_gdata(n.get_opt_container("minimum-delay")), maximum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay.from_gdata(n.get_opt_container("maximum-delay")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements(always_wait_for_krt_drain=yang.gdata.from_xml_opt_bool(n, "always-wait-for-krt-drain"), minimum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay.from_xml(yang.gdata.get_xml_opt_child(n, "minimum-delay")), maximum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay.from_xml(yang.gdata.get_xml_opt_child(n, "maximum-delay")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution__no_resolution(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution__preserve_nexthop_hierarchy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution(yang.adata.MNode):
    no_resolution: ?bool
    preserve_nexthop_hierarchy: ?bool

    mut def __init__(self, no_resolution: ?bool, preserve_nexthop_hierarchy: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.no_resolution = no_resolution
        self.preserve_nexthop_hierarchy = preserve_nexthop_hierarchy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _no_resolution = self.no_resolution
        _preserve_nexthop_hierarchy = self.preserve_nexthop_hierarchy
        if _no_resolution is not None:
            children['no-resolution'] = yang.gdata.Leaf('empty', _no_resolution)
        if _preserve_nexthop_hierarchy is not None:
            children['preserve-nexthop-hierarchy'] = yang.gdata.Leaf('empty', _preserve_nexthop_hierarchy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution(no_resolution=n.get_opt_bool("no-resolution"), preserve_nexthop_hierarchy=n.get_opt_bool("preserve-nexthop-hierarchy"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution(no_resolution=yang.gdata.from_xml_opt_bool(n, "no-resolution"), preserve_nexthop_hierarchy=yang.gdata.from_xml_opt_bool(n, "preserve-nexthop-hierarchy"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build__maximum_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build(yang.adata.MNode):
    maximum_delay: ?value

    mut def __init__(self, maximum_delay: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.maximum_delay = maximum_delay

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            children['maximum-delay'] = yang.gdata.Leaf('union', _maximum_delay)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build(maximum_delay=n.get_opt_value("maximum-delay"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build(maximum_delay=yang.gdata.from_xml_opt_value(n, "maximum-delay"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter__stale_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter(yang.adata.MNode):
    disable: ?bool
    stale_time: ?str

    mut def __init__(self, disable: ?bool, stale_time: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.disable = disable
        self.stale_time = stale_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _stale_time = self.stale_time
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _stale_time is not None:
            children['stale-time'] = yang.gdata.Leaf('string', _stale_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter(disable=n.get_opt_bool("disable"), stale_time=n.get_opt_str("stale-time"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter(disable=yang.gdata.from_xml_opt_bool(n, "disable"), stale_time=yang.gdata.from_xml_opt_str(n, "stale-time"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention(yang.adata.MNode):
    disable: ?bool
    retention_time: ?str
    retention_policy: list[str]

    mut def __init__(self, disable: ?bool, retention_time: ?str, retention_policy: ?list[str]=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.disable = disable
        self.retention_time = retention_time
        if retention_policy is not None:
            self.retention_policy = retention_policy
        else:
            self.retention_policy = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _retention_time = self.retention_time
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _retention_time is not None:
            children['retention-time'] = yang.gdata.Leaf('string', _retention_time)
        children['retention-policy'] = yang.gdata.LeafList(self.retention_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention(disable=n.get_opt_bool("disable"), retention_time=n.get_opt_str("retention-time"), retention_policy=n.get_opt_strs("retention-policy"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention(disable=yang.gdata.from_xml_opt_bool(n, "disable"), retention_time=yang.gdata.from_xml_opt_str(n, "retention-time"), retention_policy=yang.gdata.from_xml_opt_strs(n, "retention-policy"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention()


class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived(yang.adata.MNode):
    restarter: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter
    extended_route_retention: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention

    mut def __init__(self, restarter: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter=None, extended_route_retention: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if restarter is not None:
            self.restarter = restarter
        else:
            self.restarter = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter()
        if extended_route_retention is not None:
            self.extended_route_retention = extended_route_retention
        else:
            self.extended_route_retention = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restarter = self.restarter
        _extended_route_retention = self.extended_route_retention
        if _restarter is not None:
            children['restarter'] = _restarter.to_gdata()
        if _extended_route_retention is not None:
            children['extended-route-retention'] = _extended_route_retention.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived(restarter=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter.from_gdata(n.get_opt_container("restarter")), extended_route_retention=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention.from_gdata(n.get_opt_container("extended-route-retention")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived(restarter=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter.from_xml(yang.gdata.get_xml_opt_child(n, "restarter")), extended_route_retention=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention.from_xml(yang.gdata.get_xml_opt_child(n, "extended-route-retention")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__forwarding_state_bit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart(yang.adata.MNode):
    long_lived: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived
    forwarding_state_bit: ?str

    mut def __init__(self, long_lived: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived=None, forwarding_state_bit: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if long_lived is not None:
            self.long_lived = long_lived
        else:
            self.long_lived = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived()
        self.forwarding_state_bit = forwarding_state_bit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _long_lived = self.long_lived
        _forwarding_state_bit = self.forwarding_state_bit
        if _long_lived is not None:
            children['long-lived'] = _long_lived.to_gdata()
        if _forwarding_state_bit is not None:
            children['forwarding-state-bit'] = yang.gdata.Leaf('enumeration', _forwarding_state_bit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart(long_lived=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived.from_gdata(n.get_opt_container("long-lived")), forwarding_state_bit=n.get_opt_str("forwarding-state-bit"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart(long_lived=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived.from_xml(yang.gdata.get_xml_opt_child(n, "long-lived")), forwarding_state_bit=yang.gdata.from_xml_opt_str(n, "forwarding-state-bit"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop_color(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop_tunnel(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__no_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_age_bgp_view(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        _expedited = self.expedited
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority(priority=n.get_opt_value("priority"), expedited=n.get_opt_bool("expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority(priority=yang.gdata.from_xml_opt_value(n, "priority"), expedited=yang.gdata.from_xml_opt_bool(n, "expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        _expedited = self.expedited
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority(priority=n.get_opt_value("priority"), expedited=n.get_opt_bool("expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority(priority=yang.gdata.from_xml_opt_value(n, "priority"), expedited=yang.gdata.from_xml_opt_bool(n, "expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        _expedited = self.expedited
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority(priority=n.get_opt_value("priority"), expedited=n.get_opt_bool("expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority(priority=yang.gdata.from_xml_opt_value(n, "priority"), expedited=yang.gdata.from_xml_opt_bool(n, "expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__advertise_srv6_service(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_srv6_service(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label(yang.adata.MNode):
    community: ?str

    mut def __init__(self, community: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.community = community

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label(community=n.get_opt_str("community"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label(community=yang.gdata.from_xml_opt_str(n, "community"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier__context_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier(yang.adata.MNode):
    context_id: ?str

    mut def __init__(self, context_id: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.context_id = context_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _context_id = self.context_id
        if _context_id is not None:
            children['context-id'] = yang.gdata.Leaf('string', _context_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier(context_id=n.get_opt_str("context-id"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier(context_id=yang.gdata.from_xml_opt_str(n, "context-id"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__keep_import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection(yang.adata.MNode):
    context_identifier: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier
    keep_import: list[str]

    mut def __init__(self, context_identifier: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier=None, keep_import: ?list[str]=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if context_identifier is not None:
            self.context_identifier = context_identifier
        else:
            self.context_identifier = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier()
        if keep_import is not None:
            self.keep_import = keep_import
        else:
            self.keep_import = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _context_identifier = self.context_identifier
        if _context_identifier is not None:
            children['context-identifier'] = _context_identifier.to_gdata()
        children['keep-import'] = yang.gdata.LeafList(self.keep_import)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection(context_identifier=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier.from_gdata(n.get_opt_container("context-identifier")), keep_import=n.get_opt_strs("keep-import"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection(context_identifier=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier.from_xml(yang.gdata.get_xml_opt_child(n, "context-identifier")), keep_import=yang.gdata.from_xml_opt_strs(n, "keep-import"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_local_nexthop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_own(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast(yang.adata.MNode):
    prefix_limit: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit
    accepted_prefix_limit: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit
    rib_group: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group
    add_path: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path
    aigp: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp
    damping: ?bool
    local_ipv4_address: ?str
    loops: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops
    delay_route_advertisements: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements
    nexthop_resolution: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution
    defer_initial_multipath_build: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build
    graceful_restart: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart
    extended_nexthop: ?bool
    extended_nexthop_color: ?bool
    extended_nexthop_tunnel: ?bool
    no_install: ?bool
    route_age_bgp_view: ?bool
    output_queue_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority
    route_refresh_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority
    withdraw_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority
    advertise_srv6_service: ?bool
    accept_srv6_service: ?bool
    aggregate_label: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label
    egress_protection: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection
    accept_local_nexthop: ?bool
    accept_own: ?bool

    mut def __init__(self, prefix_limit: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit=None, accepted_prefix_limit: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit=None, rib_group: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group=None, add_path: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path=None, aigp: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp=None, damping: ?bool, local_ipv4_address: ?str, loops: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops=None, delay_route_advertisements: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements=None, nexthop_resolution: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution=None, defer_initial_multipath_build: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build=None, graceful_restart: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart=None, extended_nexthop: ?bool, extended_nexthop_color: ?bool, extended_nexthop_tunnel: ?bool, no_install: ?bool, route_age_bgp_view: ?bool, output_queue_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority=None, route_refresh_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority=None, withdraw_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority=None, advertise_srv6_service: ?bool, accept_srv6_service: ?bool, aggregate_label: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label=None, egress_protection: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection=None, accept_local_nexthop: ?bool, accept_own: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if prefix_limit is not None:
            self.prefix_limit = prefix_limit
        else:
            self.prefix_limit = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit()
        if accepted_prefix_limit is not None:
            self.accepted_prefix_limit = accepted_prefix_limit
        else:
            self.accepted_prefix_limit = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit()
        if rib_group is not None:
            self.rib_group = rib_group
        else:
            self.rib_group = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group()
        if add_path is not None:
            self.add_path = add_path
        else:
            self.add_path = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path()
        self.aigp = aigp
        self.damping = damping
        self.local_ipv4_address = local_ipv4_address
        if loops is not None:
            self.loops = loops
        else:
            self.loops = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops()
        self.delay_route_advertisements = delay_route_advertisements
        if nexthop_resolution is not None:
            self.nexthop_resolution = nexthop_resolution
        else:
            self.nexthop_resolution = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution()
        self.defer_initial_multipath_build = defer_initial_multipath_build
        if graceful_restart is not None:
            self.graceful_restart = graceful_restart
        else:
            self.graceful_restart = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart()
        self.extended_nexthop = extended_nexthop
        self.extended_nexthop_color = extended_nexthop_color
        self.extended_nexthop_tunnel = extended_nexthop_tunnel
        self.no_install = no_install
        self.route_age_bgp_view = route_age_bgp_view
        if output_queue_priority is not None:
            self.output_queue_priority = output_queue_priority
        else:
            self.output_queue_priority = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority()
        if route_refresh_priority is not None:
            self.route_refresh_priority = route_refresh_priority
        else:
            self.route_refresh_priority = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority()
        if withdraw_priority is not None:
            self.withdraw_priority = withdraw_priority
        else:
            self.withdraw_priority = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority()
        self.advertise_srv6_service = advertise_srv6_service
        self.accept_srv6_service = accept_srv6_service
        self.aggregate_label = aggregate_label
        self.egress_protection = egress_protection
        self.accept_local_nexthop = accept_local_nexthop
        self.accept_own = accept_own

    mut def create_aigp(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp()
        self.aigp = res
        return res

    mut def create_delay_route_advertisements(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements()
        self.delay_route_advertisements = res
        return res

    mut def create_defer_initial_multipath_build(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build()
        self.defer_initial_multipath_build = res
        return res

    mut def create_aggregate_label(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label()
        self.aggregate_label = res
        return res

    mut def create_egress_protection(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection()
        self.egress_protection = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit = self.prefix_limit
        _accepted_prefix_limit = self.accepted_prefix_limit
        _rib_group = self.rib_group
        _add_path = self.add_path
        _aigp = self.aigp
        _damping = self.damping
        _local_ipv4_address = self.local_ipv4_address
        _loops = self.loops
        _delay_route_advertisements = self.delay_route_advertisements
        _nexthop_resolution = self.nexthop_resolution
        _defer_initial_multipath_build = self.defer_initial_multipath_build
        _graceful_restart = self.graceful_restart
        _extended_nexthop = self.extended_nexthop
        _extended_nexthop_color = self.extended_nexthop_color
        _extended_nexthop_tunnel = self.extended_nexthop_tunnel
        _no_install = self.no_install
        _route_age_bgp_view = self.route_age_bgp_view
        _output_queue_priority = self.output_queue_priority
        _route_refresh_priority = self.route_refresh_priority
        _withdraw_priority = self.withdraw_priority
        _advertise_srv6_service = self.advertise_srv6_service
        _accept_srv6_service = self.accept_srv6_service
        _aggregate_label = self.aggregate_label
        _egress_protection = self.egress_protection
        _accept_local_nexthop = self.accept_local_nexthop
        _accept_own = self.accept_own
        if _prefix_limit is not None:
            children['prefix-limit'] = _prefix_limit.to_gdata()
        if _accepted_prefix_limit is not None:
            children['accepted-prefix-limit'] = _accepted_prefix_limit.to_gdata()
        if _rib_group is not None:
            children['rib-group'] = _rib_group.to_gdata()
        if _add_path is not None:
            children['add-path'] = _add_path.to_gdata()
        if _aigp is not None:
            children['aigp'] = _aigp.to_gdata()
        if _damping is not None:
            children['damping'] = yang.gdata.Leaf('empty', _damping)
        if _local_ipv4_address is not None:
            children['local-ipv4-address'] = yang.gdata.Leaf('string', _local_ipv4_address)
        if _loops is not None:
            children['loops'] = _loops.to_gdata()
        if _delay_route_advertisements is not None:
            children['delay-route-advertisements'] = _delay_route_advertisements.to_gdata()
        if _nexthop_resolution is not None:
            children['nexthop-resolution'] = _nexthop_resolution.to_gdata()
        if _defer_initial_multipath_build is not None:
            children['defer-initial-multipath-build'] = _defer_initial_multipath_build.to_gdata()
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        if _extended_nexthop is not None:
            children['extended-nexthop'] = yang.gdata.Leaf('empty', _extended_nexthop)
        if _extended_nexthop_color is not None:
            children['extended-nexthop-color'] = yang.gdata.Leaf('empty', _extended_nexthop_color)
        if _extended_nexthop_tunnel is not None:
            children['extended-nexthop-tunnel'] = yang.gdata.Leaf('empty', _extended_nexthop_tunnel)
        if _no_install is not None:
            children['no-install'] = yang.gdata.Leaf('empty', _no_install)
        if _route_age_bgp_view is not None:
            children['route-age-bgp-view'] = yang.gdata.Leaf('empty', _route_age_bgp_view)
        if _output_queue_priority is not None:
            children['output-queue-priority'] = _output_queue_priority.to_gdata()
        if _route_refresh_priority is not None:
            children['route-refresh-priority'] = _route_refresh_priority.to_gdata()
        if _withdraw_priority is not None:
            children['withdraw-priority'] = _withdraw_priority.to_gdata()
        if _advertise_srv6_service is not None:
            children['advertise-srv6-service'] = yang.gdata.Leaf('empty', _advertise_srv6_service)
        if _accept_srv6_service is not None:
            children['accept-srv6-service'] = yang.gdata.Leaf('empty', _accept_srv6_service)
        if _aggregate_label is not None:
            children['aggregate-label'] = _aggregate_label.to_gdata()
        if _egress_protection is not None:
            children['egress-protection'] = _egress_protection.to_gdata()
        if _accept_local_nexthop is not None:
            children['accept-local-nexthop'] = yang.gdata.Leaf('empty', _accept_local_nexthop)
        if _accept_own is not None:
            children['accept-own'] = yang.gdata.Leaf('empty', _accept_own)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast(prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit.from_gdata(n.get_opt_container("prefix-limit")), accepted_prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit.from_gdata(n.get_opt_container("accepted-prefix-limit")), rib_group=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group.from_gdata(n.get_opt_container("rib-group")), add_path=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path.from_gdata(n.get_opt_container("add-path")), aigp=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp.from_gdata(n.get_opt_container("aigp")), damping=n.get_opt_bool("damping"), local_ipv4_address=n.get_opt_str("local-ipv4-address"), loops=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops.from_gdata(n.get_opt_container("loops")), delay_route_advertisements=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements.from_gdata(n.get_opt_container("delay-route-advertisements")), nexthop_resolution=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution.from_gdata(n.get_opt_container("nexthop-resolution")), defer_initial_multipath_build=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build.from_gdata(n.get_opt_container("defer-initial-multipath-build")), graceful_restart=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart.from_gdata(n.get_opt_container("graceful-restart")), extended_nexthop=n.get_opt_bool("extended-nexthop"), extended_nexthop_color=n.get_opt_bool("extended-nexthop-color"), extended_nexthop_tunnel=n.get_opt_bool("extended-nexthop-tunnel"), no_install=n.get_opt_bool("no-install"), route_age_bgp_view=n.get_opt_bool("route-age-bgp-view"), output_queue_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority.from_gdata(n.get_opt_container("output-queue-priority")), route_refresh_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority.from_gdata(n.get_opt_container("route-refresh-priority")), withdraw_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority.from_gdata(n.get_opt_container("withdraw-priority")), advertise_srv6_service=n.get_opt_bool("advertise-srv6-service"), accept_srv6_service=n.get_opt_bool("accept-srv6-service"), aggregate_label=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label.from_gdata(n.get_opt_container("aggregate-label")), egress_protection=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection.from_gdata(n.get_opt_container("egress-protection")), accept_local_nexthop=n.get_opt_bool("accept-local-nexthop"), accept_own=n.get_opt_bool("accept-own"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast(prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit")), accepted_prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit.from_xml(yang.gdata.get_xml_opt_child(n, "accepted-prefix-limit")), rib_group=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group.from_xml(yang.gdata.get_xml_opt_child(n, "rib-group")), add_path=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path.from_xml(yang.gdata.get_xml_opt_child(n, "add-path")), aigp=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp.from_xml(yang.gdata.get_xml_opt_child(n, "aigp")), damping=yang.gdata.from_xml_opt_bool(n, "damping"), local_ipv4_address=yang.gdata.from_xml_opt_str(n, "local-ipv4-address"), loops=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops.from_xml(yang.gdata.get_xml_opt_child(n, "loops")), delay_route_advertisements=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements.from_xml(yang.gdata.get_xml_opt_child(n, "delay-route-advertisements")), nexthop_resolution=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "nexthop-resolution")), defer_initial_multipath_build=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build.from_xml(yang.gdata.get_xml_opt_child(n, "defer-initial-multipath-build")), graceful_restart=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-restart")), extended_nexthop=yang.gdata.from_xml_opt_bool(n, "extended-nexthop"), extended_nexthop_color=yang.gdata.from_xml_opt_bool(n, "extended-nexthop-color"), extended_nexthop_tunnel=yang.gdata.from_xml_opt_bool(n, "extended-nexthop-tunnel"), no_install=yang.gdata.from_xml_opt_bool(n, "no-install"), route_age_bgp_view=yang.gdata.from_xml_opt_bool(n, "route-age-bgp-view"), output_queue_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority.from_xml(yang.gdata.get_xml_opt_child(n, "output-queue-priority")), route_refresh_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority.from_xml(yang.gdata.get_xml_opt_child(n, "route-refresh-priority")), withdraw_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority.from_xml(yang.gdata.get_xml_opt_child(n, "withdraw-priority")), advertise_srv6_service=yang.gdata.from_xml_opt_bool(n, "advertise-srv6-service"), accept_srv6_service=yang.gdata.from_xml_opt_bool(n, "accept-srv6-service"), aggregate_label=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label.from_xml(yang.gdata.get_xml_opt_child(n, "aggregate-label")), egress_protection=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection.from_xml(yang.gdata.get_xml_opt_child(n, "egress-protection")), accept_local_nexthop=yang.gdata.from_xml_opt_bool(n, "accept-local-nexthop"), accept_own=yang.gdata.from_xml_opt_bool(n, "accept-own"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(yang.adata.MNode):
    unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast

    mut def __init__(self, unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.unicast = unicast

    mut def create_unicast(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(unicast=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast.from_gdata(n.get_opt_container("unicast")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(unicast=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout__forever(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout(yang.adata.MNode):
    forever: ?bool
    timeout: ?value

    mut def __init__(self, forever: ?bool, timeout: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.forever = forever
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forever = self.forever
        _timeout = self.timeout
        if _forever is not None:
            children['forever'] = yang.gdata.Leaf('empty', _forever)
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('union', _timeout)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout(forever=n.get_opt_bool("forever"), timeout=n.get_opt_value("timeout"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout(forever=yang.gdata.from_xml_opt_bool(n, "forever"), timeout=yang.gdata.from_xml_opt_value(n, "timeout"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown(yang.adata.MNode):
    limit_threshold: ?value
    idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout

    mut def __init__(self, limit_threshold: ?value, idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold
        self.idle_timeout = idle_timeout

    mut def create_idle_timeout(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout()
        self.idle_timeout = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        _idle_timeout = self.idle_timeout
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        if _idle_timeout is not None:
            children['idle-timeout'] = _idle_timeout.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown(limit_threshold=n.get_opt_value("limit-threshold"), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout.from_gdata(n.get_opt_container("idle-timeout")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout.from_xml(yang.gdata.get_xml_opt_child(n, "idle-timeout")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess(limit_threshold=n.get_opt_value("limit-threshold"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess(limit_threshold=n.get_opt_value("limit-threshold"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit(yang.adata.MNode):
    maximum: ?value
    teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown
    drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess
    hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess

    mut def __init__(self, maximum: ?value, teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown=None, drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess=None, hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.maximum = maximum
        self.teardown = teardown
        self.drop_excess = drop_excess
        self.hide_excess = hide_excess

    mut def create_teardown(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown()
        self.teardown = res
        return res

    mut def create_drop_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess()
        self.drop_excess = res
        return res

    mut def create_hide_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess()
        self.hide_excess = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        _teardown = self.teardown
        _drop_excess = self.drop_excess
        _hide_excess = self.hide_excess
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('union', _maximum)
        if _teardown is not None:
            children['teardown'] = _teardown.to_gdata()
        if _drop_excess is not None:
            children['drop-excess'] = _drop_excess.to_gdata()
        if _hide_excess is not None:
            children['hide-excess'] = _hide_excess.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit(maximum=n.get_opt_value("maximum"), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown.from_gdata(n.get_opt_container("teardown")), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess.from_gdata(n.get_opt_container("drop-excess")), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess.from_gdata(n.get_opt_container("hide-excess")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit(maximum=yang.gdata.from_xml_opt_value(n, "maximum"), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown.from_xml(yang.gdata.get_xml_opt_child(n, "teardown")), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess.from_xml(yang.gdata.get_xml_opt_child(n, "drop-excess")), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess.from_xml(yang.gdata.get_xml_opt_child(n, "hide-excess")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__forever(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(yang.adata.MNode):
    forever: ?bool
    timeout: ?value

    mut def __init__(self, forever: ?bool, timeout: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.forever = forever
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forever = self.forever
        _timeout = self.timeout
        if _forever is not None:
            children['forever'] = yang.gdata.Leaf('empty', _forever)
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('union', _timeout)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(forever=n.get_opt_bool("forever"), timeout=n.get_opt_value("timeout"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(forever=yang.gdata.from_xml_opt_bool(n, "forever"), timeout=yang.gdata.from_xml_opt_value(n, "timeout"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown(yang.adata.MNode):
    limit_threshold: ?value
    idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout

    mut def __init__(self, limit_threshold: ?value, idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold
        self.idle_timeout = idle_timeout

    mut def create_idle_timeout(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout()
        self.idle_timeout = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        _idle_timeout = self.idle_timeout
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        if _idle_timeout is not None:
            children['idle-timeout'] = _idle_timeout.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown(limit_threshold=n.get_opt_value("limit-threshold"), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout.from_gdata(n.get_opt_container("idle-timeout")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout.from_xml(yang.gdata.get_xml_opt_child(n, "idle-timeout")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess(limit_threshold=n.get_opt_value("limit-threshold"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess(limit_threshold=n.get_opt_value("limit-threshold"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess(limit_threshold=yang.gdata.from_xml_opt_value(n, "limit-threshold"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit(yang.adata.MNode):
    maximum: ?value
    teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown
    drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess
    hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess

    mut def __init__(self, maximum: ?value, teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown=None, drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess=None, hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.maximum = maximum
        self.teardown = teardown
        self.drop_excess = drop_excess
        self.hide_excess = hide_excess

    mut def create_teardown(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown()
        self.teardown = res
        return res

    mut def create_drop_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess()
        self.drop_excess = res
        return res

    mut def create_hide_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess()
        self.hide_excess = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        _teardown = self.teardown
        _drop_excess = self.drop_excess
        _hide_excess = self.hide_excess
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('union', _maximum)
        if _teardown is not None:
            children['teardown'] = _teardown.to_gdata()
        if _drop_excess is not None:
            children['drop-excess'] = _drop_excess.to_gdata()
        if _hide_excess is not None:
            children['hide-excess'] = _hide_excess.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit(maximum=n.get_opt_value("maximum"), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown.from_gdata(n.get_opt_container("teardown")), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess.from_gdata(n.get_opt_container("drop-excess")), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess.from_gdata(n.get_opt_container("hide-excess")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit(maximum=yang.gdata.from_xml_opt_value(n, "maximum"), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown.from_xml(yang.gdata.get_xml_opt_child(n, "teardown")), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess.from_xml(yang.gdata.get_xml_opt_child(n, "drop-excess")), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess.from_xml(yang.gdata.get_xml_opt_child(n, "hide-excess")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group__ribgroup_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group(yang.adata.MNode):
    ribgroup_name: ?str

    mut def __init__(self, ribgroup_name: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.ribgroup_name = ribgroup_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ribgroup_name = self.ribgroup_name
        if _ribgroup_name is not None:
            children['ribgroup-name'] = yang.gdata.Leaf('string', _ribgroup_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group(ribgroup_name=n.get_opt_str("ribgroup-name"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group(ribgroup_name=yang.gdata.from_xml_opt_str(n, "ribgroup-name"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode__all_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode__equal_cost_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode(yang.adata.MNode):
    all_paths: ?bool
    equal_cost_paths: ?bool

    mut def __init__(self, all_paths: ?bool, equal_cost_paths: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.all_paths = all_paths
        self.equal_cost_paths = equal_cost_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _all_paths = self.all_paths
        _equal_cost_paths = self.equal_cost_paths
        if _all_paths is not None:
            children['all-paths'] = yang.gdata.Leaf('empty', _all_paths)
        if _equal_cost_paths is not None:
            children['equal-cost-paths'] = yang.gdata.Leaf('empty', _equal_cost_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode(all_paths=n.get_opt_bool("all-paths"), equal_cost_paths=n.get_opt_bool("equal-cost-paths"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode(all_paths=yang.gdata.from_xml_opt_bool(n, "all-paths"), equal_cost_paths=yang.gdata.from_xml_opt_bool(n, "equal-cost-paths"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__prefix_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_count(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__include_backup_path(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send(yang.adata.MNode):
    path_selection_mode: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode
    prefix_policy: list[str]
    path_count: ?value
    include_backup_path: ?value
    multipath: ?bool

    mut def __init__(self, path_selection_mode: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode=None, prefix_policy: ?list[str]=None, path_count: ?value, include_backup_path: ?value, multipath: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if path_selection_mode is not None:
            self.path_selection_mode = path_selection_mode
        else:
            self.path_selection_mode = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode()
        if prefix_policy is not None:
            self.prefix_policy = prefix_policy
        else:
            self.prefix_policy = []
        self.path_count = path_count
        self.include_backup_path = include_backup_path
        self.multipath = multipath

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _path_selection_mode = self.path_selection_mode
        _path_count = self.path_count
        _include_backup_path = self.include_backup_path
        _multipath = self.multipath
        if _path_selection_mode is not None:
            children['path-selection-mode'] = _path_selection_mode.to_gdata()
        children['prefix-policy'] = yang.gdata.LeafList(self.prefix_policy)
        if _path_count is not None:
            children['path-count'] = yang.gdata.Leaf('union', _path_count)
        if _include_backup_path is not None:
            children['include-backup-path'] = yang.gdata.Leaf('union', _include_backup_path)
        if _multipath is not None:
            children['multipath'] = yang.gdata.Leaf('empty', _multipath)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send(path_selection_mode=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode.from_gdata(n.get_opt_container("path-selection-mode")), prefix_policy=n.get_opt_strs("prefix-policy"), path_count=n.get_opt_value("path-count"), include_backup_path=n.get_opt_value("include-backup-path"), multipath=n.get_opt_bool("multipath"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send(path_selection_mode=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode.from_xml(yang.gdata.get_xml_opt_child(n, "path-selection-mode")), prefix_policy=yang.gdata.from_xml_opt_strs(n, "prefix-policy"), path_count=yang.gdata.from_xml_opt_value(n, "path-count"), include_backup_path=yang.gdata.from_xml_opt_value(n, "include-backup-path"), multipath=yang.gdata.from_xml_opt_bool(n, "multipath"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path(yang.adata.MNode):
    receive: ?bool
    send: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send

    mut def __init__(self, receive: ?bool, send: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.receive = receive
        self.send = send

    mut def create_send(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send()
        self.send = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        _send = self.send
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('empty', _receive)
        if _send is not None:
            children['send'] = _send.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path(receive=n.get_opt_bool("receive"), send=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send.from_gdata(n.get_opt_container("send")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path(receive=yang.gdata.from_xml_opt_bool(n, "receive"), send=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send.from_xml(yang.gdata.get_xml_opt_child(n, "send")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp(yang.adata.MNode):
    disable: ?bool

    mut def __init__(self, disable: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.disable = disable

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp(disable=n.get_opt_bool("disable"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp(disable=yang.gdata.from_xml_opt_bool(n, "disable"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__local_ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops__loops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops(yang.adata.MNode):
    loops: ?value

    mut def __init__(self, loops: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.loops = loops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _loops = self.loops
        if _loops is not None:
            children['loops'] = yang.gdata.Leaf('union', _loops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops(loops=n.get_opt_value("loops"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops(loops=yang.gdata.from_xml_opt_value(n, "loops"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__always_wait_for_krt_drain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay__routing_uptime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay__inbound_convergence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay(yang.adata.MNode):
    routing_uptime: ?value
    inbound_convergence: ?value

    mut def __init__(self, routing_uptime: ?value, inbound_convergence: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.routing_uptime = routing_uptime
        self.inbound_convergence = inbound_convergence

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _routing_uptime = self.routing_uptime
        _inbound_convergence = self.inbound_convergence
        if _routing_uptime is not None:
            children['routing-uptime'] = yang.gdata.Leaf('union', _routing_uptime)
        if _inbound_convergence is not None:
            children['inbound-convergence'] = yang.gdata.Leaf('union', _inbound_convergence)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay(routing_uptime=n.get_opt_value("routing-uptime"), inbound_convergence=n.get_opt_value("inbound-convergence"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay(routing_uptime=yang.gdata.from_xml_opt_value(n, "routing-uptime"), inbound_convergence=yang.gdata.from_xml_opt_value(n, "inbound-convergence"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay__route_age(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay__routing_uptime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay(yang.adata.MNode):
    route_age: ?value
    routing_uptime: ?value

    mut def __init__(self, route_age: ?value, routing_uptime: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.route_age = route_age
        self.routing_uptime = routing_uptime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_age = self.route_age
        _routing_uptime = self.routing_uptime
        if _route_age is not None:
            children['route-age'] = yang.gdata.Leaf('union', _route_age)
        if _routing_uptime is not None:
            children['routing-uptime'] = yang.gdata.Leaf('union', _routing_uptime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay(route_age=n.get_opt_value("route-age"), routing_uptime=n.get_opt_value("routing-uptime"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay(route_age=yang.gdata.from_xml_opt_value(n, "route-age"), routing_uptime=yang.gdata.from_xml_opt_value(n, "routing-uptime"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay()


class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements(yang.adata.MNode):
    always_wait_for_krt_drain: ?bool
    minimum_delay: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay
    maximum_delay: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay

    mut def __init__(self, always_wait_for_krt_drain: ?bool, minimum_delay: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay=None, maximum_delay: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.always_wait_for_krt_drain = always_wait_for_krt_drain
        if minimum_delay is not None:
            self.minimum_delay = minimum_delay
        else:
            self.minimum_delay = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay()
        if maximum_delay is not None:
            self.maximum_delay = maximum_delay
        else:
            self.maximum_delay = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always_wait_for_krt_drain = self.always_wait_for_krt_drain
        _minimum_delay = self.minimum_delay
        _maximum_delay = self.maximum_delay
        if _always_wait_for_krt_drain is not None:
            children['always-wait-for-krt-drain'] = yang.gdata.Leaf('empty', _always_wait_for_krt_drain)
        if _minimum_delay is not None:
            children['minimum-delay'] = _minimum_delay.to_gdata()
        if _maximum_delay is not None:
            children['maximum-delay'] = _maximum_delay.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements(always_wait_for_krt_drain=n.get_opt_bool("always-wait-for-krt-drain"), minimum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay.from_gdata(n.get_opt_container("minimum-delay")), maximum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay.from_gdata(n.get_opt_container("maximum-delay")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements(always_wait_for_krt_drain=yang.gdata.from_xml_opt_bool(n, "always-wait-for-krt-drain"), minimum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay.from_xml(yang.gdata.get_xml_opt_child(n, "minimum-delay")), maximum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay.from_xml(yang.gdata.get_xml_opt_child(n, "maximum-delay")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution__no_resolution(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution__preserve_nexthop_hierarchy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution(yang.adata.MNode):
    no_resolution: ?bool
    preserve_nexthop_hierarchy: ?bool

    mut def __init__(self, no_resolution: ?bool, preserve_nexthop_hierarchy: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.no_resolution = no_resolution
        self.preserve_nexthop_hierarchy = preserve_nexthop_hierarchy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _no_resolution = self.no_resolution
        _preserve_nexthop_hierarchy = self.preserve_nexthop_hierarchy
        if _no_resolution is not None:
            children['no-resolution'] = yang.gdata.Leaf('empty', _no_resolution)
        if _preserve_nexthop_hierarchy is not None:
            children['preserve-nexthop-hierarchy'] = yang.gdata.Leaf('empty', _preserve_nexthop_hierarchy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution(no_resolution=n.get_opt_bool("no-resolution"), preserve_nexthop_hierarchy=n.get_opt_bool("preserve-nexthop-hierarchy"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution(no_resolution=yang.gdata.from_xml_opt_bool(n, "no-resolution"), preserve_nexthop_hierarchy=yang.gdata.from_xml_opt_bool(n, "preserve-nexthop-hierarchy"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build__maximum_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build(yang.adata.MNode):
    maximum_delay: ?value

    mut def __init__(self, maximum_delay: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.maximum_delay = maximum_delay

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            children['maximum-delay'] = yang.gdata.Leaf('union', _maximum_delay)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build(maximum_delay=n.get_opt_value("maximum-delay"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build(maximum_delay=yang.gdata.from_xml_opt_value(n, "maximum-delay"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter__stale_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter(yang.adata.MNode):
    disable: ?bool
    stale_time: ?str

    mut def __init__(self, disable: ?bool, stale_time: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.disable = disable
        self.stale_time = stale_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _stale_time = self.stale_time
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _stale_time is not None:
            children['stale-time'] = yang.gdata.Leaf('string', _stale_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter(disable=n.get_opt_bool("disable"), stale_time=n.get_opt_str("stale-time"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter(disable=yang.gdata.from_xml_opt_bool(n, "disable"), stale_time=yang.gdata.from_xml_opt_str(n, "stale-time"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention(yang.adata.MNode):
    disable: ?bool
    retention_time: ?str
    retention_policy: list[str]

    mut def __init__(self, disable: ?bool, retention_time: ?str, retention_policy: ?list[str]=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.disable = disable
        self.retention_time = retention_time
        if retention_policy is not None:
            self.retention_policy = retention_policy
        else:
            self.retention_policy = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _retention_time = self.retention_time
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _retention_time is not None:
            children['retention-time'] = yang.gdata.Leaf('string', _retention_time)
        children['retention-policy'] = yang.gdata.LeafList(self.retention_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention(disable=n.get_opt_bool("disable"), retention_time=n.get_opt_str("retention-time"), retention_policy=n.get_opt_strs("retention-policy"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention(disable=yang.gdata.from_xml_opt_bool(n, "disable"), retention_time=yang.gdata.from_xml_opt_str(n, "retention-time"), retention_policy=yang.gdata.from_xml_opt_strs(n, "retention-policy"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention()


class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived(yang.adata.MNode):
    restarter: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter
    extended_route_retention: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention

    mut def __init__(self, restarter: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter=None, extended_route_retention: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if restarter is not None:
            self.restarter = restarter
        else:
            self.restarter = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter()
        if extended_route_retention is not None:
            self.extended_route_retention = extended_route_retention
        else:
            self.extended_route_retention = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restarter = self.restarter
        _extended_route_retention = self.extended_route_retention
        if _restarter is not None:
            children['restarter'] = _restarter.to_gdata()
        if _extended_route_retention is not None:
            children['extended-route-retention'] = _extended_route_retention.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived(restarter=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter.from_gdata(n.get_opt_container("restarter")), extended_route_retention=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention.from_gdata(n.get_opt_container("extended-route-retention")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived(restarter=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter.from_xml(yang.gdata.get_xml_opt_child(n, "restarter")), extended_route_retention=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention.from_xml(yang.gdata.get_xml_opt_child(n, "extended-route-retention")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__forwarding_state_bit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart(yang.adata.MNode):
    long_lived: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived
    forwarding_state_bit: ?str

    mut def __init__(self, long_lived: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived=None, forwarding_state_bit: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if long_lived is not None:
            self.long_lived = long_lived
        else:
            self.long_lived = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived()
        self.forwarding_state_bit = forwarding_state_bit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _long_lived = self.long_lived
        _forwarding_state_bit = self.forwarding_state_bit
        if _long_lived is not None:
            children['long-lived'] = _long_lived.to_gdata()
        if _forwarding_state_bit is not None:
            children['forwarding-state-bit'] = yang.gdata.Leaf('enumeration', _forwarding_state_bit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart(long_lived=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived.from_gdata(n.get_opt_container("long-lived")), forwarding_state_bit=n.get_opt_str("forwarding-state-bit"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart(long_lived=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived.from_xml(yang.gdata.get_xml_opt_child(n, "long-lived")), forwarding_state_bit=yang.gdata.from_xml_opt_str(n, "forwarding-state-bit"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop_color(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop_tunnel(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__no_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_age_bgp_view(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        _expedited = self.expedited
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority(priority=n.get_opt_value("priority"), expedited=n.get_opt_bool("expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority(priority=yang.gdata.from_xml_opt_value(n, "priority"), expedited=yang.gdata.from_xml_opt_bool(n, "expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        _expedited = self.expedited
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority(priority=n.get_opt_value("priority"), expedited=n.get_opt_bool("expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority(priority=yang.gdata.from_xml_opt_value(n, "priority"), expedited=yang.gdata.from_xml_opt_bool(n, "expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        _expedited = self.expedited
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority(priority=n.get_opt_value("priority"), expedited=n.get_opt_bool("expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority(priority=yang.gdata.from_xml_opt_value(n, "priority"), expedited=yang.gdata.from_xml_opt_bool(n, "expedited"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__advertise_srv6_service(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_srv6_service(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label(yang.adata.MNode):
    community: ?str

    mut def __init__(self, community: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.community = community

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label(community=n.get_opt_str("community"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label(community=yang.gdata.from_xml_opt_str(n, "community"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier__context_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier(yang.adata.MNode):
    context_id: ?str

    mut def __init__(self, context_id: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.context_id = context_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _context_id = self.context_id
        if _context_id is not None:
            children['context-id'] = yang.gdata.Leaf('string', _context_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier(context_id=n.get_opt_str("context-id"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier(context_id=yang.gdata.from_xml_opt_str(n, "context-id"))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__keep_import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection(yang.adata.MNode):
    context_identifier: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier
    keep_import: list[str]

    mut def __init__(self, context_identifier: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier=None, keep_import: ?list[str]=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if context_identifier is not None:
            self.context_identifier = context_identifier
        else:
            self.context_identifier = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier()
        if keep_import is not None:
            self.keep_import = keep_import
        else:
            self.keep_import = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _context_identifier = self.context_identifier
        if _context_identifier is not None:
            children['context-identifier'] = _context_identifier.to_gdata()
        children['keep-import'] = yang.gdata.LeafList(self.keep_import)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection(context_identifier=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier.from_gdata(n.get_opt_container("context-identifier")), keep_import=n.get_opt_strs("keep-import"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection(context_identifier=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier.from_xml(yang.gdata.get_xml_opt_child(n, "context-identifier")), keep_import=yang.gdata.from_xml_opt_strs(n, "keep-import"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_local_nexthop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_own(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast(yang.adata.MNode):
    prefix_limit: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit
    accepted_prefix_limit: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit
    rib_group: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group
    add_path: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path
    aigp: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp
    damping: ?bool
    local_ipv4_address: ?str
    loops: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops
    delay_route_advertisements: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements
    nexthop_resolution: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution
    defer_initial_multipath_build: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build
    graceful_restart: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart
    extended_nexthop: ?bool
    extended_nexthop_color: ?bool
    extended_nexthop_tunnel: ?bool
    no_install: ?bool
    route_age_bgp_view: ?bool
    output_queue_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority
    route_refresh_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority
    withdraw_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority
    advertise_srv6_service: ?bool
    accept_srv6_service: ?bool
    aggregate_label: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label
    egress_protection: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection
    accept_local_nexthop: ?bool
    accept_own: ?bool

    mut def __init__(self, prefix_limit: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit=None, accepted_prefix_limit: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit=None, rib_group: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group=None, add_path: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path=None, aigp: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp=None, damping: ?bool, local_ipv4_address: ?str, loops: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops=None, delay_route_advertisements: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements=None, nexthop_resolution: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution=None, defer_initial_multipath_build: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build=None, graceful_restart: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart=None, extended_nexthop: ?bool, extended_nexthop_color: ?bool, extended_nexthop_tunnel: ?bool, no_install: ?bool, route_age_bgp_view: ?bool, output_queue_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority=None, route_refresh_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority=None, withdraw_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority=None, advertise_srv6_service: ?bool, accept_srv6_service: ?bool, aggregate_label: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label=None, egress_protection: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection=None, accept_local_nexthop: ?bool, accept_own: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if prefix_limit is not None:
            self.prefix_limit = prefix_limit
        else:
            self.prefix_limit = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit()
        if accepted_prefix_limit is not None:
            self.accepted_prefix_limit = accepted_prefix_limit
        else:
            self.accepted_prefix_limit = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit()
        if rib_group is not None:
            self.rib_group = rib_group
        else:
            self.rib_group = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group()
        if add_path is not None:
            self.add_path = add_path
        else:
            self.add_path = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path()
        self.aigp = aigp
        self.damping = damping
        self.local_ipv4_address = local_ipv4_address
        if loops is not None:
            self.loops = loops
        else:
            self.loops = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops()
        self.delay_route_advertisements = delay_route_advertisements
        if nexthop_resolution is not None:
            self.nexthop_resolution = nexthop_resolution
        else:
            self.nexthop_resolution = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution()
        self.defer_initial_multipath_build = defer_initial_multipath_build
        if graceful_restart is not None:
            self.graceful_restart = graceful_restart
        else:
            self.graceful_restart = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart()
        self.extended_nexthop = extended_nexthop
        self.extended_nexthop_color = extended_nexthop_color
        self.extended_nexthop_tunnel = extended_nexthop_tunnel
        self.no_install = no_install
        self.route_age_bgp_view = route_age_bgp_view
        if output_queue_priority is not None:
            self.output_queue_priority = output_queue_priority
        else:
            self.output_queue_priority = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority()
        if route_refresh_priority is not None:
            self.route_refresh_priority = route_refresh_priority
        else:
            self.route_refresh_priority = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority()
        if withdraw_priority is not None:
            self.withdraw_priority = withdraw_priority
        else:
            self.withdraw_priority = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority()
        self.advertise_srv6_service = advertise_srv6_service
        self.accept_srv6_service = accept_srv6_service
        self.aggregate_label = aggregate_label
        self.egress_protection = egress_protection
        self.accept_local_nexthop = accept_local_nexthop
        self.accept_own = accept_own

    mut def create_aigp(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp()
        self.aigp = res
        return res

    mut def create_delay_route_advertisements(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements()
        self.delay_route_advertisements = res
        return res

    mut def create_defer_initial_multipath_build(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build()
        self.defer_initial_multipath_build = res
        return res

    mut def create_aggregate_label(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label()
        self.aggregate_label = res
        return res

    mut def create_egress_protection(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection()
        self.egress_protection = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit = self.prefix_limit
        _accepted_prefix_limit = self.accepted_prefix_limit
        _rib_group = self.rib_group
        _add_path = self.add_path
        _aigp = self.aigp
        _damping = self.damping
        _local_ipv4_address = self.local_ipv4_address
        _loops = self.loops
        _delay_route_advertisements = self.delay_route_advertisements
        _nexthop_resolution = self.nexthop_resolution
        _defer_initial_multipath_build = self.defer_initial_multipath_build
        _graceful_restart = self.graceful_restart
        _extended_nexthop = self.extended_nexthop
        _extended_nexthop_color = self.extended_nexthop_color
        _extended_nexthop_tunnel = self.extended_nexthop_tunnel
        _no_install = self.no_install
        _route_age_bgp_view = self.route_age_bgp_view
        _output_queue_priority = self.output_queue_priority
        _route_refresh_priority = self.route_refresh_priority
        _withdraw_priority = self.withdraw_priority
        _advertise_srv6_service = self.advertise_srv6_service
        _accept_srv6_service = self.accept_srv6_service
        _aggregate_label = self.aggregate_label
        _egress_protection = self.egress_protection
        _accept_local_nexthop = self.accept_local_nexthop
        _accept_own = self.accept_own
        if _prefix_limit is not None:
            children['prefix-limit'] = _prefix_limit.to_gdata()
        if _accepted_prefix_limit is not None:
            children['accepted-prefix-limit'] = _accepted_prefix_limit.to_gdata()
        if _rib_group is not None:
            children['rib-group'] = _rib_group.to_gdata()
        if _add_path is not None:
            children['add-path'] = _add_path.to_gdata()
        if _aigp is not None:
            children['aigp'] = _aigp.to_gdata()
        if _damping is not None:
            children['damping'] = yang.gdata.Leaf('empty', _damping)
        if _local_ipv4_address is not None:
            children['local-ipv4-address'] = yang.gdata.Leaf('string', _local_ipv4_address)
        if _loops is not None:
            children['loops'] = _loops.to_gdata()
        if _delay_route_advertisements is not None:
            children['delay-route-advertisements'] = _delay_route_advertisements.to_gdata()
        if _nexthop_resolution is not None:
            children['nexthop-resolution'] = _nexthop_resolution.to_gdata()
        if _defer_initial_multipath_build is not None:
            children['defer-initial-multipath-build'] = _defer_initial_multipath_build.to_gdata()
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        if _extended_nexthop is not None:
            children['extended-nexthop'] = yang.gdata.Leaf('empty', _extended_nexthop)
        if _extended_nexthop_color is not None:
            children['extended-nexthop-color'] = yang.gdata.Leaf('empty', _extended_nexthop_color)
        if _extended_nexthop_tunnel is not None:
            children['extended-nexthop-tunnel'] = yang.gdata.Leaf('empty', _extended_nexthop_tunnel)
        if _no_install is not None:
            children['no-install'] = yang.gdata.Leaf('empty', _no_install)
        if _route_age_bgp_view is not None:
            children['route-age-bgp-view'] = yang.gdata.Leaf('empty', _route_age_bgp_view)
        if _output_queue_priority is not None:
            children['output-queue-priority'] = _output_queue_priority.to_gdata()
        if _route_refresh_priority is not None:
            children['route-refresh-priority'] = _route_refresh_priority.to_gdata()
        if _withdraw_priority is not None:
            children['withdraw-priority'] = _withdraw_priority.to_gdata()
        if _advertise_srv6_service is not None:
            children['advertise-srv6-service'] = yang.gdata.Leaf('empty', _advertise_srv6_service)
        if _accept_srv6_service is not None:
            children['accept-srv6-service'] = yang.gdata.Leaf('empty', _accept_srv6_service)
        if _aggregate_label is not None:
            children['aggregate-label'] = _aggregate_label.to_gdata()
        if _egress_protection is not None:
            children['egress-protection'] = _egress_protection.to_gdata()
        if _accept_local_nexthop is not None:
            children['accept-local-nexthop'] = yang.gdata.Leaf('empty', _accept_local_nexthop)
        if _accept_own is not None:
            children['accept-own'] = yang.gdata.Leaf('empty', _accept_own)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast(prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit.from_gdata(n.get_opt_container("prefix-limit")), accepted_prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit.from_gdata(n.get_opt_container("accepted-prefix-limit")), rib_group=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group.from_gdata(n.get_opt_container("rib-group")), add_path=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path.from_gdata(n.get_opt_container("add-path")), aigp=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp.from_gdata(n.get_opt_container("aigp")), damping=n.get_opt_bool("damping"), local_ipv4_address=n.get_opt_str("local-ipv4-address"), loops=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops.from_gdata(n.get_opt_container("loops")), delay_route_advertisements=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements.from_gdata(n.get_opt_container("delay-route-advertisements")), nexthop_resolution=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution.from_gdata(n.get_opt_container("nexthop-resolution")), defer_initial_multipath_build=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build.from_gdata(n.get_opt_container("defer-initial-multipath-build")), graceful_restart=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart.from_gdata(n.get_opt_container("graceful-restart")), extended_nexthop=n.get_opt_bool("extended-nexthop"), extended_nexthop_color=n.get_opt_bool("extended-nexthop-color"), extended_nexthop_tunnel=n.get_opt_bool("extended-nexthop-tunnel"), no_install=n.get_opt_bool("no-install"), route_age_bgp_view=n.get_opt_bool("route-age-bgp-view"), output_queue_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority.from_gdata(n.get_opt_container("output-queue-priority")), route_refresh_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority.from_gdata(n.get_opt_container("route-refresh-priority")), withdraw_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority.from_gdata(n.get_opt_container("withdraw-priority")), advertise_srv6_service=n.get_opt_bool("advertise-srv6-service"), accept_srv6_service=n.get_opt_bool("accept-srv6-service"), aggregate_label=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label.from_gdata(n.get_opt_container("aggregate-label")), egress_protection=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection.from_gdata(n.get_opt_container("egress-protection")), accept_local_nexthop=n.get_opt_bool("accept-local-nexthop"), accept_own=n.get_opt_bool("accept-own"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast(prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit")), accepted_prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit.from_xml(yang.gdata.get_xml_opt_child(n, "accepted-prefix-limit")), rib_group=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group.from_xml(yang.gdata.get_xml_opt_child(n, "rib-group")), add_path=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path.from_xml(yang.gdata.get_xml_opt_child(n, "add-path")), aigp=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp.from_xml(yang.gdata.get_xml_opt_child(n, "aigp")), damping=yang.gdata.from_xml_opt_bool(n, "damping"), local_ipv4_address=yang.gdata.from_xml_opt_str(n, "local-ipv4-address"), loops=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops.from_xml(yang.gdata.get_xml_opt_child(n, "loops")), delay_route_advertisements=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements.from_xml(yang.gdata.get_xml_opt_child(n, "delay-route-advertisements")), nexthop_resolution=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "nexthop-resolution")), defer_initial_multipath_build=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build.from_xml(yang.gdata.get_xml_opt_child(n, "defer-initial-multipath-build")), graceful_restart=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-restart")), extended_nexthop=yang.gdata.from_xml_opt_bool(n, "extended-nexthop"), extended_nexthop_color=yang.gdata.from_xml_opt_bool(n, "extended-nexthop-color"), extended_nexthop_tunnel=yang.gdata.from_xml_opt_bool(n, "extended-nexthop-tunnel"), no_install=yang.gdata.from_xml_opt_bool(n, "no-install"), route_age_bgp_view=yang.gdata.from_xml_opt_bool(n, "route-age-bgp-view"), output_queue_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority.from_xml(yang.gdata.get_xml_opt_child(n, "output-queue-priority")), route_refresh_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority.from_xml(yang.gdata.get_xml_opt_child(n, "route-refresh-priority")), withdraw_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority.from_xml(yang.gdata.get_xml_opt_child(n, "withdraw-priority")), advertise_srv6_service=yang.gdata.from_xml_opt_bool(n, "advertise-srv6-service"), accept_srv6_service=yang.gdata.from_xml_opt_bool(n, "accept-srv6-service"), aggregate_label=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label.from_xml(yang.gdata.get_xml_opt_child(n, "aggregate-label")), egress_protection=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection.from_xml(yang.gdata.get_xml_opt_child(n, "egress-protection")), accept_local_nexthop=yang.gdata.from_xml_opt_bool(n, "accept-local-nexthop"), accept_own=yang.gdata.from_xml_opt_bool(n, "accept-own"))
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(yang.adata.MNode):
    unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast

    mut def __init__(self, unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.unicast = unicast

    mut def create_unicast(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(unicast=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast.from_gdata(n.get_opt_container("unicast")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(unicast=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast.from_xml(yang.gdata.get_xml_opt_child(n, "unicast")))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()


class junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()
        return None


class junos_conf_root__configuration__protocols__bgp__group__family__evpn(yang.adata.MNode):
    signaling: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling

    mut def __init__(self, signaling: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.signaling = signaling

    mut def create_signaling(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()
        self.signaling = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _signaling = self.signaling
        if _signaling is not None:
            children['signaling'] = _signaling.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__evpn:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__evpn(signaling=junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling.from_gdata(n.get_opt_container("signaling")))
        return junos_conf_root__configuration__protocols__bgp__group__family__evpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__evpn:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__evpn(signaling=junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling.from_xml(yang.gdata.get_xml_opt_child(n, "signaling")))
        return junos_conf_root__configuration__protocols__bgp__group__family__evpn()


class junos_conf_root__configuration__protocols__bgp__group__family__route_target(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__route_target:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__route_target()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__route_target:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family__route_target()
        return None


class junos_conf_root__configuration__protocols__bgp__group__family(yang.adata.MNode):
    inet_vpn: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn
    inet6_vpn: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn
    evpn: junos_conf_root__configuration__protocols__bgp__group__family__evpn
    route_target: ?junos_conf_root__configuration__protocols__bgp__group__family__route_target

    mut def __init__(self, inet_vpn: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn=None, inet6_vpn: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn=None, evpn: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn=None, route_target: ?junos_conf_root__configuration__protocols__bgp__group__family__route_target=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if inet_vpn is not None:
            self.inet_vpn = inet_vpn
        else:
            self.inet_vpn = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()
        if inet6_vpn is not None:
            self.inet6_vpn = inet6_vpn
        else:
            self.inet6_vpn = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()
        if evpn is not None:
            self.evpn = evpn
        else:
            self.evpn = junos_conf_root__configuration__protocols__bgp__group__family__evpn()
        self.route_target = route_target

    mut def create_route_target(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__route_target()
        self.route_target = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet_vpn = self.inet_vpn
        _inet6_vpn = self.inet6_vpn
        _evpn = self.evpn
        _route_target = self.route_target
        if _inet_vpn is not None:
            children['inet-vpn'] = _inet_vpn.to_gdata()
        if _inet6_vpn is not None:
            children['inet6-vpn'] = _inet6_vpn.to_gdata()
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family(inet_vpn=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn.from_gdata(n.get_opt_container("inet-vpn")), inet6_vpn=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn.from_gdata(n.get_opt_container("inet6-vpn")), evpn=junos_conf_root__configuration__protocols__bgp__group__family__evpn.from_gdata(n.get_opt_container("evpn")), route_target=junos_conf_root__configuration__protocols__bgp__group__family__route_target.from_gdata(n.get_opt_container("route-target")))
        return junos_conf_root__configuration__protocols__bgp__group__family()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__family:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp__group__family(inet_vpn=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "inet-vpn")), inet6_vpn=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "inet6-vpn")), evpn=junos_conf_root__configuration__protocols__bgp__group__family__evpn.from_xml(yang.gdata.get_xml_opt_child(n, "evpn")), route_target=junos_conf_root__configuration__protocols__bgp__group__family__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))
        return junos_conf_root__configuration__protocols__bgp__group__family()


mut def from_json_junos_conf_root__configuration__protocols__bgp__group__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__authentication_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__tcpao_auth_mismatch(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__authentication_key_chain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__export(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__neighbor__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__bgp__group__neighbor__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(yang.adata.MNode):
    name: str
    description: ?str
    passive: ?bool

    mut def __init__(self, name: str, description: ?str, passive: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.description = description
        self.passive = passive

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _passive = self.passive
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('empty', _passive)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(name=n.get_str("name"), description=n.get_opt_str("description"), passive=n.get_opt_bool("passive"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), passive=yang.gdata.from_xml_opt_bool(n, "passive"))

class junos_conf_root__configuration__protocols__bgp__group__neighbor(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__bgp__group__neighbor_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__bgp__group__neighbor_entry.from_xml(node))
        return res


class junos_conf_root__configuration__protocols__bgp__group_entry(yang.adata.MNode):
    name: str
    type: ?str
    description: ?str
    local_address: ?str
    hold_time: ?value
    family: junos_conf_root__configuration__protocols__bgp__group__family
    authentication_key: ?str
    authentication_algorithm: ?str
    tcpao_auth_mismatch: ?str
    authentication_key_chain: ?str
    export: list[str]
    tcp_mss: ?value
    neighbor: junos_conf_root__configuration__protocols__bgp__group__neighbor

    mut def __init__(self, name: str, type: ?str, description: ?str, local_address: ?str, hold_time: ?value, family: ?junos_conf_root__configuration__protocols__bgp__group__family=None, authentication_key: ?str, authentication_algorithm: ?str, tcpao_auth_mismatch: ?str, authentication_key_chain: ?str, export: ?list[str]=None, tcp_mss: ?value, neighbor: list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.type = type
        self.description = description
        self.local_address = local_address
        self.hold_time = hold_time
        if family is not None:
            self.family = family
        else:
            self.family = junos_conf_root__configuration__protocols__bgp__group__family()
        self.authentication_key = authentication_key
        self.authentication_algorithm = authentication_algorithm
        self.tcpao_auth_mismatch = tcpao_auth_mismatch
        self.authentication_key_chain = authentication_key_chain
        if export is not None:
            self.export = export
        else:
            self.export = []
        self.tcp_mss = tcp_mss
        self.neighbor = junos_conf_root__configuration__protocols__bgp__group__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _type = self.type
        _description = self.description
        _local_address = self.local_address
        _hold_time = self.hold_time
        _family = self.family
        _authentication_key = self.authentication_key
        _authentication_algorithm = self.authentication_algorithm
        _tcpao_auth_mismatch = self.tcpao_auth_mismatch
        _authentication_key_chain = self.authentication_key_chain
        _tcp_mss = self.tcp_mss
        _neighbor = self.neighbor
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _local_address is not None:
            children['local-address'] = yang.gdata.Leaf('string', _local_address)
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        if _family is not None:
            children['family'] = _family.to_gdata()
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        if _authentication_algorithm is not None:
            children['authentication-algorithm'] = yang.gdata.Leaf('enumeration', _authentication_algorithm)
        if _tcpao_auth_mismatch is not None:
            children['tcpao-auth-mismatch'] = yang.gdata.Leaf('enumeration', _tcpao_auth_mismatch)
        if _authentication_key_chain is not None:
            children['authentication-key-chain'] = yang.gdata.Leaf('string', _authentication_key_chain)
        children['export'] = yang.gdata.LeafList(self.export)
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('union', _tcp_mss)
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group_entry:
        return junos_conf_root__configuration__protocols__bgp__group_entry(name=n.get_str("name"), type=n.get_opt_str("type"), description=n.get_opt_str("description"), local_address=n.get_opt_str("local-address"), hold_time=n.get_opt_value("hold-time"), family=junos_conf_root__configuration__protocols__bgp__group__family.from_gdata(n.get_opt_container("family")), authentication_key=n.get_opt_str("authentication-key"), authentication_algorithm=n.get_opt_str("authentication-algorithm"), tcpao_auth_mismatch=n.get_opt_str("tcpao-auth-mismatch"), authentication_key_chain=n.get_opt_str("authentication-key-chain"), export=n.get_opt_strs("export"), tcp_mss=n.get_opt_value("tcp-mss"), neighbor=junos_conf_root__configuration__protocols__bgp__group__neighbor.from_gdata(n.get_opt_list("neighbor")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__bgp__group_entry:
        return junos_conf_root__configuration__protocols__bgp__group_entry(name=yang.gdata.from_xml_str(n, "name"), type=yang.gdata.from_xml_opt_str(n, "type"), description=yang.gdata.from_xml_opt_str(n, "description"), local_address=yang.gdata.from_xml_opt_str(n, "local-address"), hold_time=yang.gdata.from_xml_opt_value(n, "hold-time"), family=junos_conf_root__configuration__protocols__bgp__group__family.from_xml(yang.gdata.get_xml_opt_child(n, "family")), authentication_key=yang.gdata.from_xml_opt_str(n, "authentication-key"), authentication_algorithm=yang.gdata.from_xml_opt_str(n, "authentication-algorithm"), tcpao_auth_mismatch=yang.gdata.from_xml_opt_str(n, "tcpao-auth-mismatch"), authentication_key_chain=yang.gdata.from_xml_opt_str(n, "authentication-key-chain"), export=yang.gdata.from_xml_opt_strs(n, "export"), tcp_mss=yang.gdata.from_xml_opt_value(n, "tcp-mss"), neighbor=junos_conf_root__configuration__protocols__bgp__group__neighbor.from_xml(yang.gdata.get_xml_children(n, "neighbor")))

class junos_conf_root__configuration__protocols__bgp__group(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__bgp__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__bgp__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__bgp__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__bgp__group_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__bgp__group_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__protocols__bgp__log_updown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__bgp(yang.adata.MNode):
    path_selection: junos_conf_root__configuration__protocols__bgp__path_selection
    group: junos_conf_root__configuration__protocols__bgp__group
    log_updown: ?bool

    mut def __init__(self, path_selection: ?junos_conf_root__configuration__protocols__bgp__path_selection=None, group: list[junos_conf_root__configuration__protocols__bgp__group_entry]=[], log_updown: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if path_selection is not None:
            self.path_selection = path_selection
        else:
            self.path_selection = junos_conf_root__configuration__protocols__bgp__path_selection()
        self.group = junos_conf_root__configuration__protocols__bgp__group(elements=group)
        self.log_updown = log_updown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _path_selection = self.path_selection
        _group = self.group
        _log_updown = self.log_updown
        if _path_selection is not None:
            children['path-selection'] = _path_selection.to_gdata()
        if _group is not None:
            children['group'] = _group.to_gdata()
        if _log_updown is not None:
            children['log-updown'] = yang.gdata.Leaf('empty', _log_updown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp(path_selection=junos_conf_root__configuration__protocols__bgp__path_selection.from_gdata(n.get_opt_container("path-selection")), group=junos_conf_root__configuration__protocols__bgp__group.from_gdata(n.get_opt_list("group")), log_updown=n.get_opt_bool("log-updown"))
        return junos_conf_root__configuration__protocols__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__bgp:
        if n != None:
            return junos_conf_root__configuration__protocols__bgp(path_selection=junos_conf_root__configuration__protocols__bgp__path_selection.from_xml(yang.gdata.get_xml_opt_child(n, "path-selection")), group=junos_conf_root__configuration__protocols__bgp__group.from_xml(yang.gdata.get_xml_children(n, "group")), log_updown=yang.gdata.from_xml_opt_bool(n, "log-updown"))
        return junos_conf_root__configuration__protocols__bgp()


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(yang.adata.MNode):
    disable: ?bool
    hold_time: ?value

    mut def __init__(self, disable: ?bool, hold_time: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.disable = disable
        self.hold_time = hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _hold_time = self.hold_time
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(disable=n.get_opt_bool("disable"), hold_time=n.get_opt_value("hold-time"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(disable=yang.gdata.from_xml_opt_bool(n, "disable"), hold_time=yang.gdata.from_xml_opt_value(n, "hold-time"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__level__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__level__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__interface__level_entry(yang.adata.MNode):
    name: value
    disable: ?bool
    metric: ?value

    mut def __init__(self, name: value, disable: ?bool, metric: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.disable = disable
        self.metric = metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _disable = self.disable
        _metric = self.metric
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('union', _metric)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__level_entry:
        return junos_conf_root__configuration__protocols__isis__interface__level_entry(name=n.get_value("name"), disable=n.get_opt_bool("disable"), metric=n.get_opt_value("metric"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__isis__interface__level_entry:
        return junos_conf_root__configuration__protocols__isis__interface__level_entry(name=yang.gdata.from_xml_value(n, "name"), disable=yang.gdata.from_xml_opt_bool(n, "disable"), metric=yang.gdata.from_xml_opt_value(n, "metric"))

class junos_conf_root__configuration__protocols__isis__interface__level(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'level'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            e_name = e.name
            if isinstance(e_name, str) and isinstance(name, str):
                if e_name != name:
                    match = False
                    continue
            e_name = e.name
            if isinstance(e_name, int) and isinstance(name, int):
                if e_name != name:
                    match = False
                    continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface__level_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__isis__interface__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__isis__interface__level_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__isis__interface__level_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__lsp_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__point_to_point(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_iso(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__isis__interface__passive(yang.adata.MNode):
    remote_node_iso: ?str
    remote_node_id: ?str

    mut def __init__(self, remote_node_iso: ?str, remote_node_id: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.remote_node_iso = remote_node_iso
        self.remote_node_id = remote_node_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _remote_node_iso = self.remote_node_iso
        _remote_node_id = self.remote_node_id
        if _remote_node_iso is not None:
            children['remote-node-iso'] = yang.gdata.Leaf('string', _remote_node_iso)
        if _remote_node_id is not None:
            children['remote-node-id'] = yang.gdata.Leaf('string', _remote_node_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__interface__passive:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__passive(remote_node_iso=n.get_opt_str("remote-node-iso"), remote_node_id=n.get_opt_str("remote-node-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__isis__interface__passive:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__passive(remote_node_iso=yang.gdata.from_xml_opt_str(n, "remote-node-iso"), remote_node_id=yang.gdata.from_xml_opt_str(n, "remote-node-id"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_transmit_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_receive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__inline_disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__pdu_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__no_adaptation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval__threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval(yang.adata.MNode):
    minimum_interval: ?value
    threshold: ?value

    mut def __init__(self, minimum_interval: ?value, threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.minimum_interval = minimum_interval
        self.threshold = threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _minimum_interval = self.minimum_interval
        _threshold = self.threshold
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('union', _minimum_interval)
        if _threshold is not None:
            children['threshold'] = yang.gdata.Leaf('union', _threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval(minimum_interval=n.get_opt_value("minimum-interval"), threshold=n.get_opt_value("threshold"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval(minimum_interval=yang.gdata.from_xml_opt_value(n, "minimum-interval"), threshold=yang.gdata.from_xml_opt_value(n, "threshold"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval()


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time__threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time(yang.adata.MNode):
    threshold: ?value

    mut def __init__(self, threshold: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.threshold = threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _threshold = self.threshold
        if _threshold is not None:
            children['threshold'] = yang.gdata.Leaf('union', _threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time(threshold=n.get_opt_value("threshold"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time(threshold=yang.gdata.from_xml_opt_value(n, "threshold"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time()


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__key_chain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__loose_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication(yang.adata.MNode):
    key_chain: ?str
    algorithm: ?str
    loose_check: ?bool

    mut def __init__(self, key_chain: ?str, algorithm: ?str, loose_check: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.key_chain = key_chain
        self.algorithm = algorithm
        self.loose_check = loose_check

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _key_chain = self.key_chain
        _algorithm = self.algorithm
        _loose_check = self.loose_check
        if _key_chain is not None:
            children['key-chain'] = yang.gdata.Leaf('string', _key_chain)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('enumeration', _algorithm)
        if _loose_check is not None:
            children['loose-check'] = yang.gdata.Leaf('empty', _loose_check)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication(key_chain=n.get_opt_str("key-chain"), algorithm=n.get_opt_str("algorithm"), loose_check=n.get_opt_bool("loose-check"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication(key_chain=yang.gdata.from_xml_opt_str(n, "key-chain"), algorithm=yang.gdata.from_xml_opt_str(n, "algorithm"), loose_check=yang.gdata.from_xml_opt_bool(n, "loose-check"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication()


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo(yang.adata.MNode):
    minimum_interval: ?value

    mut def __init__(self, minimum_interval: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.minimum_interval = minimum_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('union', _minimum_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo(minimum_interval=n.get_opt_value("minimum-interval"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo(minimum_interval=yang.gdata.from_xml_opt_value(n, "minimum-interval"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo()


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite(yang.adata.MNode):
    minimum_interval: ?value

    mut def __init__(self, minimum_interval: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.minimum_interval = minimum_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('union', _minimum_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite(minimum_interval=n.get_opt_value("minimum-interval"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite(minimum_interval=yang.gdata.from_xml_opt_value(n, "minimum-interval"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite()


mut def from_json_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__holddown_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection(yang.adata.MNode):
    version: ?str
    minimum_interval: ?value
    minimum_transmit_interval: ?value
    minimum_receive_interval: ?value
    multiplier: ?value
    inline_disable: ?bool
    pdu_size: ?value
    no_adaptation: ?bool
    transmit_interval: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval
    detection_time: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time
    authentication: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication
    echo: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo
    echo_lite: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite
    holddown_interval: ?value

    mut def __init__(self, version: ?str, minimum_interval: ?value, minimum_transmit_interval: ?value, minimum_receive_interval: ?value, multiplier: ?value, inline_disable: ?bool, pdu_size: ?value, no_adaptation: ?bool, transmit_interval: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval=None, detection_time: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time=None, authentication: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication=None, echo: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo=None, echo_lite: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite=None, holddown_interval: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.version = version
        self.minimum_interval = minimum_interval
        self.minimum_transmit_interval = minimum_transmit_interval
        self.minimum_receive_interval = minimum_receive_interval
        self.multiplier = multiplier
        self.inline_disable = inline_disable
        self.pdu_size = pdu_size
        self.no_adaptation = no_adaptation
        if transmit_interval is not None:
            self.transmit_interval = transmit_interval
        else:
            self.transmit_interval = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval()
        if detection_time is not None:
            self.detection_time = detection_time
        else:
            self.detection_time = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time()
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication()
        if echo is not None:
            self.echo = echo
        else:
            self.echo = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo()
        if echo_lite is not None:
            self.echo_lite = echo_lite
        else:
            self.echo_lite = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite()
        self.holddown_interval = holddown_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _version = self.version
        _minimum_interval = self.minimum_interval
        _minimum_transmit_interval = self.minimum_transmit_interval
        _minimum_receive_interval = self.minimum_receive_interval
        _multiplier = self.multiplier
        _inline_disable = self.inline_disable
        _pdu_size = self.pdu_size
        _no_adaptation = self.no_adaptation
        _transmit_interval = self.transmit_interval
        _detection_time = self.detection_time
        _authentication = self.authentication
        _echo = self.echo
        _echo_lite = self.echo_lite
        _holddown_interval = self.holddown_interval
        if _version is not None:
            children['version'] = yang.gdata.Leaf('enumeration', _version)
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('union', _minimum_interval)
        if _minimum_transmit_interval is not None:
            children['minimum-transmit-interval'] = yang.gdata.Leaf('union', _minimum_transmit_interval)
        if _minimum_receive_interval is not None:
            children['minimum-receive-interval'] = yang.gdata.Leaf('union', _minimum_receive_interval)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('union', _multiplier)
        if _inline_disable is not None:
            children['inline-disable'] = yang.gdata.Leaf('empty', _inline_disable)
        if _pdu_size is not None:
            children['pdu-size'] = yang.gdata.Leaf('union', _pdu_size)
        if _no_adaptation is not None:
            children['no-adaptation'] = yang.gdata.Leaf('empty', _no_adaptation)
        if _transmit_interval is not None:
            children['transmit-interval'] = _transmit_interval.to_gdata()
        if _detection_time is not None:
            children['detection-time'] = _detection_time.to_gdata()
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        if _echo is not None:
            children['echo'] = _echo.to_gdata()
        if _echo_lite is not None:
            children['echo-lite'] = _echo_lite.to_gdata()
        if _holddown_interval is not None:
            children['holddown-interval'] = yang.gdata.Leaf('union', _holddown_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection(version=n.get_opt_str("version"), minimum_interval=n.get_opt_value("minimum-interval"), minimum_transmit_interval=n.get_opt_value("minimum-transmit-interval"), minimum_receive_interval=n.get_opt_value("minimum-receive-interval"), multiplier=n.get_opt_value("multiplier"), inline_disable=n.get_opt_bool("inline-disable"), pdu_size=n.get_opt_value("pdu-size"), no_adaptation=n.get_opt_bool("no-adaptation"), transmit_interval=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval.from_gdata(n.get_opt_container("transmit-interval")), detection_time=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time.from_gdata(n.get_opt_container("detection-time")), authentication=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication.from_gdata(n.get_opt_container("authentication")), echo=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo.from_gdata(n.get_opt_container("echo")), echo_lite=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite.from_gdata(n.get_opt_container("echo-lite")), holddown_interval=n.get_opt_value("holddown-interval"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection(version=yang.gdata.from_xml_opt_str(n, "version"), minimum_interval=yang.gdata.from_xml_opt_value(n, "minimum-interval"), minimum_transmit_interval=yang.gdata.from_xml_opt_value(n, "minimum-transmit-interval"), minimum_receive_interval=yang.gdata.from_xml_opt_value(n, "minimum-receive-interval"), multiplier=yang.gdata.from_xml_opt_value(n, "multiplier"), inline_disable=yang.gdata.from_xml_opt_bool(n, "inline-disable"), pdu_size=yang.gdata.from_xml_opt_value(n, "pdu-size"), no_adaptation=yang.gdata.from_xml_opt_bool(n, "no-adaptation"), transmit_interval=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval.from_xml(yang.gdata.get_xml_opt_child(n, "transmit-interval")), detection_time=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time.from_xml(yang.gdata.get_xml_opt_child(n, "detection-time")), authentication=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication.from_xml(yang.gdata.get_xml_opt_child(n, "authentication")), echo=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo.from_xml(yang.gdata.get_xml_opt_child(n, "echo")), echo_lite=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite.from_xml(yang.gdata.get_xml_opt_child(n, "echo-lite")), holddown_interval=yang.gdata.from_xml_opt_value(n, "holddown-interval"))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection()


class junos_conf_root__configuration__protocols__isis__interface__family_entry(yang.adata.MNode):
    name: str
    bfd_liveness_detection: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection

    mut def __init__(self, name: str, bfd_liveness_detection: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        if bfd_liveness_detection is not None:
            self.bfd_liveness_detection = bfd_liveness_detection
        else:
            self.bfd_liveness_detection = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _bfd_liveness_detection = self.bfd_liveness_detection
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        if _bfd_liveness_detection is not None:
            children['bfd-liveness-detection'] = _bfd_liveness_detection.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family_entry:
        return junos_conf_root__configuration__protocols__isis__interface__family_entry(name=n.get_str("name"), bfd_liveness_detection=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection.from_gdata(n.get_opt_container("bfd-liveness-detection")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__isis__interface__family_entry:
        return junos_conf_root__configuration__protocols__isis__interface__family_entry(name=yang.gdata.from_xml_str(n, "name"), bfd_liveness_detection=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection.from_xml(yang.gdata.get_xml_opt_child(n, "bfd-liveness-detection")))

class junos_conf_root__configuration__protocols__isis__interface__family(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface__family_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'family'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface__family_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface__family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__isis__interface__family_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__isis__interface__family_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__isis__interface__family_entry.from_xml(node))
        return res


class junos_conf_root__configuration__protocols__isis__interface_entry(yang.adata.MNode):
    name: str
    ldp_synchronization: ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization
    level: junos_conf_root__configuration__protocols__isis__interface__level
    lsp_interval: ?value
    point_to_point: ?bool
    passive: ?junos_conf_root__configuration__protocols__isis__interface__passive
    family: junos_conf_root__configuration__protocols__isis__interface__family

    mut def __init__(self, name: str, ldp_synchronization: ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization=None, level: list[junos_conf_root__configuration__protocols__isis__interface__level_entry]=[], lsp_interval: ?value, point_to_point: ?bool, passive: ?junos_conf_root__configuration__protocols__isis__interface__passive=None, family: list[junos_conf_root__configuration__protocols__isis__interface__family_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.ldp_synchronization = ldp_synchronization
        self.level = junos_conf_root__configuration__protocols__isis__interface__level(elements=level)
        self.lsp_interval = lsp_interval
        self.point_to_point = point_to_point
        self.passive = passive
        self.family = junos_conf_root__configuration__protocols__isis__interface__family(elements=family)

    mut def create_ldp_synchronization(self):
        res = junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization()
        self.ldp_synchronization = res
        return res

    mut def create_passive(self):
        res = junos_conf_root__configuration__protocols__isis__interface__passive()
        self.passive = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _ldp_synchronization = self.ldp_synchronization
        _level = self.level
        _lsp_interval = self.lsp_interval
        _point_to_point = self.point_to_point
        _passive = self.passive
        _family = self.family
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        if _ldp_synchronization is not None:
            children['ldp-synchronization'] = _ldp_synchronization.to_gdata()
        if _level is not None:
            children['level'] = _level.to_gdata()
        if _lsp_interval is not None:
            children['lsp-interval'] = yang.gdata.Leaf('union', _lsp_interval)
        if _point_to_point is not None:
            children['point-to-point'] = yang.gdata.Leaf('empty', _point_to_point)
        if _passive is not None:
            children['passive'] = _passive.to_gdata()
        if _family is not None:
            children['family'] = _family.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface_entry:
        return junos_conf_root__configuration__protocols__isis__interface_entry(name=n.get_str("name"), ldp_synchronization=junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization.from_gdata(n.get_opt_container("ldp-synchronization")), level=junos_conf_root__configuration__protocols__isis__interface__level.from_gdata(n.get_opt_list("level")), lsp_interval=n.get_opt_value("lsp-interval"), point_to_point=n.get_opt_bool("point-to-point"), passive=junos_conf_root__configuration__protocols__isis__interface__passive.from_gdata(n.get_opt_container("passive")), family=junos_conf_root__configuration__protocols__isis__interface__family.from_gdata(n.get_opt_list("family")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__isis__interface_entry:
        return junos_conf_root__configuration__protocols__isis__interface_entry(name=yang.gdata.from_xml_str(n, "name"), ldp_synchronization=junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization.from_xml(yang.gdata.get_xml_opt_child(n, "ldp-synchronization")), level=junos_conf_root__configuration__protocols__isis__interface__level.from_xml(yang.gdata.get_xml_children(n, "level")), lsp_interval=yang.gdata.from_xml_opt_value(n, "lsp-interval"), point_to_point=yang.gdata.from_xml_opt_bool(n, "point-to-point"), passive=junos_conf_root__configuration__protocols__isis__interface__passive.from_xml(yang.gdata.get_xml_opt_child(n, "passive")), family=junos_conf_root__configuration__protocols__isis__interface__family.from_xml(yang.gdata.get_xml_children(n, "family")))

class junos_conf_root__configuration__protocols__isis__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__isis__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__isis__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__isis__interface_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment(yang.adata.MNode):
    hold_time: ?value

    mut def __init__(self, hold_time: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.hold_time = hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment(hold_time=n.get_opt_value("hold-time"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment(hold_time=yang.gdata.from_xml_opt_value(n, "hold-time"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment()


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling__decapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling(yang.adata.MNode):
    encapsulation: ?bool
    decapsulation: ?bool

    mut def __init__(self, encapsulation: ?bool, decapsulation: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.encapsulation = encapsulation
        self.decapsulation = decapsulation

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encapsulation = self.encapsulation
        _decapsulation = self.decapsulation
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('empty', _encapsulation)
        if _decapsulation is not None:
            children['decapsulation'] = yang.gdata.Leaf('empty', _decapsulation)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling(encapsulation=n.get_opt_bool("encapsulation"), decapsulation=n.get_opt_bool("decapsulation"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling(encapsulation=yang.gdata.from_xml_opt_bool(n, "encapsulation"), decapsulation=yang.gdata.from_xml_opt_bool(n, "decapsulation"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling()


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb__start_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb__index_range(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb(yang.adata.MNode):
    start_label: ?value
    index_range: ?value

    mut def __init__(self, start_label: ?value, index_range: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.start_label = start_label
        self.index_range = index_range

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _start_label = self.start_label
        _index_range = self.index_range
        if _start_label is not None:
            children['start-label'] = yang.gdata.Leaf('union', _start_label)
        if _index_range is not None:
            children['index-range'] = yang.gdata.Leaf('union', _index_range)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb(start_label=n.get_opt_value("start-label"), index_range=n.get_opt_value("index-range"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb(start_label=yang.gdata.from_xml_opt_value(n, "start-label"), index_range=yang.gdata.from_xml_opt_value(n, "index-range"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb()


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__ipv4_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__ipv6_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__index_range(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment(yang.adata.MNode):
    ipv4_index: ?value
    ipv6_index: ?value
    index_range: ?value

    mut def __init__(self, ipv4_index: ?value, ipv6_index: ?value, index_range: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.ipv4_index = ipv4_index
        self.ipv6_index = ipv6_index
        self.index_range = index_range

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_index = self.ipv4_index
        _ipv6_index = self.ipv6_index
        _index_range = self.index_range
        if _ipv4_index is not None:
            children['ipv4-index'] = yang.gdata.Leaf('union', _ipv4_index)
        if _ipv6_index is not None:
            children['ipv6-index'] = yang.gdata.Leaf('union', _ipv6_index)
        if _index_range is not None:
            children['index-range'] = yang.gdata.Leaf('union', _index_range)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment(ipv4_index=n.get_opt_value("ipv4-index"), ipv6_index=n.get_opt_value("ipv6-index"), index_range=n.get_opt_value("index-range"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment(ipv4_index=yang.gdata.from_xml_opt_value(n, "ipv4-index"), ipv6_index=yang.gdata.from_xml_opt_value(n, "ipv6-index"), index_range=yang.gdata.from_xml_opt_value(n, "index-range"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment()


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__flex_algorithm(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__use_flex_algorithm_metric_always(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__strict_asla_based_flex_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__new_capability_subtlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__explicit_null(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__mapping_server(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__no_strict_spf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__no_binding_sid_leaking(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__ldp_stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__anycast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__psp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__usp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__usd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor(yang.adata.MNode):
    psp: ?bool
    usp: ?bool
    usd: ?bool

    mut def __init__(self, psp: ?bool, usp: ?bool, usd: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.psp = psp
        self.usp = usp
        self.usd = usd

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _psp = self.psp
        _usp = self.usp
        _usd = self.usd
        if _psp is not None:
            children['psp'] = yang.gdata.Leaf('empty', _psp)
        if _usp is not None:
            children['usp'] = yang.gdata.Leaf('empty', _usp)
        if _usd is not None:
            children['usd'] = yang.gdata.Leaf('empty', _usd)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor(psp=n.get_opt_bool("psp"), usp=n.get_opt_bool("usp"), usd=n.get_opt_bool("usd"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor(psp=yang.gdata.from_xml_opt_bool(n, "psp"), usp=yang.gdata.from_xml_opt_bool(n, "usp"), usd=yang.gdata.from_xml_opt_bool(n, "usd"))
        return None


class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry(yang.adata.MNode):
    name: str
    flavor: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor

    mut def __init__(self, name: str, flavor: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.flavor = flavor

    mut def create_flavor(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor()
        self.flavor = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _flavor = self.flavor
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _flavor is not None:
            children['flavor'] = _flavor.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry:
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry(name=n.get_str("name"), flavor=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor.from_gdata(n.get_opt_container("flavor")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry:
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry(name=yang.gdata.from_xml_str(n, "name"), flavor=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor.from_xml(yang.gdata.get_xml_opt_child(n, "flavor")))

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'end-sid'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__psp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__usp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__usd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor(yang.adata.MNode):
    psp: ?bool
    usp: ?bool
    usd: ?bool

    mut def __init__(self, psp: ?bool, usp: ?bool, usd: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.psp = psp
        self.usp = usp
        self.usd = usd

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _psp = self.psp
        _usp = self.usp
        _usd = self.usd
        if _psp is not None:
            children['psp'] = yang.gdata.Leaf('empty', _psp)
        if _usp is not None:
            children['usp'] = yang.gdata.Leaf('empty', _usp)
        if _usd is not None:
            children['usd'] = yang.gdata.Leaf('empty', _usd)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor(psp=n.get_opt_bool("psp"), usp=n.get_opt_bool("usp"), usd=n.get_opt_bool("usd"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor(psp=yang.gdata.from_xml_opt_bool(n, "psp"), usp=yang.gdata.from_xml_opt_bool(n, "usp"), usd=yang.gdata.from_xml_opt_bool(n, "usd"))
        return None


class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid(yang.adata.MNode):
    flavor: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor

    mut def __init__(self, flavor: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.flavor = flavor

    mut def create_flavor(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor()
        self.flavor = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flavor = self.flavor
        if _flavor is not None:
            children['flavor'] = _flavor.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid(flavor=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor.from_gdata(n.get_opt_container("flavor")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid(flavor=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor.from_xml(yang.gdata.get_xml_opt_child(n, "flavor")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__micro_node_sid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry(yang.adata.MNode):
    name: str
    anycast: ?bool
    end_sid: junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid
    dynamic_end_sid: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid
    micro_node_sid: ?bool

    mut def __init__(self, name: str, anycast: ?bool, end_sid: list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry]=[], dynamic_end_sid: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid=None, micro_node_sid: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.anycast = anycast
        self.end_sid = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid(elements=end_sid)
        self.dynamic_end_sid = dynamic_end_sid
        self.micro_node_sid = micro_node_sid

    mut def create_dynamic_end_sid(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid()
        self.dynamic_end_sid = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _anycast = self.anycast
        _end_sid = self.end_sid
        _dynamic_end_sid = self.dynamic_end_sid
        _micro_node_sid = self.micro_node_sid
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _anycast is not None:
            children['anycast'] = yang.gdata.Leaf('empty', _anycast)
        if _end_sid is not None:
            children['end-sid'] = _end_sid.to_gdata()
        if _dynamic_end_sid is not None:
            children['dynamic-end-sid'] = _dynamic_end_sid.to_gdata()
        if _micro_node_sid is not None:
            children['micro-node-sid'] = yang.gdata.Leaf('empty', _micro_node_sid)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry:
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry(name=n.get_str("name"), anycast=n.get_opt_bool("anycast"), end_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid.from_gdata(n.get_opt_list("end-sid")), dynamic_end_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid.from_gdata(n.get_opt_container("dynamic-end-sid")), micro_node_sid=n.get_opt_bool("micro-node-sid"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry:
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry(name=yang.gdata.from_xml_str(n, "name"), anycast=yang.gdata.from_xml_opt_bool(n, "anycast"), end_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid.from_xml(yang.gdata.get_xml_children(n, "end-sid")), dynamic_end_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid.from_xml(yang.gdata.get_xml_opt_child(n, "dynamic-end-sid")), micro_node_sid=yang.gdata.from_xml_opt_bool(n, "micro-node-sid"))

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'locator'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry.from_xml(node))
        return res


class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6(yang.adata.MNode):
    locator: junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator

    mut def __init__(self, locator: list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.locator = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator(elements=locator)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _locator = self.locator
        if _locator is not None:
            children['locator'] = _locator.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6(locator=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator.from_gdata(n.get_opt_list("locator")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6(locator=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator.from_xml(yang.gdata.get_xml_children(n, "locator")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link__ingress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link__egress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link(yang.adata.MNode):
    ingress: ?bool
    egress: ?bool

    mut def __init__(self, ingress: ?bool, egress: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.ingress = ingress
        self.egress = egress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress = self.ingress
        _egress = self.egress
        if _ingress is not None:
            children['ingress'] = yang.gdata.Leaf('empty', _ingress)
        if _egress is not None:
            children['egress'] = yang.gdata.Leaf('empty', _egress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link(ingress=n.get_opt_bool("ingress"), egress=n.get_opt_bool("egress"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link(ingress=yang.gdata.from_xml_opt_bool(n, "ingress"), egress=yang.gdata.from_xml_opt_bool(n, "egress"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link()


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid__ingress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid__egress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid(yang.adata.MNode):
    ingress: ?bool
    egress: ?bool

    mut def __init__(self, ingress: ?bool, egress: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.ingress = ingress
        self.egress = egress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress = self.ingress
        _egress = self.egress
        if _ingress is not None:
            children['ingress'] = yang.gdata.Leaf('empty', _ingress)
        if _egress is not None:
            children['egress'] = yang.gdata.Leaf('empty', _egress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid(ingress=n.get_opt_bool("ingress"), egress=n.get_opt_bool("egress"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid(ingress=yang.gdata.from_xml_opt_bool(n, "ingress"), egress=yang.gdata.from_xml_opt_bool(n, "egress"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid()


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe(yang.adata.MNode):
    interval: ?value

    mut def __init__(self, interval: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.interval = interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interval = self.interval
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('union', _interval)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe(interval=n.get_opt_value("interval"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe(interval=yang.gdata.from_xml_opt_value(n, "interval"))
        return None


class junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats(yang.adata.MNode):
    per_interface_per_member_link: junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link
    per_sid: junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid
    subscribe: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe

    mut def __init__(self, per_interface_per_member_link: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link=None, per_sid: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid=None, subscribe: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if per_interface_per_member_link is not None:
            self.per_interface_per_member_link = per_interface_per_member_link
        else:
            self.per_interface_per_member_link = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link()
        if per_sid is not None:
            self.per_sid = per_sid
        else:
            self.per_sid = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid()
        self.subscribe = subscribe

    mut def create_subscribe(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe()
        self.subscribe = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _per_interface_per_member_link = self.per_interface_per_member_link
        _per_sid = self.per_sid
        _subscribe = self.subscribe
        if _per_interface_per_member_link is not None:
            children['per-interface-per-member-link'] = _per_interface_per_member_link.to_gdata()
        if _per_sid is not None:
            children['per-sid'] = _per_sid.to_gdata()
        if _subscribe is not None:
            children['subscribe'] = _subscribe.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats(per_interface_per_member_link=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link.from_gdata(n.get_opt_container("per-interface-per-member-link")), per_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid.from_gdata(n.get_opt_container("per-sid")), subscribe=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe.from_gdata(n.get_opt_container("subscribe")))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats(per_interface_per_member_link=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link.from_xml(yang.gdata.get_xml_opt_child(n, "per-interface-per-member-link")), per_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid.from_xml(yang.gdata.get_xml_opt_child(n, "per-sid")), subscribe=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe.from_xml(yang.gdata.get_xml_opt_child(n, "subscribe")))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats()


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity__per_interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity(yang.adata.MNode):
    per_interface: ?bool

    mut def __init__(self, per_interface: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.per_interface = per_interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _per_interface = self.per_interface
        if _per_interface is not None:
            children['per-interface'] = yang.gdata.Leaf('empty', _per_interface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity(per_interface=n.get_opt_bool("per-interface"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity(per_interface=yang.gdata.from_xml_opt_bool(n, "per-interface"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity()


mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__congestion_protection(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__auto_bandwidth(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics(yang.adata.MNode):
    statistics_granularity: junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity
    congestion_protection: ?bool
    auto_bandwidth: ?str

    mut def __init__(self, statistics_granularity: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity=None, congestion_protection: ?bool, auto_bandwidth: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if statistics_granularity is not None:
            self.statistics_granularity = statistics_granularity
        else:
            self.statistics_granularity = junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity()
        self.congestion_protection = congestion_protection
        self.auto_bandwidth = auto_bandwidth

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _statistics_granularity = self.statistics_granularity
        _congestion_protection = self.congestion_protection
        _auto_bandwidth = self.auto_bandwidth
        if _statistics_granularity is not None:
            children['statistics-granularity'] = _statistics_granularity.to_gdata()
        if _congestion_protection is not None:
            children['congestion-protection'] = yang.gdata.Leaf('empty', _congestion_protection)
        if _auto_bandwidth is not None:
            children['auto-bandwidth'] = yang.gdata.Leaf('string', _auto_bandwidth)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics(statistics_granularity=junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity.from_gdata(n.get_opt_container("statistics-granularity")), congestion_protection=n.get_opt_bool("congestion-protection"), auto_bandwidth=n.get_opt_str("auto-bandwidth"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics(statistics_granularity=junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity.from_xml(yang.gdata.get_xml_opt_child(n, "statistics-granularity")), congestion_protection=yang.gdata.from_xml_opt_bool(n, "congestion-protection"), auto_bandwidth=yang.gdata.from_xml_opt_str(n, "auto-bandwidth"))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics()


class junos_conf_root__configuration__protocols__isis__source_packet_routing(yang.adata.MNode):
    adjacency_segment: junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment
    udp_tunneling: junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling
    srgb: junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb
    node_segment: junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment
    flex_algorithm: list[value]
    use_flex_algorithm_metric_always: ?bool
    strict_asla_based_flex_algorithm: ?bool
    new_capability_subtlv: ?bool
    explicit_null: ?bool
    mapping_server: ?str
    no_strict_spf: ?bool
    no_binding_sid_leaking: ?bool
    ldp_stitching: ?bool
    srv6: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6
    sensor_based_stats: junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats
    traffic_statistics: junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics

    mut def __init__(self, adjacency_segment: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment=None, udp_tunneling: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling=None, srgb: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb=None, node_segment: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment=None, flex_algorithm: ?list[value]=None, use_flex_algorithm_metric_always: ?bool, strict_asla_based_flex_algorithm: ?bool, new_capability_subtlv: ?bool, explicit_null: ?bool, mapping_server: ?str, no_strict_spf: ?bool, no_binding_sid_leaking: ?bool, ldp_stitching: ?bool, srv6: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6=None, sensor_based_stats: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats=None, traffic_statistics: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if adjacency_segment is not None:
            self.adjacency_segment = adjacency_segment
        else:
            self.adjacency_segment = junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment()
        if udp_tunneling is not None:
            self.udp_tunneling = udp_tunneling
        else:
            self.udp_tunneling = junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling()
        if srgb is not None:
            self.srgb = srgb
        else:
            self.srgb = junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb()
        if node_segment is not None:
            self.node_segment = node_segment
        else:
            self.node_segment = junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment()
        if flex_algorithm is not None:
            self.flex_algorithm = flex_algorithm
        else:
            self.flex_algorithm = []
        self.use_flex_algorithm_metric_always = use_flex_algorithm_metric_always
        self.strict_asla_based_flex_algorithm = strict_asla_based_flex_algorithm
        self.new_capability_subtlv = new_capability_subtlv
        self.explicit_null = explicit_null
        self.mapping_server = mapping_server
        self.no_strict_spf = no_strict_spf
        self.no_binding_sid_leaking = no_binding_sid_leaking
        self.ldp_stitching = ldp_stitching
        self.srv6 = srv6
        if sensor_based_stats is not None:
            self.sensor_based_stats = sensor_based_stats
        else:
            self.sensor_based_stats = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats()
        if traffic_statistics is not None:
            self.traffic_statistics = traffic_statistics
        else:
            self.traffic_statistics = junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics()

    mut def create_srv6(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6()
        self.srv6 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _adjacency_segment = self.adjacency_segment
        _udp_tunneling = self.udp_tunneling
        _srgb = self.srgb
        _node_segment = self.node_segment
        _use_flex_algorithm_metric_always = self.use_flex_algorithm_metric_always
        _strict_asla_based_flex_algorithm = self.strict_asla_based_flex_algorithm
        _new_capability_subtlv = self.new_capability_subtlv
        _explicit_null = self.explicit_null
        _mapping_server = self.mapping_server
        _no_strict_spf = self.no_strict_spf
        _no_binding_sid_leaking = self.no_binding_sid_leaking
        _ldp_stitching = self.ldp_stitching
        _srv6 = self.srv6
        _sensor_based_stats = self.sensor_based_stats
        _traffic_statistics = self.traffic_statistics
        if _adjacency_segment is not None:
            children['adjacency-segment'] = _adjacency_segment.to_gdata()
        if _udp_tunneling is not None:
            children['udp-tunneling'] = _udp_tunneling.to_gdata()
        if _srgb is not None:
            children['srgb'] = _srgb.to_gdata()
        if _node_segment is not None:
            children['node-segment'] = _node_segment.to_gdata()
        children['flex-algorithm'] = yang.gdata.LeafList(self.flex_algorithm)
        if _use_flex_algorithm_metric_always is not None:
            children['use-flex-algorithm-metric-always'] = yang.gdata.Leaf('empty', _use_flex_algorithm_metric_always)
        if _strict_asla_based_flex_algorithm is not None:
            children['strict-asla-based-flex-algorithm'] = yang.gdata.Leaf('empty', _strict_asla_based_flex_algorithm)
        if _new_capability_subtlv is not None:
            children['new-capability-subtlv'] = yang.gdata.Leaf('empty', _new_capability_subtlv)
        if _explicit_null is not None:
            children['explicit-null'] = yang.gdata.Leaf('empty', _explicit_null)
        if _mapping_server is not None:
            children['mapping-server'] = yang.gdata.Leaf('string', _mapping_server)
        if _no_strict_spf is not None:
            children['no-strict-spf'] = yang.gdata.Leaf('empty', _no_strict_spf)
        if _no_binding_sid_leaking is not None:
            children['no-binding-sid-leaking'] = yang.gdata.Leaf('empty', _no_binding_sid_leaking)
        if _ldp_stitching is not None:
            children['ldp-stitching'] = yang.gdata.Leaf('empty', _ldp_stitching)
        if _srv6 is not None:
            children['srv6'] = _srv6.to_gdata()
        if _sensor_based_stats is not None:
            children['sensor-based-stats'] = _sensor_based_stats.to_gdata()
        if _traffic_statistics is not None:
            children['traffic-statistics'] = _traffic_statistics.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing(adjacency_segment=junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment.from_gdata(n.get_opt_container("adjacency-segment")), udp_tunneling=junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling.from_gdata(n.get_opt_container("udp-tunneling")), srgb=junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb.from_gdata(n.get_opt_container("srgb")), node_segment=junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment.from_gdata(n.get_opt_container("node-segment")), flex_algorithm=n.get_opt_values("flex-algorithm"), use_flex_algorithm_metric_always=n.get_opt_bool("use-flex-algorithm-metric-always"), strict_asla_based_flex_algorithm=n.get_opt_bool("strict-asla-based-flex-algorithm"), new_capability_subtlv=n.get_opt_bool("new-capability-subtlv"), explicit_null=n.get_opt_bool("explicit-null"), mapping_server=n.get_opt_str("mapping-server"), no_strict_spf=n.get_opt_bool("no-strict-spf"), no_binding_sid_leaking=n.get_opt_bool("no-binding-sid-leaking"), ldp_stitching=n.get_opt_bool("ldp-stitching"), srv6=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6.from_gdata(n.get_opt_container("srv6")), sensor_based_stats=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats.from_gdata(n.get_opt_container("sensor-based-stats")), traffic_statistics=junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics.from_gdata(n.get_opt_container("traffic-statistics")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing:
        if n != None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing(adjacency_segment=junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment.from_xml(yang.gdata.get_xml_opt_child(n, "adjacency-segment")), udp_tunneling=junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling.from_xml(yang.gdata.get_xml_opt_child(n, "udp-tunneling")), srgb=junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb.from_xml(yang.gdata.get_xml_opt_child(n, "srgb")), node_segment=junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment.from_xml(yang.gdata.get_xml_opt_child(n, "node-segment")), flex_algorithm=yang.gdata.from_xml_opt_values(n, "flex-algorithm"), use_flex_algorithm_metric_always=yang.gdata.from_xml_opt_bool(n, "use-flex-algorithm-metric-always"), strict_asla_based_flex_algorithm=yang.gdata.from_xml_opt_bool(n, "strict-asla-based-flex-algorithm"), new_capability_subtlv=yang.gdata.from_xml_opt_bool(n, "new-capability-subtlv"), explicit_null=yang.gdata.from_xml_opt_bool(n, "explicit-null"), mapping_server=yang.gdata.from_xml_opt_str(n, "mapping-server"), no_strict_spf=yang.gdata.from_xml_opt_bool(n, "no-strict-spf"), no_binding_sid_leaking=yang.gdata.from_xml_opt_bool(n, "no-binding-sid-leaking"), ldp_stitching=yang.gdata.from_xml_opt_bool(n, "ldp-stitching"), srv6=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6.from_xml(yang.gdata.get_xml_opt_child(n, "srv6")), sensor_based_stats=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats.from_xml(yang.gdata.get_xml_opt_child(n, "sensor-based-stats")), traffic_statistics=junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics.from_xml(yang.gdata.get_xml_opt_child(n, "traffic-statistics")))
        return None


mut def from_json_junos_conf_root__configuration__protocols__isis__level__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__level__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__level__authentication_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__level__no_hello_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__level__no_csnp_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__level__no_psnp_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__isis__level__wide_metrics_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__isis__level_entry(yang.adata.MNode):
    name: value
    disable: ?bool
    authentication_key: ?str
    authentication_type: ?str
    no_hello_authentication: ?bool
    no_csnp_authentication: ?bool
    no_psnp_authentication: ?bool
    wide_metrics_only: ?bool

    mut def __init__(self, name: value, disable: ?bool, authentication_key: ?str, authentication_type: ?str, no_hello_authentication: ?bool, no_csnp_authentication: ?bool, no_psnp_authentication: ?bool, wide_metrics_only: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.disable = disable
        self.authentication_key = authentication_key
        self.authentication_type = authentication_type
        self.no_hello_authentication = no_hello_authentication
        self.no_csnp_authentication = no_csnp_authentication
        self.no_psnp_authentication = no_psnp_authentication
        self.wide_metrics_only = wide_metrics_only

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _disable = self.disable
        _authentication_key = self.authentication_key
        _authentication_type = self.authentication_type
        _no_hello_authentication = self.no_hello_authentication
        _no_csnp_authentication = self.no_csnp_authentication
        _no_psnp_authentication = self.no_psnp_authentication
        _wide_metrics_only = self.wide_metrics_only
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        if _authentication_type is not None:
            children['authentication-type'] = yang.gdata.Leaf('enumeration', _authentication_type)
        if _no_hello_authentication is not None:
            children['no-hello-authentication'] = yang.gdata.Leaf('empty', _no_hello_authentication)
        if _no_csnp_authentication is not None:
            children['no-csnp-authentication'] = yang.gdata.Leaf('empty', _no_csnp_authentication)
        if _no_psnp_authentication is not None:
            children['no-psnp-authentication'] = yang.gdata.Leaf('empty', _no_psnp_authentication)
        if _wide_metrics_only is not None:
            children['wide-metrics-only'] = yang.gdata.Leaf('empty', _wide_metrics_only)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__level_entry:
        return junos_conf_root__configuration__protocols__isis__level_entry(name=n.get_value("name"), disable=n.get_opt_bool("disable"), authentication_key=n.get_opt_str("authentication-key"), authentication_type=n.get_opt_str("authentication-type"), no_hello_authentication=n.get_opt_bool("no-hello-authentication"), no_csnp_authentication=n.get_opt_bool("no-csnp-authentication"), no_psnp_authentication=n.get_opt_bool("no-psnp-authentication"), wide_metrics_only=n.get_opt_bool("wide-metrics-only"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__isis__level_entry:
        return junos_conf_root__configuration__protocols__isis__level_entry(name=yang.gdata.from_xml_value(n, "name"), disable=yang.gdata.from_xml_opt_bool(n, "disable"), authentication_key=yang.gdata.from_xml_opt_str(n, "authentication-key"), authentication_type=yang.gdata.from_xml_opt_str(n, "authentication-type"), no_hello_authentication=yang.gdata.from_xml_opt_bool(n, "no-hello-authentication"), no_csnp_authentication=yang.gdata.from_xml_opt_bool(n, "no-csnp-authentication"), no_psnp_authentication=yang.gdata.from_xml_opt_bool(n, "no-psnp-authentication"), wide_metrics_only=yang.gdata.from_xml_opt_bool(n, "wide-metrics-only"))

class junos_conf_root__configuration__protocols__isis__level(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'level'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            e_name = e.name
            if isinstance(e_name, str) and isinstance(name, str):
                if e_name != name:
                    match = False
                    continue
            e_name = e.name
            if isinstance(e_name, int) and isinstance(name, int):
                if e_name != name:
                    match = False
                    continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__level_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__isis__level_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__isis__level_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__isis__level_entry.from_xml(node))
        return res


mut def from_json_junos_conf_root__configuration__protocols__isis__lsp_lifetime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__isis(yang.adata.MNode):
    interface: junos_conf_root__configuration__protocols__isis__interface
    source_packet_routing: ?junos_conf_root__configuration__protocols__isis__source_packet_routing
    level: junos_conf_root__configuration__protocols__isis__level
    lsp_lifetime: ?value

    mut def __init__(self, interface: list[junos_conf_root__configuration__protocols__isis__interface_entry]=[], source_packet_routing: ?junos_conf_root__configuration__protocols__isis__source_packet_routing=None, level: list[junos_conf_root__configuration__protocols__isis__level_entry]=[], lsp_lifetime: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.interface = junos_conf_root__configuration__protocols__isis__interface(elements=interface)
        self.source_packet_routing = source_packet_routing
        self.level = junos_conf_root__configuration__protocols__isis__level(elements=level)
        self.lsp_lifetime = lsp_lifetime

    mut def create_source_packet_routing(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing()
        self.source_packet_routing = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        _source_packet_routing = self.source_packet_routing
        _level = self.level
        _lsp_lifetime = self.lsp_lifetime
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        if _source_packet_routing is not None:
            children['source-packet-routing'] = _source_packet_routing.to_gdata()
        if _level is not None:
            children['level'] = _level.to_gdata()
        if _lsp_lifetime is not None:
            children['lsp-lifetime'] = yang.gdata.Leaf('union', _lsp_lifetime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis:
        if n != None:
            return junos_conf_root__configuration__protocols__isis(interface=junos_conf_root__configuration__protocols__isis__interface.from_gdata(n.get_opt_list("interface")), source_packet_routing=junos_conf_root__configuration__protocols__isis__source_packet_routing.from_gdata(n.get_opt_container("source-packet-routing")), level=junos_conf_root__configuration__protocols__isis__level.from_gdata(n.get_opt_list("level")), lsp_lifetime=n.get_opt_value("lsp-lifetime"))
        return junos_conf_root__configuration__protocols__isis()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__isis:
        if n != None:
            return junos_conf_root__configuration__protocols__isis(interface=junos_conf_root__configuration__protocols__isis__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), source_packet_routing=junos_conf_root__configuration__protocols__isis__source_packet_routing.from_xml(yang.gdata.get_xml_opt_child(n, "source-packet-routing")), level=junos_conf_root__configuration__protocols__isis__level.from_xml(yang.gdata.get_xml_children(n, "level")), lsp_lifetime=yang.gdata.from_xml_opt_value(n, "lsp-lifetime"))
        return junos_conf_root__configuration__protocols__isis()


mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__filename(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__replace(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__files(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__no_stamp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__world_readable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__no_world_readable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__ldp__traffic_statistics__file(yang.adata.MNode):
    filename: ?str
    replace: ?bool
    size: ?str
    files: ?value
    no_stamp: ?bool
    world_readable: ?bool
    no_world_readable: ?bool

    mut def __init__(self, filename: ?str, replace: ?bool, size: ?str, files: ?value, no_stamp: ?bool, world_readable: ?bool, no_world_readable: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.filename = filename
        self.replace = replace
        self.size = size
        self.files = files
        self.no_stamp = no_stamp
        self.world_readable = world_readable
        self.no_world_readable = no_world_readable

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _filename = self.filename
        _replace = self.replace
        _size = self.size
        _files = self.files
        _no_stamp = self.no_stamp
        _world_readable = self.world_readable
        _no_world_readable = self.no_world_readable
        if _filename is not None:
            children['filename'] = yang.gdata.Leaf('string', _filename)
        if _replace is not None:
            children['replace'] = yang.gdata.Leaf('empty', _replace)
        if _size is not None:
            children['size'] = yang.gdata.Leaf('string', _size)
        if _files is not None:
            children['files'] = yang.gdata.Leaf('union', _files)
        if _no_stamp is not None:
            children['no-stamp'] = yang.gdata.Leaf('empty', _no_stamp)
        if _world_readable is not None:
            children['world-readable'] = yang.gdata.Leaf('empty', _world_readable)
        if _no_world_readable is not None:
            children['no-world-readable'] = yang.gdata.Leaf('empty', _no_world_readable)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__traffic_statistics__file:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__traffic_statistics__file(filename=n.get_opt_str("filename"), replace=n.get_opt_bool("replace"), size=n.get_opt_str("size"), files=n.get_opt_value("files"), no_stamp=n.get_opt_bool("no-stamp"), world_readable=n.get_opt_bool("world-readable"), no_world_readable=n.get_opt_bool("no-world-readable"))
        return junos_conf_root__configuration__protocols__ldp__traffic_statistics__file()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__ldp__traffic_statistics__file:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__traffic_statistics__file(filename=yang.gdata.from_xml_opt_str(n, "filename"), replace=yang.gdata.from_xml_opt_bool(n, "replace"), size=yang.gdata.from_xml_opt_str(n, "size"), files=yang.gdata.from_xml_opt_value(n, "files"), no_stamp=yang.gdata.from_xml_opt_bool(n, "no-stamp"), world_readable=yang.gdata.from_xml_opt_bool(n, "world-readable"), no_world_readable=yang.gdata.from_xml_opt_bool(n, "no-world-readable"))
        return junos_conf_root__configuration__protocols__ldp__traffic_statistics__file()


mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__sensor_based_stats(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__traffic_statistics__no_penultimate_hop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__ldp__traffic_statistics(yang.adata.MNode):
    file: junos_conf_root__configuration__protocols__ldp__traffic_statistics__file
    interval: ?value
    sensor_based_stats: ?bool
    no_penultimate_hop: ?bool

    mut def __init__(self, file: ?junos_conf_root__configuration__protocols__ldp__traffic_statistics__file=None, interval: ?value, sensor_based_stats: ?bool, no_penultimate_hop: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if file is not None:
            self.file = file
        else:
            self.file = junos_conf_root__configuration__protocols__ldp__traffic_statistics__file()
        self.interval = interval
        self.sensor_based_stats = sensor_based_stats
        self.no_penultimate_hop = no_penultimate_hop

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _file = self.file
        _interval = self.interval
        _sensor_based_stats = self.sensor_based_stats
        _no_penultimate_hop = self.no_penultimate_hop
        if _file is not None:
            children['file'] = _file.to_gdata()
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('union', _interval)
        if _sensor_based_stats is not None:
            children['sensor-based-stats'] = yang.gdata.Leaf('empty', _sensor_based_stats)
        if _no_penultimate_hop is not None:
            children['no-penultimate-hop'] = yang.gdata.Leaf('empty', _no_penultimate_hop)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__traffic_statistics:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__traffic_statistics(file=junos_conf_root__configuration__protocols__ldp__traffic_statistics__file.from_gdata(n.get_opt_container("file")), interval=n.get_opt_value("interval"), sensor_based_stats=n.get_opt_bool("sensor-based-stats"), no_penultimate_hop=n.get_opt_bool("no-penultimate-hop"))
        return junos_conf_root__configuration__protocols__ldp__traffic_statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__ldp__traffic_statistics:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__traffic_statistics(file=junos_conf_root__configuration__protocols__ldp__traffic_statistics__file.from_xml(yang.gdata.get_xml_opt_child(n, "file")), interval=yang.gdata.from_xml_opt_value(n, "interval"), sensor_based_stats=yang.gdata.from_xml_opt_bool(n, "sensor-based-stats"), no_penultimate_hop=yang.gdata.from_xml_opt_bool(n, "no-penultimate-hop"))
        return junos_conf_root__configuration__protocols__ldp__traffic_statistics()


mut def from_json_junos_conf_root__configuration__protocols__ldp__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__transport_address__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__transport_address__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__transport_address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__ldp__transport_address(yang.adata.MNode):
    router_id: ?bool
    interface: ?bool
    address: ?str

    mut def __init__(self, router_id: ?bool, interface: ?bool, address: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.router_id = router_id
        self.interface = interface
        self.address = address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        _interface = self.interface
        _address = self.address
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('empty', _router_id)
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('empty', _interface)
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__transport_address:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__transport_address(router_id=n.get_opt_bool("router-id"), interface=n.get_opt_bool("interface"), address=n.get_opt_str("address"))
        return junos_conf_root__configuration__protocols__ldp__transport_address()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__ldp__transport_address:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__transport_address(router_id=yang.gdata.from_xml_opt_bool(n, "router-id"), interface=yang.gdata.from_xml_opt_bool(n, "interface"), address=yang.gdata.from_xml_opt_str(n, "address"))
        return junos_conf_root__configuration__protocols__ldp__transport_address()


mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__hello_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__link_protection__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__link_protection__dynamic_rsvp_lsp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__ldp__interface__link_protection(yang.adata.MNode):
    disable: ?bool
    dynamic_rsvp_lsp: ?bool

    mut def __init__(self, disable: ?bool, dynamic_rsvp_lsp: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.disable = disable
        self.dynamic_rsvp_lsp = dynamic_rsvp_lsp

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        _dynamic_rsvp_lsp = self.dynamic_rsvp_lsp
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _dynamic_rsvp_lsp is not None:
            children['dynamic-rsvp-lsp'] = yang.gdata.Leaf('empty', _dynamic_rsvp_lsp)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__ldp__interface__link_protection:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__interface__link_protection(disable=n.get_opt_bool("disable"), dynamic_rsvp_lsp=n.get_opt_bool("dynamic-rsvp-lsp"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?junos_conf_root__configuration__protocols__ldp__interface__link_protection:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__interface__link_protection(disable=yang.gdata.from_xml_opt_bool(n, "disable"), dynamic_rsvp_lsp=yang.gdata.from_xml_opt_bool(n, "dynamic-rsvp-lsp"))
        return None


mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__transport_address__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__transport_address__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__transport_address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class junos_conf_root__configuration__protocols__ldp__interface__transport_address(yang.adata.MNode):
    router_id: ?bool
    interface: ?bool
    address: ?str

    mut def __init__(self, router_id: ?bool, interface: ?bool, address: ?str):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.router_id = router_id
        self.interface = interface
        self.address = address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        _interface = self.interface
        _address = self.address
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('empty', _router_id)
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('empty', _interface)
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__interface__transport_address:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__interface__transport_address(router_id=n.get_opt_bool("router-id"), interface=n.get_opt_bool("interface"), address=n.get_opt_str("address"))
        return junos_conf_root__configuration__protocols__ldp__interface__transport_address()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__ldp__interface__transport_address:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp__interface__transport_address(router_id=yang.gdata.from_xml_opt_bool(n, "router-id"), interface=yang.gdata.from_xml_opt_bool(n, "interface"), address=yang.gdata.from_xml_opt_str(n, "address"))
        return junos_conf_root__configuration__protocols__ldp__interface__transport_address()


mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__allow_subnet_mismatch(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__ldp__interface__no_allow_subnet_mismatch(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class junos_conf_root__configuration__protocols__ldp__interface_entry(yang.adata.MNode):
    name: str
    disable: ?bool
    hello_interval: ?value
    hold_time: ?value
    link_protection: ?junos_conf_root__configuration__protocols__ldp__interface__link_protection
    transport_address: junos_conf_root__configuration__protocols__ldp__interface__transport_address
    allow_subnet_mismatch: ?bool
    no_allow_subnet_mismatch: ?bool

    mut def __init__(self, name: str, disable: ?bool, hello_interval: ?value, hold_time: ?value, link_protection: ?junos_conf_root__configuration__protocols__ldp__interface__link_protection=None, transport_address: ?junos_conf_root__configuration__protocols__ldp__interface__transport_address=None, allow_subnet_mismatch: ?bool, no_allow_subnet_mismatch: ?bool):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.disable = disable
        self.hello_interval = hello_interval
        self.hold_time = hold_time
        self.link_protection = link_protection
        if transport_address is not None:
            self.transport_address = transport_address
        else:
            self.transport_address = junos_conf_root__configuration__protocols__ldp__interface__transport_address()
        self.allow_subnet_mismatch = allow_subnet_mismatch
        self.no_allow_subnet_mismatch = no_allow_subnet_mismatch

    mut def create_link_protection(self):
        res = junos_conf_root__configuration__protocols__ldp__interface__link_protection()
        self.link_protection = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _disable = self.disable
        _hello_interval = self.hello_interval
        _hold_time = self.hold_time
        _link_protection = self.link_protection
        _transport_address = self.transport_address
        _allow_subnet_mismatch = self.allow_subnet_mismatch
        _no_allow_subnet_mismatch = self.no_allow_subnet_mismatch
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        if _hello_interval is not None:
            children['hello-interval'] = yang.gdata.Leaf('union', _hello_interval)
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        if _link_protection is not None:
            children['link-protection'] = _link_protection.to_gdata()
        if _transport_address is not None:
            children['transport-address'] = _transport_address.to_gdata()
        if _allow_subnet_mismatch is not None:
            children['allow-subnet-mismatch'] = yang.gdata.Leaf('empty', _allow_subnet_mismatch)
        if _no_allow_subnet_mismatch is not None:
            children['no-allow-subnet-mismatch'] = yang.gdata.Leaf('empty', _no_allow_subnet_mismatch)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__interface_entry:
        return junos_conf_root__configuration__protocols__ldp__interface_entry(name=n.get_str("name"), disable=n.get_opt_bool("disable"), hello_interval=n.get_opt_value("hello-interval"), hold_time=n.get_opt_value("hold-time"), link_protection=junos_conf_root__configuration__protocols__ldp__interface__link_protection.from_gdata(n.get_opt_container("link-protection")), transport_address=junos_conf_root__configuration__protocols__ldp__interface__transport_address.from_gdata(n.get_opt_container("transport-address")), allow_subnet_mismatch=n.get_opt_bool("allow-subnet-mismatch"), no_allow_subnet_mismatch=n.get_opt_bool("no-allow-subnet-mismatch"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__ldp__interface_entry:
        return junos_conf_root__configuration__protocols__ldp__interface_entry(name=yang.gdata.from_xml_str(n, "name"), disable=yang.gdata.from_xml_opt_bool(n, "disable"), hello_interval=yang.gdata.from_xml_opt_value(n, "hello-interval"), hold_time=yang.gdata.from_xml_opt_value(n, "hold-time"), link_protection=junos_conf_root__configuration__protocols__ldp__interface__link_protection.from_xml(yang.gdata.get_xml_opt_child(n, "link-protection")), transport_address=junos_conf_root__configuration__protocols__ldp__interface__transport_address.from_xml(yang.gdata.get_xml_opt_child(n, "transport-address")), allow_subnet_mismatch=yang.gdata.from_xml_opt_bool(n, "allow-subnet-mismatch"), no_allow_subnet_mismatch=yang.gdata.from_xml_opt_bool(n, "no-allow-subnet-mismatch"))

class junos_conf_root__configuration__protocols__ldp__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__ldp__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__ldp__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__ldp__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__ldp__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__ldp__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__ldp__interface_entry.from_xml(node))
        return res


class junos_conf_root__configuration__protocols__ldp(yang.adata.MNode):
    traffic_statistics: junos_conf_root__configuration__protocols__ldp__traffic_statistics
    preference: ?value
    transport_address: junos_conf_root__configuration__protocols__ldp__transport_address
    interface: junos_conf_root__configuration__protocols__ldp__interface

    mut def __init__(self, traffic_statistics: ?junos_conf_root__configuration__protocols__ldp__traffic_statistics=None, preference: ?value, transport_address: ?junos_conf_root__configuration__protocols__ldp__transport_address=None, interface: list[junos_conf_root__configuration__protocols__ldp__interface_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if traffic_statistics is not None:
            self.traffic_statistics = traffic_statistics
        else:
            self.traffic_statistics = junos_conf_root__configuration__protocols__ldp__traffic_statistics()
        self.preference = preference
        if transport_address is not None:
            self.transport_address = transport_address
        else:
            self.transport_address = junos_conf_root__configuration__protocols__ldp__transport_address()
        self.interface = junos_conf_root__configuration__protocols__ldp__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _traffic_statistics = self.traffic_statistics
        _preference = self.preference
        _transport_address = self.transport_address
        _interface = self.interface
        if _traffic_statistics is not None:
            children['traffic-statistics'] = _traffic_statistics.to_gdata()
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('union', _preference)
        if _transport_address is not None:
            children['transport-address'] = _transport_address.to_gdata()
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp(traffic_statistics=junos_conf_root__configuration__protocols__ldp__traffic_statistics.from_gdata(n.get_opt_container("traffic-statistics")), preference=n.get_opt_value("preference"), transport_address=junos_conf_root__configuration__protocols__ldp__transport_address.from_gdata(n.get_opt_container("transport-address")), interface=junos_conf_root__configuration__protocols__ldp__interface.from_gdata(n.get_opt_list("interface")))
        return junos_conf_root__configuration__protocols__ldp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__ldp:
        if n != None:
            return junos_conf_root__configuration__protocols__ldp(traffic_statistics=junos_conf_root__configuration__protocols__ldp__traffic_statistics.from_xml(yang.gdata.get_xml_opt_child(n, "traffic-statistics")), preference=yang.gdata.from_xml_opt_value(n, "preference"), transport_address=junos_conf_root__configuration__protocols__ldp__transport_address.from_xml(yang.gdata.get_xml_opt_child(n, "transport-address")), interface=junos_conf_root__configuration__protocols__ldp__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return junos_conf_root__configuration__protocols__ldp()


mut def from_json_junos_conf_root__configuration__protocols__mpls__no_propagate_ttl(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__ipv6_tunneling(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__interface__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__interface__srlg(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__interface__always_mark_connection_protection_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__interface__switch_away_lsps(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__interface__admin_group(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__interface__admin_group_extended(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_junos_conf_root__configuration__protocols__mpls__interface__static__protection_revert_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class junos_conf_root__configuration__protocols__mpls__interface__static(yang.adata.MNode):
    protection_revert_time: ?value

    mut def __init__(self, protection_revert_time: ?value):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.protection_revert_time = protection_revert_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _protection_revert_time = self.protection_revert_time
        if _protection_revert_time is not None:
            children['protection-revert-time'] = yang.gdata.Leaf('union', _protection_revert_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__mpls__interface__static:
        if n != None:
            return junos_conf_root__configuration__protocols__mpls__interface__static(protection_revert_time=n.get_opt_value("protection-revert-time"))
        return junos_conf_root__configuration__protocols__mpls__interface__static()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__mpls__interface__static:
        if n != None:
            return junos_conf_root__configuration__protocols__mpls__interface__static(protection_revert_time=yang.gdata.from_xml_opt_value(n, "protection-revert-time"))
        return junos_conf_root__configuration__protocols__mpls__interface__static()


class junos_conf_root__configuration__protocols__mpls__interface_entry(yang.adata.MNode):
    name: str
    disable: ?bool
    srlg: list[str]
    always_mark_connection_protection_tlv: ?bool
    switch_away_lsps: ?bool
    admin_group: list[str]
    admin_group_extended: list[str]
    static: junos_conf_root__configuration__protocols__mpls__interface__static

    mut def __init__(self, name: str, disable: ?bool, srlg: ?list[str]=None, always_mark_connection_protection_tlv: ?bool, switch_away_lsps: ?bool, admin_group: ?list[str]=None, admin_group_extended: ?list[str]=None, static: ?junos_conf_root__configuration__protocols__mpls__interface__static=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.name = name
        self.disable = disable
        if srlg is not None:
            self.srlg = srlg
        else:
            self.srlg = []
        self.always_mark_connection_protection_tlv = always_mark_connection_protection_tlv
        self.switch_away_lsps = switch_away_lsps
        if admin_group is not None:
            self.admin_group = admin_group
        else:
            self.admin_group = []
        if admin_group_extended is not None:
            self.admin_group_extended = admin_group_extended
        else:
            self.admin_group_extended = []
        if static is not None:
            self.static = static
        else:
            self.static = junos_conf_root__configuration__protocols__mpls__interface__static()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _disable = self.disable
        _always_mark_connection_protection_tlv = self.always_mark_connection_protection_tlv
        _switch_away_lsps = self.switch_away_lsps
        _static = self.static
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        children['srlg'] = yang.gdata.LeafList(self.srlg)
        if _always_mark_connection_protection_tlv is not None:
            children['always-mark-connection-protection-tlv'] = yang.gdata.Leaf('empty', _always_mark_connection_protection_tlv)
        if _switch_away_lsps is not None:
            children['switch-away-lsps'] = yang.gdata.Leaf('empty', _switch_away_lsps)
        children['admin-group'] = yang.gdata.LeafList(self.admin_group)
        children['admin-group-extended'] = yang.gdata.LeafList(self.admin_group_extended)
        if _static is not None:
            children['static'] = _static.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__mpls__interface_entry:
        return junos_conf_root__configuration__protocols__mpls__interface_entry(name=n.get_str("name"), disable=n.get_opt_bool("disable"), srlg=n.get_opt_strs("srlg"), always_mark_connection_protection_tlv=n.get_opt_bool("always-mark-connection-protection-tlv"), switch_away_lsps=n.get_opt_bool("switch-away-lsps"), admin_group=n.get_opt_strs("admin-group"), admin_group_extended=n.get_opt_strs("admin-group-extended"), static=junos_conf_root__configuration__protocols__mpls__interface__static.from_gdata(n.get_opt_container("static")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> junos_conf_root__configuration__protocols__mpls__interface_entry:
        return junos_conf_root__configuration__protocols__mpls__interface_entry(name=yang.gdata.from_xml_str(n, "name"), disable=yang.gdata.from_xml_opt_bool(n, "disable"), srlg=yang.gdata.from_xml_opt_strs(n, "srlg"), always_mark_connection_protection_tlv=yang.gdata.from_xml_opt_bool(n, "always-mark-connection-protection-tlv"), switch_away_lsps=yang.gdata.from_xml_opt_bool(n, "switch-away-lsps"), admin_group=yang.gdata.from_xml_opt_strs(n, "admin-group"), admin_group_extended=yang.gdata.from_xml_opt_strs(n, "admin-group-extended"), static=junos_conf_root__configuration__protocols__mpls__interface__static.from_xml(yang.gdata.get_xml_opt_child(n, "static")))

class junos_conf_root__configuration__protocols__mpls__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__mpls__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__mpls__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__mpls__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(junos_conf_root__configuration__protocols__mpls__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[junos_conf_root__configuration__protocols__mpls__interface_entry]:
        res = []
        for node in nodes:
            res.append(junos_conf_root__configuration__protocols__mpls__interface_entry.from_xml(node))
        return res


class junos_conf_root__configuration__protocols__mpls(yang.adata.MNode):
    no_propagate_ttl: ?bool
    ipv6_tunneling: ?bool
    interface: junos_conf_root__configuration__protocols__mpls__interface

    mut def __init__(self, no_propagate_ttl: ?bool, ipv6_tunneling: ?bool, interface: list[junos_conf_root__configuration__protocols__mpls__interface_entry]=[]):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        self.no_propagate_ttl = no_propagate_ttl
        self.ipv6_tunneling = ipv6_tunneling
        self.interface = junos_conf_root__configuration__protocols__mpls__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _no_propagate_ttl = self.no_propagate_ttl
        _ipv6_tunneling = self.ipv6_tunneling
        _interface = self.interface
        if _no_propagate_ttl is not None:
            children['no-propagate-ttl'] = yang.gdata.Leaf('empty', _no_propagate_ttl)
        if _ipv6_tunneling is not None:
            children['ipv6-tunneling'] = yang.gdata.Leaf('empty', _ipv6_tunneling)
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__mpls:
        if n != None:
            return junos_conf_root__configuration__protocols__mpls(no_propagate_ttl=n.get_opt_bool("no-propagate-ttl"), ipv6_tunneling=n.get_opt_bool("ipv6-tunneling"), interface=junos_conf_root__configuration__protocols__mpls__interface.from_gdata(n.get_opt_list("interface")))
        return junos_conf_root__configuration__protocols__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols__mpls:
        if n != None:
            return junos_conf_root__configuration__protocols__mpls(no_propagate_ttl=yang.gdata.from_xml_opt_bool(n, "no-propagate-ttl"), ipv6_tunneling=yang.gdata.from_xml_opt_bool(n, "ipv6-tunneling"), interface=junos_conf_root__configuration__protocols__mpls__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return junos_conf_root__configuration__protocols__mpls()


class junos_conf_root__configuration__protocols(yang.adata.MNode):
    bgp: junos_conf_root__configuration__protocols__bgp
    isis: junos_conf_root__configuration__protocols__isis
    ldp: junos_conf_root__configuration__protocols__ldp
    mpls: junos_conf_root__configuration__protocols__mpls

    mut def __init__(self, bgp: ?junos_conf_root__configuration__protocols__bgp=None, isis: ?junos_conf_root__configuration__protocols__isis=None, ldp: ?junos_conf_root__configuration__protocols__ldp=None, mpls: ?junos_conf_root__configuration__protocols__mpls=None):
        self._ns = "http://yang.juniper.net/junos/conf/protocols"
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = junos_conf_root__configuration__protocols__bgp()
        if isis is not None:
            self.isis = isis
        else:
            self.isis = junos_conf_root__configuration__protocols__isis()
        if ldp is not None:
            self.ldp = ldp
        else:
            self.ldp = junos_conf_root__configuration__protocols__ldp()
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = junos_conf_root__configuration__protocols__mpls()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        _isis = self.isis
        _ldp = self.ldp
        _mpls = self.mpls
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        if _ldp is not None:
            children['ldp'] = _ldp.to_gdata()
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/protocols')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols:
        if n != None:
            return junos_conf_root__configuration__protocols(bgp=junos_conf_root__configuration__protocols__bgp.from_gdata(n.get_opt_container("bgp")), isis=junos_conf_root__configuration__protocols__isis.from_gdata(n.get_opt_container("isis")), ldp=junos_conf_root__configuration__protocols__ldp.from_gdata(n.get_opt_container("ldp")), mpls=junos_conf_root__configuration__protocols__mpls.from_gdata(n.get_opt_container("mpls")))
        return junos_conf_root__configuration__protocols()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration__protocols:
        if n != None:
            return junos_conf_root__configuration__protocols(bgp=junos_conf_root__configuration__protocols__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), isis=junos_conf_root__configuration__protocols__isis.from_xml(yang.gdata.get_xml_opt_child(n, "isis")), ldp=junos_conf_root__configuration__protocols__ldp.from_xml(yang.gdata.get_xml_opt_child(n, "ldp")), mpls=junos_conf_root__configuration__protocols__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")))
        return junos_conf_root__configuration__protocols()


class junos_conf_root__configuration(yang.adata.MNode):
    rcsid: ?str
    version: ?str
    system: junos_conf_root__configuration__system
    interfaces: junos_conf_root__configuration__interfaces
    routing_instances: junos_conf_root__configuration__routing_instances
    groups: junos_conf_root__configuration__groups
    routing_options: junos_conf_root__configuration__routing_options
    protocols: junos_conf_root__configuration__protocols

    mut def __init__(self, rcsid: ?str, version: ?str, system: ?junos_conf_root__configuration__system=None, interfaces: ?junos_conf_root__configuration__interfaces=None, routing_instances: ?junos_conf_root__configuration__routing_instances=None, groups: list[junos_conf_root__configuration__groups_entry]=[], routing_options: ?junos_conf_root__configuration__routing_options=None, protocols: ?junos_conf_root__configuration__protocols=None):
        self._ns = "http://yang.juniper.net/junos/conf/root"
        self.rcsid = rcsid
        self.version = version
        if system is not None:
            self.system = system
        else:
            self.system = junos_conf_root__configuration__system()
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = junos_conf_root__configuration__interfaces()
        if routing_instances is not None:
            self.routing_instances = routing_instances
        else:
            self.routing_instances = junos_conf_root__configuration__routing_instances()
        self.groups = junos_conf_root__configuration__groups(elements=groups)
        if routing_options is not None:
            self.routing_options = routing_options
        else:
            self.routing_options = junos_conf_root__configuration__routing_options()
        if protocols is not None:
            self.protocols = protocols
        else:
            self.protocols = junos_conf_root__configuration__protocols()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rcsid = self.rcsid
        _version = self.version
        _system = self.system
        _interfaces = self.interfaces
        _routing_instances = self.routing_instances
        _groups = self.groups
        _routing_options = self.routing_options
        _protocols = self.protocols
        if _rcsid is not None:
            children['rcsid'] = yang.gdata.Leaf('string', _rcsid)
        if _version is not None:
            children['version'] = yang.gdata.Leaf('string', _version)
        if _system is not None:
            children['system'] = _system.to_gdata()
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        if _routing_instances is not None:
            children['routing-instances'] = _routing_instances.to_gdata()
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        if _routing_options is not None:
            children['routing-options'] = _routing_options.to_gdata()
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/root')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration:
        if n != None:
            return junos_conf_root__configuration(rcsid=n.get_opt_str("rcsid"), version=n.get_opt_str("version"), system=junos_conf_root__configuration__system.from_gdata(n.get_opt_container("system")), interfaces=junos_conf_root__configuration__interfaces.from_gdata(n.get_opt_container("interfaces")), routing_instances=junos_conf_root__configuration__routing_instances.from_gdata(n.get_opt_container("routing-instances")), groups=junos_conf_root__configuration__groups.from_gdata(n.get_opt_list("groups")), routing_options=junos_conf_root__configuration__routing_options.from_gdata(n.get_opt_container("routing-options")), protocols=junos_conf_root__configuration__protocols.from_gdata(n.get_opt_container("protocols")))
        return junos_conf_root__configuration()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> junos_conf_root__configuration:
        if n != None:
            return junos_conf_root__configuration(rcsid=yang.gdata.from_xml_opt_str(n, "rcsid"), version=yang.gdata.from_xml_opt_str(n, "version"), system=junos_conf_root__configuration__system.from_xml(yang.gdata.get_xml_opt_child(n, "system")), interfaces=junos_conf_root__configuration__interfaces.from_xml(yang.gdata.get_xml_opt_child(n, "interfaces")), routing_instances=junos_conf_root__configuration__routing_instances.from_xml(yang.gdata.get_xml_opt_child(n, "routing-instances")), groups=junos_conf_root__configuration__groups.from_xml(yang.gdata.get_xml_children(n, "groups")), routing_options=junos_conf_root__configuration__routing_options.from_xml(yang.gdata.get_xml_opt_child(n, "routing-options")), protocols=junos_conf_root__configuration__protocols.from_xml(yang.gdata.get_xml_opt_child(n, "protocols", "http://yang.juniper.net/junos/conf/protocols")))
        return junos_conf_root__configuration()


class root(yang.adata.MNode):
    configuration: junos_conf_root__configuration

    mut def __init__(self, configuration: ?junos_conf_root__configuration=None):
        self._ns = ""
        if configuration is not None:
            self.configuration = configuration
        else:
            self.configuration = junos_conf_root__configuration()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _configuration = self.configuration
        if _configuration is not None:
            children['configuration'] = _configuration.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(configuration=junos_conf_root__configuration.from_gdata(n.get_opt_container("configuration")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(configuration=junos_conf_root__configuration.from_xml(yang.gdata.get_xml_opt_child(n, "configuration", "http://yang.juniper.net/junos/conf/root")))
        return root()


schema_namespaces: set[str] = {
    "http://yang.juniper.net/junos/conf/protocols",
    "http://yang.juniper.net/junos/conf/root",
}
