import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel__remote_system(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel__last_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel__operational_tunnel_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel__operational_tunnel_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry(yang.adata.MNode):
    name: str
    remote_system: str
    index: ?int
    allowed_tunnel_types: list[str]
    last_change: ?str
    operational_tunnel_type: ?str
    operational_tunnel_id: ?int

    mut def __init__(self, name: str, remote_system: str, index: ?int, allowed_tunnel_types: ?list[str]=None, last_change: ?str, operational_tunnel_type: ?str, operational_tunnel_id: ?int):
        self._ns = "urn:nokia.com:srlinux:pw:pw-tunnel"
        self.name = name
        self.remote_system = remote_system
        self.index = index
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        self.last_change = last_change
        self.operational_tunnel_type = operational_tunnel_type
        self.operational_tunnel_id = operational_tunnel_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _remote_system = self.remote_system
        _index = self.index
        _last_change = self.last_change
        _operational_tunnel_type = self.operational_tunnel_type
        _operational_tunnel_id = self.operational_tunnel_id
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _remote_system is not None:
            children['remote-system'] = yang.gdata.Leaf('union', _remote_system)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint64', _index)
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _last_change is not None:
            children['last-change'] = yang.gdata.Leaf('string', _last_change)
        if _operational_tunnel_type is not None:
            children['operational-tunnel-type'] = yang.gdata.Leaf('identityref', _operational_tunnel_type)
        if _operational_tunnel_id is not None:
            children['operational-tunnel-id'] = yang.gdata.Leaf('uint32', _operational_tunnel_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry:
        return srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry(name=n.get_str("name"), remote_system=n.get_str("remote-system"), index=n.get_opt_int("index"), allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), last_change=n.get_opt_str("last-change"), operational_tunnel_type=n.get_opt_str("operational-tunnel-type"), operational_tunnel_id=n.get_opt_int("operational-tunnel-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry:
        return srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry(name=yang.gdata.from_xml_str(n, "name"), remote_system=yang.gdata.from_xml_str(n, "remote-system"), index=yang.gdata.from_xml_opt_int(n, "index"), allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), last_change=yang.gdata.from_xml_opt_str(n, "last-change"), operational_tunnel_type=yang.gdata.from_xml_opt_str(n, "operational-tunnel-type"), operational_tunnel_id=yang.gdata.from_xml_opt_int(n, "operational-tunnel-id"))

class srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel(yang.adata.MNode):
    elements: list[srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:pw:pw-tunnel"
        self._name = 'tunnel'
        self.elements = elements

    mut def create(self, name, remote_system):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry(name, remote_system)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry.from_xml(node))
        return res



class srl_nokia_tunnel__tunnel__pseudowire_tunnel(yang.adata.MNode):
    tunnel: srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel

    mut def __init__(self, tunnel: list[srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:pw:pw-tunnel"
        self.tunnel = srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel(elements=tunnel)
        self.tunnel._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel = self.tunnel
        if _tunnel is not None:
            children['tunnel'] = _tunnel.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:pw:pw-tunnel')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel__tunnel__pseudowire_tunnel:
        if n != None:
            return srl_nokia_tunnel__tunnel__pseudowire_tunnel(tunnel=srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel.from_gdata(n.get_opt_list("tunnel")))
        return srl_nokia_tunnel__tunnel__pseudowire_tunnel()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_tunnel__tunnel__pseudowire_tunnel:
        if n != None:
            return srl_nokia_tunnel__tunnel__pseudowire_tunnel(tunnel=srl_nokia_tunnel__tunnel__pseudowire_tunnel__tunnel.from_xml(yang.gdata.get_xml_children(n, "tunnel")))
        return srl_nokia_tunnel__tunnel__pseudowire_tunnel()



class srl_nokia_tunnel__tunnel(yang.adata.MNode):
    pseudowire_tunnel: srl_nokia_tunnel__tunnel__pseudowire_tunnel

    mut def __init__(self, pseudowire_tunnel: ?srl_nokia_tunnel__tunnel__pseudowire_tunnel=None):
        self._ns = "urn:nokia.com:srlinux:vxlan:tunnel"
        if pseudowire_tunnel is not None:
            self.pseudowire_tunnel = pseudowire_tunnel
        else:
            self.pseudowire_tunnel = srl_nokia_tunnel__tunnel__pseudowire_tunnel()
        self_pseudowire_tunnel = self.pseudowire_tunnel
        if self_pseudowire_tunnel is not None:
            self_pseudowire_tunnel._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _pseudowire_tunnel = self.pseudowire_tunnel
        if _pseudowire_tunnel is not None:
            children['pseudowire-tunnel'] = _pseudowire_tunnel.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:vxlan:tunnel')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel__tunnel:
        if n != None:
            return srl_nokia_tunnel__tunnel(pseudowire_tunnel=srl_nokia_tunnel__tunnel__pseudowire_tunnel.from_gdata(n.get_opt_container("pseudowire-tunnel")))
        return srl_nokia_tunnel__tunnel()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_tunnel__tunnel:
        if n != None:
            return srl_nokia_tunnel__tunnel(pseudowire_tunnel=srl_nokia_tunnel__tunnel__pseudowire_tunnel.from_xml(yang.gdata.get_xml_opt_child(n, "pseudowire-tunnel", "urn:nokia.com:srlinux:pw:pw-tunnel")))
        return srl_nokia_tunnel__tunnel()



class srl_nokia_platform__platform__trust(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:chassis:platform"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__trust:
        if n != None:
            return srl_nokia_platform__platform__trust()
        return srl_nokia_platform__platform__trust()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__trust:
        if n != None:
            return srl_nokia_platform__platform__trust()
        return srl_nokia_platform__platform__trust()



mut def from_json_srl_nokia_platform__platform__linecard__slot(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_platform__platform__linecard__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__linecard__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__linecard__last_booted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__last_booted_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_platform__platform__linecard__last_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__part_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__removable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_platform__platform__linecard__failure_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__clei_code(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__serial_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__manufactured_date(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__bios__manufacturer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__bios__software_version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_platform__platform__linecard__bios(yang.adata.MNode):
    manufacturer: ?str
    software_version: ?str

    mut def __init__(self, manufacturer: ?str, software_version: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self.manufacturer = manufacturer
        self.software_version = software_version

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _manufacturer = self.manufacturer
        _software_version = self.software_version
        if _manufacturer is not None:
            children['manufacturer'] = yang.gdata.Leaf('string', _manufacturer)
        if _software_version is not None:
            children['software-version'] = yang.gdata.Leaf('string', _software_version)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__bios:
        if n != None:
            return srl_nokia_platform__platform__linecard__bios(manufacturer=n.get_opt_str("manufacturer"), software_version=n.get_opt_str("software-version"))
        return srl_nokia_platform__platform__linecard__bios()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__bios:
        if n != None:
            return srl_nokia_platform__platform__linecard__bios(manufacturer=yang.gdata.from_xml_opt_str(n, "manufacturer"), software_version=yang.gdata.from_xml_opt_str(n, "software-version"))
        return srl_nokia_platform__platform__linecard__bios()



mut def from_json_srl_nokia_platform__platform__linecard__rebooting_at(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__interfaces(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__last_booted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__last_booted_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__last_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__part_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__removable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fabric__availability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fabric__total_capacity(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fabric__operational_capacity(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fabric__consumed_capacity(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fabric__utilization_ingress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fabric__utilization_egress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_platform__platform__linecard__forwarding_complex__fabric(yang.adata.MNode):
    availability: ?int
    total_capacity: ?int
    operational_capacity: ?int
    consumed_capacity: ?int
    utilization_ingress: ?int
    utilization_egress: ?int

    mut def __init__(self, availability: ?int, total_capacity: ?int, operational_capacity: ?int, consumed_capacity: ?int, utilization_ingress: ?int, utilization_egress: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self.availability = availability
        self.total_capacity = total_capacity
        self.operational_capacity = operational_capacity
        self.consumed_capacity = consumed_capacity
        self.utilization_ingress = utilization_ingress
        self.utilization_egress = utilization_egress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _availability = self.availability
        _total_capacity = self.total_capacity
        _operational_capacity = self.operational_capacity
        _consumed_capacity = self.consumed_capacity
        _utilization_ingress = self.utilization_ingress
        _utilization_egress = self.utilization_egress
        if _availability is not None:
            children['availability'] = yang.gdata.Leaf('uint8', _availability)
        if _total_capacity is not None:
            children['total-capacity'] = yang.gdata.Leaf('uint64', _total_capacity)
        if _operational_capacity is not None:
            children['operational-capacity'] = yang.gdata.Leaf('uint64', _operational_capacity)
        if _consumed_capacity is not None:
            children['consumed-capacity'] = yang.gdata.Leaf('uint64', _consumed_capacity)
        if _utilization_ingress is not None:
            children['utilization-ingress'] = yang.gdata.Leaf('uint64', _utilization_ingress)
        if _utilization_egress is not None:
            children['utilization-egress'] = yang.gdata.Leaf('uint64', _utilization_egress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fabric:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fabric(availability=n.get_opt_int("availability"), total_capacity=n.get_opt_int("total-capacity"), operational_capacity=n.get_opt_int("operational-capacity"), consumed_capacity=n.get_opt_int("consumed-capacity"), utilization_ingress=n.get_opt_int("utilization-ingress"), utilization_egress=n.get_opt_int("utilization-egress"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fabric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fabric:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fabric(availability=yang.gdata.from_xml_opt_int(n, "availability"), total_capacity=yang.gdata.from_xml_opt_int(n, "total-capacity"), operational_capacity=yang.gdata.from_xml_opt_int(n, "operational-capacity"), consumed_capacity=yang.gdata.from_xml_opt_int(n, "consumed-capacity"), utilization_ingress=yang.gdata.from_xml_opt_int(n, "utilization-ingress"), utilization_egress=yang.gdata.from_xml_opt_int(n, "utilization-egress"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fabric()



mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extracted_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extracted_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason__reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason__extracted_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason__extracted_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry(yang.adata.MNode):
    reason: str
    extracted_packets: int
    extracted_octets: int

    mut def __init__(self, reason: str, extracted_packets: ?int=None, extracted_octets: ?int=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self.reason = reason
        if extracted_packets != None:
            self.extracted_packets = extracted_packets
        else:
            self.extracted_packets = 0
        if extracted_octets != None:
            self.extracted_octets = extracted_octets
        else:
            self.extracted_octets = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _reason = self.reason
        _extracted_packets = self.extracted_packets
        _extracted_octets = self.extracted_octets
        if _reason is not None:
            children['reason'] = yang.gdata.Leaf('identityref', _reason)
        if _extracted_packets is not None:
            children['extracted-packets'] = yang.gdata.Leaf('uint64', _extracted_packets)
        if _extracted_octets is not None:
            children['extracted-octets'] = yang.gdata.Leaf('uint64', _extracted_octets)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.reason)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry(reason=n.get_str("reason"), extracted_packets=n.get_opt_int("extracted-packets"), extracted_octets=n.get_opt_int("extracted-octets"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry(reason=yang.gdata.from_xml_str(n, "reason"), extracted_packets=yang.gdata.from_xml_opt_int(n, "extracted-packets"), extracted_octets=yang.gdata.from_xml_opt_int(n, "extracted-octets"))

class srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason(yang.adata.MNode):
    elements: list[srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self._name = 'extraction-reason'
        self.elements = elements

    mut def create(self, reason):
        for e in self.elements:
            match = True
            if e.reason != reason:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry(reason)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['reason'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry.from_xml(node))
        return res



class srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction(yang.adata.MNode):
    extracted_packets: int
    extracted_octets: int
    extraction_reason: srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason

    mut def __init__(self, extracted_packets: ?int=None, extracted_octets: ?int=None, extraction_reason: list[srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        if extracted_packets != None:
            self.extracted_packets = extracted_packets
        else:
            self.extracted_packets = 0
        if extracted_octets != None:
            self.extracted_octets = extracted_octets
        else:
            self.extracted_octets = 0
        self.extraction_reason = srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason(elements=extraction_reason)
        self.extraction_reason._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _extracted_packets = self.extracted_packets
        _extracted_octets = self.extracted_octets
        _extraction_reason = self.extraction_reason
        if _extracted_packets is not None:
            children['extracted-packets'] = yang.gdata.Leaf('uint64', _extracted_packets)
        if _extracted_octets is not None:
            children['extracted-octets'] = yang.gdata.Leaf('uint64', _extracted_octets)
        if _extraction_reason is not None:
            children['extraction-reason'] = _extraction_reason.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction(extracted_packets=n.get_opt_int("extracted-packets"), extracted_octets=n.get_opt_int("extracted-octets"), extraction_reason=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason.from_gdata(n.get_opt_list("extraction-reason")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction(extracted_packets=yang.gdata.from_xml_opt_int(n, "extracted-packets"), extracted_octets=yang.gdata.from_xml_opt_int(n, "extracted-octets"), extraction_reason=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction__extraction_reason.from_xml(yang.gdata.get_xml_children(n, "extraction-reason")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction()



class srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block(yang.adata.MNode):
    packet_extraction: srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction

    mut def __init__(self, packet_extraction: ?srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        if packet_extraction is not None:
            self.packet_extraction = packet_extraction
        else:
            self.packet_extraction = srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction()
        self_packet_extraction = self.packet_extraction
        if self_packet_extraction is not None:
            self_packet_extraction._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _packet_extraction = self.packet_extraction
        if _packet_extraction is not None:
            children['packet-extraction'] = _packet_extraction.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block(packet_extraction=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction.from_gdata(n.get_opt_container("packet-extraction")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block(packet_extraction=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block__packet_extraction.from_xml(yang.gdata.get_xml_opt_child(n, "packet-extraction")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block()



class srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters(yang.adata.MNode):
    host_interface_block: srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block

    mut def __init__(self, host_interface_block: ?srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        if host_interface_block is not None:
            self.host_interface_block = host_interface_block
        else:
            self.host_interface_block = srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block()
        self_host_interface_block = self.host_interface_block
        if self_host_interface_block is not None:
            self_host_interface_block._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_interface_block = self.host_interface_block
        if _host_interface_block is not None:
            children['host-interface-block'] = _host_interface_block.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters(host_interface_block=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block.from_gdata(n.get_opt_container("host-interface-block")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters(host_interface_block=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters__host_interface_block.from_xml(yang.gdata.get_xml_opt_child(n, "host-interface-block")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters()



class srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry(yang.adata.MNode):
    index: value
    pipeline_counters: srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters

    mut def __init__(self, index: value, pipeline_counters: ?srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self.index = index
        if pipeline_counters is not None:
            self.pipeline_counters = pipeline_counters
        else:
            self.pipeline_counters = srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters()
        self_pipeline_counters = self.pipeline_counters
        if self_pipeline_counters is not None:
            self_pipeline_counters._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _pipeline_counters = self.pipeline_counters
        if _index is not None:
            children['index'] = yang.gdata.Leaf('union', _index)
        if _pipeline_counters is not None:
            children['pipeline-counters'] = _pipeline_counters.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry(index=n.get_value("index"), pipeline_counters=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters.from_gdata(n.get_opt_container("pipeline-counters")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry(index=yang.gdata.from_xml_value(n, "index"), pipeline_counters=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline__pipeline_counters.from_xml(yang.gdata.get_xml_opt_child(n, "pipeline-counters")))

class srl_nokia_platform__platform__linecard__forwarding_complex__pipeline(yang.adata.MNode):
    elements: list[srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self._name = 'pipeline'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            e_index = e.index
            if isinstance(e_index, str) and isinstance(index, str):
                if e_index != index:
                    match = False
                    continue
            e_index = e.index
            if isinstance(e_index, int) and isinstance(index, int):
                if e_index != index:
                    match = False
                    continue
            if match:
                return e

        res = srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic__queued_aggregate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic__queued_bytes_aggregate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic__dropped_aggregate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic__dropped_bytes_aggregate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic(yang.adata.MNode):
    queued_aggregate: int
    queued_bytes_aggregate: int
    dropped_aggregate: int
    dropped_bytes_aggregate: int

    mut def __init__(self, queued_aggregate: ?int=None, queued_bytes_aggregate: ?int=None, dropped_aggregate: ?int=None, dropped_bytes_aggregate: ?int=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        if queued_aggregate != None:
            self.queued_aggregate = queued_aggregate
        else:
            self.queued_aggregate = 0
        if queued_bytes_aggregate != None:
            self.queued_bytes_aggregate = queued_bytes_aggregate
        else:
            self.queued_bytes_aggregate = 0
        if dropped_aggregate != None:
            self.dropped_aggregate = dropped_aggregate
        else:
            self.dropped_aggregate = 0
        if dropped_bytes_aggregate != None:
            self.dropped_bytes_aggregate = dropped_bytes_aggregate
        else:
            self.dropped_bytes_aggregate = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _queued_aggregate = self.queued_aggregate
        _queued_bytes_aggregate = self.queued_bytes_aggregate
        _dropped_aggregate = self.dropped_aggregate
        _dropped_bytes_aggregate = self.dropped_bytes_aggregate
        if _queued_aggregate is not None:
            children['queued-aggregate'] = yang.gdata.Leaf('uint64', _queued_aggregate)
        if _queued_bytes_aggregate is not None:
            children['queued-bytes-aggregate'] = yang.gdata.Leaf('uint64', _queued_bytes_aggregate)
        if _dropped_aggregate is not None:
            children['dropped-aggregate'] = yang.gdata.Leaf('uint64', _dropped_aggregate)
        if _dropped_bytes_aggregate is not None:
            children['dropped-bytes-aggregate'] = yang.gdata.Leaf('uint64', _dropped_bytes_aggregate)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic(queued_aggregate=n.get_opt_int("queued-aggregate"), queued_bytes_aggregate=n.get_opt_int("queued-bytes-aggregate"), dropped_aggregate=n.get_opt_int("dropped-aggregate"), dropped_bytes_aggregate=n.get_opt_int("dropped-bytes-aggregate"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic(queued_aggregate=yang.gdata.from_xml_opt_int(n, "queued-aggregate"), queued_bytes_aggregate=yang.gdata.from_xml_opt_int(n, "queued-bytes-aggregate"), dropped_aggregate=yang.gdata.from_xml_opt_int(n, "dropped-aggregate"), dropped_bytes_aggregate=yang.gdata.from_xml_opt_int(n, "dropped-bytes-aggregate"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic()



mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters__adverse_aggregate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters__congestion_aggregate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters__packet_processing_aggregate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters__no_route(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters(yang.adata.MNode):
    adverse_aggregate: int
    congestion_aggregate: int
    packet_processing_aggregate: int
    no_route: int

    mut def __init__(self, adverse_aggregate: ?int=None, congestion_aggregate: ?int=None, packet_processing_aggregate: ?int=None, no_route: ?int=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        if adverse_aggregate != None:
            self.adverse_aggregate = adverse_aggregate
        else:
            self.adverse_aggregate = 0
        if congestion_aggregate != None:
            self.congestion_aggregate = congestion_aggregate
        else:
            self.congestion_aggregate = 0
        if packet_processing_aggregate != None:
            self.packet_processing_aggregate = packet_processing_aggregate
        else:
            self.packet_processing_aggregate = 0
        if no_route != None:
            self.no_route = no_route
        else:
            self.no_route = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _adverse_aggregate = self.adverse_aggregate
        _congestion_aggregate = self.congestion_aggregate
        _packet_processing_aggregate = self.packet_processing_aggregate
        _no_route = self.no_route
        if _adverse_aggregate is not None:
            children['adverse-aggregate'] = yang.gdata.Leaf('uint64', _adverse_aggregate)
        if _congestion_aggregate is not None:
            children['congestion-aggregate'] = yang.gdata.Leaf('uint64', _congestion_aggregate)
        if _packet_processing_aggregate is not None:
            children['packet-processing-aggregate'] = yang.gdata.Leaf('uint64', _packet_processing_aggregate)
        if _no_route is not None:
            children['no-route'] = yang.gdata.Leaf('uint64', _no_route)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters(adverse_aggregate=n.get_opt_int("adverse-aggregate"), congestion_aggregate=n.get_opt_int("congestion-aggregate"), packet_processing_aggregate=n.get_opt_int("packet-processing-aggregate"), no_route=n.get_opt_int("no-route"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters(adverse_aggregate=yang.gdata.from_xml_opt_int(n, "adverse-aggregate"), congestion_aggregate=yang.gdata.from_xml_opt_int(n, "congestion-aggregate"), packet_processing_aggregate=yang.gdata.from_xml_opt_int(n, "packet-processing-aggregate"), no_route=yang.gdata.from_xml_opt_int(n, "no-route"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters()



mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__backup_next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__backup_active(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop__next_hop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop__normalized_weight(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry(yang.adata.MNode):
    id: int
    next_hop: ?int
    oper_state: ?str
    normalized_weight: ?int

    mut def __init__(self, id: int, next_hop: ?int, oper_state: ?str, normalized_weight: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-linecard-fib"
        self.id = id
        self.next_hop = next_hop
        self.oper_state = oper_state
        self.normalized_weight = normalized_weight

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        _next_hop = self.next_hop
        _oper_state = self.oper_state
        _normalized_weight = self.normalized_weight
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint16', _id)
        if _next_hop is not None:
            children['next-hop'] = yang.gdata.Leaf('uint64', _next_hop)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _normalized_weight is not None:
            children['normalized-weight'] = yang.gdata.Leaf('uint8', _normalized_weight)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry(id=n.get_int("id"), next_hop=n.get_opt_int("next-hop"), oper_state=n.get_opt_str("oper-state"), normalized_weight=n.get_opt_int("normalized-weight"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry(id=yang.gdata.from_xml_int(n, "id"), next_hop=yang.gdata.from_xml_opt_int(n, "next-hop"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), normalized_weight=yang.gdata.from_xml_opt_int(n, "normalized-weight"))

class srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop(yang.adata.MNode):
    elements: list[srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-linecard-fib"
        self._name = 'next-hop'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry.from_xml(node))
        return res



class srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry(yang.adata.MNode):
    index: int
    oper_state: ?str
    backup_next_hop_group: ?str
    backup_active: ?bool
    next_hop: srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop

    mut def __init__(self, index: int, oper_state: ?str, backup_next_hop_group: ?str, backup_active: ?bool, next_hop: list[srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-linecard-fib"
        self.index = index
        self.oper_state = oper_state
        self.backup_next_hop_group = backup_next_hop_group
        self.backup_active = backup_active
        self.next_hop = srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop(elements=next_hop)
        self.next_hop._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _oper_state = self.oper_state
        _backup_next_hop_group = self.backup_next_hop_group
        _backup_active = self.backup_active
        _next_hop = self.next_hop
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint64', _index)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _backup_next_hop_group is not None:
            children['backup-next-hop-group'] = yang.gdata.Leaf('leafref', _backup_next_hop_group)
        if _backup_active is not None:
            children['backup-active'] = yang.gdata.Leaf('boolean', _backup_active)
        if _next_hop is not None:
            children['next-hop'] = _next_hop.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry(index=n.get_int("index"), oper_state=n.get_opt_str("oper-state"), backup_next_hop_group=n.get_opt_str("backup-next-hop-group"), backup_active=n.get_opt_bool("backup-active"), next_hop=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop.from_gdata(n.get_opt_list("next-hop")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry(index=yang.gdata.from_xml_int(n, "index"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), backup_next_hop_group=yang.gdata.from_xml_opt_str(n, "backup-next-hop-group"), backup_active=yang.gdata.from_xml_opt_bool(n, "backup-active"), next_hop=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group__next_hop.from_xml(yang.gdata.get_xml_children(n, "next-hop")))

class srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group(yang.adata.MNode):
    elements: list[srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-linecard-fib"
        self._name = 'next-hop-group'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes__entries_remaining_to_add(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes__entries_remaining_to_modify(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes__last_sync_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes(yang.adata.MNode):
    entries_remaining_to_add: ?int
    entries_remaining_to_modify: ?int
    last_sync_time: ?str

    mut def __init__(self, entries_remaining_to_add: ?int, entries_remaining_to_modify: ?int, last_sync_time: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.entries_remaining_to_add = entries_remaining_to_add
        self.entries_remaining_to_modify = entries_remaining_to_modify
        self.last_sync_time = last_sync_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _entries_remaining_to_add = self.entries_remaining_to_add
        _entries_remaining_to_modify = self.entries_remaining_to_modify
        _last_sync_time = self.last_sync_time
        if _entries_remaining_to_add is not None:
            children['entries-remaining-to-add'] = yang.gdata.Leaf('uint64', _entries_remaining_to_add)
        if _entries_remaining_to_modify is not None:
            children['entries-remaining-to-modify'] = yang.gdata.Leaf('uint64', _entries_remaining_to_modify)
        if _last_sync_time is not None:
            children['last-sync-time'] = yang.gdata.Leaf('string', _last_sync_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes(entries_remaining_to_add=n.get_opt_int("entries-remaining-to-add"), entries_remaining_to_modify=n.get_opt_int("entries-remaining-to-modify"), last_sync_time=n.get_opt_str("last-sync-time"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes(entries_remaining_to_add=yang.gdata.from_xml_opt_int(n, "entries-remaining-to-add"), entries_remaining_to_modify=yang.gdata.from_xml_opt_int(n, "entries-remaining-to-modify"), last_sync_time=yang.gdata.from_xml_opt_str(n, "last-sync-time"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes()



mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups__entries_remaining_to_add(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups__entries_remaining_to_modify(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups__last_sync_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups(yang.adata.MNode):
    entries_remaining_to_add: ?int
    entries_remaining_to_modify: ?int
    last_sync_time: ?str

    mut def __init__(self, entries_remaining_to_add: ?int, entries_remaining_to_modify: ?int, last_sync_time: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.entries_remaining_to_add = entries_remaining_to_add
        self.entries_remaining_to_modify = entries_remaining_to_modify
        self.last_sync_time = last_sync_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _entries_remaining_to_add = self.entries_remaining_to_add
        _entries_remaining_to_modify = self.entries_remaining_to_modify
        _last_sync_time = self.last_sync_time
        if _entries_remaining_to_add is not None:
            children['entries-remaining-to-add'] = yang.gdata.Leaf('uint64', _entries_remaining_to_add)
        if _entries_remaining_to_modify is not None:
            children['entries-remaining-to-modify'] = yang.gdata.Leaf('uint64', _entries_remaining_to_modify)
        if _last_sync_time is not None:
            children['last-sync-time'] = yang.gdata.Leaf('string', _last_sync_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups(entries_remaining_to_add=n.get_opt_int("entries-remaining-to-add"), entries_remaining_to_modify=n.get_opt_int("entries-remaining-to-modify"), last_sync_time=n.get_opt_str("last-sync-time"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups(entries_remaining_to_add=yang.gdata.from_xml_opt_int(n, "entries-remaining-to-add"), entries_remaining_to_modify=yang.gdata.from_xml_opt_int(n, "entries-remaining-to-modify"), last_sync_time=yang.gdata.from_xml_opt_str(n, "last-sync-time"))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups()



class srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress(yang.adata.MNode):
    ip_routes: srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes
    next_hop_groups: srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups

    mut def __init__(self, ip_routes: ?srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes=None, next_hop_groups: ?srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        if ip_routes is not None:
            self.ip_routes = ip_routes
        else:
            self.ip_routes = srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes()
        self_ip_routes = self.ip_routes
        if self_ip_routes is not None:
            self_ip_routes._parent = self
        if next_hop_groups is not None:
            self.next_hop_groups = next_hop_groups
        else:
            self.next_hop_groups = srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups()
        self_next_hop_groups = self.next_hop_groups
        if self_next_hop_groups is not None:
            self_next_hop_groups._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_routes = self.ip_routes
        _next_hop_groups = self.next_hop_groups
        if _ip_routes is not None:
            children['ip-routes'] = _ip_routes.to_gdata()
        if _next_hop_groups is not None:
            children['next-hop-groups'] = _next_hop_groups.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:fib:ip-route-tables')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress(ip_routes=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes.from_gdata(n.get_opt_container("ip-routes")), next_hop_groups=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups.from_gdata(n.get_opt_container("next-hop-groups")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress(ip_routes=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__ip_routes.from_xml(yang.gdata.get_xml_opt_child(n, "ip-routes")), next_hop_groups=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress__next_hop_groups.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-groups")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress()



class srl_nokia_platform__platform__linecard__forwarding_complex__fib_table(yang.adata.MNode):
    next_hop_group: srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group
    programming_progress: srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress

    mut def __init__(self, next_hop_group: list[srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group_entry]=[], programming_progress: ?srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-linecard-fib"
        self.next_hop_group = srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group(elements=next_hop_group)
        self.next_hop_group._parent = self
        if programming_progress is not None:
            self.programming_progress = programming_progress
        else:
            self.programming_progress = srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress()
        self_programming_progress = self.programming_progress
        if self_programming_progress is not None:
            self_programming_progress._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _next_hop_group = self.next_hop_group
        _programming_progress = self.programming_progress
        if _next_hop_group is not None:
            children['next-hop-group'] = _next_hop_group.to_gdata()
        if _programming_progress is not None:
            children['programming-progress'] = _programming_progress.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform-linecard-fib')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table(next_hop_group=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group.from_gdata(n.get_opt_list("next-hop-group")), programming_progress=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress.from_gdata(n.get_opt_container("programming-progress")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex__fib_table:
        if n != None:
            return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table(next_hop_group=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__next_hop_group.from_xml(yang.gdata.get_xml_children(n, "next-hop-group")), programming_progress=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table__programming_progress.from_xml(yang.gdata.get_xml_opt_child(n, "programming-progress", "urn:nokia.com:srlinux:fib:ip-route-tables")))
        return srl_nokia_platform__platform__linecard__forwarding_complex__fib_table()



class srl_nokia_platform__platform__linecard__forwarding_complex_entry(yang.adata.MNode):
    name: str
    interfaces: list[str]
    oper_state: ?str
    last_booted: ?str
    last_booted_reason: ?str
    last_change: ?str
    part_number: ?str
    removable: ?bool
    fabric: srl_nokia_platform__platform__linecard__forwarding_complex__fabric
    pipeline: srl_nokia_platform__platform__linecard__forwarding_complex__pipeline
    control_plane_traffic: srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic
    drop_counters: srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters
    fib_table: srl_nokia_platform__platform__linecard__forwarding_complex__fib_table

    mut def __init__(self, name: str, interfaces: ?list[str]=None, oper_state: ?str, last_booted: ?str, last_booted_reason: ?str, last_change: ?str, part_number: ?str, removable: ?bool, fabric: ?srl_nokia_platform__platform__linecard__forwarding_complex__fabric=None, pipeline: list[srl_nokia_platform__platform__linecard__forwarding_complex__pipeline_entry]=[], control_plane_traffic: ?srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic=None, drop_counters: ?srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters=None, fib_table: ?srl_nokia_platform__platform__linecard__forwarding_complex__fib_table=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self.name = name
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = []
        self.oper_state = oper_state
        self.last_booted = last_booted
        self.last_booted_reason = last_booted_reason
        self.last_change = last_change
        self.part_number = part_number
        self.removable = removable
        if fabric is not None:
            self.fabric = fabric
        else:
            self.fabric = srl_nokia_platform__platform__linecard__forwarding_complex__fabric()
        self_fabric = self.fabric
        if self_fabric is not None:
            self_fabric._parent = self
        self.pipeline = srl_nokia_platform__platform__linecard__forwarding_complex__pipeline(elements=pipeline)
        self.pipeline._parent = self
        if control_plane_traffic is not None:
            self.control_plane_traffic = control_plane_traffic
        else:
            self.control_plane_traffic = srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic()
        self_control_plane_traffic = self.control_plane_traffic
        if self_control_plane_traffic is not None:
            self_control_plane_traffic._parent = self
        if drop_counters is not None:
            self.drop_counters = drop_counters
        else:
            self.drop_counters = srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters()
        self_drop_counters = self.drop_counters
        if self_drop_counters is not None:
            self_drop_counters._parent = self
        if fib_table is not None:
            self.fib_table = fib_table
        else:
            self.fib_table = srl_nokia_platform__platform__linecard__forwarding_complex__fib_table()
        self_fib_table = self.fib_table
        if self_fib_table is not None:
            self_fib_table._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _oper_state = self.oper_state
        _last_booted = self.last_booted
        _last_booted_reason = self.last_booted_reason
        _last_change = self.last_change
        _part_number = self.part_number
        _removable = self.removable
        _fabric = self.fabric
        _pipeline = self.pipeline
        _control_plane_traffic = self.control_plane_traffic
        _drop_counters = self.drop_counters
        _fib_table = self.fib_table
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        children['interfaces'] = yang.gdata.LeafList(self.interfaces)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _last_booted is not None:
            children['last-booted'] = yang.gdata.Leaf('string', _last_booted)
        if _last_booted_reason is not None:
            children['last-booted-reason'] = yang.gdata.Leaf('identityref', _last_booted_reason)
        if _last_change is not None:
            children['last-change'] = yang.gdata.Leaf('string', _last_change)
        if _part_number is not None:
            children['part-number'] = yang.gdata.Leaf('string', _part_number)
        if _removable is not None:
            children['removable'] = yang.gdata.Leaf('boolean', _removable)
        if _fabric is not None:
            children['fabric'] = _fabric.to_gdata()
        if _pipeline is not None:
            children['pipeline'] = _pipeline.to_gdata()
        if _control_plane_traffic is not None:
            children['control-plane-traffic'] = _control_plane_traffic.to_gdata()
        if _drop_counters is not None:
            children['drop-counters'] = _drop_counters.to_gdata()
        if _fib_table is not None:
            children['fib-table'] = _fib_table.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex_entry(name=n.get_str("name"), interfaces=n.get_opt_strs("interfaces"), oper_state=n.get_opt_str("oper-state"), last_booted=n.get_opt_str("last-booted"), last_booted_reason=n.get_opt_str("last-booted-reason"), last_change=n.get_opt_str("last-change"), part_number=n.get_opt_str("part-number"), removable=n.get_opt_bool("removable"), fabric=srl_nokia_platform__platform__linecard__forwarding_complex__fabric.from_gdata(n.get_opt_container("fabric")), pipeline=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline.from_gdata(n.get_opt_list("pipeline")), control_plane_traffic=srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic.from_gdata(n.get_opt_container("control-plane-traffic")), drop_counters=srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters.from_gdata(n.get_opt_container("drop-counters")), fib_table=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table.from_gdata(n.get_opt_container("fib-table")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_platform__platform__linecard__forwarding_complex_entry:
        return srl_nokia_platform__platform__linecard__forwarding_complex_entry(name=yang.gdata.from_xml_str(n, "name"), interfaces=yang.gdata.from_xml_opt_strs(n, "interfaces"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), last_booted=yang.gdata.from_xml_opt_str(n, "last-booted"), last_booted_reason=yang.gdata.from_xml_opt_str(n, "last-booted-reason"), last_change=yang.gdata.from_xml_opt_str(n, "last-change"), part_number=yang.gdata.from_xml_opt_str(n, "part-number"), removable=yang.gdata.from_xml_opt_bool(n, "removable"), fabric=srl_nokia_platform__platform__linecard__forwarding_complex__fabric.from_xml(yang.gdata.get_xml_opt_child(n, "fabric")), pipeline=srl_nokia_platform__platform__linecard__forwarding_complex__pipeline.from_xml(yang.gdata.get_xml_children(n, "pipeline")), control_plane_traffic=srl_nokia_platform__platform__linecard__forwarding_complex__control_plane_traffic.from_xml(yang.gdata.get_xml_opt_child(n, "control-plane-traffic")), drop_counters=srl_nokia_platform__platform__linecard__forwarding_complex__drop_counters.from_xml(yang.gdata.get_xml_opt_child(n, "drop-counters")), fib_table=srl_nokia_platform__platform__linecard__forwarding_complex__fib_table.from_xml(yang.gdata.get_xml_opt_child(n, "fib-table", "urn:nokia.com:srlinux:chassis:platform-linecard-fib")))

class srl_nokia_platform__platform__linecard__forwarding_complex(yang.adata.MNode):
    elements: list[srl_nokia_platform__platform__linecard__forwarding_complex_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self._name = 'forwarding-complex'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_platform__platform__linecard__forwarding_complex_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_platform__platform__linecard__forwarding_complex_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_platform__platform__linecard__forwarding_complex_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_platform__platform__linecard__forwarding_complex_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_platform__platform__linecard__forwarding_complex_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_platform__platform__linecard__software_version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__locator_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__linecard__power__allocated(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_platform__platform__linecard__power__used(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_platform__platform__linecard__power__required(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_platform__platform__linecard__power(yang.adata.MNode):
    allocated: ?int
    used: ?int
    required: ?int

    mut def __init__(self, allocated: ?int, used: ?int, required: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self.allocated = allocated
        self.used = used
        self.required = required

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allocated = self.allocated
        _used = self.used
        _required = self.required
        if _allocated is not None:
            children['allocated'] = yang.gdata.Leaf('uint32', _allocated)
        if _used is not None:
            children['used'] = yang.gdata.Leaf('uint32', _used)
        if _required is not None:
            children['required'] = yang.gdata.Leaf('uint32', _required)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__power:
        if n != None:
            return srl_nokia_platform__platform__linecard__power(allocated=n.get_opt_int("allocated"), used=n.get_opt_int("used"), required=n.get_opt_int("required"))
        return srl_nokia_platform__platform__linecard__power()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__power:
        if n != None:
            return srl_nokia_platform__platform__linecard__power(allocated=yang.gdata.from_xml_opt_int(n, "allocated"), used=yang.gdata.from_xml_opt_int(n, "used"), required=yang.gdata.from_xml_opt_int(n, "required"))
        return srl_nokia_platform__platform__linecard__power()



mut def from_json_srl_nokia_platform__platform__linecard__temperature__instant(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_platform__platform__linecard__temperature__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_platform__platform__linecard__temperature__maximum_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__linecard__temperature__alarm_status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_platform__platform__linecard__temperature__margin(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

class srl_nokia_platform__platform__linecard__temperature(yang.adata.MNode):
    instant: ?int
    maximum: ?int
    maximum_time: ?str
    alarm_status: ?bool
    margin: ?int

    mut def __init__(self, instant: ?int, maximum: ?int, maximum_time: ?str, alarm_status: ?bool, margin: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self.instant = instant
        self.maximum = maximum
        self.maximum_time = maximum_time
        self.alarm_status = alarm_status
        self.margin = margin

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instant = self.instant
        _maximum = self.maximum
        _maximum_time = self.maximum_time
        _alarm_status = self.alarm_status
        _margin = self.margin
        if _instant is not None:
            children['instant'] = yang.gdata.Leaf('int16', _instant)
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('int16', _maximum)
        if _maximum_time is not None:
            children['maximum-time'] = yang.gdata.Leaf('string', _maximum_time)
        if _alarm_status is not None:
            children['alarm-status'] = yang.gdata.Leaf('boolean', _alarm_status)
        if _margin is not None:
            children['margin'] = yang.gdata.Leaf('int16', _margin)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__linecard__temperature:
        if n != None:
            return srl_nokia_platform__platform__linecard__temperature(instant=n.get_opt_int("instant"), maximum=n.get_opt_int("maximum"), maximum_time=n.get_opt_str("maximum-time"), alarm_status=n.get_opt_bool("alarm-status"), margin=n.get_opt_int("margin"))
        return srl_nokia_platform__platform__linecard__temperature()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__linecard__temperature:
        if n != None:
            return srl_nokia_platform__platform__linecard__temperature(instant=yang.gdata.from_xml_opt_int(n, "instant"), maximum=yang.gdata.from_xml_opt_int(n, "maximum"), maximum_time=yang.gdata.from_xml_opt_str(n, "maximum-time"), alarm_status=yang.gdata.from_xml_opt_bool(n, "alarm-status"), margin=yang.gdata.from_xml_opt_int(n, "margin"))
        return srl_nokia_platform__platform__linecard__temperature()



class srl_nokia_platform__platform__linecard_entry(yang.adata.MNode):
    slot: int
    admin_state: str
    oper_state: ?str
    last_booted: ?str
    last_booted_reason: ?str
    last_change: ?str
    part_number: ?str
    removable: ?bool
    failure_reason: ?str
    clei_code: ?str
    serial_number: ?str
    manufactured_date: ?str
    bios: srl_nokia_platform__platform__linecard__bios
    rebooting_at: ?str
    type: ?str
    forwarding_complex: srl_nokia_platform__platform__linecard__forwarding_complex
    software_version: ?str
    locator_state: str
    power: srl_nokia_platform__platform__linecard__power
    temperature: srl_nokia_platform__platform__linecard__temperature

    mut def __init__(self, slot: int, admin_state: ?str=None, oper_state: ?str, last_booted: ?str, last_booted_reason: ?str, last_change: ?str, part_number: ?str, removable: ?bool, failure_reason: ?str, clei_code: ?str, serial_number: ?str, manufactured_date: ?str, bios: ?srl_nokia_platform__platform__linecard__bios=None, rebooting_at: ?str, type: ?str, forwarding_complex: list[srl_nokia_platform__platform__linecard__forwarding_complex_entry]=[], software_version: ?str, locator_state: ?str=None, power: ?srl_nokia_platform__platform__linecard__power=None, temperature: ?srl_nokia_platform__platform__linecard__temperature=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self.slot = slot
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.oper_state = oper_state
        self.last_booted = last_booted
        self.last_booted_reason = last_booted_reason
        self.last_change = last_change
        self.part_number = part_number
        self.removable = removable
        self.failure_reason = failure_reason
        self.clei_code = clei_code
        self.serial_number = serial_number
        self.manufactured_date = manufactured_date
        if bios is not None:
            self.bios = bios
        else:
            self.bios = srl_nokia_platform__platform__linecard__bios()
        self_bios = self.bios
        if self_bios is not None:
            self_bios._parent = self
        self.rebooting_at = rebooting_at
        self.type = type
        self.forwarding_complex = srl_nokia_platform__platform__linecard__forwarding_complex(elements=forwarding_complex)
        self.forwarding_complex._parent = self
        self.software_version = software_version
        if locator_state != None:
            self.locator_state = locator_state
        else:
            self.locator_state = "inactive"
        if power is not None:
            self.power = power
        else:
            self.power = srl_nokia_platform__platform__linecard__power()
        self_power = self.power
        if self_power is not None:
            self_power._parent = self
        if temperature is not None:
            self.temperature = temperature
        else:
            self.temperature = srl_nokia_platform__platform__linecard__temperature()
        self_temperature = self.temperature
        if self_temperature is not None:
            self_temperature._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _slot = self.slot
        _admin_state = self.admin_state
        _oper_state = self.oper_state
        _last_booted = self.last_booted
        _last_booted_reason = self.last_booted_reason
        _last_change = self.last_change
        _part_number = self.part_number
        _removable = self.removable
        _failure_reason = self.failure_reason
        _clei_code = self.clei_code
        _serial_number = self.serial_number
        _manufactured_date = self.manufactured_date
        _bios = self.bios
        _rebooting_at = self.rebooting_at
        _type = self.type
        _forwarding_complex = self.forwarding_complex
        _software_version = self.software_version
        _locator_state = self.locator_state
        _power = self.power
        _temperature = self.temperature
        if _slot is not None:
            children['slot'] = yang.gdata.Leaf('uint8', _slot)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _last_booted is not None:
            children['last-booted'] = yang.gdata.Leaf('string', _last_booted)
        if _last_booted_reason is not None:
            children['last-booted-reason'] = yang.gdata.Leaf('identityref', _last_booted_reason)
        if _last_change is not None:
            children['last-change'] = yang.gdata.Leaf('string', _last_change)
        if _part_number is not None:
            children['part-number'] = yang.gdata.Leaf('string', _part_number)
        if _removable is not None:
            children['removable'] = yang.gdata.Leaf('boolean', _removable)
        if _failure_reason is not None:
            children['failure-reason'] = yang.gdata.Leaf('string', _failure_reason)
        if _clei_code is not None:
            children['clei-code'] = yang.gdata.Leaf('string', _clei_code)
        if _serial_number is not None:
            children['serial-number'] = yang.gdata.Leaf('string', _serial_number)
        if _manufactured_date is not None:
            children['manufactured-date'] = yang.gdata.Leaf('string', _manufactured_date)
        if _bios is not None:
            children['bios'] = _bios.to_gdata()
        if _rebooting_at is not None:
            children['rebooting-at'] = yang.gdata.Leaf('string', _rebooting_at)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('string', _type)
        if _forwarding_complex is not None:
            children['forwarding-complex'] = _forwarding_complex.to_gdata()
        if _software_version is not None:
            children['software-version'] = yang.gdata.Leaf('string', _software_version)
        if _locator_state is not None:
            children['locator-state'] = yang.gdata.Leaf('enumeration', _locator_state)
        if _power is not None:
            children['power'] = _power.to_gdata()
        if _temperature is not None:
            children['temperature'] = _temperature.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.slot)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_platform__platform__linecard_entry:
        return srl_nokia_platform__platform__linecard_entry(slot=n.get_int("slot"), admin_state=n.get_opt_str("admin-state"), oper_state=n.get_opt_str("oper-state"), last_booted=n.get_opt_str("last-booted"), last_booted_reason=n.get_opt_str("last-booted-reason"), last_change=n.get_opt_str("last-change"), part_number=n.get_opt_str("part-number"), removable=n.get_opt_bool("removable"), failure_reason=n.get_opt_str("failure-reason"), clei_code=n.get_opt_str("clei-code"), serial_number=n.get_opt_str("serial-number"), manufactured_date=n.get_opt_str("manufactured-date"), bios=srl_nokia_platform__platform__linecard__bios.from_gdata(n.get_opt_container("bios")), rebooting_at=n.get_opt_str("rebooting-at"), type=n.get_opt_str("type"), forwarding_complex=srl_nokia_platform__platform__linecard__forwarding_complex.from_gdata(n.get_opt_list("forwarding-complex")), software_version=n.get_opt_str("software-version"), locator_state=n.get_opt_str("locator-state"), power=srl_nokia_platform__platform__linecard__power.from_gdata(n.get_opt_container("power")), temperature=srl_nokia_platform__platform__linecard__temperature.from_gdata(n.get_opt_container("temperature")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_platform__platform__linecard_entry:
        return srl_nokia_platform__platform__linecard_entry(slot=yang.gdata.from_xml_int(n, "slot"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), last_booted=yang.gdata.from_xml_opt_str(n, "last-booted"), last_booted_reason=yang.gdata.from_xml_opt_str(n, "last-booted-reason"), last_change=yang.gdata.from_xml_opt_str(n, "last-change"), part_number=yang.gdata.from_xml_opt_str(n, "part-number"), removable=yang.gdata.from_xml_opt_bool(n, "removable"), failure_reason=yang.gdata.from_xml_opt_str(n, "failure-reason"), clei_code=yang.gdata.from_xml_opt_str(n, "clei-code"), serial_number=yang.gdata.from_xml_opt_str(n, "serial-number"), manufactured_date=yang.gdata.from_xml_opt_str(n, "manufactured-date"), bios=srl_nokia_platform__platform__linecard__bios.from_xml(yang.gdata.get_xml_opt_child(n, "bios")), rebooting_at=yang.gdata.from_xml_opt_str(n, "rebooting-at"), type=yang.gdata.from_xml_opt_str(n, "type"), forwarding_complex=srl_nokia_platform__platform__linecard__forwarding_complex.from_xml(yang.gdata.get_xml_children(n, "forwarding-complex")), software_version=yang.gdata.from_xml_opt_str(n, "software-version"), locator_state=yang.gdata.from_xml_opt_str(n, "locator-state"), power=srl_nokia_platform__platform__linecard__power.from_xml(yang.gdata.get_xml_opt_child(n, "power")), temperature=srl_nokia_platform__platform__linecard__temperature.from_xml(yang.gdata.get_xml_opt_child(n, "temperature")))

class srl_nokia_platform__platform__linecard(yang.adata.MNode):
    elements: list[srl_nokia_platform__platform__linecard_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-lc"
        self._name = 'linecard'
        self.elements = elements

    mut def create(self, slot):
        for e in self.elements:
            match = True
            if e.slot != slot:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_platform__platform__linecard_entry(slot)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['slot'], elements, ns='urn:nokia.com:srlinux:chassis:platform-lc')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_platform__platform__linecard_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_platform__platform__linecard_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_platform__platform__linecard_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_platform__platform__linecard_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_platform__platform__control__slot(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__role(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__control__disk_encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_platform__platform__control__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__control__last_booted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__last_booted_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_platform__platform__control__last_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__part_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__removable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_platform__platform__control__failure_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__clei_code(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__serial_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__manufactured_date(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__bootloader__manufacturer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__bootloader__software_version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_platform__platform__control__bootloader(yang.adata.MNode):
    manufacturer: ?str
    software_version: ?str

    mut def __init__(self, manufacturer: ?str, software_version: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self.manufacturer = manufacturer
        self.software_version = software_version

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _manufacturer = self.manufacturer
        _software_version = self.software_version
        if _manufacturer is not None:
            children['manufacturer'] = yang.gdata.Leaf('string', _manufacturer)
        if _software_version is not None:
            children['software-version'] = yang.gdata.Leaf('string', _software_version)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__bootloader:
        if n != None:
            return srl_nokia_platform__platform__control__bootloader(manufacturer=n.get_opt_str("manufacturer"), software_version=n.get_opt_str("software-version"))
        return srl_nokia_platform__platform__control__bootloader()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__bootloader:
        if n != None:
            return srl_nokia_platform__platform__control__bootloader(manufacturer=yang.gdata.from_xml_opt_str(n, "manufacturer"), software_version=yang.gdata.from_xml_opt_str(n, "software-version"))
        return srl_nokia_platform__platform__control__bootloader()



mut def from_json_srl_nokia_platform__platform__control__bios__manufacturer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__bios__software_version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_platform__platform__control__bios(yang.adata.MNode):
    manufacturer: ?str
    software_version: ?str

    mut def __init__(self, manufacturer: ?str, software_version: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self.manufacturer = manufacturer
        self.software_version = software_version

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _manufacturer = self.manufacturer
        _software_version = self.software_version
        if _manufacturer is not None:
            children['manufacturer'] = yang.gdata.Leaf('string', _manufacturer)
        if _software_version is not None:
            children['software-version'] = yang.gdata.Leaf('string', _software_version)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__bios:
        if n != None:
            return srl_nokia_platform__platform__control__bios(manufacturer=n.get_opt_str("manufacturer"), software_version=n.get_opt_str("software-version"))
        return srl_nokia_platform__platform__control__bios()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__bios:
        if n != None:
            return srl_nokia_platform__platform__control__bios(manufacturer=yang.gdata.from_xml_opt_str(n, "manufacturer"), software_version=yang.gdata.from_xml_opt_str(n, "software-version"))
        return srl_nokia_platform__platform__control__bios()



mut def from_json_srl_nokia_platform__platform__control__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_platform__platform__control__interface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__control__interface__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_platform__platform__control__interface_entry(yang.adata.MNode):
    name: str
    admin_state: ?str
    oper_state: ?str

    mut def __init__(self, name: str, admin_state: ?str, oper_state: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self.name = name
        self.admin_state = admin_state
        self.oper_state = oper_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _admin_state = self.admin_state
        _oper_state = self.oper_state
        if _name is not None:
            children['name'] = yang.gdata.Leaf('identityref', _name)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_platform__platform__control__interface_entry:
        return srl_nokia_platform__platform__control__interface_entry(name=n.get_str("name"), admin_state=n.get_opt_str("admin-state"), oper_state=n.get_opt_str("oper-state"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_platform__platform__control__interface_entry:
        return srl_nokia_platform__platform__control__interface_entry(name=yang.gdata.from_xml_str(n, "name"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"))

class srl_nokia_platform__platform__control__interface(yang.adata.MNode):
    elements: list[srl_nokia_platform__platform__control__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_platform__platform__control__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_platform__platform__control__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_platform__platform__control__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_platform__platform__control__interface_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_platform__platform__control__interface_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_platform__platform__control__last_switchover_reason__trigger(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_platform__platform__control__last_switchover_reason__details(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_platform__platform__control__last_switchover_reason(yang.adata.MNode):
    trigger: ?str
    details: ?str

    mut def __init__(self, trigger: ?str, details: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self.trigger = trigger
        self.details = details

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _trigger = self.trigger
        _details = self.details
        if _trigger is not None:
            children['trigger'] = yang.gdata.Leaf('identityref', _trigger)
        if _details is not None:
            children['details'] = yang.gdata.Leaf('string', _details)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__last_switchover_reason:
        if n != None:
            return srl_nokia_platform__platform__control__last_switchover_reason(trigger=n.get_opt_str("trigger"), details=n.get_opt_str("details"))
        return srl_nokia_platform__platform__control__last_switchover_reason()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__last_switchover_reason:
        if n != None:
            return srl_nokia_platform__platform__control__last_switchover_reason(trigger=yang.gdata.from_xml_opt_str(n, "trigger"), details=yang.gdata.from_xml_opt_str(n, "details"))
        return srl_nokia_platform__platform__control__last_switchover_reason()



mut def from_json_srl_nokia_platform__platform__control__rebooting_at(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__software_version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__locator_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_platform__platform__control__power__allocated(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_platform__platform__control__power__used(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_platform__platform__control__power__required(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_platform__platform__control__power(yang.adata.MNode):
    allocated: ?int
    used: ?int
    required: ?int

    mut def __init__(self, allocated: ?int, used: ?int, required: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self.allocated = allocated
        self.used = used
        self.required = required

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allocated = self.allocated
        _used = self.used
        _required = self.required
        if _allocated is not None:
            children['allocated'] = yang.gdata.Leaf('uint32', _allocated)
        if _used is not None:
            children['used'] = yang.gdata.Leaf('uint32', _used)
        if _required is not None:
            children['required'] = yang.gdata.Leaf('uint32', _required)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__power:
        if n != None:
            return srl_nokia_platform__platform__control__power(allocated=n.get_opt_int("allocated"), used=n.get_opt_int("used"), required=n.get_opt_int("required"))
        return srl_nokia_platform__platform__control__power()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__power:
        if n != None:
            return srl_nokia_platform__platform__control__power(allocated=yang.gdata.from_xml_opt_int(n, "allocated"), used=yang.gdata.from_xml_opt_int(n, "used"), required=yang.gdata.from_xml_opt_int(n, "required"))
        return srl_nokia_platform__platform__control__power()



mut def from_json_srl_nokia_platform__platform__control__temperature__instant(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_platform__platform__control__temperature__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_platform__platform__control__temperature__maximum_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_platform__platform__control__temperature__alarm_status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_platform__platform__control__temperature__margin(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

class srl_nokia_platform__platform__control__temperature(yang.adata.MNode):
    instant: ?int
    maximum: ?int
    maximum_time: ?str
    alarm_status: ?bool
    margin: ?int

    mut def __init__(self, instant: ?int, maximum: ?int, maximum_time: ?str, alarm_status: ?bool, margin: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self.instant = instant
        self.maximum = maximum
        self.maximum_time = maximum_time
        self.alarm_status = alarm_status
        self.margin = margin

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instant = self.instant
        _maximum = self.maximum
        _maximum_time = self.maximum_time
        _alarm_status = self.alarm_status
        _margin = self.margin
        if _instant is not None:
            children['instant'] = yang.gdata.Leaf('int16', _instant)
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('int16', _maximum)
        if _maximum_time is not None:
            children['maximum-time'] = yang.gdata.Leaf('string', _maximum_time)
        if _alarm_status is not None:
            children['alarm-status'] = yang.gdata.Leaf('boolean', _alarm_status)
        if _margin is not None:
            children['margin'] = yang.gdata.Leaf('int16', _margin)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__temperature:
        if n != None:
            return srl_nokia_platform__platform__control__temperature(instant=n.get_opt_int("instant"), maximum=n.get_opt_int("maximum"), maximum_time=n.get_opt_str("maximum-time"), alarm_status=n.get_opt_bool("alarm-status"), margin=n.get_opt_int("margin"))
        return srl_nokia_platform__platform__control__temperature()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__temperature:
        if n != None:
            return srl_nokia_platform__platform__control__temperature(instant=yang.gdata.from_xml_opt_int(n, "instant"), maximum=yang.gdata.from_xml_opt_int(n, "maximum"), maximum_time=yang.gdata.from_xml_opt_str(n, "maximum-time"), alarm_status=yang.gdata.from_xml_opt_bool(n, "alarm-status"), margin=yang.gdata.from_xml_opt_int(n, "margin"))
        return srl_nokia_platform__platform__control__temperature()



mut def from_json_srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes__entries_remaining_to_add(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes__entries_remaining_to_modify(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes__last_sync_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes(yang.adata.MNode):
    entries_remaining_to_add: ?int
    entries_remaining_to_modify: ?int
    last_sync_time: ?str

    mut def __init__(self, entries_remaining_to_add: ?int, entries_remaining_to_modify: ?int, last_sync_time: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.entries_remaining_to_add = entries_remaining_to_add
        self.entries_remaining_to_modify = entries_remaining_to_modify
        self.last_sync_time = last_sync_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _entries_remaining_to_add = self.entries_remaining_to_add
        _entries_remaining_to_modify = self.entries_remaining_to_modify
        _last_sync_time = self.last_sync_time
        if _entries_remaining_to_add is not None:
            children['entries-remaining-to-add'] = yang.gdata.Leaf('uint64', _entries_remaining_to_add)
        if _entries_remaining_to_modify is not None:
            children['entries-remaining-to-modify'] = yang.gdata.Leaf('uint64', _entries_remaining_to_modify)
        if _last_sync_time is not None:
            children['last-sync-time'] = yang.gdata.Leaf('string', _last_sync_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes(entries_remaining_to_add=n.get_opt_int("entries-remaining-to-add"), entries_remaining_to_modify=n.get_opt_int("entries-remaining-to-modify"), last_sync_time=n.get_opt_str("last-sync-time"))
        return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes(entries_remaining_to_add=yang.gdata.from_xml_opt_int(n, "entries-remaining-to-add"), entries_remaining_to_modify=yang.gdata.from_xml_opt_int(n, "entries-remaining-to-modify"), last_sync_time=yang.gdata.from_xml_opt_str(n, "last-sync-time"))
        return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes()



mut def from_json_srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups__entries_remaining_to_add(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups__entries_remaining_to_modify(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups__last_sync_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups(yang.adata.MNode):
    entries_remaining_to_add: ?int
    entries_remaining_to_modify: ?int
    last_sync_time: ?str

    mut def __init__(self, entries_remaining_to_add: ?int, entries_remaining_to_modify: ?int, last_sync_time: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.entries_remaining_to_add = entries_remaining_to_add
        self.entries_remaining_to_modify = entries_remaining_to_modify
        self.last_sync_time = last_sync_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _entries_remaining_to_add = self.entries_remaining_to_add
        _entries_remaining_to_modify = self.entries_remaining_to_modify
        _last_sync_time = self.last_sync_time
        if _entries_remaining_to_add is not None:
            children['entries-remaining-to-add'] = yang.gdata.Leaf('uint64', _entries_remaining_to_add)
        if _entries_remaining_to_modify is not None:
            children['entries-remaining-to-modify'] = yang.gdata.Leaf('uint64', _entries_remaining_to_modify)
        if _last_sync_time is not None:
            children['last-sync-time'] = yang.gdata.Leaf('string', _last_sync_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups(entries_remaining_to_add=n.get_opt_int("entries-remaining-to-add"), entries_remaining_to_modify=n.get_opt_int("entries-remaining-to-modify"), last_sync_time=n.get_opt_str("last-sync-time"))
        return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups(entries_remaining_to_add=yang.gdata.from_xml_opt_int(n, "entries-remaining-to-add"), entries_remaining_to_modify=yang.gdata.from_xml_opt_int(n, "entries-remaining-to-modify"), last_sync_time=yang.gdata.from_xml_opt_str(n, "last-sync-time"))
        return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups()



class srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress(yang.adata.MNode):
    ip_routes: srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes
    next_hop_groups: srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups

    mut def __init__(self, ip_routes: ?srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes=None, next_hop_groups: ?srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        if ip_routes is not None:
            self.ip_routes = ip_routes
        else:
            self.ip_routes = srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes()
        self_ip_routes = self.ip_routes
        if self_ip_routes is not None:
            self_ip_routes._parent = self
        if next_hop_groups is not None:
            self.next_hop_groups = next_hop_groups
        else:
            self.next_hop_groups = srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups()
        self_next_hop_groups = self.next_hop_groups
        if self_next_hop_groups is not None:
            self_next_hop_groups._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_routes = self.ip_routes
        _next_hop_groups = self.next_hop_groups
        if _ip_routes is not None:
            children['ip-routes'] = _ip_routes.to_gdata()
        if _next_hop_groups is not None:
            children['next-hop-groups'] = _next_hop_groups.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:fib:ip-route-tables')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress(ip_routes=srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes.from_gdata(n.get_opt_container("ip-routes")), next_hop_groups=srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups.from_gdata(n.get_opt_container("next-hop-groups")))
        return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress(ip_routes=srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__ip_routes.from_xml(yang.gdata.get_xml_opt_child(n, "ip-routes")), next_hop_groups=srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress__next_hop_groups.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-groups")))
        return srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress()



class srl_nokia_platform__platform__control__forwarding_plane__fib_table(yang.adata.MNode):
    programming_progress: srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress

    mut def __init__(self, programming_progress: ?srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control-fp"
        if programming_progress is not None:
            self.programming_progress = programming_progress
        else:
            self.programming_progress = srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress()
        self_programming_progress = self.programming_progress
        if self_programming_progress is not None:
            self_programming_progress._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _programming_progress = self.programming_progress
        if _programming_progress is not None:
            children['programming-progress'] = _programming_progress.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__forwarding_plane__fib_table:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane__fib_table(programming_progress=srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress.from_gdata(n.get_opt_container("programming-progress")))
        return srl_nokia_platform__platform__control__forwarding_plane__fib_table()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__forwarding_plane__fib_table:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane__fib_table(programming_progress=srl_nokia_platform__platform__control__forwarding_plane__fib_table__programming_progress.from_xml(yang.gdata.get_xml_opt_child(n, "programming-progress", "urn:nokia.com:srlinux:fib:ip-route-tables")))
        return srl_nokia_platform__platform__control__forwarding_plane__fib_table()



class srl_nokia_platform__platform__control__forwarding_plane(yang.adata.MNode):
    fib_table: srl_nokia_platform__platform__control__forwarding_plane__fib_table

    mut def __init__(self, fib_table: ?srl_nokia_platform__platform__control__forwarding_plane__fib_table=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control-fp"
        if fib_table is not None:
            self.fib_table = fib_table
        else:
            self.fib_table = srl_nokia_platform__platform__control__forwarding_plane__fib_table()
        self_fib_table = self.fib_table
        if self_fib_table is not None:
            self_fib_table._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fib_table = self.fib_table
        if _fib_table is not None:
            children['fib-table'] = _fib_table.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform-control-fp')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform__control__forwarding_plane:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane(fib_table=srl_nokia_platform__platform__control__forwarding_plane__fib_table.from_gdata(n.get_opt_container("fib-table")))
        return srl_nokia_platform__platform__control__forwarding_plane()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform__control__forwarding_plane:
        if n != None:
            return srl_nokia_platform__platform__control__forwarding_plane(fib_table=srl_nokia_platform__platform__control__forwarding_plane__fib_table.from_xml(yang.gdata.get_xml_opt_child(n, "fib-table")))
        return srl_nokia_platform__platform__control__forwarding_plane()



class srl_nokia_platform__platform__control_entry(yang.adata.MNode):
    slot: str
    type: ?str
    role: ?str
    disk_encrypted: ?bool
    oper_state: ?str
    last_booted: ?str
    last_booted_reason: ?str
    last_change: ?str
    part_number: ?str
    removable: ?bool
    failure_reason: ?str
    clei_code: ?str
    serial_number: ?str
    manufactured_date: ?str
    bootloader: srl_nokia_platform__platform__control__bootloader
    bios: srl_nokia_platform__platform__control__bios
    interface: srl_nokia_platform__platform__control__interface
    last_switchover_reason: srl_nokia_platform__platform__control__last_switchover_reason
    rebooting_at: ?str
    software_version: ?str
    locator_state: str
    power: srl_nokia_platform__platform__control__power
    temperature: srl_nokia_platform__platform__control__temperature
    forwarding_plane: srl_nokia_platform__platform__control__forwarding_plane

    mut def __init__(self, slot: str, type: ?str, role: ?str, disk_encrypted: ?bool, oper_state: ?str, last_booted: ?str, last_booted_reason: ?str, last_change: ?str, part_number: ?str, removable: ?bool, failure_reason: ?str, clei_code: ?str, serial_number: ?str, manufactured_date: ?str, bootloader: ?srl_nokia_platform__platform__control__bootloader=None, bios: ?srl_nokia_platform__platform__control__bios=None, interface: list[srl_nokia_platform__platform__control__interface_entry]=[], last_switchover_reason: ?srl_nokia_platform__platform__control__last_switchover_reason=None, rebooting_at: ?str, software_version: ?str, locator_state: ?str=None, power: ?srl_nokia_platform__platform__control__power=None, temperature: ?srl_nokia_platform__platform__control__temperature=None, forwarding_plane: ?srl_nokia_platform__platform__control__forwarding_plane=None):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self.slot = slot
        self.type = type
        self.role = role
        self.disk_encrypted = disk_encrypted
        self.oper_state = oper_state
        self.last_booted = last_booted
        self.last_booted_reason = last_booted_reason
        self.last_change = last_change
        self.part_number = part_number
        self.removable = removable
        self.failure_reason = failure_reason
        self.clei_code = clei_code
        self.serial_number = serial_number
        self.manufactured_date = manufactured_date
        if bootloader is not None:
            self.bootloader = bootloader
        else:
            self.bootloader = srl_nokia_platform__platform__control__bootloader()
        self_bootloader = self.bootloader
        if self_bootloader is not None:
            self_bootloader._parent = self
        if bios is not None:
            self.bios = bios
        else:
            self.bios = srl_nokia_platform__platform__control__bios()
        self_bios = self.bios
        if self_bios is not None:
            self_bios._parent = self
        self.interface = srl_nokia_platform__platform__control__interface(elements=interface)
        self.interface._parent = self
        if last_switchover_reason is not None:
            self.last_switchover_reason = last_switchover_reason
        else:
            self.last_switchover_reason = srl_nokia_platform__platform__control__last_switchover_reason()
        self_last_switchover_reason = self.last_switchover_reason
        if self_last_switchover_reason is not None:
            self_last_switchover_reason._parent = self
        self.rebooting_at = rebooting_at
        self.software_version = software_version
        if locator_state != None:
            self.locator_state = locator_state
        else:
            self.locator_state = "inactive"
        if power is not None:
            self.power = power
        else:
            self.power = srl_nokia_platform__platform__control__power()
        self_power = self.power
        if self_power is not None:
            self_power._parent = self
        if temperature is not None:
            self.temperature = temperature
        else:
            self.temperature = srl_nokia_platform__platform__control__temperature()
        self_temperature = self.temperature
        if self_temperature is not None:
            self_temperature._parent = self
        if forwarding_plane is not None:
            self.forwarding_plane = forwarding_plane
        else:
            self.forwarding_plane = srl_nokia_platform__platform__control__forwarding_plane()
        self_forwarding_plane = self.forwarding_plane
        if self_forwarding_plane is not None:
            self_forwarding_plane._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _slot = self.slot
        _type = self.type
        _role = self.role
        _disk_encrypted = self.disk_encrypted
        _oper_state = self.oper_state
        _last_booted = self.last_booted
        _last_booted_reason = self.last_booted_reason
        _last_change = self.last_change
        _part_number = self.part_number
        _removable = self.removable
        _failure_reason = self.failure_reason
        _clei_code = self.clei_code
        _serial_number = self.serial_number
        _manufactured_date = self.manufactured_date
        _bootloader = self.bootloader
        _bios = self.bios
        _interface = self.interface
        _last_switchover_reason = self.last_switchover_reason
        _rebooting_at = self.rebooting_at
        _software_version = self.software_version
        _locator_state = self.locator_state
        _power = self.power
        _temperature = self.temperature
        _forwarding_plane = self.forwarding_plane
        if _slot is not None:
            children['slot'] = yang.gdata.Leaf('string', _slot)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('string', _type)
        if _role is not None:
            children['role'] = yang.gdata.Leaf('enumeration', _role)
        if _disk_encrypted is not None:
            children['disk-encrypted'] = yang.gdata.Leaf('boolean', _disk_encrypted)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _last_booted is not None:
            children['last-booted'] = yang.gdata.Leaf('string', _last_booted)
        if _last_booted_reason is not None:
            children['last-booted-reason'] = yang.gdata.Leaf('identityref', _last_booted_reason)
        if _last_change is not None:
            children['last-change'] = yang.gdata.Leaf('string', _last_change)
        if _part_number is not None:
            children['part-number'] = yang.gdata.Leaf('string', _part_number)
        if _removable is not None:
            children['removable'] = yang.gdata.Leaf('boolean', _removable)
        if _failure_reason is not None:
            children['failure-reason'] = yang.gdata.Leaf('string', _failure_reason)
        if _clei_code is not None:
            children['clei-code'] = yang.gdata.Leaf('string', _clei_code)
        if _serial_number is not None:
            children['serial-number'] = yang.gdata.Leaf('string', _serial_number)
        if _manufactured_date is not None:
            children['manufactured-date'] = yang.gdata.Leaf('string', _manufactured_date)
        if _bootloader is not None:
            children['bootloader'] = _bootloader.to_gdata()
        if _bios is not None:
            children['bios'] = _bios.to_gdata()
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        if _last_switchover_reason is not None:
            children['last-switchover-reason'] = _last_switchover_reason.to_gdata()
        if _rebooting_at is not None:
            children['rebooting-at'] = yang.gdata.Leaf('string', _rebooting_at)
        if _software_version is not None:
            children['software-version'] = yang.gdata.Leaf('string', _software_version)
        if _locator_state is not None:
            children['locator-state'] = yang.gdata.Leaf('enumeration', _locator_state)
        if _power is not None:
            children['power'] = _power.to_gdata()
        if _temperature is not None:
            children['temperature'] = _temperature.to_gdata()
        if _forwarding_plane is not None:
            children['forwarding-plane'] = _forwarding_plane.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.slot)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_platform__platform__control_entry:
        return srl_nokia_platform__platform__control_entry(slot=n.get_str("slot"), type=n.get_opt_str("type"), role=n.get_opt_str("role"), disk_encrypted=n.get_opt_bool("disk-encrypted"), oper_state=n.get_opt_str("oper-state"), last_booted=n.get_opt_str("last-booted"), last_booted_reason=n.get_opt_str("last-booted-reason"), last_change=n.get_opt_str("last-change"), part_number=n.get_opt_str("part-number"), removable=n.get_opt_bool("removable"), failure_reason=n.get_opt_str("failure-reason"), clei_code=n.get_opt_str("clei-code"), serial_number=n.get_opt_str("serial-number"), manufactured_date=n.get_opt_str("manufactured-date"), bootloader=srl_nokia_platform__platform__control__bootloader.from_gdata(n.get_opt_container("bootloader")), bios=srl_nokia_platform__platform__control__bios.from_gdata(n.get_opt_container("bios")), interface=srl_nokia_platform__platform__control__interface.from_gdata(n.get_opt_list("interface")), last_switchover_reason=srl_nokia_platform__platform__control__last_switchover_reason.from_gdata(n.get_opt_container("last-switchover-reason")), rebooting_at=n.get_opt_str("rebooting-at"), software_version=n.get_opt_str("software-version"), locator_state=n.get_opt_str("locator-state"), power=srl_nokia_platform__platform__control__power.from_gdata(n.get_opt_container("power")), temperature=srl_nokia_platform__platform__control__temperature.from_gdata(n.get_opt_container("temperature")), forwarding_plane=srl_nokia_platform__platform__control__forwarding_plane.from_gdata(n.get_opt_container("forwarding-plane")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_platform__platform__control_entry:
        return srl_nokia_platform__platform__control_entry(slot=yang.gdata.from_xml_str(n, "slot"), type=yang.gdata.from_xml_opt_str(n, "type"), role=yang.gdata.from_xml_opt_str(n, "role"), disk_encrypted=yang.gdata.from_xml_opt_bool(n, "disk-encrypted"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), last_booted=yang.gdata.from_xml_opt_str(n, "last-booted"), last_booted_reason=yang.gdata.from_xml_opt_str(n, "last-booted-reason"), last_change=yang.gdata.from_xml_opt_str(n, "last-change"), part_number=yang.gdata.from_xml_opt_str(n, "part-number"), removable=yang.gdata.from_xml_opt_bool(n, "removable"), failure_reason=yang.gdata.from_xml_opt_str(n, "failure-reason"), clei_code=yang.gdata.from_xml_opt_str(n, "clei-code"), serial_number=yang.gdata.from_xml_opt_str(n, "serial-number"), manufactured_date=yang.gdata.from_xml_opt_str(n, "manufactured-date"), bootloader=srl_nokia_platform__platform__control__bootloader.from_xml(yang.gdata.get_xml_opt_child(n, "bootloader")), bios=srl_nokia_platform__platform__control__bios.from_xml(yang.gdata.get_xml_opt_child(n, "bios")), interface=srl_nokia_platform__platform__control__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), last_switchover_reason=srl_nokia_platform__platform__control__last_switchover_reason.from_xml(yang.gdata.get_xml_opt_child(n, "last-switchover-reason")), rebooting_at=yang.gdata.from_xml_opt_str(n, "rebooting-at"), software_version=yang.gdata.from_xml_opt_str(n, "software-version"), locator_state=yang.gdata.from_xml_opt_str(n, "locator-state"), power=srl_nokia_platform__platform__control__power.from_xml(yang.gdata.get_xml_opt_child(n, "power")), temperature=srl_nokia_platform__platform__control__temperature.from_xml(yang.gdata.get_xml_opt_child(n, "temperature")), forwarding_plane=srl_nokia_platform__platform__control__forwarding_plane.from_xml(yang.gdata.get_xml_opt_child(n, "forwarding-plane", "urn:nokia.com:srlinux:chassis:platform-control-fp")))

class srl_nokia_platform__platform__control(yang.adata.MNode):
    elements: list[srl_nokia_platform__platform__control_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform-control"
        self._name = 'control'
        self.elements = elements

    mut def create(self, slot):
        for e in self.elements:
            match = True
            if e.slot != slot:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_platform__platform__control_entry(slot)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['slot'], elements, ns='urn:nokia.com:srlinux:chassis:platform-control')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_platform__platform__control_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_platform__platform__control_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_platform__platform__control_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_platform__platform__control_entry.from_xml(node))
        return res



class srl_nokia_platform__platform(yang.adata.MNode):
    trust: srl_nokia_platform__platform__trust
    linecard: srl_nokia_platform__platform__linecard
    control: srl_nokia_platform__platform__control

    mut def __init__(self, trust: ?srl_nokia_platform__platform__trust=None, linecard: list[srl_nokia_platform__platform__linecard_entry]=[], control: list[srl_nokia_platform__platform__control_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:platform"
        if trust is not None:
            self.trust = trust
        else:
            self.trust = srl_nokia_platform__platform__trust()
        self_trust = self.trust
        if self_trust is not None:
            self_trust._parent = self
        self.linecard = srl_nokia_platform__platform__linecard(elements=linecard)
        self.linecard._parent = self
        self.control = srl_nokia_platform__platform__control(elements=control)
        self.control._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _trust = self.trust
        _linecard = self.linecard
        _control = self.control
        if _trust is not None:
            children['trust'] = _trust.to_gdata()
        if _linecard is not None:
            children['linecard'] = _linecard.to_gdata()
        if _control is not None:
            children['control'] = _control.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform:
        if n != None:
            return srl_nokia_platform__platform(trust=srl_nokia_platform__platform__trust.from_gdata(n.get_opt_container("trust")), linecard=srl_nokia_platform__platform__linecard.from_gdata(n.get_opt_list("linecard")), control=srl_nokia_platform__platform__control.from_gdata(n.get_opt_list("control")))
        return srl_nokia_platform__platform()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_platform__platform:
        if n != None:
            return srl_nokia_platform__platform(trust=srl_nokia_platform__platform__trust.from_xml(yang.gdata.get_xml_opt_child(n, "trust")), linecard=srl_nokia_platform__platform__linecard.from_xml(yang.gdata.get_xml_children(n, "linecard", "urn:nokia.com:srlinux:chassis:platform-lc")), control=srl_nokia_platform__platform__control.from_xml(yang.gdata.get_xml_children(n, "control", "urn:nokia.com:srlinux:chassis:platform-control")))
        return srl_nokia_platform__platform()



mut def from_json_srl_nokia_interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__num_physical_channels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_interfaces__interface__breakout_mode__num_breakout_ports(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__breakout_mode__breakout_port_speed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__breakout_mode(yang.adata.MNode):
    num_breakout_ports: str
    breakout_port_speed: str

    mut def __init__(self, num_breakout_ports: str, breakout_port_speed: str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.num_breakout_ports = num_breakout_ports
        self.breakout_port_speed = breakout_port_speed

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _num_breakout_ports = self.num_breakout_ports
        _breakout_port_speed = self.breakout_port_speed
        if _num_breakout_ports is not None:
            children['num-breakout-ports'] = yang.gdata.Leaf('enumeration', _num_breakout_ports)
        if _breakout_port_speed is not None:
            children['breakout-port-speed'] = yang.gdata.Leaf('enumeration', _breakout_port_speed)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__breakout_mode:
        if n != None:
            return srl_nokia_interfaces__interface__breakout_mode(num_breakout_ports=n.get_str("num-breakout-ports"), breakout_port_speed=n.get_str("breakout-port-speed"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__breakout_mode:
        if n != None:
            return srl_nokia_interfaces__interface__breakout_mode(num_breakout_ports=yang.gdata.from_xml_str(n, "num-breakout-ports"), breakout_port_speed=yang.gdata.from_xml_str(n, "breakout-port-speed"))
        return None



mut def from_json_srl_nokia_interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__loopback_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ifindex(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__last_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__linecard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_interfaces__interface__forwarding_complex(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_interfaces__interface__phy_group_members(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_interfaces__interface__physical_channel(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_interfaces__interface__forwarding_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__in_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__in_unicast_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__in_broadcast_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__in_multicast_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__in_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__in_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__in_fcs_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_mirror_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_unicast_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_broadcast_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_multicast_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__out_mirror_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__carrier_transitions(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__statistics__last_clear(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_interfaces__interface__statistics(yang.adata.MNode):
    in_packets: int
    in_octets: int
    in_unicast_packets: int
    in_broadcast_packets: int
    in_multicast_packets: int
    in_discarded_packets: int
    in_error_packets: int
    in_fcs_error_packets: int
    out_packets: int
    out_octets: int
    out_mirror_octets: int
    out_unicast_packets: int
    out_broadcast_packets: int
    out_multicast_packets: int
    out_discarded_packets: int
    out_error_packets: int
    out_mirror_packets: int
    carrier_transitions: int
    last_clear: ?str

    mut def __init__(self, in_packets: ?int=None, in_octets: ?int=None, in_unicast_packets: ?int=None, in_broadcast_packets: ?int=None, in_multicast_packets: ?int=None, in_discarded_packets: ?int=None, in_error_packets: ?int=None, in_fcs_error_packets: ?int=None, out_packets: ?int=None, out_octets: ?int=None, out_mirror_octets: ?int=None, out_unicast_packets: ?int=None, out_broadcast_packets: ?int=None, out_multicast_packets: ?int=None, out_discarded_packets: ?int=None, out_error_packets: ?int=None, out_mirror_packets: ?int=None, carrier_transitions: ?int=None, last_clear: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if in_octets != None:
            self.in_octets = in_octets
        else:
            self.in_octets = 0
        if in_unicast_packets != None:
            self.in_unicast_packets = in_unicast_packets
        else:
            self.in_unicast_packets = 0
        if in_broadcast_packets != None:
            self.in_broadcast_packets = in_broadcast_packets
        else:
            self.in_broadcast_packets = 0
        if in_multicast_packets != None:
            self.in_multicast_packets = in_multicast_packets
        else:
            self.in_multicast_packets = 0
        if in_discarded_packets != None:
            self.in_discarded_packets = in_discarded_packets
        else:
            self.in_discarded_packets = 0
        if in_error_packets != None:
            self.in_error_packets = in_error_packets
        else:
            self.in_error_packets = 0
        if in_fcs_error_packets != None:
            self.in_fcs_error_packets = in_fcs_error_packets
        else:
            self.in_fcs_error_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_octets != None:
            self.out_octets = out_octets
        else:
            self.out_octets = 0
        if out_mirror_octets != None:
            self.out_mirror_octets = out_mirror_octets
        else:
            self.out_mirror_octets = 0
        if out_unicast_packets != None:
            self.out_unicast_packets = out_unicast_packets
        else:
            self.out_unicast_packets = 0
        if out_broadcast_packets != None:
            self.out_broadcast_packets = out_broadcast_packets
        else:
            self.out_broadcast_packets = 0
        if out_multicast_packets != None:
            self.out_multicast_packets = out_multicast_packets
        else:
            self.out_multicast_packets = 0
        if out_discarded_packets != None:
            self.out_discarded_packets = out_discarded_packets
        else:
            self.out_discarded_packets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0
        if out_mirror_packets != None:
            self.out_mirror_packets = out_mirror_packets
        else:
            self.out_mirror_packets = 0
        if carrier_transitions != None:
            self.carrier_transitions = carrier_transitions
        else:
            self.carrier_transitions = 0
        self.last_clear = last_clear

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_packets = self.in_packets
        _in_octets = self.in_octets
        _in_unicast_packets = self.in_unicast_packets
        _in_broadcast_packets = self.in_broadcast_packets
        _in_multicast_packets = self.in_multicast_packets
        _in_discarded_packets = self.in_discarded_packets
        _in_error_packets = self.in_error_packets
        _in_fcs_error_packets = self.in_fcs_error_packets
        _out_packets = self.out_packets
        _out_octets = self.out_octets
        _out_mirror_octets = self.out_mirror_octets
        _out_unicast_packets = self.out_unicast_packets
        _out_broadcast_packets = self.out_broadcast_packets
        _out_multicast_packets = self.out_multicast_packets
        _out_discarded_packets = self.out_discarded_packets
        _out_error_packets = self.out_error_packets
        _out_mirror_packets = self.out_mirror_packets
        _carrier_transitions = self.carrier_transitions
        _last_clear = self.last_clear
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _in_octets is not None:
            children['in-octets'] = yang.gdata.Leaf('uint64', _in_octets)
        if _in_unicast_packets is not None:
            children['in-unicast-packets'] = yang.gdata.Leaf('uint64', _in_unicast_packets)
        if _in_broadcast_packets is not None:
            children['in-broadcast-packets'] = yang.gdata.Leaf('uint64', _in_broadcast_packets)
        if _in_multicast_packets is not None:
            children['in-multicast-packets'] = yang.gdata.Leaf('uint64', _in_multicast_packets)
        if _in_discarded_packets is not None:
            children['in-discarded-packets'] = yang.gdata.Leaf('uint64', _in_discarded_packets)
        if _in_error_packets is not None:
            children['in-error-packets'] = yang.gdata.Leaf('uint64', _in_error_packets)
        if _in_fcs_error_packets is not None:
            children['in-fcs-error-packets'] = yang.gdata.Leaf('uint64', _in_fcs_error_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_octets is not None:
            children['out-octets'] = yang.gdata.Leaf('uint64', _out_octets)
        if _out_mirror_octets is not None:
            children['out-mirror-octets'] = yang.gdata.Leaf('uint64', _out_mirror_octets)
        if _out_unicast_packets is not None:
            children['out-unicast-packets'] = yang.gdata.Leaf('uint64', _out_unicast_packets)
        if _out_broadcast_packets is not None:
            children['out-broadcast-packets'] = yang.gdata.Leaf('uint64', _out_broadcast_packets)
        if _out_multicast_packets is not None:
            children['out-multicast-packets'] = yang.gdata.Leaf('uint64', _out_multicast_packets)
        if _out_discarded_packets is not None:
            children['out-discarded-packets'] = yang.gdata.Leaf('uint64', _out_discarded_packets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        if _out_mirror_packets is not None:
            children['out-mirror-packets'] = yang.gdata.Leaf('uint64', _out_mirror_packets)
        if _carrier_transitions is not None:
            children['carrier-transitions'] = yang.gdata.Leaf('uint64', _carrier_transitions)
        if _last_clear is not None:
            children['last-clear'] = yang.gdata.Leaf('string', _last_clear)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__statistics(in_packets=n.get_opt_int("in-packets"), in_octets=n.get_opt_int("in-octets"), in_unicast_packets=n.get_opt_int("in-unicast-packets"), in_broadcast_packets=n.get_opt_int("in-broadcast-packets"), in_multicast_packets=n.get_opt_int("in-multicast-packets"), in_discarded_packets=n.get_opt_int("in-discarded-packets"), in_error_packets=n.get_opt_int("in-error-packets"), in_fcs_error_packets=n.get_opt_int("in-fcs-error-packets"), out_packets=n.get_opt_int("out-packets"), out_octets=n.get_opt_int("out-octets"), out_mirror_octets=n.get_opt_int("out-mirror-octets"), out_unicast_packets=n.get_opt_int("out-unicast-packets"), out_broadcast_packets=n.get_opt_int("out-broadcast-packets"), out_multicast_packets=n.get_opt_int("out-multicast-packets"), out_discarded_packets=n.get_opt_int("out-discarded-packets"), out_error_packets=n.get_opt_int("out-error-packets"), out_mirror_packets=n.get_opt_int("out-mirror-packets"), carrier_transitions=n.get_opt_int("carrier-transitions"), last_clear=n.get_opt_str("last-clear"))
        return srl_nokia_interfaces__interface__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__statistics(in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), in_octets=yang.gdata.from_xml_opt_int(n, "in-octets"), in_unicast_packets=yang.gdata.from_xml_opt_int(n, "in-unicast-packets"), in_broadcast_packets=yang.gdata.from_xml_opt_int(n, "in-broadcast-packets"), in_multicast_packets=yang.gdata.from_xml_opt_int(n, "in-multicast-packets"), in_discarded_packets=yang.gdata.from_xml_opt_int(n, "in-discarded-packets"), in_error_packets=yang.gdata.from_xml_opt_int(n, "in-error-packets"), in_fcs_error_packets=yang.gdata.from_xml_opt_int(n, "in-fcs-error-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_octets=yang.gdata.from_xml_opt_int(n, "out-octets"), out_mirror_octets=yang.gdata.from_xml_opt_int(n, "out-mirror-octets"), out_unicast_packets=yang.gdata.from_xml_opt_int(n, "out-unicast-packets"), out_broadcast_packets=yang.gdata.from_xml_opt_int(n, "out-broadcast-packets"), out_multicast_packets=yang.gdata.from_xml_opt_int(n, "out-multicast-packets"), out_discarded_packets=yang.gdata.from_xml_opt_int(n, "out-discarded-packets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"), out_mirror_packets=yang.gdata.from_xml_opt_int(n, "out-mirror-packets"), carrier_transitions=yang.gdata.from_xml_opt_int(n, "carrier-transitions"), last_clear=yang.gdata.from_xml_opt_str(n, "last-clear"))
        return srl_nokia_interfaces__interface__statistics()



mut def from_json_srl_nokia_interfaces__interface__traffic_rate__in_bps(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__traffic_rate__out_bps(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_interfaces__interface__traffic_rate(yang.adata.MNode):
    in_bps: ?int
    out_bps: ?int

    mut def __init__(self, in_bps: ?int, out_bps: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.in_bps = in_bps
        self.out_bps = out_bps

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_bps = self.in_bps
        _out_bps = self.out_bps
        if _in_bps is not None:
            children['in-bps'] = yang.gdata.Leaf('uint64', _in_bps)
        if _out_bps is not None:
            children['out-bps'] = yang.gdata.Leaf('uint64', _out_bps)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__traffic_rate:
        if n != None:
            return srl_nokia_interfaces__interface__traffic_rate(in_bps=n.get_opt_int("in-bps"), out_bps=n.get_opt_int("out-bps"))
        return srl_nokia_interfaces__interface__traffic_rate()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__traffic_rate:
        if n != None:
            return srl_nokia_interfaces__interface__traffic_rate(in_bps=yang.gdata.from_xml_opt_int(n, "in-bps"), out_bps=yang.gdata.from_xml_opt_int(n, "out-bps"))
        return srl_nokia_interfaces__interface__traffic_rate()



mut def from_json_srl_nokia_interfaces__interface__adapter__model_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__adapter__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__adapter__vendor_manufacture_date(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__adapter__vendor_oui(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__adapter__vendor_part_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__adapter__vendor_serial_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_interfaces__interface__adapter(yang.adata.MNode):
    model_number: ?str
    type: ?str
    vendor_manufacture_date: ?str
    vendor_oui: ?str
    vendor_part_number: ?str
    vendor_serial_number: ?str

    mut def __init__(self, model_number: ?str, type: ?str, vendor_manufacture_date: ?str, vendor_oui: ?str, vendor_part_number: ?str, vendor_serial_number: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.model_number = model_number
        self.type = type
        self.vendor_manufacture_date = vendor_manufacture_date
        self.vendor_oui = vendor_oui
        self.vendor_part_number = vendor_part_number
        self.vendor_serial_number = vendor_serial_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _model_number = self.model_number
        _type = self.type
        _vendor_manufacture_date = self.vendor_manufacture_date
        _vendor_oui = self.vendor_oui
        _vendor_part_number = self.vendor_part_number
        _vendor_serial_number = self.vendor_serial_number
        if _model_number is not None:
            children['model-number'] = yang.gdata.Leaf('string', _model_number)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        if _vendor_manufacture_date is not None:
            children['vendor-manufacture-date'] = yang.gdata.Leaf('string', _vendor_manufacture_date)
        if _vendor_oui is not None:
            children['vendor-oui'] = yang.gdata.Leaf('string', _vendor_oui)
        if _vendor_part_number is not None:
            children['vendor-part-number'] = yang.gdata.Leaf('string', _vendor_part_number)
        if _vendor_serial_number is not None:
            children['vendor-serial-number'] = yang.gdata.Leaf('string', _vendor_serial_number)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__adapter:
        if n != None:
            return srl_nokia_interfaces__interface__adapter(model_number=n.get_opt_str("model-number"), type=n.get_opt_str("type"), vendor_manufacture_date=n.get_opt_str("vendor-manufacture-date"), vendor_oui=n.get_opt_str("vendor-oui"), vendor_part_number=n.get_opt_str("vendor-part-number"), vendor_serial_number=n.get_opt_str("vendor-serial-number"))
        return srl_nokia_interfaces__interface__adapter()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__adapter:
        if n != None:
            return srl_nokia_interfaces__interface__adapter(model_number=yang.gdata.from_xml_opt_str(n, "model-number"), type=yang.gdata.from_xml_opt_str(n, "type"), vendor_manufacture_date=yang.gdata.from_xml_opt_str(n, "vendor-manufacture-date"), vendor_oui=yang.gdata.from_xml_opt_str(n, "vendor-oui"), vendor_part_number=yang.gdata.from_xml_opt_str(n, "vendor-part-number"), vendor_serial_number=yang.gdata.from_xml_opt_str(n, "vendor-serial-number"))
        return srl_nokia_interfaces__interface__adapter()



mut def from_json_srl_nokia_interfaces__interface__transceiver__functional_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__tx_laser(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__ddm_events(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__forward_error_correction(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__form_factor(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__ethernet_pmd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__connector_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__vendor(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__vendor_part_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__vendor_revision(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__vendor_lot_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__serial_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__date_code(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__firmware_version__major_revision(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__firmware_version__minor_revision(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_interfaces__interface__transceiver__firmware_version(yang.adata.MNode):
    major_revision: ?int
    minor_revision: ?int

    mut def __init__(self, major_revision: ?int, minor_revision: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.major_revision = major_revision
        self.minor_revision = minor_revision

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _major_revision = self.major_revision
        _minor_revision = self.minor_revision
        if _major_revision is not None:
            children['major-revision'] = yang.gdata.Leaf('uint8', _major_revision)
        if _minor_revision is not None:
            children['minor-revision'] = yang.gdata.Leaf('uint8', _minor_revision)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__firmware_version:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__firmware_version(major_revision=n.get_opt_int("major-revision"), minor_revision=n.get_opt_int("minor-revision"))
        return srl_nokia_interfaces__interface__transceiver__firmware_version()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__firmware_version:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__firmware_version(major_revision=yang.gdata.from_xml_opt_int(n, "major-revision"), minor_revision=yang.gdata.from_xml_opt_int(n, "minor-revision"))
        return srl_nokia_interfaces__interface__transceiver__firmware_version()



mut def from_json_srl_nokia_interfaces__interface__transceiver__fault_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__wavelength(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__latest_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__maximum_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__high_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__high_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__low_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__low_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__high_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__high_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__low_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__temperature__low_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int16", val)

class srl_nokia_interfaces__interface__transceiver__temperature(yang.adata.MNode):
    latest_value: ?int
    maximum: ?int
    maximum_time: ?str
    high_alarm_condition: ?bool
    high_alarm_threshold: ?int
    low_alarm_condition: ?bool
    low_alarm_threshold: ?int
    high_warning_condition: ?bool
    high_warning_threshold: ?int
    low_warning_condition: ?bool
    low_warning_threshold: ?int

    mut def __init__(self, latest_value: ?int, maximum: ?int, maximum_time: ?str, high_alarm_condition: ?bool, high_alarm_threshold: ?int, low_alarm_condition: ?bool, low_alarm_threshold: ?int, high_warning_condition: ?bool, high_warning_threshold: ?int, low_warning_condition: ?bool, low_warning_threshold: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.latest_value = latest_value
        self.maximum = maximum
        self.maximum_time = maximum_time
        self.high_alarm_condition = high_alarm_condition
        self.high_alarm_threshold = high_alarm_threshold
        self.low_alarm_condition = low_alarm_condition
        self.low_alarm_threshold = low_alarm_threshold
        self.high_warning_condition = high_warning_condition
        self.high_warning_threshold = high_warning_threshold
        self.low_warning_condition = low_warning_condition
        self.low_warning_threshold = low_warning_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _latest_value = self.latest_value
        _maximum = self.maximum
        _maximum_time = self.maximum_time
        _high_alarm_condition = self.high_alarm_condition
        _high_alarm_threshold = self.high_alarm_threshold
        _low_alarm_condition = self.low_alarm_condition
        _low_alarm_threshold = self.low_alarm_threshold
        _high_warning_condition = self.high_warning_condition
        _high_warning_threshold = self.high_warning_threshold
        _low_warning_condition = self.low_warning_condition
        _low_warning_threshold = self.low_warning_threshold
        if _latest_value is not None:
            children['latest-value'] = yang.gdata.Leaf('int16', _latest_value)
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('int16', _maximum)
        if _maximum_time is not None:
            children['maximum-time'] = yang.gdata.Leaf('string', _maximum_time)
        if _high_alarm_condition is not None:
            children['high-alarm-condition'] = yang.gdata.Leaf('boolean', _high_alarm_condition)
        if _high_alarm_threshold is not None:
            children['high-alarm-threshold'] = yang.gdata.Leaf('int16', _high_alarm_threshold)
        if _low_alarm_condition is not None:
            children['low-alarm-condition'] = yang.gdata.Leaf('boolean', _low_alarm_condition)
        if _low_alarm_threshold is not None:
            children['low-alarm-threshold'] = yang.gdata.Leaf('int16', _low_alarm_threshold)
        if _high_warning_condition is not None:
            children['high-warning-condition'] = yang.gdata.Leaf('boolean', _high_warning_condition)
        if _high_warning_threshold is not None:
            children['high-warning-threshold'] = yang.gdata.Leaf('int16', _high_warning_threshold)
        if _low_warning_condition is not None:
            children['low-warning-condition'] = yang.gdata.Leaf('boolean', _low_warning_condition)
        if _low_warning_threshold is not None:
            children['low-warning-threshold'] = yang.gdata.Leaf('int16', _low_warning_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__temperature:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__temperature(latest_value=n.get_opt_int("latest-value"), maximum=n.get_opt_int("maximum"), maximum_time=n.get_opt_str("maximum-time"), high_alarm_condition=n.get_opt_bool("high-alarm-condition"), high_alarm_threshold=n.get_opt_int("high-alarm-threshold"), low_alarm_condition=n.get_opt_bool("low-alarm-condition"), low_alarm_threshold=n.get_opt_int("low-alarm-threshold"), high_warning_condition=n.get_opt_bool("high-warning-condition"), high_warning_threshold=n.get_opt_int("high-warning-threshold"), low_warning_condition=n.get_opt_bool("low-warning-condition"), low_warning_threshold=n.get_opt_int("low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__temperature()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__temperature:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__temperature(latest_value=yang.gdata.from_xml_opt_int(n, "latest-value"), maximum=yang.gdata.from_xml_opt_int(n, "maximum"), maximum_time=yang.gdata.from_xml_opt_str(n, "maximum-time"), high_alarm_condition=yang.gdata.from_xml_opt_bool(n, "high-alarm-condition"), high_alarm_threshold=yang.gdata.from_xml_opt_int(n, "high-alarm-threshold"), low_alarm_condition=yang.gdata.from_xml_opt_bool(n, "low-alarm-condition"), low_alarm_threshold=yang.gdata.from_xml_opt_int(n, "low-alarm-threshold"), high_warning_condition=yang.gdata.from_xml_opt_bool(n, "high-warning-condition"), high_warning_threshold=yang.gdata.from_xml_opt_int(n, "high-warning-threshold"), low_warning_condition=yang.gdata.from_xml_opt_bool(n, "low-warning-condition"), low_warning_threshold=yang.gdata.from_xml_opt_int(n, "low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__temperature()



mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__latest_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__high_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__high_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__low_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__low_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__high_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__high_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__low_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__voltage__low_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

class srl_nokia_interfaces__interface__transceiver__voltage(yang.adata.MNode):
    latest_value: ?float
    high_alarm_condition: ?bool
    high_alarm_threshold: ?float
    low_alarm_condition: ?bool
    low_alarm_threshold: ?float
    high_warning_condition: ?bool
    high_warning_threshold: ?float
    low_warning_condition: ?bool
    low_warning_threshold: ?float

    mut def __init__(self, latest_value: ?float, high_alarm_condition: ?bool, high_alarm_threshold: ?float, low_alarm_condition: ?bool, low_alarm_threshold: ?float, high_warning_condition: ?bool, high_warning_threshold: ?float, low_warning_condition: ?bool, low_warning_threshold: ?float):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.latest_value = latest_value
        self.high_alarm_condition = high_alarm_condition
        self.high_alarm_threshold = high_alarm_threshold
        self.low_alarm_condition = low_alarm_condition
        self.low_alarm_threshold = low_alarm_threshold
        self.high_warning_condition = high_warning_condition
        self.high_warning_threshold = high_warning_threshold
        self.low_warning_condition = low_warning_condition
        self.low_warning_threshold = low_warning_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _latest_value = self.latest_value
        _high_alarm_condition = self.high_alarm_condition
        _high_alarm_threshold = self.high_alarm_threshold
        _low_alarm_condition = self.low_alarm_condition
        _low_alarm_threshold = self.low_alarm_threshold
        _high_warning_condition = self.high_warning_condition
        _high_warning_threshold = self.high_warning_threshold
        _low_warning_condition = self.low_warning_condition
        _low_warning_threshold = self.low_warning_threshold
        if _latest_value is not None:
            children['latest-value'] = yang.gdata.Leaf('decimal64', _latest_value)
        if _high_alarm_condition is not None:
            children['high-alarm-condition'] = yang.gdata.Leaf('boolean', _high_alarm_condition)
        if _high_alarm_threshold is not None:
            children['high-alarm-threshold'] = yang.gdata.Leaf('decimal64', _high_alarm_threshold)
        if _low_alarm_condition is not None:
            children['low-alarm-condition'] = yang.gdata.Leaf('boolean', _low_alarm_condition)
        if _low_alarm_threshold is not None:
            children['low-alarm-threshold'] = yang.gdata.Leaf('decimal64', _low_alarm_threshold)
        if _high_warning_condition is not None:
            children['high-warning-condition'] = yang.gdata.Leaf('boolean', _high_warning_condition)
        if _high_warning_threshold is not None:
            children['high-warning-threshold'] = yang.gdata.Leaf('decimal64', _high_warning_threshold)
        if _low_warning_condition is not None:
            children['low-warning-condition'] = yang.gdata.Leaf('boolean', _low_warning_condition)
        if _low_warning_threshold is not None:
            children['low-warning-threshold'] = yang.gdata.Leaf('decimal64', _low_warning_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__voltage:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__voltage(latest_value=n.get_opt_float("latest-value"), high_alarm_condition=n.get_opt_bool("high-alarm-condition"), high_alarm_threshold=n.get_opt_float("high-alarm-threshold"), low_alarm_condition=n.get_opt_bool("low-alarm-condition"), low_alarm_threshold=n.get_opt_float("low-alarm-threshold"), high_warning_condition=n.get_opt_bool("high-warning-condition"), high_warning_threshold=n.get_opt_float("high-warning-threshold"), low_warning_condition=n.get_opt_bool("low-warning-condition"), low_warning_threshold=n.get_opt_float("low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__voltage()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__voltage:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__voltage(latest_value=yang.gdata.from_xml_opt_float(n, "latest-value"), high_alarm_condition=yang.gdata.from_xml_opt_bool(n, "high-alarm-condition"), high_alarm_threshold=yang.gdata.from_xml_opt_float(n, "high-alarm-threshold"), low_alarm_condition=yang.gdata.from_xml_opt_bool(n, "low-alarm-condition"), low_alarm_threshold=yang.gdata.from_xml_opt_float(n, "low-alarm-threshold"), high_warning_condition=yang.gdata.from_xml_opt_bool(n, "high-warning-condition"), high_warning_threshold=yang.gdata.from_xml_opt_float(n, "high-warning-threshold"), low_warning_condition=yang.gdata.from_xml_opt_bool(n, "low-warning-condition"), low_warning_threshold=yang.gdata.from_xml_opt_float(n, "low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__voltage()



mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__latest_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__high_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__high_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__low_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__low_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__high_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__high_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__low_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__input_power__low_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

class srl_nokia_interfaces__interface__transceiver__input_power(yang.adata.MNode):
    latest_value: ?float
    high_alarm_condition: ?bool
    high_alarm_threshold: ?float
    low_alarm_condition: ?bool
    low_alarm_threshold: ?float
    high_warning_condition: ?bool
    high_warning_threshold: ?float
    low_warning_condition: ?bool
    low_warning_threshold: ?float

    mut def __init__(self, latest_value: ?float, high_alarm_condition: ?bool, high_alarm_threshold: ?float, low_alarm_condition: ?bool, low_alarm_threshold: ?float, high_warning_condition: ?bool, high_warning_threshold: ?float, low_warning_condition: ?bool, low_warning_threshold: ?float):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.latest_value = latest_value
        self.high_alarm_condition = high_alarm_condition
        self.high_alarm_threshold = high_alarm_threshold
        self.low_alarm_condition = low_alarm_condition
        self.low_alarm_threshold = low_alarm_threshold
        self.high_warning_condition = high_warning_condition
        self.high_warning_threshold = high_warning_threshold
        self.low_warning_condition = low_warning_condition
        self.low_warning_threshold = low_warning_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _latest_value = self.latest_value
        _high_alarm_condition = self.high_alarm_condition
        _high_alarm_threshold = self.high_alarm_threshold
        _low_alarm_condition = self.low_alarm_condition
        _low_alarm_threshold = self.low_alarm_threshold
        _high_warning_condition = self.high_warning_condition
        _high_warning_threshold = self.high_warning_threshold
        _low_warning_condition = self.low_warning_condition
        _low_warning_threshold = self.low_warning_threshold
        if _latest_value is not None:
            children['latest-value'] = yang.gdata.Leaf('decimal64', _latest_value)
        if _high_alarm_condition is not None:
            children['high-alarm-condition'] = yang.gdata.Leaf('boolean', _high_alarm_condition)
        if _high_alarm_threshold is not None:
            children['high-alarm-threshold'] = yang.gdata.Leaf('decimal64', _high_alarm_threshold)
        if _low_alarm_condition is not None:
            children['low-alarm-condition'] = yang.gdata.Leaf('boolean', _low_alarm_condition)
        if _low_alarm_threshold is not None:
            children['low-alarm-threshold'] = yang.gdata.Leaf('decimal64', _low_alarm_threshold)
        if _high_warning_condition is not None:
            children['high-warning-condition'] = yang.gdata.Leaf('boolean', _high_warning_condition)
        if _high_warning_threshold is not None:
            children['high-warning-threshold'] = yang.gdata.Leaf('decimal64', _high_warning_threshold)
        if _low_warning_condition is not None:
            children['low-warning-condition'] = yang.gdata.Leaf('boolean', _low_warning_condition)
        if _low_warning_threshold is not None:
            children['low-warning-threshold'] = yang.gdata.Leaf('decimal64', _low_warning_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__input_power:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__input_power(latest_value=n.get_opt_float("latest-value"), high_alarm_condition=n.get_opt_bool("high-alarm-condition"), high_alarm_threshold=n.get_opt_float("high-alarm-threshold"), low_alarm_condition=n.get_opt_bool("low-alarm-condition"), low_alarm_threshold=n.get_opt_float("low-alarm-threshold"), high_warning_condition=n.get_opt_bool("high-warning-condition"), high_warning_threshold=n.get_opt_float("high-warning-threshold"), low_warning_condition=n.get_opt_bool("low-warning-condition"), low_warning_threshold=n.get_opt_float("low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__input_power()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__input_power:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__input_power(latest_value=yang.gdata.from_xml_opt_float(n, "latest-value"), high_alarm_condition=yang.gdata.from_xml_opt_bool(n, "high-alarm-condition"), high_alarm_threshold=yang.gdata.from_xml_opt_float(n, "high-alarm-threshold"), low_alarm_condition=yang.gdata.from_xml_opt_bool(n, "low-alarm-condition"), low_alarm_threshold=yang.gdata.from_xml_opt_float(n, "low-alarm-threshold"), high_warning_condition=yang.gdata.from_xml_opt_bool(n, "high-warning-condition"), high_warning_threshold=yang.gdata.from_xml_opt_float(n, "high-warning-threshold"), low_warning_condition=yang.gdata.from_xml_opt_bool(n, "low-warning-condition"), low_warning_threshold=yang.gdata.from_xml_opt_float(n, "low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__input_power()



mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__latest_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__high_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__high_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__low_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__low_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__high_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__high_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__low_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__output_power__low_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

class srl_nokia_interfaces__interface__transceiver__output_power(yang.adata.MNode):
    latest_value: ?float
    high_alarm_condition: ?bool
    high_alarm_threshold: ?float
    low_alarm_condition: ?bool
    low_alarm_threshold: ?float
    high_warning_condition: ?bool
    high_warning_threshold: ?float
    low_warning_condition: ?bool
    low_warning_threshold: ?float

    mut def __init__(self, latest_value: ?float, high_alarm_condition: ?bool, high_alarm_threshold: ?float, low_alarm_condition: ?bool, low_alarm_threshold: ?float, high_warning_condition: ?bool, high_warning_threshold: ?float, low_warning_condition: ?bool, low_warning_threshold: ?float):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.latest_value = latest_value
        self.high_alarm_condition = high_alarm_condition
        self.high_alarm_threshold = high_alarm_threshold
        self.low_alarm_condition = low_alarm_condition
        self.low_alarm_threshold = low_alarm_threshold
        self.high_warning_condition = high_warning_condition
        self.high_warning_threshold = high_warning_threshold
        self.low_warning_condition = low_warning_condition
        self.low_warning_threshold = low_warning_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _latest_value = self.latest_value
        _high_alarm_condition = self.high_alarm_condition
        _high_alarm_threshold = self.high_alarm_threshold
        _low_alarm_condition = self.low_alarm_condition
        _low_alarm_threshold = self.low_alarm_threshold
        _high_warning_condition = self.high_warning_condition
        _high_warning_threshold = self.high_warning_threshold
        _low_warning_condition = self.low_warning_condition
        _low_warning_threshold = self.low_warning_threshold
        if _latest_value is not None:
            children['latest-value'] = yang.gdata.Leaf('decimal64', _latest_value)
        if _high_alarm_condition is not None:
            children['high-alarm-condition'] = yang.gdata.Leaf('boolean', _high_alarm_condition)
        if _high_alarm_threshold is not None:
            children['high-alarm-threshold'] = yang.gdata.Leaf('decimal64', _high_alarm_threshold)
        if _low_alarm_condition is not None:
            children['low-alarm-condition'] = yang.gdata.Leaf('boolean', _low_alarm_condition)
        if _low_alarm_threshold is not None:
            children['low-alarm-threshold'] = yang.gdata.Leaf('decimal64', _low_alarm_threshold)
        if _high_warning_condition is not None:
            children['high-warning-condition'] = yang.gdata.Leaf('boolean', _high_warning_condition)
        if _high_warning_threshold is not None:
            children['high-warning-threshold'] = yang.gdata.Leaf('decimal64', _high_warning_threshold)
        if _low_warning_condition is not None:
            children['low-warning-condition'] = yang.gdata.Leaf('boolean', _low_warning_condition)
        if _low_warning_threshold is not None:
            children['low-warning-threshold'] = yang.gdata.Leaf('decimal64', _low_warning_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__output_power:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__output_power(latest_value=n.get_opt_float("latest-value"), high_alarm_condition=n.get_opt_bool("high-alarm-condition"), high_alarm_threshold=n.get_opt_float("high-alarm-threshold"), low_alarm_condition=n.get_opt_bool("low-alarm-condition"), low_alarm_threshold=n.get_opt_float("low-alarm-threshold"), high_warning_condition=n.get_opt_bool("high-warning-condition"), high_warning_threshold=n.get_opt_float("high-warning-threshold"), low_warning_condition=n.get_opt_bool("low-warning-condition"), low_warning_threshold=n.get_opt_float("low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__output_power()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__output_power:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__output_power(latest_value=yang.gdata.from_xml_opt_float(n, "latest-value"), high_alarm_condition=yang.gdata.from_xml_opt_bool(n, "high-alarm-condition"), high_alarm_threshold=yang.gdata.from_xml_opt_float(n, "high-alarm-threshold"), low_alarm_condition=yang.gdata.from_xml_opt_bool(n, "low-alarm-condition"), low_alarm_threshold=yang.gdata.from_xml_opt_float(n, "low-alarm-threshold"), high_warning_condition=yang.gdata.from_xml_opt_bool(n, "high-warning-condition"), high_warning_threshold=yang.gdata.from_xml_opt_float(n, "high-warning-threshold"), low_warning_condition=yang.gdata.from_xml_opt_bool(n, "low-warning-condition"), low_warning_threshold=yang.gdata.from_xml_opt_float(n, "low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__output_power()



mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__latest_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__high_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__high_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__low_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__low_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__high_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__high_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__low_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__laser_bias_current__low_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

class srl_nokia_interfaces__interface__transceiver__laser_bias_current(yang.adata.MNode):
    latest_value: ?float
    high_alarm_condition: ?bool
    high_alarm_threshold: ?float
    low_alarm_condition: ?bool
    low_alarm_threshold: ?float
    high_warning_condition: ?bool
    high_warning_threshold: ?float
    low_warning_condition: ?bool
    low_warning_threshold: ?float

    mut def __init__(self, latest_value: ?float, high_alarm_condition: ?bool, high_alarm_threshold: ?float, low_alarm_condition: ?bool, low_alarm_threshold: ?float, high_warning_condition: ?bool, high_warning_threshold: ?float, low_warning_condition: ?bool, low_warning_threshold: ?float):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.latest_value = latest_value
        self.high_alarm_condition = high_alarm_condition
        self.high_alarm_threshold = high_alarm_threshold
        self.low_alarm_condition = low_alarm_condition
        self.low_alarm_threshold = low_alarm_threshold
        self.high_warning_condition = high_warning_condition
        self.high_warning_threshold = high_warning_threshold
        self.low_warning_condition = low_warning_condition
        self.low_warning_threshold = low_warning_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _latest_value = self.latest_value
        _high_alarm_condition = self.high_alarm_condition
        _high_alarm_threshold = self.high_alarm_threshold
        _low_alarm_condition = self.low_alarm_condition
        _low_alarm_threshold = self.low_alarm_threshold
        _high_warning_condition = self.high_warning_condition
        _high_warning_threshold = self.high_warning_threshold
        _low_warning_condition = self.low_warning_condition
        _low_warning_threshold = self.low_warning_threshold
        if _latest_value is not None:
            children['latest-value'] = yang.gdata.Leaf('decimal64', _latest_value)
        if _high_alarm_condition is not None:
            children['high-alarm-condition'] = yang.gdata.Leaf('boolean', _high_alarm_condition)
        if _high_alarm_threshold is not None:
            children['high-alarm-threshold'] = yang.gdata.Leaf('decimal64', _high_alarm_threshold)
        if _low_alarm_condition is not None:
            children['low-alarm-condition'] = yang.gdata.Leaf('boolean', _low_alarm_condition)
        if _low_alarm_threshold is not None:
            children['low-alarm-threshold'] = yang.gdata.Leaf('decimal64', _low_alarm_threshold)
        if _high_warning_condition is not None:
            children['high-warning-condition'] = yang.gdata.Leaf('boolean', _high_warning_condition)
        if _high_warning_threshold is not None:
            children['high-warning-threshold'] = yang.gdata.Leaf('decimal64', _high_warning_threshold)
        if _low_warning_condition is not None:
            children['low-warning-condition'] = yang.gdata.Leaf('boolean', _low_warning_condition)
        if _low_warning_threshold is not None:
            children['low-warning-threshold'] = yang.gdata.Leaf('decimal64', _low_warning_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__laser_bias_current:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__laser_bias_current(latest_value=n.get_opt_float("latest-value"), high_alarm_condition=n.get_opt_bool("high-alarm-condition"), high_alarm_threshold=n.get_opt_float("high-alarm-threshold"), low_alarm_condition=n.get_opt_bool("low-alarm-condition"), low_alarm_threshold=n.get_opt_float("low-alarm-threshold"), high_warning_condition=n.get_opt_bool("high-warning-condition"), high_warning_threshold=n.get_opt_float("high-warning-threshold"), low_warning_condition=n.get_opt_bool("low-warning-condition"), low_warning_threshold=n.get_opt_float("low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__laser_bias_current()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__laser_bias_current:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__laser_bias_current(latest_value=yang.gdata.from_xml_opt_float(n, "latest-value"), high_alarm_condition=yang.gdata.from_xml_opt_bool(n, "high-alarm-condition"), high_alarm_threshold=yang.gdata.from_xml_opt_float(n, "high-alarm-threshold"), low_alarm_condition=yang.gdata.from_xml_opt_bool(n, "low-alarm-condition"), low_alarm_threshold=yang.gdata.from_xml_opt_float(n, "low-alarm-threshold"), high_warning_condition=yang.gdata.from_xml_opt_bool(n, "high-warning-condition"), high_warning_threshold=yang.gdata.from_xml_opt_float(n, "high-warning-threshold"), low_warning_condition=yang.gdata.from_xml_opt_bool(n, "low-warning-condition"), low_warning_threshold=yang.gdata.from_xml_opt_float(n, "low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__laser_bias_current()



mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__wavelength(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__latest_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__high_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__high_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__low_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__low_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__high_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__high_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__low_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__input_power__low_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

class srl_nokia_interfaces__interface__transceiver__channel__input_power(yang.adata.MNode):
    latest_value: ?float
    high_alarm_condition: ?bool
    high_alarm_threshold: ?float
    low_alarm_condition: ?bool
    low_alarm_threshold: ?float
    high_warning_condition: ?bool
    high_warning_threshold: ?float
    low_warning_condition: ?bool
    low_warning_threshold: ?float

    mut def __init__(self, latest_value: ?float, high_alarm_condition: ?bool, high_alarm_threshold: ?float, low_alarm_condition: ?bool, low_alarm_threshold: ?float, high_warning_condition: ?bool, high_warning_threshold: ?float, low_warning_condition: ?bool, low_warning_threshold: ?float):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.latest_value = latest_value
        self.high_alarm_condition = high_alarm_condition
        self.high_alarm_threshold = high_alarm_threshold
        self.low_alarm_condition = low_alarm_condition
        self.low_alarm_threshold = low_alarm_threshold
        self.high_warning_condition = high_warning_condition
        self.high_warning_threshold = high_warning_threshold
        self.low_warning_condition = low_warning_condition
        self.low_warning_threshold = low_warning_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _latest_value = self.latest_value
        _high_alarm_condition = self.high_alarm_condition
        _high_alarm_threshold = self.high_alarm_threshold
        _low_alarm_condition = self.low_alarm_condition
        _low_alarm_threshold = self.low_alarm_threshold
        _high_warning_condition = self.high_warning_condition
        _high_warning_threshold = self.high_warning_threshold
        _low_warning_condition = self.low_warning_condition
        _low_warning_threshold = self.low_warning_threshold
        if _latest_value is not None:
            children['latest-value'] = yang.gdata.Leaf('decimal64', _latest_value)
        if _high_alarm_condition is not None:
            children['high-alarm-condition'] = yang.gdata.Leaf('boolean', _high_alarm_condition)
        if _high_alarm_threshold is not None:
            children['high-alarm-threshold'] = yang.gdata.Leaf('decimal64', _high_alarm_threshold)
        if _low_alarm_condition is not None:
            children['low-alarm-condition'] = yang.gdata.Leaf('boolean', _low_alarm_condition)
        if _low_alarm_threshold is not None:
            children['low-alarm-threshold'] = yang.gdata.Leaf('decimal64', _low_alarm_threshold)
        if _high_warning_condition is not None:
            children['high-warning-condition'] = yang.gdata.Leaf('boolean', _high_warning_condition)
        if _high_warning_threshold is not None:
            children['high-warning-threshold'] = yang.gdata.Leaf('decimal64', _high_warning_threshold)
        if _low_warning_condition is not None:
            children['low-warning-condition'] = yang.gdata.Leaf('boolean', _low_warning_condition)
        if _low_warning_threshold is not None:
            children['low-warning-threshold'] = yang.gdata.Leaf('decimal64', _low_warning_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__channel__input_power:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__channel__input_power(latest_value=n.get_opt_float("latest-value"), high_alarm_condition=n.get_opt_bool("high-alarm-condition"), high_alarm_threshold=n.get_opt_float("high-alarm-threshold"), low_alarm_condition=n.get_opt_bool("low-alarm-condition"), low_alarm_threshold=n.get_opt_float("low-alarm-threshold"), high_warning_condition=n.get_opt_bool("high-warning-condition"), high_warning_threshold=n.get_opt_float("high-warning-threshold"), low_warning_condition=n.get_opt_bool("low-warning-condition"), low_warning_threshold=n.get_opt_float("low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__channel__input_power()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__channel__input_power:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__channel__input_power(latest_value=yang.gdata.from_xml_opt_float(n, "latest-value"), high_alarm_condition=yang.gdata.from_xml_opt_bool(n, "high-alarm-condition"), high_alarm_threshold=yang.gdata.from_xml_opt_float(n, "high-alarm-threshold"), low_alarm_condition=yang.gdata.from_xml_opt_bool(n, "low-alarm-condition"), low_alarm_threshold=yang.gdata.from_xml_opt_float(n, "low-alarm-threshold"), high_warning_condition=yang.gdata.from_xml_opt_bool(n, "high-warning-condition"), high_warning_threshold=yang.gdata.from_xml_opt_float(n, "high-warning-threshold"), low_warning_condition=yang.gdata.from_xml_opt_bool(n, "low-warning-condition"), low_warning_threshold=yang.gdata.from_xml_opt_float(n, "low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__channel__input_power()



mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__latest_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__high_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__high_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__low_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__low_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__high_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__high_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__low_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__output_power__low_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

class srl_nokia_interfaces__interface__transceiver__channel__output_power(yang.adata.MNode):
    latest_value: ?float
    high_alarm_condition: ?bool
    high_alarm_threshold: ?float
    low_alarm_condition: ?bool
    low_alarm_threshold: ?float
    high_warning_condition: ?bool
    high_warning_threshold: ?float
    low_warning_condition: ?bool
    low_warning_threshold: ?float

    mut def __init__(self, latest_value: ?float, high_alarm_condition: ?bool, high_alarm_threshold: ?float, low_alarm_condition: ?bool, low_alarm_threshold: ?float, high_warning_condition: ?bool, high_warning_threshold: ?float, low_warning_condition: ?bool, low_warning_threshold: ?float):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.latest_value = latest_value
        self.high_alarm_condition = high_alarm_condition
        self.high_alarm_threshold = high_alarm_threshold
        self.low_alarm_condition = low_alarm_condition
        self.low_alarm_threshold = low_alarm_threshold
        self.high_warning_condition = high_warning_condition
        self.high_warning_threshold = high_warning_threshold
        self.low_warning_condition = low_warning_condition
        self.low_warning_threshold = low_warning_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _latest_value = self.latest_value
        _high_alarm_condition = self.high_alarm_condition
        _high_alarm_threshold = self.high_alarm_threshold
        _low_alarm_condition = self.low_alarm_condition
        _low_alarm_threshold = self.low_alarm_threshold
        _high_warning_condition = self.high_warning_condition
        _high_warning_threshold = self.high_warning_threshold
        _low_warning_condition = self.low_warning_condition
        _low_warning_threshold = self.low_warning_threshold
        if _latest_value is not None:
            children['latest-value'] = yang.gdata.Leaf('decimal64', _latest_value)
        if _high_alarm_condition is not None:
            children['high-alarm-condition'] = yang.gdata.Leaf('boolean', _high_alarm_condition)
        if _high_alarm_threshold is not None:
            children['high-alarm-threshold'] = yang.gdata.Leaf('decimal64', _high_alarm_threshold)
        if _low_alarm_condition is not None:
            children['low-alarm-condition'] = yang.gdata.Leaf('boolean', _low_alarm_condition)
        if _low_alarm_threshold is not None:
            children['low-alarm-threshold'] = yang.gdata.Leaf('decimal64', _low_alarm_threshold)
        if _high_warning_condition is not None:
            children['high-warning-condition'] = yang.gdata.Leaf('boolean', _high_warning_condition)
        if _high_warning_threshold is not None:
            children['high-warning-threshold'] = yang.gdata.Leaf('decimal64', _high_warning_threshold)
        if _low_warning_condition is not None:
            children['low-warning-condition'] = yang.gdata.Leaf('boolean', _low_warning_condition)
        if _low_warning_threshold is not None:
            children['low-warning-threshold'] = yang.gdata.Leaf('decimal64', _low_warning_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__channel__output_power:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__channel__output_power(latest_value=n.get_opt_float("latest-value"), high_alarm_condition=n.get_opt_bool("high-alarm-condition"), high_alarm_threshold=n.get_opt_float("high-alarm-threshold"), low_alarm_condition=n.get_opt_bool("low-alarm-condition"), low_alarm_threshold=n.get_opt_float("low-alarm-threshold"), high_warning_condition=n.get_opt_bool("high-warning-condition"), high_warning_threshold=n.get_opt_float("high-warning-threshold"), low_warning_condition=n.get_opt_bool("low-warning-condition"), low_warning_threshold=n.get_opt_float("low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__channel__output_power()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__channel__output_power:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__channel__output_power(latest_value=yang.gdata.from_xml_opt_float(n, "latest-value"), high_alarm_condition=yang.gdata.from_xml_opt_bool(n, "high-alarm-condition"), high_alarm_threshold=yang.gdata.from_xml_opt_float(n, "high-alarm-threshold"), low_alarm_condition=yang.gdata.from_xml_opt_bool(n, "low-alarm-condition"), low_alarm_threshold=yang.gdata.from_xml_opt_float(n, "low-alarm-threshold"), high_warning_condition=yang.gdata.from_xml_opt_bool(n, "high-warning-condition"), high_warning_threshold=yang.gdata.from_xml_opt_float(n, "high-warning-threshold"), low_warning_condition=yang.gdata.from_xml_opt_bool(n, "low-warning-condition"), low_warning_threshold=yang.gdata.from_xml_opt_float(n, "low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__channel__output_power()



mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__latest_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__high_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__high_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__low_alarm_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__low_alarm_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__high_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__high_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__low_warning_condition(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current__low_warning_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("decimal64", val)

class srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current(yang.adata.MNode):
    latest_value: ?float
    high_alarm_condition: ?bool
    high_alarm_threshold: ?float
    low_alarm_condition: ?bool
    low_alarm_threshold: ?float
    high_warning_condition: ?bool
    high_warning_threshold: ?float
    low_warning_condition: ?bool
    low_warning_threshold: ?float

    mut def __init__(self, latest_value: ?float, high_alarm_condition: ?bool, high_alarm_threshold: ?float, low_alarm_condition: ?bool, low_alarm_threshold: ?float, high_warning_condition: ?bool, high_warning_threshold: ?float, low_warning_condition: ?bool, low_warning_threshold: ?float):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.latest_value = latest_value
        self.high_alarm_condition = high_alarm_condition
        self.high_alarm_threshold = high_alarm_threshold
        self.low_alarm_condition = low_alarm_condition
        self.low_alarm_threshold = low_alarm_threshold
        self.high_warning_condition = high_warning_condition
        self.high_warning_threshold = high_warning_threshold
        self.low_warning_condition = low_warning_condition
        self.low_warning_threshold = low_warning_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _latest_value = self.latest_value
        _high_alarm_condition = self.high_alarm_condition
        _high_alarm_threshold = self.high_alarm_threshold
        _low_alarm_condition = self.low_alarm_condition
        _low_alarm_threshold = self.low_alarm_threshold
        _high_warning_condition = self.high_warning_condition
        _high_warning_threshold = self.high_warning_threshold
        _low_warning_condition = self.low_warning_condition
        _low_warning_threshold = self.low_warning_threshold
        if _latest_value is not None:
            children['latest-value'] = yang.gdata.Leaf('decimal64', _latest_value)
        if _high_alarm_condition is not None:
            children['high-alarm-condition'] = yang.gdata.Leaf('boolean', _high_alarm_condition)
        if _high_alarm_threshold is not None:
            children['high-alarm-threshold'] = yang.gdata.Leaf('decimal64', _high_alarm_threshold)
        if _low_alarm_condition is not None:
            children['low-alarm-condition'] = yang.gdata.Leaf('boolean', _low_alarm_condition)
        if _low_alarm_threshold is not None:
            children['low-alarm-threshold'] = yang.gdata.Leaf('decimal64', _low_alarm_threshold)
        if _high_warning_condition is not None:
            children['high-warning-condition'] = yang.gdata.Leaf('boolean', _high_warning_condition)
        if _high_warning_threshold is not None:
            children['high-warning-threshold'] = yang.gdata.Leaf('decimal64', _high_warning_threshold)
        if _low_warning_condition is not None:
            children['low-warning-condition'] = yang.gdata.Leaf('boolean', _low_warning_condition)
        if _low_warning_threshold is not None:
            children['low-warning-threshold'] = yang.gdata.Leaf('decimal64', _low_warning_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current(latest_value=n.get_opt_float("latest-value"), high_alarm_condition=n.get_opt_bool("high-alarm-condition"), high_alarm_threshold=n.get_opt_float("high-alarm-threshold"), low_alarm_condition=n.get_opt_bool("low-alarm-condition"), low_alarm_threshold=n.get_opt_float("low-alarm-threshold"), high_warning_condition=n.get_opt_bool("high-warning-condition"), high_warning_threshold=n.get_opt_float("high-warning-threshold"), low_warning_condition=n.get_opt_bool("low-warning-condition"), low_warning_threshold=n.get_opt_float("low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current(latest_value=yang.gdata.from_xml_opt_float(n, "latest-value"), high_alarm_condition=yang.gdata.from_xml_opt_bool(n, "high-alarm-condition"), high_alarm_threshold=yang.gdata.from_xml_opt_float(n, "high-alarm-threshold"), low_alarm_condition=yang.gdata.from_xml_opt_bool(n, "low-alarm-condition"), low_alarm_threshold=yang.gdata.from_xml_opt_float(n, "low-alarm-threshold"), high_warning_condition=yang.gdata.from_xml_opt_bool(n, "high-warning-condition"), high_warning_threshold=yang.gdata.from_xml_opt_float(n, "high-warning-threshold"), low_warning_condition=yang.gdata.from_xml_opt_bool(n, "low-warning-condition"), low_warning_threshold=yang.gdata.from_xml_opt_float(n, "low-warning-threshold"))
        return srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current()



class srl_nokia_interfaces__interface__transceiver__channel_entry(yang.adata.MNode):
    index: int
    wavelength: ?float
    input_power: srl_nokia_interfaces__interface__transceiver__channel__input_power
    output_power: srl_nokia_interfaces__interface__transceiver__channel__output_power
    laser_bias_current: srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current

    mut def __init__(self, index: int, wavelength: ?float, input_power: ?srl_nokia_interfaces__interface__transceiver__channel__input_power=None, output_power: ?srl_nokia_interfaces__interface__transceiver__channel__output_power=None, laser_bias_current: ?srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.index = index
        self.wavelength = wavelength
        if input_power is not None:
            self.input_power = input_power
        else:
            self.input_power = srl_nokia_interfaces__interface__transceiver__channel__input_power()
        self_input_power = self.input_power
        if self_input_power is not None:
            self_input_power._parent = self
        if output_power is not None:
            self.output_power = output_power
        else:
            self.output_power = srl_nokia_interfaces__interface__transceiver__channel__output_power()
        self_output_power = self.output_power
        if self_output_power is not None:
            self_output_power._parent = self
        if laser_bias_current is not None:
            self.laser_bias_current = laser_bias_current
        else:
            self.laser_bias_current = srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current()
        self_laser_bias_current = self.laser_bias_current
        if self_laser_bias_current is not None:
            self_laser_bias_current._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _wavelength = self.wavelength
        _input_power = self.input_power
        _output_power = self.output_power
        _laser_bias_current = self.laser_bias_current
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint8', _index)
        if _wavelength is not None:
            children['wavelength'] = yang.gdata.Leaf('decimal64', _wavelength)
        if _input_power is not None:
            children['input-power'] = _input_power.to_gdata()
        if _output_power is not None:
            children['output-power'] = _output_power.to_gdata()
        if _laser_bias_current is not None:
            children['laser-bias-current'] = _laser_bias_current.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver__channel_entry:
        return srl_nokia_interfaces__interface__transceiver__channel_entry(index=n.get_int("index"), wavelength=n.get_opt_float("wavelength"), input_power=srl_nokia_interfaces__interface__transceiver__channel__input_power.from_gdata(n.get_opt_container("input-power")), output_power=srl_nokia_interfaces__interface__transceiver__channel__output_power.from_gdata(n.get_opt_container("output-power")), laser_bias_current=srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current.from_gdata(n.get_opt_container("laser-bias-current")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_interfaces__interface__transceiver__channel_entry:
        return srl_nokia_interfaces__interface__transceiver__channel_entry(index=yang.gdata.from_xml_int(n, "index"), wavelength=yang.gdata.from_xml_opt_float(n, "wavelength"), input_power=srl_nokia_interfaces__interface__transceiver__channel__input_power.from_xml(yang.gdata.get_xml_opt_child(n, "input-power")), output_power=srl_nokia_interfaces__interface__transceiver__channel__output_power.from_xml(yang.gdata.get_xml_opt_child(n, "output-power")), laser_bias_current=srl_nokia_interfaces__interface__transceiver__channel__laser_bias_current.from_xml(yang.gdata.get_xml_opt_child(n, "laser-bias-current")))

class srl_nokia_interfaces__interface__transceiver__channel(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__transceiver__channel_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self._name = 'channel'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__transceiver__channel_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__transceiver__channel_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_interfaces__interface__transceiver__channel_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_interfaces__interface__transceiver__channel_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_interfaces__interface__transceiver__channel_entry.from_xml(node))
        return res



class srl_nokia_interfaces__interface__transceiver(yang.adata.MNode):
    functional_type: ?str
    tx_laser: ?bool
    oper_state: ?str
    oper_down_reason: ?str
    ddm_events: ?bool
    forward_error_correction: ?str
    form_factor: ?str
    ethernet_pmd: ?str
    connector_type: ?str
    vendor: ?str
    vendor_part_number: ?str
    vendor_revision: ?str
    vendor_lot_number: ?str
    serial_number: ?str
    date_code: ?str
    firmware_version: srl_nokia_interfaces__interface__transceiver__firmware_version
    fault_condition: ?bool
    wavelength: ?float
    temperature: srl_nokia_interfaces__interface__transceiver__temperature
    voltage: srl_nokia_interfaces__interface__transceiver__voltage
    input_power: srl_nokia_interfaces__interface__transceiver__input_power
    output_power: srl_nokia_interfaces__interface__transceiver__output_power
    laser_bias_current: srl_nokia_interfaces__interface__transceiver__laser_bias_current
    channel: srl_nokia_interfaces__interface__transceiver__channel

    mut def __init__(self, functional_type: ?str, tx_laser: ?bool, oper_state: ?str, oper_down_reason: ?str, ddm_events: ?bool, forward_error_correction: ?str, form_factor: ?str, ethernet_pmd: ?str, connector_type: ?str, vendor: ?str, vendor_part_number: ?str, vendor_revision: ?str, vendor_lot_number: ?str, serial_number: ?str, date_code: ?str, firmware_version: ?srl_nokia_interfaces__interface__transceiver__firmware_version=None, fault_condition: ?bool, wavelength: ?float, temperature: ?srl_nokia_interfaces__interface__transceiver__temperature=None, voltage: ?srl_nokia_interfaces__interface__transceiver__voltage=None, input_power: ?srl_nokia_interfaces__interface__transceiver__input_power=None, output_power: ?srl_nokia_interfaces__interface__transceiver__output_power=None, laser_bias_current: ?srl_nokia_interfaces__interface__transceiver__laser_bias_current=None, channel: list[srl_nokia_interfaces__interface__transceiver__channel_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.functional_type = functional_type
        self.tx_laser = tx_laser
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason
        self.ddm_events = ddm_events
        self.forward_error_correction = forward_error_correction
        self.form_factor = form_factor
        self.ethernet_pmd = ethernet_pmd
        self.connector_type = connector_type
        self.vendor = vendor
        self.vendor_part_number = vendor_part_number
        self.vendor_revision = vendor_revision
        self.vendor_lot_number = vendor_lot_number
        self.serial_number = serial_number
        self.date_code = date_code
        if firmware_version is not None:
            self.firmware_version = firmware_version
        else:
            self.firmware_version = srl_nokia_interfaces__interface__transceiver__firmware_version()
        self_firmware_version = self.firmware_version
        if self_firmware_version is not None:
            self_firmware_version._parent = self
        self.fault_condition = fault_condition
        self.wavelength = wavelength
        if temperature is not None:
            self.temperature = temperature
        else:
            self.temperature = srl_nokia_interfaces__interface__transceiver__temperature()
        self_temperature = self.temperature
        if self_temperature is not None:
            self_temperature._parent = self
        if voltage is not None:
            self.voltage = voltage
        else:
            self.voltage = srl_nokia_interfaces__interface__transceiver__voltage()
        self_voltage = self.voltage
        if self_voltage is not None:
            self_voltage._parent = self
        if input_power is not None:
            self.input_power = input_power
        else:
            self.input_power = srl_nokia_interfaces__interface__transceiver__input_power()
        self_input_power = self.input_power
        if self_input_power is not None:
            self_input_power._parent = self
        if output_power is not None:
            self.output_power = output_power
        else:
            self.output_power = srl_nokia_interfaces__interface__transceiver__output_power()
        self_output_power = self.output_power
        if self_output_power is not None:
            self_output_power._parent = self
        if laser_bias_current is not None:
            self.laser_bias_current = laser_bias_current
        else:
            self.laser_bias_current = srl_nokia_interfaces__interface__transceiver__laser_bias_current()
        self_laser_bias_current = self.laser_bias_current
        if self_laser_bias_current is not None:
            self_laser_bias_current._parent = self
        self.channel = srl_nokia_interfaces__interface__transceiver__channel(elements=channel)
        self.channel._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _functional_type = self.functional_type
        _tx_laser = self.tx_laser
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        _ddm_events = self.ddm_events
        _forward_error_correction = self.forward_error_correction
        _form_factor = self.form_factor
        _ethernet_pmd = self.ethernet_pmd
        _connector_type = self.connector_type
        _vendor = self.vendor
        _vendor_part_number = self.vendor_part_number
        _vendor_revision = self.vendor_revision
        _vendor_lot_number = self.vendor_lot_number
        _serial_number = self.serial_number
        _date_code = self.date_code
        _firmware_version = self.firmware_version
        _fault_condition = self.fault_condition
        _wavelength = self.wavelength
        _temperature = self.temperature
        _voltage = self.voltage
        _input_power = self.input_power
        _output_power = self.output_power
        _laser_bias_current = self.laser_bias_current
        _channel = self.channel
        if _functional_type is not None:
            children['functional-type'] = yang.gdata.Leaf('identityref', _functional_type)
        if _tx_laser is not None:
            children['tx-laser'] = yang.gdata.Leaf('boolean', _tx_laser)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        if _ddm_events is not None:
            children['ddm-events'] = yang.gdata.Leaf('boolean', _ddm_events)
        if _forward_error_correction is not None:
            children['forward-error-correction'] = yang.gdata.Leaf('enumeration', _forward_error_correction)
        if _form_factor is not None:
            children['form-factor'] = yang.gdata.Leaf('enumeration', _form_factor)
        if _ethernet_pmd is not None:
            children['ethernet-pmd'] = yang.gdata.Leaf('string', _ethernet_pmd)
        if _connector_type is not None:
            children['connector-type'] = yang.gdata.Leaf('enumeration', _connector_type)
        if _vendor is not None:
            children['vendor'] = yang.gdata.Leaf('string', _vendor)
        if _vendor_part_number is not None:
            children['vendor-part-number'] = yang.gdata.Leaf('string', _vendor_part_number)
        if _vendor_revision is not None:
            children['vendor-revision'] = yang.gdata.Leaf('string', _vendor_revision)
        if _vendor_lot_number is not None:
            children['vendor-lot-number'] = yang.gdata.Leaf('string', _vendor_lot_number)
        if _serial_number is not None:
            children['serial-number'] = yang.gdata.Leaf('string', _serial_number)
        if _date_code is not None:
            children['date-code'] = yang.gdata.Leaf('string', _date_code)
        if _firmware_version is not None:
            children['firmware-version'] = _firmware_version.to_gdata()
        if _fault_condition is not None:
            children['fault-condition'] = yang.gdata.Leaf('boolean', _fault_condition)
        if _wavelength is not None:
            children['wavelength'] = yang.gdata.Leaf('decimal64', _wavelength)
        if _temperature is not None:
            children['temperature'] = _temperature.to_gdata()
        if _voltage is not None:
            children['voltage'] = _voltage.to_gdata()
        if _input_power is not None:
            children['input-power'] = _input_power.to_gdata()
        if _output_power is not None:
            children['output-power'] = _output_power.to_gdata()
        if _laser_bias_current is not None:
            children['laser-bias-current'] = _laser_bias_current.to_gdata()
        if _channel is not None:
            children['channel'] = _channel.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver(functional_type=n.get_opt_str("functional-type"), tx_laser=n.get_opt_bool("tx-laser"), oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"), ddm_events=n.get_opt_bool("ddm-events"), forward_error_correction=n.get_opt_str("forward-error-correction"), form_factor=n.get_opt_str("form-factor"), ethernet_pmd=n.get_opt_str("ethernet-pmd"), connector_type=n.get_opt_str("connector-type"), vendor=n.get_opt_str("vendor"), vendor_part_number=n.get_opt_str("vendor-part-number"), vendor_revision=n.get_opt_str("vendor-revision"), vendor_lot_number=n.get_opt_str("vendor-lot-number"), serial_number=n.get_opt_str("serial-number"), date_code=n.get_opt_str("date-code"), firmware_version=srl_nokia_interfaces__interface__transceiver__firmware_version.from_gdata(n.get_opt_container("firmware-version")), fault_condition=n.get_opt_bool("fault-condition"), wavelength=n.get_opt_float("wavelength"), temperature=srl_nokia_interfaces__interface__transceiver__temperature.from_gdata(n.get_opt_container("temperature")), voltage=srl_nokia_interfaces__interface__transceiver__voltage.from_gdata(n.get_opt_container("voltage")), input_power=srl_nokia_interfaces__interface__transceiver__input_power.from_gdata(n.get_opt_container("input-power")), output_power=srl_nokia_interfaces__interface__transceiver__output_power.from_gdata(n.get_opt_container("output-power")), laser_bias_current=srl_nokia_interfaces__interface__transceiver__laser_bias_current.from_gdata(n.get_opt_container("laser-bias-current")), channel=srl_nokia_interfaces__interface__transceiver__channel.from_gdata(n.get_opt_list("channel")))
        return srl_nokia_interfaces__interface__transceiver()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__transceiver:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver(functional_type=yang.gdata.from_xml_opt_str(n, "functional-type"), tx_laser=yang.gdata.from_xml_opt_bool(n, "tx-laser"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"), ddm_events=yang.gdata.from_xml_opt_bool(n, "ddm-events"), forward_error_correction=yang.gdata.from_xml_opt_str(n, "forward-error-correction"), form_factor=yang.gdata.from_xml_opt_str(n, "form-factor"), ethernet_pmd=yang.gdata.from_xml_opt_str(n, "ethernet-pmd"), connector_type=yang.gdata.from_xml_opt_str(n, "connector-type"), vendor=yang.gdata.from_xml_opt_str(n, "vendor"), vendor_part_number=yang.gdata.from_xml_opt_str(n, "vendor-part-number"), vendor_revision=yang.gdata.from_xml_opt_str(n, "vendor-revision"), vendor_lot_number=yang.gdata.from_xml_opt_str(n, "vendor-lot-number"), serial_number=yang.gdata.from_xml_opt_str(n, "serial-number"), date_code=yang.gdata.from_xml_opt_str(n, "date-code"), firmware_version=srl_nokia_interfaces__interface__transceiver__firmware_version.from_xml(yang.gdata.get_xml_opt_child(n, "firmware-version")), fault_condition=yang.gdata.from_xml_opt_bool(n, "fault-condition"), wavelength=yang.gdata.from_xml_opt_float(n, "wavelength"), temperature=srl_nokia_interfaces__interface__transceiver__temperature.from_xml(yang.gdata.get_xml_opt_child(n, "temperature")), voltage=srl_nokia_interfaces__interface__transceiver__voltage.from_xml(yang.gdata.get_xml_opt_child(n, "voltage")), input_power=srl_nokia_interfaces__interface__transceiver__input_power.from_xml(yang.gdata.get_xml_opt_child(n, "input-power")), output_power=srl_nokia_interfaces__interface__transceiver__output_power.from_xml(yang.gdata.get_xml_opt_child(n, "output-power")), laser_bias_current=srl_nokia_interfaces__interface__transceiver__laser_bias_current.from_xml(yang.gdata.get_xml_opt_child(n, "laser-bias-current")), channel=srl_nokia_interfaces__interface__transceiver__channel.from_xml(yang.gdata.get_xml_children(n, "channel")))
        return srl_nokia_interfaces__interface__transceiver()



mut def from_json_srl_nokia_interfaces__interface__ethernet__aggregate_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__forwarding_viable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__auto_negotiate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__duplex_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__dac_link_training(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__flow_control__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__flow_control__transmit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_interfaces__interface__ethernet__flow_control(yang.adata.MNode):
    receive: ?bool
    transmit: ?bool

    mut def __init__(self, receive: ?bool, transmit: ?bool):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.receive = receive
        self.transmit = transmit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        _transmit = self.transmit
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        if _transmit is not None:
            children['transmit'] = yang.gdata.Leaf('boolean', _transmit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__flow_control:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__flow_control(receive=n.get_opt_bool("receive"), transmit=n.get_opt_bool("transmit"))
        return srl_nokia_interfaces__interface__ethernet__flow_control()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__flow_control:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__flow_control(receive=yang.gdata.from_xml_opt_bool(n, "receive"), transmit=yang.gdata.from_xml_opt_bool(n, "transmit"))
        return srl_nokia_interfaces__interface__ethernet__flow_control()



mut def from_json_srl_nokia_interfaces__interface__ethernet__lacp_port_priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__port_speed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__hw_mac_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__mac_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__physical_medium(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__ptp_asymmetry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__ptp_timestamping__disable_ip_timestamping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_interfaces__interface__ethernet__ptp_timestamping(yang.adata.MNode):
    disable_ip_timestamping: ?bool

    mut def __init__(self, disable_ip_timestamping: ?bool):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.disable_ip_timestamping = disable_ip_timestamping

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_ip_timestamping = self.disable_ip_timestamping
        if _disable_ip_timestamping is not None:
            children['disable-ip-timestamping'] = yang.gdata.Leaf('boolean', _disable_ip_timestamping)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__ptp_timestamping(disable_ip_timestamping=n.get_opt_bool("disable-ip-timestamping"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__ptp_timestamping(disable_ip_timestamping=yang.gdata.from_xml_opt_bool(n, "disable-ip-timestamping"))
        return None



mut def from_json_srl_nokia_interfaces__interface__ethernet__standby_signaling(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__link_loss_forwarding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__reload_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__reload_delay_expires(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__hold_time__up(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__hold_time__up_expires(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__hold_time__down(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__hold_time__down_expires(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_interfaces__interface__ethernet__hold_time(yang.adata.MNode):
    up: int
    up_expires: ?str
    down: int
    down_expires: ?str

    mut def __init__(self, up: ?int=None, up_expires: ?str, down: ?int=None, down_expires: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if up != None:
            self.up = up
        else:
            self.up = 0
        self.up_expires = up_expires
        if down != None:
            self.down = down
        else:
            self.down = 0
        self.down_expires = down_expires

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _up = self.up
        _up_expires = self.up_expires
        _down = self.down
        _down_expires = self.down_expires
        if _up is not None:
            children['up'] = yang.gdata.Leaf('uint32', _up)
        if _up_expires is not None:
            children['up-expires'] = yang.gdata.Leaf('string', _up_expires)
        if _down is not None:
            children['down'] = yang.gdata.Leaf('uint32', _down)
        if _down_expires is not None:
            children['down-expires'] = yang.gdata.Leaf('string', _down_expires)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__hold_time:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__hold_time(up=n.get_opt_int("up"), up_expires=n.get_opt_str("up-expires"), down=n.get_opt_int("down"), down_expires=n.get_opt_str("down-expires"))
        return srl_nokia_interfaces__interface__ethernet__hold_time()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__hold_time:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__hold_time(up=yang.gdata.from_xml_opt_int(n, "up"), up_expires=yang.gdata.from_xml_opt_str(n, "up-expires"), down=yang.gdata.from_xml_opt_int(n, "down"), down_expires=yang.gdata.from_xml_opt_str(n, "down-expires"))
        return srl_nokia_interfaces__interface__ethernet__hold_time()



mut def from_json_srl_nokia_interfaces__interface__ethernet__crc_monitor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__crc_monitor__window_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(yang.adata.MNode):
    exponent: int
    multiplier: int

    mut def __init__(self, exponent: ?int=None, multiplier: ?int=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if exponent != None:
            self.exponent = exponent
        else:
            self.exponent = 5
        if multiplier != None:
            self.multiplier = multiplier
        else:
            self.multiplier = 1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        _multiplier = self.multiplier
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(exponent=n.get_opt_int("exponent"), multiplier=n.get_opt_int("multiplier"))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(exponent=yang.gdata.from_xml_opt_int(n, "exponent"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()



mut def from_json_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(yang.adata.MNode):
    exponent: int
    multiplier: int

    mut def __init__(self, exponent: ?int=None, multiplier: ?int=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if exponent != None:
            self.exponent = exponent
        else:
            self.exponent = 5
        if multiplier != None:
            self.multiplier = multiplier
        else:
            self.multiplier = 1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        _multiplier = self.multiplier
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(exponent=n.get_opt_int("exponent"), multiplier=n.get_opt_int("multiplier"))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(exponent=yang.gdata.from_xml_opt_int(n, "exponent"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()



mut def from_json_srl_nokia_interfaces__interface__ethernet__crc_monitor__current_alarms(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_interfaces__interface__ethernet__crc_monitor(yang.adata.MNode):
    admin_state: str
    window_size: int
    signal_degrade: srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade
    signal_failure: srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure
    current_alarms: list[str]

    mut def __init__(self, admin_state: ?str=None, window_size: ?int=None, signal_degrade: ?srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade=None, signal_failure: ?srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure=None, current_alarms: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        if window_size != None:
            self.window_size = window_size
        else:
            self.window_size = 10
        if signal_degrade is not None:
            self.signal_degrade = signal_degrade
        else:
            self.signal_degrade = srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()
        self_signal_degrade = self.signal_degrade
        if self_signal_degrade is not None:
            self_signal_degrade._parent = self
        if signal_failure is not None:
            self.signal_failure = signal_failure
        else:
            self.signal_failure = srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()
        self_signal_failure = self.signal_failure
        if self_signal_failure is not None:
            self_signal_failure._parent = self
        if current_alarms is not None:
            self.current_alarms = current_alarms
        else:
            self.current_alarms = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _window_size = self.window_size
        _signal_degrade = self.signal_degrade
        _signal_failure = self.signal_failure
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _window_size is not None:
            children['window-size'] = yang.gdata.Leaf('uint32', _window_size)
        if _signal_degrade is not None:
            children['signal-degrade'] = _signal_degrade.to_gdata()
        if _signal_failure is not None:
            children['signal-failure'] = _signal_failure.to_gdata()
        children['current-alarms'] = yang.gdata.LeafList(self.current_alarms)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor(admin_state=n.get_opt_str("admin-state"), window_size=n.get_opt_int("window-size"), signal_degrade=srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade.from_gdata(n.get_opt_container("signal-degrade")), signal_failure=srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure.from_gdata(n.get_opt_container("signal-failure")), current_alarms=n.get_opt_strs("current-alarms"))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), window_size=yang.gdata.from_xml_opt_int(n, "window-size"), signal_degrade=srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade.from_xml(yang.gdata.get_xml_opt_child(n, "signal-degrade")), signal_failure=srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure.from_xml(yang.gdata.get_xml_opt_child(n, "signal-failure")), current_alarms=yang.gdata.from_xml_opt_strs(n, "current-alarms"))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor()



mut def from_json_srl_nokia_interfaces__interface__ethernet__symbol_monitor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__symbol_monitor__window_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(yang.adata.MNode):
    exponent: int
    multiplier: int

    mut def __init__(self, exponent: ?int=None, multiplier: ?int=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if exponent != None:
            self.exponent = exponent
        else:
            self.exponent = 5
        if multiplier != None:
            self.multiplier = multiplier
        else:
            self.multiplier = 1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        _multiplier = self.multiplier
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(exponent=n.get_opt_int("exponent"), multiplier=n.get_opt_int("multiplier"))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(exponent=yang.gdata.from_xml_opt_int(n, "exponent"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()



mut def from_json_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(yang.adata.MNode):
    exponent: int
    multiplier: int

    mut def __init__(self, exponent: ?int=None, multiplier: ?int=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if exponent != None:
            self.exponent = exponent
        else:
            self.exponent = 5
        if multiplier != None:
            self.multiplier = multiplier
        else:
            self.multiplier = 1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        _multiplier = self.multiplier
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(exponent=n.get_opt_int("exponent"), multiplier=n.get_opt_int("multiplier"))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(exponent=yang.gdata.from_xml_opt_int(n, "exponent"), multiplier=yang.gdata.from_xml_opt_int(n, "multiplier"))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()



mut def from_json_srl_nokia_interfaces__interface__ethernet__symbol_monitor__current_alarms(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor(yang.adata.MNode):
    admin_state: str
    window_size: int
    signal_degrade: srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade
    signal_failure: srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure
    current_alarms: list[str]

    mut def __init__(self, admin_state: ?str=None, window_size: ?int=None, signal_degrade: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade=None, signal_failure: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure=None, current_alarms: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        if window_size != None:
            self.window_size = window_size
        else:
            self.window_size = 10
        if signal_degrade is not None:
            self.signal_degrade = signal_degrade
        else:
            self.signal_degrade = srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()
        self_signal_degrade = self.signal_degrade
        if self_signal_degrade is not None:
            self_signal_degrade._parent = self
        if signal_failure is not None:
            self.signal_failure = signal_failure
        else:
            self.signal_failure = srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()
        self_signal_failure = self.signal_failure
        if self_signal_failure is not None:
            self_signal_failure._parent = self
        if current_alarms is not None:
            self.current_alarms = current_alarms
        else:
            self.current_alarms = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _window_size = self.window_size
        _signal_degrade = self.signal_degrade
        _signal_failure = self.signal_failure
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _window_size is not None:
            children['window-size'] = yang.gdata.Leaf('uint32', _window_size)
        if _signal_degrade is not None:
            children['signal-degrade'] = _signal_degrade.to_gdata()
        if _signal_failure is not None:
            children['signal-failure'] = _signal_failure.to_gdata()
        children['current-alarms'] = yang.gdata.LeafList(self.current_alarms)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor(admin_state=n.get_opt_str("admin-state"), window_size=n.get_opt_int("window-size"), signal_degrade=srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade.from_gdata(n.get_opt_container("signal-degrade")), signal_failure=srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure.from_gdata(n.get_opt_container("signal-failure")), current_alarms=n.get_opt_strs("current-alarms"))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), window_size=yang.gdata.from_xml_opt_int(n, "window-size"), signal_degrade=srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade.from_xml(yang.gdata.get_xml_opt_child(n, "signal-degrade")), signal_failure=srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure.from_xml(yang.gdata.get_xml_opt_child(n, "signal-failure")), current_alarms=yang.gdata.from_xml_opt_strs(n, "current-alarms"))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor()



mut def from_json_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__half_life(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__max_suppress_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__reuse_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__suppress_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__current_penalties(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__max_penalties(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(yang.adata.MNode):
    admin_state: str
    half_life: int
    max_suppress_time: int
    reuse_threshold: int
    suppress_threshold: int
    current_penalties: int
    max_penalties: int
    oper_state: ?str

    mut def __init__(self, admin_state: ?str=None, half_life: ?int=None, max_suppress_time: ?int=None, reuse_threshold: ?int=None, suppress_threshold: ?int=None, current_penalties: ?int=None, max_penalties: ?int=None, oper_state: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        if half_life != None:
            self.half_life = half_life
        else:
            self.half_life = 5
        if max_suppress_time != None:
            self.max_suppress_time = max_suppress_time
        else:
            self.max_suppress_time = 20
        if reuse_threshold != None:
            self.reuse_threshold = reuse_threshold
        else:
            self.reuse_threshold = 1000
        if suppress_threshold != None:
            self.suppress_threshold = suppress_threshold
        else:
            self.suppress_threshold = 2000
        if current_penalties != None:
            self.current_penalties = current_penalties
        else:
            self.current_penalties = 0
        if max_penalties != None:
            self.max_penalties = max_penalties
        else:
            self.max_penalties = 0
        self.oper_state = oper_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _half_life = self.half_life
        _max_suppress_time = self.max_suppress_time
        _reuse_threshold = self.reuse_threshold
        _suppress_threshold = self.suppress_threshold
        _current_penalties = self.current_penalties
        _max_penalties = self.max_penalties
        _oper_state = self.oper_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _half_life is not None:
            children['half-life'] = yang.gdata.Leaf('uint32', _half_life)
        if _max_suppress_time is not None:
            children['max-suppress-time'] = yang.gdata.Leaf('uint32', _max_suppress_time)
        if _reuse_threshold is not None:
            children['reuse-threshold'] = yang.gdata.Leaf('uint32', _reuse_threshold)
        if _suppress_threshold is not None:
            children['suppress-threshold'] = yang.gdata.Leaf('uint32', _suppress_threshold)
        if _current_penalties is not None:
            children['current-penalties'] = yang.gdata.Leaf('uint64', _current_penalties)
        if _max_penalties is not None:
            children['max-penalties'] = yang.gdata.Leaf('uint64', _max_penalties)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__exponential_port_dampening:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(admin_state=n.get_opt_str("admin-state"), half_life=n.get_opt_int("half-life"), max_suppress_time=n.get_opt_int("max-suppress-time"), reuse_threshold=n.get_opt_int("reuse-threshold"), suppress_threshold=n.get_opt_int("suppress-threshold"), current_penalties=n.get_opt_int("current-penalties"), max_penalties=n.get_opt_int("max-penalties"), oper_state=n.get_opt_str("oper-state"))
        return srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__exponential_port_dampening:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), half_life=yang.gdata.from_xml_opt_int(n, "half-life"), max_suppress_time=yang.gdata.from_xml_opt_int(n, "max-suppress-time"), reuse_threshold=yang.gdata.from_xml_opt_int(n, "reuse-threshold"), suppress_threshold=yang.gdata.from_xml_opt_int(n, "suppress-threshold"), current_penalties=yang.gdata.from_xml_opt_int(n, "current-penalties"), max_penalties=yang.gdata.from_xml_opt_int(n, "max-penalties"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"))
        return srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()



mut def from_json_srl_nokia_interfaces__interface__ethernet__storm_control__units(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__storm_control__broadcast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__storm_control__multicast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__storm_control__unknown_unicast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__storm_control__operational_broadcast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__storm_control__operational_multicast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__storm_control__operational_unknown_unicast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__storm_control__rising_threshold_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__ethernet__storm_control(yang.adata.MNode):
    units: str
    broadcast_rate: ?int
    multicast_rate: ?int
    unknown_unicast_rate: ?int
    operational_broadcast_rate: ?int
    operational_multicast_rate: ?int
    operational_unknown_unicast_rate: ?int
    rising_threshold_action: str

    mut def __init__(self, units: ?str=None, broadcast_rate: ?int, multicast_rate: ?int, unknown_unicast_rate: ?int, operational_broadcast_rate: ?int, operational_multicast_rate: ?int, operational_unknown_unicast_rate: ?int, rising_threshold_action: ?str=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if units != None:
            self.units = units
        else:
            self.units = "percentage"
        self.broadcast_rate = broadcast_rate
        self.multicast_rate = multicast_rate
        self.unknown_unicast_rate = unknown_unicast_rate
        self.operational_broadcast_rate = operational_broadcast_rate
        self.operational_multicast_rate = operational_multicast_rate
        self.operational_unknown_unicast_rate = operational_unknown_unicast_rate
        if rising_threshold_action != None:
            self.rising_threshold_action = rising_threshold_action
        else:
            self.rising_threshold_action = "none"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _units = self.units
        _broadcast_rate = self.broadcast_rate
        _multicast_rate = self.multicast_rate
        _unknown_unicast_rate = self.unknown_unicast_rate
        _operational_broadcast_rate = self.operational_broadcast_rate
        _operational_multicast_rate = self.operational_multicast_rate
        _operational_unknown_unicast_rate = self.operational_unknown_unicast_rate
        _rising_threshold_action = self.rising_threshold_action
        if _units is not None:
            children['units'] = yang.gdata.Leaf('enumeration', _units)
        if _broadcast_rate is not None:
            children['broadcast-rate'] = yang.gdata.Leaf('uint32', _broadcast_rate)
        if _multicast_rate is not None:
            children['multicast-rate'] = yang.gdata.Leaf('uint32', _multicast_rate)
        if _unknown_unicast_rate is not None:
            children['unknown-unicast-rate'] = yang.gdata.Leaf('uint32', _unknown_unicast_rate)
        if _operational_broadcast_rate is not None:
            children['operational-broadcast-rate'] = yang.gdata.Leaf('uint32', _operational_broadcast_rate)
        if _operational_multicast_rate is not None:
            children['operational-multicast-rate'] = yang.gdata.Leaf('uint32', _operational_multicast_rate)
        if _operational_unknown_unicast_rate is not None:
            children['operational-unknown-unicast-rate'] = yang.gdata.Leaf('uint32', _operational_unknown_unicast_rate)
        if _rising_threshold_action is not None:
            children['rising-threshold-action'] = yang.gdata.Leaf('enumeration', _rising_threshold_action)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__storm_control:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__storm_control(units=n.get_opt_str("units"), broadcast_rate=n.get_opt_int("broadcast-rate"), multicast_rate=n.get_opt_int("multicast-rate"), unknown_unicast_rate=n.get_opt_int("unknown-unicast-rate"), operational_broadcast_rate=n.get_opt_int("operational-broadcast-rate"), operational_multicast_rate=n.get_opt_int("operational-multicast-rate"), operational_unknown_unicast_rate=n.get_opt_int("operational-unknown-unicast-rate"), rising_threshold_action=n.get_opt_str("rising-threshold-action"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__ethernet__storm_control:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__storm_control(units=yang.gdata.from_xml_opt_str(n, "units"), broadcast_rate=yang.gdata.from_xml_opt_int(n, "broadcast-rate"), multicast_rate=yang.gdata.from_xml_opt_int(n, "multicast-rate"), unknown_unicast_rate=yang.gdata.from_xml_opt_int(n, "unknown-unicast-rate"), operational_broadcast_rate=yang.gdata.from_xml_opt_int(n, "operational-broadcast-rate"), operational_multicast_rate=yang.gdata.from_xml_opt_int(n, "operational-multicast-rate"), operational_unknown_unicast_rate=yang.gdata.from_xml_opt_int(n, "operational-unknown-unicast-rate"), rising_threshold_action=yang.gdata.from_xml_opt_str(n, "rising-threshold-action"))
        return None



mut def from_json_srl_nokia_interfaces__interface__ethernet__synce__ssm__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__ethernet__synce__ssm(yang.adata.MNode):
    admin_state: str

    mut def __init__(self, admin_state: ?str=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__synce__ssm:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__synce__ssm(admin_state=n.get_opt_str("admin-state"))
        return srl_nokia_interfaces__interface__ethernet__synce__ssm()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__synce__ssm:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__synce__ssm(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return srl_nokia_interfaces__interface__ethernet__synce__ssm()



class srl_nokia_interfaces__interface__ethernet__synce(yang.adata.MNode):
    ssm: srl_nokia_interfaces__interface__ethernet__synce__ssm

    mut def __init__(self, ssm: ?srl_nokia_interfaces__interface__ethernet__synce__ssm=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if ssm is not None:
            self.ssm = ssm
        else:
            self.ssm = srl_nokia_interfaces__interface__ethernet__synce__ssm()
        self_ssm = self.ssm
        if self_ssm is not None:
            self_ssm._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ssm = self.ssm
        if _ssm is not None:
            children['ssm'] = _ssm.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__synce:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__synce(ssm=srl_nokia_interfaces__interface__ethernet__synce__ssm.from_gdata(n.get_opt_container("ssm")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__ethernet__synce:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__synce(ssm=srl_nokia_interfaces__interface__ethernet__synce__ssm.from_xml(yang.gdata.get_xml_opt_child(n, "ssm")))
        return None



mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_mac_pause_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_oversize_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_jabber_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_fragment_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_crc_error_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__out_mac_pause_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_64b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_65b_to_127b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_128b_to_255b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_256b_to_511b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_512b_to_1023b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_1024b_to_1518b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__in_1519b_or_longer_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__out_64b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__out_65b_to_127b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__out_128b_to_255b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__out_256b_to_511b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__out_512b_to_1023b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__out_1024b_to_1518b_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__out_1519b_or_longer_frames(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__ethernet__statistics__last_clear(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_interfaces__interface__ethernet__statistics(yang.adata.MNode):
    in_mac_pause_frames: int
    in_oversize_frames: int
    in_jabber_frames: int
    in_fragment_frames: int
    in_crc_error_frames: int
    out_mac_pause_frames: int
    in_64b_frames: int
    in_65b_to_127b_frames: int
    in_128b_to_255b_frames: int
    in_256b_to_511b_frames: int
    in_512b_to_1023b_frames: int
    in_1024b_to_1518b_frames: int
    in_1519b_or_longer_frames: int
    out_64b_frames: int
    out_65b_to_127b_frames: int
    out_128b_to_255b_frames: int
    out_256b_to_511b_frames: int
    out_512b_to_1023b_frames: int
    out_1024b_to_1518b_frames: int
    out_1519b_or_longer_frames: int
    last_clear: ?str

    mut def __init__(self, in_mac_pause_frames: ?int=None, in_oversize_frames: ?int=None, in_jabber_frames: ?int=None, in_fragment_frames: ?int=None, in_crc_error_frames: ?int=None, out_mac_pause_frames: ?int=None, in_64b_frames: ?int=None, in_65b_to_127b_frames: ?int=None, in_128b_to_255b_frames: ?int=None, in_256b_to_511b_frames: ?int=None, in_512b_to_1023b_frames: ?int=None, in_1024b_to_1518b_frames: ?int=None, in_1519b_or_longer_frames: ?int=None, out_64b_frames: ?int=None, out_65b_to_127b_frames: ?int=None, out_128b_to_255b_frames: ?int=None, out_256b_to_511b_frames: ?int=None, out_512b_to_1023b_frames: ?int=None, out_1024b_to_1518b_frames: ?int=None, out_1519b_or_longer_frames: ?int=None, last_clear: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if in_mac_pause_frames != None:
            self.in_mac_pause_frames = in_mac_pause_frames
        else:
            self.in_mac_pause_frames = 0
        if in_oversize_frames != None:
            self.in_oversize_frames = in_oversize_frames
        else:
            self.in_oversize_frames = 0
        if in_jabber_frames != None:
            self.in_jabber_frames = in_jabber_frames
        else:
            self.in_jabber_frames = 0
        if in_fragment_frames != None:
            self.in_fragment_frames = in_fragment_frames
        else:
            self.in_fragment_frames = 0
        if in_crc_error_frames != None:
            self.in_crc_error_frames = in_crc_error_frames
        else:
            self.in_crc_error_frames = 0
        if out_mac_pause_frames != None:
            self.out_mac_pause_frames = out_mac_pause_frames
        else:
            self.out_mac_pause_frames = 0
        if in_64b_frames != None:
            self.in_64b_frames = in_64b_frames
        else:
            self.in_64b_frames = 0
        if in_65b_to_127b_frames != None:
            self.in_65b_to_127b_frames = in_65b_to_127b_frames
        else:
            self.in_65b_to_127b_frames = 0
        if in_128b_to_255b_frames != None:
            self.in_128b_to_255b_frames = in_128b_to_255b_frames
        else:
            self.in_128b_to_255b_frames = 0
        if in_256b_to_511b_frames != None:
            self.in_256b_to_511b_frames = in_256b_to_511b_frames
        else:
            self.in_256b_to_511b_frames = 0
        if in_512b_to_1023b_frames != None:
            self.in_512b_to_1023b_frames = in_512b_to_1023b_frames
        else:
            self.in_512b_to_1023b_frames = 0
        if in_1024b_to_1518b_frames != None:
            self.in_1024b_to_1518b_frames = in_1024b_to_1518b_frames
        else:
            self.in_1024b_to_1518b_frames = 0
        if in_1519b_or_longer_frames != None:
            self.in_1519b_or_longer_frames = in_1519b_or_longer_frames
        else:
            self.in_1519b_or_longer_frames = 0
        if out_64b_frames != None:
            self.out_64b_frames = out_64b_frames
        else:
            self.out_64b_frames = 0
        if out_65b_to_127b_frames != None:
            self.out_65b_to_127b_frames = out_65b_to_127b_frames
        else:
            self.out_65b_to_127b_frames = 0
        if out_128b_to_255b_frames != None:
            self.out_128b_to_255b_frames = out_128b_to_255b_frames
        else:
            self.out_128b_to_255b_frames = 0
        if out_256b_to_511b_frames != None:
            self.out_256b_to_511b_frames = out_256b_to_511b_frames
        else:
            self.out_256b_to_511b_frames = 0
        if out_512b_to_1023b_frames != None:
            self.out_512b_to_1023b_frames = out_512b_to_1023b_frames
        else:
            self.out_512b_to_1023b_frames = 0
        if out_1024b_to_1518b_frames != None:
            self.out_1024b_to_1518b_frames = out_1024b_to_1518b_frames
        else:
            self.out_1024b_to_1518b_frames = 0
        if out_1519b_or_longer_frames != None:
            self.out_1519b_or_longer_frames = out_1519b_or_longer_frames
        else:
            self.out_1519b_or_longer_frames = 0
        self.last_clear = last_clear

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_mac_pause_frames = self.in_mac_pause_frames
        _in_oversize_frames = self.in_oversize_frames
        _in_jabber_frames = self.in_jabber_frames
        _in_fragment_frames = self.in_fragment_frames
        _in_crc_error_frames = self.in_crc_error_frames
        _out_mac_pause_frames = self.out_mac_pause_frames
        _in_64b_frames = self.in_64b_frames
        _in_65b_to_127b_frames = self.in_65b_to_127b_frames
        _in_128b_to_255b_frames = self.in_128b_to_255b_frames
        _in_256b_to_511b_frames = self.in_256b_to_511b_frames
        _in_512b_to_1023b_frames = self.in_512b_to_1023b_frames
        _in_1024b_to_1518b_frames = self.in_1024b_to_1518b_frames
        _in_1519b_or_longer_frames = self.in_1519b_or_longer_frames
        _out_64b_frames = self.out_64b_frames
        _out_65b_to_127b_frames = self.out_65b_to_127b_frames
        _out_128b_to_255b_frames = self.out_128b_to_255b_frames
        _out_256b_to_511b_frames = self.out_256b_to_511b_frames
        _out_512b_to_1023b_frames = self.out_512b_to_1023b_frames
        _out_1024b_to_1518b_frames = self.out_1024b_to_1518b_frames
        _out_1519b_or_longer_frames = self.out_1519b_or_longer_frames
        _last_clear = self.last_clear
        if _in_mac_pause_frames is not None:
            children['in-mac-pause-frames'] = yang.gdata.Leaf('uint64', _in_mac_pause_frames)
        if _in_oversize_frames is not None:
            children['in-oversize-frames'] = yang.gdata.Leaf('uint64', _in_oversize_frames)
        if _in_jabber_frames is not None:
            children['in-jabber-frames'] = yang.gdata.Leaf('uint64', _in_jabber_frames)
        if _in_fragment_frames is not None:
            children['in-fragment-frames'] = yang.gdata.Leaf('uint64', _in_fragment_frames)
        if _in_crc_error_frames is not None:
            children['in-crc-error-frames'] = yang.gdata.Leaf('uint64', _in_crc_error_frames)
        if _out_mac_pause_frames is not None:
            children['out-mac-pause-frames'] = yang.gdata.Leaf('uint64', _out_mac_pause_frames)
        if _in_64b_frames is not None:
            children['in-64b-frames'] = yang.gdata.Leaf('uint64', _in_64b_frames)
        if _in_65b_to_127b_frames is not None:
            children['in-65b-to-127b-frames'] = yang.gdata.Leaf('uint64', _in_65b_to_127b_frames)
        if _in_128b_to_255b_frames is not None:
            children['in-128b-to-255b-frames'] = yang.gdata.Leaf('uint64', _in_128b_to_255b_frames)
        if _in_256b_to_511b_frames is not None:
            children['in-256b-to-511b-frames'] = yang.gdata.Leaf('uint64', _in_256b_to_511b_frames)
        if _in_512b_to_1023b_frames is not None:
            children['in-512b-to-1023b-frames'] = yang.gdata.Leaf('uint64', _in_512b_to_1023b_frames)
        if _in_1024b_to_1518b_frames is not None:
            children['in-1024b-to-1518b-frames'] = yang.gdata.Leaf('uint64', _in_1024b_to_1518b_frames)
        if _in_1519b_or_longer_frames is not None:
            children['in-1519b-or-longer-frames'] = yang.gdata.Leaf('uint64', _in_1519b_or_longer_frames)
        if _out_64b_frames is not None:
            children['out-64b-frames'] = yang.gdata.Leaf('uint64', _out_64b_frames)
        if _out_65b_to_127b_frames is not None:
            children['out-65b-to-127b-frames'] = yang.gdata.Leaf('uint64', _out_65b_to_127b_frames)
        if _out_128b_to_255b_frames is not None:
            children['out-128b-to-255b-frames'] = yang.gdata.Leaf('uint64', _out_128b_to_255b_frames)
        if _out_256b_to_511b_frames is not None:
            children['out-256b-to-511b-frames'] = yang.gdata.Leaf('uint64', _out_256b_to_511b_frames)
        if _out_512b_to_1023b_frames is not None:
            children['out-512b-to-1023b-frames'] = yang.gdata.Leaf('uint64', _out_512b_to_1023b_frames)
        if _out_1024b_to_1518b_frames is not None:
            children['out-1024b-to-1518b-frames'] = yang.gdata.Leaf('uint64', _out_1024b_to_1518b_frames)
        if _out_1519b_or_longer_frames is not None:
            children['out-1519b-or-longer-frames'] = yang.gdata.Leaf('uint64', _out_1519b_or_longer_frames)
        if _last_clear is not None:
            children['last-clear'] = yang.gdata.Leaf('string', _last_clear)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__statistics(in_mac_pause_frames=n.get_opt_int("in-mac-pause-frames"), in_oversize_frames=n.get_opt_int("in-oversize-frames"), in_jabber_frames=n.get_opt_int("in-jabber-frames"), in_fragment_frames=n.get_opt_int("in-fragment-frames"), in_crc_error_frames=n.get_opt_int("in-crc-error-frames"), out_mac_pause_frames=n.get_opt_int("out-mac-pause-frames"), in_64b_frames=n.get_opt_int("in-64b-frames"), in_65b_to_127b_frames=n.get_opt_int("in-65b-to-127b-frames"), in_128b_to_255b_frames=n.get_opt_int("in-128b-to-255b-frames"), in_256b_to_511b_frames=n.get_opt_int("in-256b-to-511b-frames"), in_512b_to_1023b_frames=n.get_opt_int("in-512b-to-1023b-frames"), in_1024b_to_1518b_frames=n.get_opt_int("in-1024b-to-1518b-frames"), in_1519b_or_longer_frames=n.get_opt_int("in-1519b-or-longer-frames"), out_64b_frames=n.get_opt_int("out-64b-frames"), out_65b_to_127b_frames=n.get_opt_int("out-65b-to-127b-frames"), out_128b_to_255b_frames=n.get_opt_int("out-128b-to-255b-frames"), out_256b_to_511b_frames=n.get_opt_int("out-256b-to-511b-frames"), out_512b_to_1023b_frames=n.get_opt_int("out-512b-to-1023b-frames"), out_1024b_to_1518b_frames=n.get_opt_int("out-1024b-to-1518b-frames"), out_1519b_or_longer_frames=n.get_opt_int("out-1519b-or-longer-frames"), last_clear=n.get_opt_str("last-clear"))
        return srl_nokia_interfaces__interface__ethernet__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__statistics(in_mac_pause_frames=yang.gdata.from_xml_opt_int(n, "in-mac-pause-frames"), in_oversize_frames=yang.gdata.from_xml_opt_int(n, "in-oversize-frames"), in_jabber_frames=yang.gdata.from_xml_opt_int(n, "in-jabber-frames"), in_fragment_frames=yang.gdata.from_xml_opt_int(n, "in-fragment-frames"), in_crc_error_frames=yang.gdata.from_xml_opt_int(n, "in-crc-error-frames"), out_mac_pause_frames=yang.gdata.from_xml_opt_int(n, "out-mac-pause-frames"), in_64b_frames=yang.gdata.from_xml_opt_int(n, "in-64b-frames"), in_65b_to_127b_frames=yang.gdata.from_xml_opt_int(n, "in-65b-to-127b-frames"), in_128b_to_255b_frames=yang.gdata.from_xml_opt_int(n, "in-128b-to-255b-frames"), in_256b_to_511b_frames=yang.gdata.from_xml_opt_int(n, "in-256b-to-511b-frames"), in_512b_to_1023b_frames=yang.gdata.from_xml_opt_int(n, "in-512b-to-1023b-frames"), in_1024b_to_1518b_frames=yang.gdata.from_xml_opt_int(n, "in-1024b-to-1518b-frames"), in_1519b_or_longer_frames=yang.gdata.from_xml_opt_int(n, "in-1519b-or-longer-frames"), out_64b_frames=yang.gdata.from_xml_opt_int(n, "out-64b-frames"), out_65b_to_127b_frames=yang.gdata.from_xml_opt_int(n, "out-65b-to-127b-frames"), out_128b_to_255b_frames=yang.gdata.from_xml_opt_int(n, "out-128b-to-255b-frames"), out_256b_to_511b_frames=yang.gdata.from_xml_opt_int(n, "out-256b-to-511b-frames"), out_512b_to_1023b_frames=yang.gdata.from_xml_opt_int(n, "out-512b-to-1023b-frames"), out_1024b_to_1518b_frames=yang.gdata.from_xml_opt_int(n, "out-1024b-to-1518b-frames"), out_1519b_or_longer_frames=yang.gdata.from_xml_opt_int(n, "out-1519b-or-longer-frames"), last_clear=yang.gdata.from_xml_opt_str(n, "last-clear"))
        return srl_nokia_interfaces__interface__ethernet__statistics()



class srl_nokia_interfaces__interface__ethernet(yang.adata.MNode):
    aggregate_id: ?str
    forwarding_viable: ?bool
    auto_negotiate: ?bool
    duplex_mode: ?str
    dac_link_training: ?bool
    flow_control: srl_nokia_interfaces__interface__ethernet__flow_control
    lacp_port_priority: ?int
    port_speed: ?str
    hw_mac_address: ?str
    mac_address: ?str
    physical_medium: ?str
    ptp_asymmetry: int
    ptp_timestamping: ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping
    standby_signaling: ?str
    link_loss_forwarding: ?bool
    reload_delay: ?int
    reload_delay_expires: ?str
    hold_time: srl_nokia_interfaces__interface__ethernet__hold_time
    crc_monitor: srl_nokia_interfaces__interface__ethernet__crc_monitor
    symbol_monitor: srl_nokia_interfaces__interface__ethernet__symbol_monitor
    exponential_port_dampening: srl_nokia_interfaces__interface__ethernet__exponential_port_dampening
    storm_control: ?srl_nokia_interfaces__interface__ethernet__storm_control
    synce: ?srl_nokia_interfaces__interface__ethernet__synce
    statistics: srl_nokia_interfaces__interface__ethernet__statistics

    mut def __init__(self, aggregate_id: ?str, forwarding_viable: ?bool, auto_negotiate: ?bool, duplex_mode: ?str, dac_link_training: ?bool, flow_control: ?srl_nokia_interfaces__interface__ethernet__flow_control=None, lacp_port_priority: ?int, port_speed: ?str, hw_mac_address: ?str, mac_address: ?str, physical_medium: ?str, ptp_asymmetry: ?int=None, ptp_timestamping: ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping=None, standby_signaling: ?str, link_loss_forwarding: ?bool, reload_delay: ?int, reload_delay_expires: ?str, hold_time: ?srl_nokia_interfaces__interface__ethernet__hold_time=None, crc_monitor: ?srl_nokia_interfaces__interface__ethernet__crc_monitor=None, symbol_monitor: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor=None, exponential_port_dampening: ?srl_nokia_interfaces__interface__ethernet__exponential_port_dampening=None, storm_control: ?srl_nokia_interfaces__interface__ethernet__storm_control=None, synce: ?srl_nokia_interfaces__interface__ethernet__synce=None, statistics: ?srl_nokia_interfaces__interface__ethernet__statistics=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.aggregate_id = aggregate_id
        self.forwarding_viable = forwarding_viable
        self.auto_negotiate = auto_negotiate
        self.duplex_mode = duplex_mode
        self.dac_link_training = dac_link_training
        if flow_control is not None:
            self.flow_control = flow_control
        else:
            self.flow_control = srl_nokia_interfaces__interface__ethernet__flow_control()
        self_flow_control = self.flow_control
        if self_flow_control is not None:
            self_flow_control._parent = self
        self.lacp_port_priority = lacp_port_priority
        self.port_speed = port_speed
        self.hw_mac_address = hw_mac_address
        self.mac_address = mac_address
        self.physical_medium = physical_medium
        if ptp_asymmetry != None:
            self.ptp_asymmetry = ptp_asymmetry
        else:
            self.ptp_asymmetry = 0
        self.ptp_timestamping = ptp_timestamping
        self_ptp_timestamping = self.ptp_timestamping
        if self_ptp_timestamping is not None:
            self_ptp_timestamping._parent = self
        self.standby_signaling = standby_signaling
        self.link_loss_forwarding = link_loss_forwarding
        self.reload_delay = reload_delay
        self.reload_delay_expires = reload_delay_expires
        if hold_time is not None:
            self.hold_time = hold_time
        else:
            self.hold_time = srl_nokia_interfaces__interface__ethernet__hold_time()
        self_hold_time = self.hold_time
        if self_hold_time is not None:
            self_hold_time._parent = self
        if crc_monitor is not None:
            self.crc_monitor = crc_monitor
        else:
            self.crc_monitor = srl_nokia_interfaces__interface__ethernet__crc_monitor()
        self_crc_monitor = self.crc_monitor
        if self_crc_monitor is not None:
            self_crc_monitor._parent = self
        if symbol_monitor is not None:
            self.symbol_monitor = symbol_monitor
        else:
            self.symbol_monitor = srl_nokia_interfaces__interface__ethernet__symbol_monitor()
        self_symbol_monitor = self.symbol_monitor
        if self_symbol_monitor is not None:
            self_symbol_monitor._parent = self
        if exponential_port_dampening is not None:
            self.exponential_port_dampening = exponential_port_dampening
        else:
            self.exponential_port_dampening = srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()
        self_exponential_port_dampening = self.exponential_port_dampening
        if self_exponential_port_dampening is not None:
            self_exponential_port_dampening._parent = self
        self.storm_control = storm_control
        self_storm_control = self.storm_control
        if self_storm_control is not None:
            self_storm_control._parent = self
        self.synce = synce
        self_synce = self.synce
        if self_synce is not None:
            self_synce._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_interfaces__interface__ethernet__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self

    mut def create_ptp_timestamping(self):
        res = srl_nokia_interfaces__interface__ethernet__ptp_timestamping()
        self.ptp_timestamping = res
        return res

    mut def create_storm_control(self):
        res = srl_nokia_interfaces__interface__ethernet__storm_control()
        self.storm_control = res
        return res

    mut def create_synce(self):
        res = srl_nokia_interfaces__interface__ethernet__synce()
        self.synce = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _aggregate_id = self.aggregate_id
        _forwarding_viable = self.forwarding_viable
        _auto_negotiate = self.auto_negotiate
        _duplex_mode = self.duplex_mode
        _dac_link_training = self.dac_link_training
        _flow_control = self.flow_control
        _lacp_port_priority = self.lacp_port_priority
        _port_speed = self.port_speed
        _hw_mac_address = self.hw_mac_address
        _mac_address = self.mac_address
        _physical_medium = self.physical_medium
        _ptp_asymmetry = self.ptp_asymmetry
        _ptp_timestamping = self.ptp_timestamping
        _standby_signaling = self.standby_signaling
        _link_loss_forwarding = self.link_loss_forwarding
        _reload_delay = self.reload_delay
        _reload_delay_expires = self.reload_delay_expires
        _hold_time = self.hold_time
        _crc_monitor = self.crc_monitor
        _symbol_monitor = self.symbol_monitor
        _exponential_port_dampening = self.exponential_port_dampening
        _storm_control = self.storm_control
        _synce = self.synce
        _statistics = self.statistics
        if _aggregate_id is not None:
            children['aggregate-id'] = yang.gdata.Leaf('leafref', _aggregate_id)
        if _forwarding_viable is not None:
            children['forwarding-viable'] = yang.gdata.Leaf('boolean', _forwarding_viable)
        if _auto_negotiate is not None:
            children['auto-negotiate'] = yang.gdata.Leaf('boolean', _auto_negotiate)
        if _duplex_mode is not None:
            children['duplex-mode'] = yang.gdata.Leaf('enumeration', _duplex_mode)
        if _dac_link_training is not None:
            children['dac-link-training'] = yang.gdata.Leaf('boolean', _dac_link_training)
        if _flow_control is not None:
            children['flow-control'] = _flow_control.to_gdata()
        if _lacp_port_priority is not None:
            children['lacp-port-priority'] = yang.gdata.Leaf('uint16', _lacp_port_priority)
        if _port_speed is not None:
            children['port-speed'] = yang.gdata.Leaf('enumeration', _port_speed)
        if _hw_mac_address is not None:
            children['hw-mac-address'] = yang.gdata.Leaf('string', _hw_mac_address)
        if _mac_address is not None:
            children['mac-address'] = yang.gdata.Leaf('string', _mac_address)
        if _physical_medium is not None:
            children['physical-medium'] = yang.gdata.Leaf('enumeration', _physical_medium)
        if _ptp_asymmetry is not None:
            children['ptp-asymmetry'] = yang.gdata.Leaf('int32', _ptp_asymmetry)
        if _ptp_timestamping is not None:
            children['ptp-timestamping'] = _ptp_timestamping.to_gdata()
        if _standby_signaling is not None:
            children['standby-signaling'] = yang.gdata.Leaf('enumeration', _standby_signaling)
        if _link_loss_forwarding is not None:
            children['link-loss-forwarding'] = yang.gdata.Leaf('boolean', _link_loss_forwarding)
        if _reload_delay is not None:
            children['reload-delay'] = yang.gdata.Leaf('uint32', _reload_delay)
        if _reload_delay_expires is not None:
            children['reload-delay-expires'] = yang.gdata.Leaf('string', _reload_delay_expires)
        if _hold_time is not None:
            children['hold-time'] = _hold_time.to_gdata()
        if _crc_monitor is not None:
            children['crc-monitor'] = _crc_monitor.to_gdata()
        if _symbol_monitor is not None:
            children['symbol-monitor'] = _symbol_monitor.to_gdata()
        if _exponential_port_dampening is not None:
            children['exponential-port-dampening'] = _exponential_port_dampening.to_gdata()
        if _storm_control is not None:
            children['storm-control'] = _storm_control.to_gdata()
        if _synce is not None:
            children['synce'] = _synce.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet(aggregate_id=n.get_opt_str("aggregate-id"), forwarding_viable=n.get_opt_bool("forwarding-viable"), auto_negotiate=n.get_opt_bool("auto-negotiate"), duplex_mode=n.get_opt_str("duplex-mode"), dac_link_training=n.get_opt_bool("dac-link-training"), flow_control=srl_nokia_interfaces__interface__ethernet__flow_control.from_gdata(n.get_opt_container("flow-control")), lacp_port_priority=n.get_opt_int("lacp-port-priority"), port_speed=n.get_opt_str("port-speed"), hw_mac_address=n.get_opt_str("hw-mac-address"), mac_address=n.get_opt_str("mac-address"), physical_medium=n.get_opt_str("physical-medium"), ptp_asymmetry=n.get_opt_int("ptp-asymmetry"), ptp_timestamping=srl_nokia_interfaces__interface__ethernet__ptp_timestamping.from_gdata(n.get_opt_container("ptp-timestamping")), standby_signaling=n.get_opt_str("standby-signaling"), link_loss_forwarding=n.get_opt_bool("link-loss-forwarding"), reload_delay=n.get_opt_int("reload-delay"), reload_delay_expires=n.get_opt_str("reload-delay-expires"), hold_time=srl_nokia_interfaces__interface__ethernet__hold_time.from_gdata(n.get_opt_container("hold-time")), crc_monitor=srl_nokia_interfaces__interface__ethernet__crc_monitor.from_gdata(n.get_opt_container("crc-monitor")), symbol_monitor=srl_nokia_interfaces__interface__ethernet__symbol_monitor.from_gdata(n.get_opt_container("symbol-monitor")), exponential_port_dampening=srl_nokia_interfaces__interface__ethernet__exponential_port_dampening.from_gdata(n.get_opt_container("exponential-port-dampening")), storm_control=srl_nokia_interfaces__interface__ethernet__storm_control.from_gdata(n.get_opt_container("storm-control")), synce=srl_nokia_interfaces__interface__ethernet__synce.from_gdata(n.get_opt_container("synce")), statistics=srl_nokia_interfaces__interface__ethernet__statistics.from_gdata(n.get_opt_container("statistics")))
        return srl_nokia_interfaces__interface__ethernet()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__ethernet:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet(aggregate_id=yang.gdata.from_xml_opt_str(n, "aggregate-id"), forwarding_viable=yang.gdata.from_xml_opt_bool(n, "forwarding-viable"), auto_negotiate=yang.gdata.from_xml_opt_bool(n, "auto-negotiate"), duplex_mode=yang.gdata.from_xml_opt_str(n, "duplex-mode"), dac_link_training=yang.gdata.from_xml_opt_bool(n, "dac-link-training"), flow_control=srl_nokia_interfaces__interface__ethernet__flow_control.from_xml(yang.gdata.get_xml_opt_child(n, "flow-control")), lacp_port_priority=yang.gdata.from_xml_opt_int(n, "lacp-port-priority"), port_speed=yang.gdata.from_xml_opt_str(n, "port-speed"), hw_mac_address=yang.gdata.from_xml_opt_str(n, "hw-mac-address"), mac_address=yang.gdata.from_xml_opt_str(n, "mac-address"), physical_medium=yang.gdata.from_xml_opt_str(n, "physical-medium"), ptp_asymmetry=yang.gdata.from_xml_opt_int(n, "ptp-asymmetry"), ptp_timestamping=srl_nokia_interfaces__interface__ethernet__ptp_timestamping.from_xml(yang.gdata.get_xml_opt_child(n, "ptp-timestamping")), standby_signaling=yang.gdata.from_xml_opt_str(n, "standby-signaling"), link_loss_forwarding=yang.gdata.from_xml_opt_bool(n, "link-loss-forwarding"), reload_delay=yang.gdata.from_xml_opt_int(n, "reload-delay"), reload_delay_expires=yang.gdata.from_xml_opt_str(n, "reload-delay-expires"), hold_time=srl_nokia_interfaces__interface__ethernet__hold_time.from_xml(yang.gdata.get_xml_opt_child(n, "hold-time")), crc_monitor=srl_nokia_interfaces__interface__ethernet__crc_monitor.from_xml(yang.gdata.get_xml_opt_child(n, "crc-monitor")), symbol_monitor=srl_nokia_interfaces__interface__ethernet__symbol_monitor.from_xml(yang.gdata.get_xml_opt_child(n, "symbol-monitor")), exponential_port_dampening=srl_nokia_interfaces__interface__ethernet__exponential_port_dampening.from_xml(yang.gdata.get_xml_opt_child(n, "exponential-port-dampening")), storm_control=srl_nokia_interfaces__interface__ethernet__storm_control.from_xml(yang.gdata.get_xml_opt_child(n, "storm-control")), synce=srl_nokia_interfaces__interface__ethernet__synce.from_xml(yang.gdata.get_xml_opt_child(n, "synce")), statistics=srl_nokia_interfaces__interface__ethernet__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")))
        return srl_nokia_interfaces__interface__ethernet()



mut def from_json_srl_nokia_interfaces__interface__subinterface__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ip_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__l2_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay__static_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay__last_reported_dynamic_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(yang.adata.MNode):
    static_delay: value
    last_reported_dynamic_delay: ?value

    mut def __init__(self, static_delay: ?value=None, last_reported_dynamic_delay: ?value):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if static_delay != None:
            self.static_delay = static_delay
        else:
            self.static_delay = "none"
        self.last_reported_dynamic_delay = last_reported_dynamic_delay

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _static_delay = self.static_delay
        _last_reported_dynamic_delay = self.last_reported_dynamic_delay
        if _static_delay is not None:
            children['static-delay'] = yang.gdata.Leaf('union', _static_delay)
        if _last_reported_dynamic_delay is not None:
            children['last-reported-dynamic-delay'] = yang.gdata.Leaf('union', _last_reported_dynamic_delay)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(static_delay=n.get_opt_value("static-delay"), last_reported_dynamic_delay=n.get_opt_value("last-reported-dynamic-delay"))
        return srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(static_delay=yang.gdata.from_xml_opt_value(n, "static-delay"), last_reported_dynamic_delay=yang.gdata.from_xml_opt_value(n, "last-reported-dynamic-delay"))
        return srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()



mut def from_json_srl_nokia_interfaces__interface__subinterface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ifindex(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__last_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__collect_irb_stats(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__collect_detailed_stats(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__address__anycast_gw(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__address__origin(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__address__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__address__status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(yang.adata.MNode):
    ip_prefix: str
    anycast_gw: ?bool
    origin: ?str
    primary: ?bool
    status: ?str

    mut def __init__(self, ip_prefix: str, anycast_gw: ?bool, origin: ?str, primary: ?bool, status: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.ip_prefix = ip_prefix
        self.anycast_gw = anycast_gw
        self.origin = origin
        self.primary = primary
        self.status = status

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        _anycast_gw = self.anycast_gw
        _origin = self.origin
        _primary = self.primary
        _status = self.status
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('string', _ip_prefix)
        if _anycast_gw is not None:
            children['anycast-gw'] = yang.gdata.Leaf('boolean', _anycast_gw)
        if _origin is not None:
            children['origin'] = yang.gdata.Leaf('enumeration', _origin)
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        if _status is not None:
            children['status'] = yang.gdata.Leaf('enumeration', _status)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix=n.get_str("ip-prefix"), anycast_gw=n.get_opt_bool("anycast-gw"), origin=n.get_opt_str("origin"), primary=n.get_opt_bool("primary"), status=n.get_opt_str("status"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix=yang.gdata.from_xml_str(n, "ip-prefix"), anycast_gw=yang.gdata.from_xml_opt_bool(n, "anycast-gw"), origin=yang.gdata.from_xml_opt_str(n, "origin"), primary=yang.gdata.from_xml_opt_bool(n, "primary"), status=yang.gdata.from_xml_opt_str(n, "status"))

class srl_nokia_interfaces__interface__subinterface__ipv4__address(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self._name = 'address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_interfaces__interface__subinterface__ipv4__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_interfaces__interface__subinterface__ipv4__address_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__allow_directed_broadcast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__unavailable_address_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(yang.adata.MNode):
    admin_state: str
    interface: ?str
    address: ?str
    unavailable_address_reason: ?str

    mut def __init__(self, admin_state: ?str=None, interface: ?str, address: ?str, unavailable_address_reason: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        self.interface = interface
        self.address = address
        self.unavailable_address_reason = unavailable_address_reason

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _interface = self.interface
        _address = self.address
        _unavailable_address_reason = self.unavailable_address_reason
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _unavailable_address_reason is not None:
            children['unavailable-address-reason'] = yang.gdata.Leaf('enumeration', _unavailable_address_reason)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(admin_state=n.get_opt_str("admin-state"), interface=n.get_opt_str("interface"), address=n.get_opt_str("address"), unavailable_address_reason=n.get_opt_str("unavailable-address-reason"))
        return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), interface=yang.gdata.from_xml_opt_str(n, "interface"), address=yang.gdata.from_xml_opt_str(n, "address"), unavailable_address_reason=yang.gdata.from_xml_opt_str(n, "unavailable-address-reason"))
        return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()



mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_terminated_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_terminated_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_forwarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_forwarded_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__in_matched_ra_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__out_forwarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__out_forwarded_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__out_originated_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__out_originated_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__out_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__out_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv4__statistics__last_clear(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_interfaces__interface__subinterface__ipv4__statistics(yang.adata.MNode):
    in_packets: int
    in_octets: int
    in_error_packets: int
    in_discarded_packets: int
    in_terminated_packets: int
    in_terminated_octets: int
    in_forwarded_packets: int
    in_forwarded_octets: int
    in_matched_ra_packets: int
    out_forwarded_packets: int
    out_forwarded_octets: int
    out_originated_packets: int
    out_originated_octets: int
    out_error_packets: int
    out_discarded_packets: int
    out_packets: int
    out_octets: int
    last_clear: ?str

    mut def __init__(self, in_packets: ?int=None, in_octets: ?int=None, in_error_packets: ?int=None, in_discarded_packets: ?int=None, in_terminated_packets: ?int=None, in_terminated_octets: ?int=None, in_forwarded_packets: ?int=None, in_forwarded_octets: ?int=None, in_matched_ra_packets: ?int=None, out_forwarded_packets: ?int=None, out_forwarded_octets: ?int=None, out_originated_packets: ?int=None, out_originated_octets: ?int=None, out_error_packets: ?int=None, out_discarded_packets: ?int=None, out_packets: ?int=None, out_octets: ?int=None, last_clear: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if in_octets != None:
            self.in_octets = in_octets
        else:
            self.in_octets = 0
        if in_error_packets != None:
            self.in_error_packets = in_error_packets
        else:
            self.in_error_packets = 0
        if in_discarded_packets != None:
            self.in_discarded_packets = in_discarded_packets
        else:
            self.in_discarded_packets = 0
        if in_terminated_packets != None:
            self.in_terminated_packets = in_terminated_packets
        else:
            self.in_terminated_packets = 0
        if in_terminated_octets != None:
            self.in_terminated_octets = in_terminated_octets
        else:
            self.in_terminated_octets = 0
        if in_forwarded_packets != None:
            self.in_forwarded_packets = in_forwarded_packets
        else:
            self.in_forwarded_packets = 0
        if in_forwarded_octets != None:
            self.in_forwarded_octets = in_forwarded_octets
        else:
            self.in_forwarded_octets = 0
        if in_matched_ra_packets != None:
            self.in_matched_ra_packets = in_matched_ra_packets
        else:
            self.in_matched_ra_packets = 0
        if out_forwarded_packets != None:
            self.out_forwarded_packets = out_forwarded_packets
        else:
            self.out_forwarded_packets = 0
        if out_forwarded_octets != None:
            self.out_forwarded_octets = out_forwarded_octets
        else:
            self.out_forwarded_octets = 0
        if out_originated_packets != None:
            self.out_originated_packets = out_originated_packets
        else:
            self.out_originated_packets = 0
        if out_originated_octets != None:
            self.out_originated_octets = out_originated_octets
        else:
            self.out_originated_octets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0
        if out_discarded_packets != None:
            self.out_discarded_packets = out_discarded_packets
        else:
            self.out_discarded_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_octets != None:
            self.out_octets = out_octets
        else:
            self.out_octets = 0
        self.last_clear = last_clear

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_packets = self.in_packets
        _in_octets = self.in_octets
        _in_error_packets = self.in_error_packets
        _in_discarded_packets = self.in_discarded_packets
        _in_terminated_packets = self.in_terminated_packets
        _in_terminated_octets = self.in_terminated_octets
        _in_forwarded_packets = self.in_forwarded_packets
        _in_forwarded_octets = self.in_forwarded_octets
        _in_matched_ra_packets = self.in_matched_ra_packets
        _out_forwarded_packets = self.out_forwarded_packets
        _out_forwarded_octets = self.out_forwarded_octets
        _out_originated_packets = self.out_originated_packets
        _out_originated_octets = self.out_originated_octets
        _out_error_packets = self.out_error_packets
        _out_discarded_packets = self.out_discarded_packets
        _out_packets = self.out_packets
        _out_octets = self.out_octets
        _last_clear = self.last_clear
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _in_octets is not None:
            children['in-octets'] = yang.gdata.Leaf('uint64', _in_octets)
        if _in_error_packets is not None:
            children['in-error-packets'] = yang.gdata.Leaf('uint64', _in_error_packets)
        if _in_discarded_packets is not None:
            children['in-discarded-packets'] = yang.gdata.Leaf('uint64', _in_discarded_packets)
        if _in_terminated_packets is not None:
            children['in-terminated-packets'] = yang.gdata.Leaf('uint64', _in_terminated_packets)
        if _in_terminated_octets is not None:
            children['in-terminated-octets'] = yang.gdata.Leaf('uint64', _in_terminated_octets)
        if _in_forwarded_packets is not None:
            children['in-forwarded-packets'] = yang.gdata.Leaf('uint64', _in_forwarded_packets)
        if _in_forwarded_octets is not None:
            children['in-forwarded-octets'] = yang.gdata.Leaf('uint64', _in_forwarded_octets)
        if _in_matched_ra_packets is not None:
            children['in-matched-ra-packets'] = yang.gdata.Leaf('uint64', _in_matched_ra_packets)
        if _out_forwarded_packets is not None:
            children['out-forwarded-packets'] = yang.gdata.Leaf('uint64', _out_forwarded_packets)
        if _out_forwarded_octets is not None:
            children['out-forwarded-octets'] = yang.gdata.Leaf('uint64', _out_forwarded_octets)
        if _out_originated_packets is not None:
            children['out-originated-packets'] = yang.gdata.Leaf('uint64', _out_originated_packets)
        if _out_originated_octets is not None:
            children['out-originated-octets'] = yang.gdata.Leaf('uint64', _out_originated_octets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        if _out_discarded_packets is not None:
            children['out-discarded-packets'] = yang.gdata.Leaf('uint64', _out_discarded_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_octets is not None:
            children['out-octets'] = yang.gdata.Leaf('uint64', _out_octets)
        if _last_clear is not None:
            children['last-clear'] = yang.gdata.Leaf('string', _last_clear)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4__statistics(in_packets=n.get_opt_int("in-packets"), in_octets=n.get_opt_int("in-octets"), in_error_packets=n.get_opt_int("in-error-packets"), in_discarded_packets=n.get_opt_int("in-discarded-packets"), in_terminated_packets=n.get_opt_int("in-terminated-packets"), in_terminated_octets=n.get_opt_int("in-terminated-octets"), in_forwarded_packets=n.get_opt_int("in-forwarded-packets"), in_forwarded_octets=n.get_opt_int("in-forwarded-octets"), in_matched_ra_packets=n.get_opt_int("in-matched-ra-packets"), out_forwarded_packets=n.get_opt_int("out-forwarded-packets"), out_forwarded_octets=n.get_opt_int("out-forwarded-octets"), out_originated_packets=n.get_opt_int("out-originated-packets"), out_originated_octets=n.get_opt_int("out-originated-octets"), out_error_packets=n.get_opt_int("out-error-packets"), out_discarded_packets=n.get_opt_int("out-discarded-packets"), out_packets=n.get_opt_int("out-packets"), out_octets=n.get_opt_int("out-octets"), last_clear=n.get_opt_str("last-clear"))
        return srl_nokia_interfaces__interface__subinterface__ipv4__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4__statistics(in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), in_octets=yang.gdata.from_xml_opt_int(n, "in-octets"), in_error_packets=yang.gdata.from_xml_opt_int(n, "in-error-packets"), in_discarded_packets=yang.gdata.from_xml_opt_int(n, "in-discarded-packets"), in_terminated_packets=yang.gdata.from_xml_opt_int(n, "in-terminated-packets"), in_terminated_octets=yang.gdata.from_xml_opt_int(n, "in-terminated-octets"), in_forwarded_packets=yang.gdata.from_xml_opt_int(n, "in-forwarded-packets"), in_forwarded_octets=yang.gdata.from_xml_opt_int(n, "in-forwarded-octets"), in_matched_ra_packets=yang.gdata.from_xml_opt_int(n, "in-matched-ra-packets"), out_forwarded_packets=yang.gdata.from_xml_opt_int(n, "out-forwarded-packets"), out_forwarded_octets=yang.gdata.from_xml_opt_int(n, "out-forwarded-octets"), out_originated_packets=yang.gdata.from_xml_opt_int(n, "out-originated-packets"), out_originated_octets=yang.gdata.from_xml_opt_int(n, "out-originated-octets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"), out_discarded_packets=yang.gdata.from_xml_opt_int(n, "out-discarded-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_octets=yang.gdata.from_xml_opt_int(n, "out-octets"), last_clear=yang.gdata.from_xml_opt_str(n, "last-clear"))
        return srl_nokia_interfaces__interface__subinterface__ipv4__statistics()



class srl_nokia_interfaces__interface__subinterface__ipv4(yang.adata.MNode):
    admin_state: str
    address: srl_nokia_interfaces__interface__subinterface__ipv4__address
    allow_directed_broadcast: bool
    unnumbered: srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered
    statistics: srl_nokia_interfaces__interface__subinterface__ipv4__statistics

    mut def __init__(self, admin_state: ?str=None, address: list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]=[], allow_directed_broadcast: ?bool=None, unnumbered: ?srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered=None, statistics: ?srl_nokia_interfaces__interface__subinterface__ipv4__statistics=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        self.address = srl_nokia_interfaces__interface__subinterface__ipv4__address(elements=address)
        self.address._parent = self
        if allow_directed_broadcast != None:
            self.allow_directed_broadcast = allow_directed_broadcast
        else:
            self.allow_directed_broadcast = False
        if unnumbered is not None:
            self.unnumbered = unnumbered
        else:
            self.unnumbered = srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()
        self_unnumbered = self.unnumbered
        if self_unnumbered is not None:
            self_unnumbered._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_interfaces__interface__subinterface__ipv4__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _address = self.address
        _allow_directed_broadcast = self.allow_directed_broadcast
        _unnumbered = self.unnumbered
        _statistics = self.statistics
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _address is not None:
            children['address'] = _address.to_gdata()
        if _allow_directed_broadcast is not None:
            children['allow-directed-broadcast'] = yang.gdata.Leaf('boolean', _allow_directed_broadcast)
        if _unnumbered is not None:
            children['unnumbered'] = _unnumbered.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4(admin_state=n.get_opt_str("admin-state"), address=srl_nokia_interfaces__interface__subinterface__ipv4__address.from_gdata(n.get_opt_list("address")), allow_directed_broadcast=n.get_opt_bool("allow-directed-broadcast"), unnumbered=srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered.from_gdata(n.get_opt_container("unnumbered")), statistics=srl_nokia_interfaces__interface__subinterface__ipv4__statistics.from_gdata(n.get_opt_container("statistics")))
        return srl_nokia_interfaces__interface__subinterface__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), address=srl_nokia_interfaces__interface__subinterface__ipv4__address.from_xml(yang.gdata.get_xml_children(n, "address")), allow_directed_broadcast=yang.gdata.from_xml_opt_bool(n, "allow-directed-broadcast"), unnumbered=srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered.from_xml(yang.gdata.get_xml_opt_child(n, "unnumbered")), statistics=srl_nokia_interfaces__interface__subinterface__ipv4__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")))
        return srl_nokia_interfaces__interface__subinterface__ipv4()



mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__address__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__address__anycast_gw(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__address__origin(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__address__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__address__status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(yang.adata.MNode):
    ip_prefix: str
    type: str
    anycast_gw: ?bool
    origin: ?str
    primary: ?bool
    status: ?str

    mut def __init__(self, ip_prefix: str, type: ?str=None, anycast_gw: ?bool, origin: ?str, primary: ?bool, status: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.ip_prefix = ip_prefix
        if type != None:
            self.type = type
        else:
            self.type = "global-unicast"
        self.anycast_gw = anycast_gw
        self.origin = origin
        self.primary = primary
        self.status = status

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        _type = self.type
        _anycast_gw = self.anycast_gw
        _origin = self.origin
        _primary = self.primary
        _status = self.status
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('string', _ip_prefix)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        if _anycast_gw is not None:
            children['anycast-gw'] = yang.gdata.Leaf('boolean', _anycast_gw)
        if _origin is not None:
            children['origin'] = yang.gdata.Leaf('enumeration', _origin)
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        if _status is not None:
            children['status'] = yang.gdata.Leaf('enumeration', _status)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix=n.get_str("ip-prefix"), type=n.get_opt_str("type"), anycast_gw=n.get_opt_bool("anycast-gw"), origin=n.get_opt_str("origin"), primary=n.get_opt_bool("primary"), status=n.get_opt_str("status"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix=yang.gdata.from_xml_str(n, "ip-prefix"), type=yang.gdata.from_xml_opt_str(n, "type"), anycast_gw=yang.gdata.from_xml_opt_bool(n, "anycast-gw"), origin=yang.gdata.from_xml_opt_str(n, "origin"), primary=yang.gdata.from_xml_opt_bool(n, "primary"), status=yang.gdata.from_xml_opt_str(n, "status"))

class srl_nokia_interfaces__interface__subinterface__ipv6__address(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self._name = 'address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_interfaces__interface__subinterface__ipv6__address_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_interfaces__interface__subinterface__ipv6__address_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_terminated_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_terminated_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_forwarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_forwarded_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__in_matched_ra_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__out_forwarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__out_forwarded_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__out_originated_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__out_originated_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__out_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__out_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__ipv6__statistics__last_clear(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_interfaces__interface__subinterface__ipv6__statistics(yang.adata.MNode):
    in_packets: int
    in_octets: int
    in_error_packets: int
    in_discarded_packets: int
    in_terminated_packets: int
    in_terminated_octets: int
    in_forwarded_packets: int
    in_forwarded_octets: int
    in_matched_ra_packets: int
    out_forwarded_packets: int
    out_forwarded_octets: int
    out_originated_packets: int
    out_originated_octets: int
    out_error_packets: int
    out_discarded_packets: int
    out_packets: int
    out_octets: int
    last_clear: ?str

    mut def __init__(self, in_packets: ?int=None, in_octets: ?int=None, in_error_packets: ?int=None, in_discarded_packets: ?int=None, in_terminated_packets: ?int=None, in_terminated_octets: ?int=None, in_forwarded_packets: ?int=None, in_forwarded_octets: ?int=None, in_matched_ra_packets: ?int=None, out_forwarded_packets: ?int=None, out_forwarded_octets: ?int=None, out_originated_packets: ?int=None, out_originated_octets: ?int=None, out_error_packets: ?int=None, out_discarded_packets: ?int=None, out_packets: ?int=None, out_octets: ?int=None, last_clear: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if in_octets != None:
            self.in_octets = in_octets
        else:
            self.in_octets = 0
        if in_error_packets != None:
            self.in_error_packets = in_error_packets
        else:
            self.in_error_packets = 0
        if in_discarded_packets != None:
            self.in_discarded_packets = in_discarded_packets
        else:
            self.in_discarded_packets = 0
        if in_terminated_packets != None:
            self.in_terminated_packets = in_terminated_packets
        else:
            self.in_terminated_packets = 0
        if in_terminated_octets != None:
            self.in_terminated_octets = in_terminated_octets
        else:
            self.in_terminated_octets = 0
        if in_forwarded_packets != None:
            self.in_forwarded_packets = in_forwarded_packets
        else:
            self.in_forwarded_packets = 0
        if in_forwarded_octets != None:
            self.in_forwarded_octets = in_forwarded_octets
        else:
            self.in_forwarded_octets = 0
        if in_matched_ra_packets != None:
            self.in_matched_ra_packets = in_matched_ra_packets
        else:
            self.in_matched_ra_packets = 0
        if out_forwarded_packets != None:
            self.out_forwarded_packets = out_forwarded_packets
        else:
            self.out_forwarded_packets = 0
        if out_forwarded_octets != None:
            self.out_forwarded_octets = out_forwarded_octets
        else:
            self.out_forwarded_octets = 0
        if out_originated_packets != None:
            self.out_originated_packets = out_originated_packets
        else:
            self.out_originated_packets = 0
        if out_originated_octets != None:
            self.out_originated_octets = out_originated_octets
        else:
            self.out_originated_octets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0
        if out_discarded_packets != None:
            self.out_discarded_packets = out_discarded_packets
        else:
            self.out_discarded_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_octets != None:
            self.out_octets = out_octets
        else:
            self.out_octets = 0
        self.last_clear = last_clear

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_packets = self.in_packets
        _in_octets = self.in_octets
        _in_error_packets = self.in_error_packets
        _in_discarded_packets = self.in_discarded_packets
        _in_terminated_packets = self.in_terminated_packets
        _in_terminated_octets = self.in_terminated_octets
        _in_forwarded_packets = self.in_forwarded_packets
        _in_forwarded_octets = self.in_forwarded_octets
        _in_matched_ra_packets = self.in_matched_ra_packets
        _out_forwarded_packets = self.out_forwarded_packets
        _out_forwarded_octets = self.out_forwarded_octets
        _out_originated_packets = self.out_originated_packets
        _out_originated_octets = self.out_originated_octets
        _out_error_packets = self.out_error_packets
        _out_discarded_packets = self.out_discarded_packets
        _out_packets = self.out_packets
        _out_octets = self.out_octets
        _last_clear = self.last_clear
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _in_octets is not None:
            children['in-octets'] = yang.gdata.Leaf('uint64', _in_octets)
        if _in_error_packets is not None:
            children['in-error-packets'] = yang.gdata.Leaf('uint64', _in_error_packets)
        if _in_discarded_packets is not None:
            children['in-discarded-packets'] = yang.gdata.Leaf('uint64', _in_discarded_packets)
        if _in_terminated_packets is not None:
            children['in-terminated-packets'] = yang.gdata.Leaf('uint64', _in_terminated_packets)
        if _in_terminated_octets is not None:
            children['in-terminated-octets'] = yang.gdata.Leaf('uint64', _in_terminated_octets)
        if _in_forwarded_packets is not None:
            children['in-forwarded-packets'] = yang.gdata.Leaf('uint64', _in_forwarded_packets)
        if _in_forwarded_octets is not None:
            children['in-forwarded-octets'] = yang.gdata.Leaf('uint64', _in_forwarded_octets)
        if _in_matched_ra_packets is not None:
            children['in-matched-ra-packets'] = yang.gdata.Leaf('uint64', _in_matched_ra_packets)
        if _out_forwarded_packets is not None:
            children['out-forwarded-packets'] = yang.gdata.Leaf('uint64', _out_forwarded_packets)
        if _out_forwarded_octets is not None:
            children['out-forwarded-octets'] = yang.gdata.Leaf('uint64', _out_forwarded_octets)
        if _out_originated_packets is not None:
            children['out-originated-packets'] = yang.gdata.Leaf('uint64', _out_originated_packets)
        if _out_originated_octets is not None:
            children['out-originated-octets'] = yang.gdata.Leaf('uint64', _out_originated_octets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        if _out_discarded_packets is not None:
            children['out-discarded-packets'] = yang.gdata.Leaf('uint64', _out_discarded_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_octets is not None:
            children['out-octets'] = yang.gdata.Leaf('uint64', _out_octets)
        if _last_clear is not None:
            children['last-clear'] = yang.gdata.Leaf('string', _last_clear)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv6__statistics(in_packets=n.get_opt_int("in-packets"), in_octets=n.get_opt_int("in-octets"), in_error_packets=n.get_opt_int("in-error-packets"), in_discarded_packets=n.get_opt_int("in-discarded-packets"), in_terminated_packets=n.get_opt_int("in-terminated-packets"), in_terminated_octets=n.get_opt_int("in-terminated-octets"), in_forwarded_packets=n.get_opt_int("in-forwarded-packets"), in_forwarded_octets=n.get_opt_int("in-forwarded-octets"), in_matched_ra_packets=n.get_opt_int("in-matched-ra-packets"), out_forwarded_packets=n.get_opt_int("out-forwarded-packets"), out_forwarded_octets=n.get_opt_int("out-forwarded-octets"), out_originated_packets=n.get_opt_int("out-originated-packets"), out_originated_octets=n.get_opt_int("out-originated-octets"), out_error_packets=n.get_opt_int("out-error-packets"), out_discarded_packets=n.get_opt_int("out-discarded-packets"), out_packets=n.get_opt_int("out-packets"), out_octets=n.get_opt_int("out-octets"), last_clear=n.get_opt_str("last-clear"))
        return srl_nokia_interfaces__interface__subinterface__ipv6__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv6__statistics(in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), in_octets=yang.gdata.from_xml_opt_int(n, "in-octets"), in_error_packets=yang.gdata.from_xml_opt_int(n, "in-error-packets"), in_discarded_packets=yang.gdata.from_xml_opt_int(n, "in-discarded-packets"), in_terminated_packets=yang.gdata.from_xml_opt_int(n, "in-terminated-packets"), in_terminated_octets=yang.gdata.from_xml_opt_int(n, "in-terminated-octets"), in_forwarded_packets=yang.gdata.from_xml_opt_int(n, "in-forwarded-packets"), in_forwarded_octets=yang.gdata.from_xml_opt_int(n, "in-forwarded-octets"), in_matched_ra_packets=yang.gdata.from_xml_opt_int(n, "in-matched-ra-packets"), out_forwarded_packets=yang.gdata.from_xml_opt_int(n, "out-forwarded-packets"), out_forwarded_octets=yang.gdata.from_xml_opt_int(n, "out-forwarded-octets"), out_originated_packets=yang.gdata.from_xml_opt_int(n, "out-originated-packets"), out_originated_octets=yang.gdata.from_xml_opt_int(n, "out-originated-octets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"), out_discarded_packets=yang.gdata.from_xml_opt_int(n, "out-discarded-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_octets=yang.gdata.from_xml_opt_int(n, "out-octets"), last_clear=yang.gdata.from_xml_opt_str(n, "last-clear"))
        return srl_nokia_interfaces__interface__subinterface__ipv6__statistics()



class srl_nokia_interfaces__interface__subinterface__ipv6(yang.adata.MNode):
    admin_state: str
    address: srl_nokia_interfaces__interface__subinterface__ipv6__address
    statistics: srl_nokia_interfaces__interface__subinterface__ipv6__statistics

    mut def __init__(self, admin_state: ?str=None, address: list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]=[], statistics: ?srl_nokia_interfaces__interface__subinterface__ipv6__statistics=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        self.address = srl_nokia_interfaces__interface__subinterface__ipv6__address(elements=address)
        self.address._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_interfaces__interface__subinterface__ipv6__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _address = self.address
        _statistics = self.statistics
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _address is not None:
            children['address'] = _address.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv6(admin_state=n.get_opt_str("admin-state"), address=srl_nokia_interfaces__interface__subinterface__ipv6__address.from_gdata(n.get_opt_list("address")), statistics=srl_nokia_interfaces__interface__subinterface__ipv6__statistics.from_gdata(n.get_opt_container("statistics")))
        return srl_nokia_interfaces__interface__subinterface__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv6(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), address=srl_nokia_interfaces__interface__subinterface__ipv6__address.from_xml(yang.gdata.get_xml_children(n, "address")), statistics=srl_nokia_interfaces__interface__subinterface__ipv6__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")))
        return srl_nokia_interfaces__interface__subinterface__ipv6()



mut def from_json_srl_nokia_interfaces__interface__subinterface__anycast_gw__virtual_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__anycast_gw__anycast_gw_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__anycast_gw__anycast_gw_mac_origin(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__subinterface__anycast_gw(yang.adata.MNode):
    virtual_router_id: int
    anycast_gw_mac: ?str
    anycast_gw_mac_origin: ?str

    mut def __init__(self, virtual_router_id: ?int=None, anycast_gw_mac: ?str, anycast_gw_mac_origin: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if virtual_router_id != None:
            self.virtual_router_id = virtual_router_id
        else:
            self.virtual_router_id = 1
        self.anycast_gw_mac = anycast_gw_mac
        self.anycast_gw_mac_origin = anycast_gw_mac_origin

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _virtual_router_id = self.virtual_router_id
        _anycast_gw_mac = self.anycast_gw_mac
        _anycast_gw_mac_origin = self.anycast_gw_mac_origin
        if _virtual_router_id is not None:
            children['virtual-router-id'] = yang.gdata.Leaf('uint8', _virtual_router_id)
        if _anycast_gw_mac is not None:
            children['anycast-gw-mac'] = yang.gdata.Leaf('string', _anycast_gw_mac)
        if _anycast_gw_mac_origin is not None:
            children['anycast-gw-mac-origin'] = yang.gdata.Leaf('enumeration', _anycast_gw_mac_origin)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__anycast_gw:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__anycast_gw(virtual_router_id=n.get_opt_int("virtual-router-id"), anycast_gw_mac=n.get_opt_str("anycast-gw-mac"), anycast_gw_mac_origin=n.get_opt_str("anycast-gw-mac-origin"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__subinterface__anycast_gw:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__anycast_gw(virtual_router_id=yang.gdata.from_xml_opt_int(n, "virtual-router-id"), anycast_gw_mac=yang.gdata.from_xml_opt_str(n, "anycast-gw-mac"), anycast_gw_mac_origin=yang.gdata.from_xml_opt_str(n, "anycast-gw-mac-origin"))
        return None



mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_terminated_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_terminated_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_forwarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_forwarded_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__in_matched_ra_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__out_forwarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__out_forwarded_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__out_originated_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__out_originated_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__out_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__out_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__statistics__last_clear(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_interfaces__interface__subinterface__statistics(yang.adata.MNode):
    in_packets: int
    in_octets: int
    in_error_packets: int
    in_discarded_packets: int
    in_terminated_packets: int
    in_terminated_octets: int
    in_forwarded_packets: int
    in_forwarded_octets: int
    in_matched_ra_packets: int
    out_forwarded_packets: int
    out_forwarded_octets: int
    out_originated_packets: int
    out_originated_octets: int
    out_error_packets: int
    out_discarded_packets: int
    out_packets: int
    out_octets: int
    last_clear: ?str

    mut def __init__(self, in_packets: ?int=None, in_octets: ?int=None, in_error_packets: ?int=None, in_discarded_packets: ?int=None, in_terminated_packets: ?int=None, in_terminated_octets: ?int=None, in_forwarded_packets: ?int=None, in_forwarded_octets: ?int=None, in_matched_ra_packets: ?int=None, out_forwarded_packets: ?int=None, out_forwarded_octets: ?int=None, out_originated_packets: ?int=None, out_originated_octets: ?int=None, out_error_packets: ?int=None, out_discarded_packets: ?int=None, out_packets: ?int=None, out_octets: ?int=None, last_clear: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if in_octets != None:
            self.in_octets = in_octets
        else:
            self.in_octets = 0
        if in_error_packets != None:
            self.in_error_packets = in_error_packets
        else:
            self.in_error_packets = 0
        if in_discarded_packets != None:
            self.in_discarded_packets = in_discarded_packets
        else:
            self.in_discarded_packets = 0
        if in_terminated_packets != None:
            self.in_terminated_packets = in_terminated_packets
        else:
            self.in_terminated_packets = 0
        if in_terminated_octets != None:
            self.in_terminated_octets = in_terminated_octets
        else:
            self.in_terminated_octets = 0
        if in_forwarded_packets != None:
            self.in_forwarded_packets = in_forwarded_packets
        else:
            self.in_forwarded_packets = 0
        if in_forwarded_octets != None:
            self.in_forwarded_octets = in_forwarded_octets
        else:
            self.in_forwarded_octets = 0
        if in_matched_ra_packets != None:
            self.in_matched_ra_packets = in_matched_ra_packets
        else:
            self.in_matched_ra_packets = 0
        if out_forwarded_packets != None:
            self.out_forwarded_packets = out_forwarded_packets
        else:
            self.out_forwarded_packets = 0
        if out_forwarded_octets != None:
            self.out_forwarded_octets = out_forwarded_octets
        else:
            self.out_forwarded_octets = 0
        if out_originated_packets != None:
            self.out_originated_packets = out_originated_packets
        else:
            self.out_originated_packets = 0
        if out_originated_octets != None:
            self.out_originated_octets = out_originated_octets
        else:
            self.out_originated_octets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0
        if out_discarded_packets != None:
            self.out_discarded_packets = out_discarded_packets
        else:
            self.out_discarded_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_octets != None:
            self.out_octets = out_octets
        else:
            self.out_octets = 0
        self.last_clear = last_clear

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_packets = self.in_packets
        _in_octets = self.in_octets
        _in_error_packets = self.in_error_packets
        _in_discarded_packets = self.in_discarded_packets
        _in_terminated_packets = self.in_terminated_packets
        _in_terminated_octets = self.in_terminated_octets
        _in_forwarded_packets = self.in_forwarded_packets
        _in_forwarded_octets = self.in_forwarded_octets
        _in_matched_ra_packets = self.in_matched_ra_packets
        _out_forwarded_packets = self.out_forwarded_packets
        _out_forwarded_octets = self.out_forwarded_octets
        _out_originated_packets = self.out_originated_packets
        _out_originated_octets = self.out_originated_octets
        _out_error_packets = self.out_error_packets
        _out_discarded_packets = self.out_discarded_packets
        _out_packets = self.out_packets
        _out_octets = self.out_octets
        _last_clear = self.last_clear
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _in_octets is not None:
            children['in-octets'] = yang.gdata.Leaf('uint64', _in_octets)
        if _in_error_packets is not None:
            children['in-error-packets'] = yang.gdata.Leaf('uint64', _in_error_packets)
        if _in_discarded_packets is not None:
            children['in-discarded-packets'] = yang.gdata.Leaf('uint64', _in_discarded_packets)
        if _in_terminated_packets is not None:
            children['in-terminated-packets'] = yang.gdata.Leaf('uint64', _in_terminated_packets)
        if _in_terminated_octets is not None:
            children['in-terminated-octets'] = yang.gdata.Leaf('uint64', _in_terminated_octets)
        if _in_forwarded_packets is not None:
            children['in-forwarded-packets'] = yang.gdata.Leaf('uint64', _in_forwarded_packets)
        if _in_forwarded_octets is not None:
            children['in-forwarded-octets'] = yang.gdata.Leaf('uint64', _in_forwarded_octets)
        if _in_matched_ra_packets is not None:
            children['in-matched-ra-packets'] = yang.gdata.Leaf('uint64', _in_matched_ra_packets)
        if _out_forwarded_packets is not None:
            children['out-forwarded-packets'] = yang.gdata.Leaf('uint64', _out_forwarded_packets)
        if _out_forwarded_octets is not None:
            children['out-forwarded-octets'] = yang.gdata.Leaf('uint64', _out_forwarded_octets)
        if _out_originated_packets is not None:
            children['out-originated-packets'] = yang.gdata.Leaf('uint64', _out_originated_packets)
        if _out_originated_octets is not None:
            children['out-originated-octets'] = yang.gdata.Leaf('uint64', _out_originated_octets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        if _out_discarded_packets is not None:
            children['out-discarded-packets'] = yang.gdata.Leaf('uint64', _out_discarded_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_octets is not None:
            children['out-octets'] = yang.gdata.Leaf('uint64', _out_octets)
        if _last_clear is not None:
            children['last-clear'] = yang.gdata.Leaf('string', _last_clear)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__statistics(in_packets=n.get_opt_int("in-packets"), in_octets=n.get_opt_int("in-octets"), in_error_packets=n.get_opt_int("in-error-packets"), in_discarded_packets=n.get_opt_int("in-discarded-packets"), in_terminated_packets=n.get_opt_int("in-terminated-packets"), in_terminated_octets=n.get_opt_int("in-terminated-octets"), in_forwarded_packets=n.get_opt_int("in-forwarded-packets"), in_forwarded_octets=n.get_opt_int("in-forwarded-octets"), in_matched_ra_packets=n.get_opt_int("in-matched-ra-packets"), out_forwarded_packets=n.get_opt_int("out-forwarded-packets"), out_forwarded_octets=n.get_opt_int("out-forwarded-octets"), out_originated_packets=n.get_opt_int("out-originated-packets"), out_originated_octets=n.get_opt_int("out-originated-octets"), out_error_packets=n.get_opt_int("out-error-packets"), out_discarded_packets=n.get_opt_int("out-discarded-packets"), out_packets=n.get_opt_int("out-packets"), out_octets=n.get_opt_int("out-octets"), last_clear=n.get_opt_str("last-clear"))
        return srl_nokia_interfaces__interface__subinterface__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__statistics(in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), in_octets=yang.gdata.from_xml_opt_int(n, "in-octets"), in_error_packets=yang.gdata.from_xml_opt_int(n, "in-error-packets"), in_discarded_packets=yang.gdata.from_xml_opt_int(n, "in-discarded-packets"), in_terminated_packets=yang.gdata.from_xml_opt_int(n, "in-terminated-packets"), in_terminated_octets=yang.gdata.from_xml_opt_int(n, "in-terminated-octets"), in_forwarded_packets=yang.gdata.from_xml_opt_int(n, "in-forwarded-packets"), in_forwarded_octets=yang.gdata.from_xml_opt_int(n, "in-forwarded-octets"), in_matched_ra_packets=yang.gdata.from_xml_opt_int(n, "in-matched-ra-packets"), out_forwarded_packets=yang.gdata.from_xml_opt_int(n, "out-forwarded-packets"), out_forwarded_octets=yang.gdata.from_xml_opt_int(n, "out-forwarded-octets"), out_originated_packets=yang.gdata.from_xml_opt_int(n, "out-originated-packets"), out_originated_octets=yang.gdata.from_xml_opt_int(n, "out-originated-octets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"), out_discarded_packets=yang.gdata.from_xml_opt_int(n, "out-discarded-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_octets=yang.gdata.from_xml_opt_int(n, "out-octets"), last_clear=yang.gdata.from_xml_opt_str(n, "last-clear"))
        return srl_nokia_interfaces__interface__subinterface__statistics()



mut def from_json_srl_nokia_interfaces__interface__subinterface__bridge_table__discard_unknown_src_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__maximum_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int32", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int32", val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(yang.adata.MNode):
    maximum_entries: int
    warning_threshold_pct: int

    mut def __init__(self, maximum_entries: ?int=None, warning_threshold_pct: ?int=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if maximum_entries != None:
            self.maximum_entries = maximum_entries
        else:
            self.maximum_entries = 250
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 95

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_entries = self.maximum_entries
        _warning_threshold_pct = self.warning_threshold_pct
        if _maximum_entries is not None:
            children['maximum-entries'] = yang.gdata.Leaf('int32', _maximum_entries)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('int32', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(maximum_entries=n.get_opt_int("maximum-entries"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(maximum_entries=yang.gdata.from_xml_opt_int(n, "maximum-entries"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()



mut def from_json_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(yang.adata.MNode):
    admin_state: str

    mut def __init__(self, admin_state: ?str=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(admin_state=n.get_opt_str("admin-state"))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()



class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(yang.adata.MNode):
    admin_state: str
    aging: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging

    mut def __init__(self, admin_state: ?str=None, aging: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if aging is not None:
            self.aging = aging
        else:
            self.aging = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()
        self_aging = self.aging
        if self_aging is not None:
            self_aging._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _aging = self.aging
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _aging is not None:
            children['aging'] = _aging.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(admin_state=n.get_opt_str("admin-state"), aging=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging.from_gdata(n.get_opt_container("aging")))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), aging=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging.from_xml(yang.gdata.get_xml_opt_child(n, "aging")))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()



mut def from_json_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication__action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(yang.adata.MNode):
    action_: str

    mut def __init__(self, action_: ?str=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if action_ != None:
            self.action_ = action_
        else:
            self.action_ = "use-net-instance-action"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _action_ = self.action_
        if _action_ is not None:
            children['action'] = yang.gdata.Leaf('enumeration', _action_)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(action_=n.get_opt_str("action"))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(action_=yang.gdata.from_xml_opt_str(n, "action"))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()



class srl_nokia_interfaces__interface__subinterface__bridge_table(yang.adata.MNode):
    discard_unknown_src_mac: bool
    mac_limit: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit
    mac_learning: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning
    mac_duplication: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication

    mut def __init__(self, discard_unknown_src_mac: ?bool=None, mac_limit: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit=None, mac_learning: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning=None, mac_duplication: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        if discard_unknown_src_mac != None:
            self.discard_unknown_src_mac = discard_unknown_src_mac
        else:
            self.discard_unknown_src_mac = False
        if mac_limit is not None:
            self.mac_limit = mac_limit
        else:
            self.mac_limit = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()
        self_mac_limit = self.mac_limit
        if self_mac_limit is not None:
            self_mac_limit._parent = self
        if mac_learning is not None:
            self.mac_learning = mac_learning
        else:
            self.mac_learning = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()
        self_mac_learning = self.mac_learning
        if self_mac_learning is not None:
            self_mac_learning._parent = self
        if mac_duplication is not None:
            self.mac_duplication = mac_duplication
        else:
            self.mac_duplication = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()
        self_mac_duplication = self.mac_duplication
        if self_mac_duplication is not None:
            self_mac_duplication._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        _mac_limit = self.mac_limit
        _mac_learning = self.mac_learning
        _mac_duplication = self.mac_duplication
        if _discard_unknown_src_mac is not None:
            children['discard-unknown-src-mac'] = yang.gdata.Leaf('boolean', _discard_unknown_src_mac)
        if _mac_limit is not None:
            children['mac-limit'] = _mac_limit.to_gdata()
        if _mac_learning is not None:
            children['mac-learning'] = _mac_learning.to_gdata()
        if _mac_duplication is not None:
            children['mac-duplication'] = _mac_duplication.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__bridge_table:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table(discard_unknown_src_mac=n.get_opt_bool("discard-unknown-src-mac"), mac_limit=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit.from_gdata(n.get_opt_container("mac-limit")), mac_learning=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning.from_gdata(n.get_opt_container("mac-learning")), mac_duplication=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication.from_gdata(n.get_opt_container("mac-duplication")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__subinterface__bridge_table:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table(discard_unknown_src_mac=yang.gdata.from_xml_opt_bool(n, "discard-unknown-src-mac"), mac_limit=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit.from_xml(yang.gdata.get_xml_opt_child(n, "mac-limit")), mac_learning=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning.from_xml(yang.gdata.get_xml_opt_child(n, "mac-learning")), mac_duplication=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication.from_xml(yang.gdata.get_xml_opt_child(n, "mac-duplication")))
        return None



mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery(yang.adata.MNode):
    type: str

    mut def __init__(self, type: ?str=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        if type != None:
            self.type = type
        else:
            self.type = "IPv4v6"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery(type=n.get_opt_str("type"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery(type=yang.gdata.from_xml_opt_str(n, "type"))
        return None



mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged(yang.adata.MNode):
    vlan_id: ?value

    mut def __init__(self, vlan_id: ?value):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self.vlan_id = vlan_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('union', _vlan_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged(vlan_id=n.get_opt_value("vlan-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged(vlan_id=yang.gdata.from_xml_opt_value(n, "vlan-id"))
        return None



class srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged()
        return None



mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id__range_low_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id__high_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry(yang.adata.MNode):
    range_low_vlan_id: int
    high_vlan_id: int

    mut def __init__(self, range_low_vlan_id: int, high_vlan_id: int):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self.range_low_vlan_id = range_low_vlan_id
        self.high_vlan_id = high_vlan_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _range_low_vlan_id = self.range_low_vlan_id
        _high_vlan_id = self.high_vlan_id
        if _range_low_vlan_id is not None:
            children['range-low-vlan-id'] = yang.gdata.Leaf('uint16', _range_low_vlan_id)
        if _high_vlan_id is not None:
            children['high-vlan-id'] = yang.gdata.Leaf('uint16', _high_vlan_id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.range_low_vlan_id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry:
        return srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry(range_low_vlan_id=n.get_int("range-low-vlan-id"), high_vlan_id=n.get_int("high-vlan-id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry:
        return srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry(range_low_vlan_id=yang.gdata.from_xml_int(n, "range-low-vlan-id"), high_vlan_id=yang.gdata.from_xml_int(n, "high-vlan-id"))

class srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self._name = 'low-vlan-id'
        self.elements = elements

    mut def create(self, range_low_vlan_id, high_vlan_id):
        for e in self.elements:
            match = True
            if e.range_low_vlan_id != range_low_vlan_id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry(range_low_vlan_id, high_vlan_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['range-low-vlan-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry.from_xml(node))
        return res



class srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range(yang.adata.MNode):
    low_vlan_id: srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id

    mut def __init__(self, low_vlan_id: list[srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self.low_vlan_id = srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id(elements=low_vlan_id)
        self.low_vlan_id._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _low_vlan_id = self.low_vlan_id
        if _low_vlan_id is not None:
            children['low-vlan-id'] = _low_vlan_id.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range(low_vlan_id=srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id.from_gdata(n.get_opt_list("low-vlan-id")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range(low_vlan_id=srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range__low_vlan_id.from_xml(yang.gdata.get_xml_children(n, "low-vlan-id")))
        return None



mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged__inner_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged__outer_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged(yang.adata.MNode):
    inner_vlan_id: value
    outer_vlan_id: value

    mut def __init__(self, inner_vlan_id: value, outer_vlan_id: value):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self.inner_vlan_id = inner_vlan_id
        self.outer_vlan_id = outer_vlan_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inner_vlan_id = self.inner_vlan_id
        _outer_vlan_id = self.outer_vlan_id
        if _inner_vlan_id is not None:
            children['inner-vlan-id'] = yang.gdata.Leaf('union', _inner_vlan_id)
        if _outer_vlan_id is not None:
            children['outer-vlan-id'] = yang.gdata.Leaf('union', _outer_vlan_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged(inner_vlan_id=n.get_value("inner-vlan-id"), outer_vlan_id=n.get_value("outer-vlan-id"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged(inner_vlan_id=yang.gdata.from_xml_value(n, "inner-vlan-id"), outer_vlan_id=yang.gdata.from_xml_value(n, "outer-vlan-id"))
        return None



class srl_nokia_interfaces__interface__subinterface__vlan__encap(yang.adata.MNode):
    single_tagged: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged
    untagged: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged
    single_tagged_range: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range
    double_tagged: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged

    mut def __init__(self, single_tagged: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged=None, untagged: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged=None, single_tagged_range: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range=None, double_tagged: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self.single_tagged = single_tagged
        self_single_tagged = self.single_tagged
        if self_single_tagged is not None:
            self_single_tagged._parent = self
        self.untagged = untagged
        self_untagged = self.untagged
        if self_untagged is not None:
            self_untagged._parent = self
        self.single_tagged_range = single_tagged_range
        self_single_tagged_range = self.single_tagged_range
        if self_single_tagged_range is not None:
            self_single_tagged_range._parent = self
        self.double_tagged = double_tagged
        self_double_tagged = self.double_tagged
        if self_double_tagged is not None:
            self_double_tagged._parent = self

    mut def create_single_tagged(self):
        res = srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged()
        self.single_tagged = res
        return res

    mut def create_untagged(self):
        res = srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged()
        self.untagged = res
        return res

    mut def create_single_tagged_range(self):
        res = srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range()
        self.single_tagged_range = res
        return res

    mut def create_double_tagged(self, inner_vlan_id, outer_vlan_id):
        res = srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged(inner_vlan_id, outer_vlan_id)
        self.double_tagged = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _single_tagged = self.single_tagged
        _untagged = self.untagged
        _single_tagged_range = self.single_tagged_range
        _double_tagged = self.double_tagged
        if _single_tagged is not None:
            children['single-tagged'] = _single_tagged.to_gdata()
        if _untagged is not None:
            children['untagged'] = _untagged.to_gdata()
        if _single_tagged_range is not None:
            children['single-tagged-range'] = _single_tagged_range.to_gdata()
        if _double_tagged is not None:
            children['double-tagged'] = _double_tagged.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__encap:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap(single_tagged=srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged.from_gdata(n.get_opt_container("single-tagged")), untagged=srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged.from_gdata(n.get_opt_container("untagged")), single_tagged_range=srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range.from_gdata(n.get_opt_container("single-tagged-range")), double_tagged=srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged.from_gdata(n.get_opt_container("double-tagged")))
        return srl_nokia_interfaces__interface__subinterface__vlan__encap()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__encap:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap(single_tagged=srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged.from_xml(yang.gdata.get_xml_opt_child(n, "single-tagged")), untagged=srl_nokia_interfaces__interface__subinterface__vlan__encap__untagged.from_xml(yang.gdata.get_xml_opt_child(n, "untagged")), single_tagged_range=srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged_range.from_xml(yang.gdata.get_xml_opt_child(n, "single-tagged-range")), double_tagged=srl_nokia_interfaces__interface__subinterface__vlan__encap__double_tagged.from_xml(yang.gdata.get_xml_opt_child(n, "double-tagged")))
        return srl_nokia_interfaces__interface__subinterface__vlan__encap()



mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping__vlan_stack_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping__outer_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping__outer_tpid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping__inner_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping__inner_tpid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

class srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping(yang.adata.MNode):
    vlan_stack_action: ?str
    outer_vlan_id: ?int
    outer_tpid: ?str
    inner_vlan_id: ?int
    inner_tpid: ?str

    mut def __init__(self, vlan_stack_action: ?str, outer_vlan_id: ?int, outer_tpid: ?str, inner_vlan_id: ?int, inner_tpid: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self.vlan_stack_action = vlan_stack_action
        self.outer_vlan_id = outer_vlan_id
        self.outer_tpid = outer_tpid
        self.inner_vlan_id = inner_vlan_id
        self.inner_tpid = inner_tpid

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_stack_action = self.vlan_stack_action
        _outer_vlan_id = self.outer_vlan_id
        _outer_tpid = self.outer_tpid
        _inner_vlan_id = self.inner_vlan_id
        _inner_tpid = self.inner_tpid
        if _vlan_stack_action is not None:
            children['vlan-stack-action'] = yang.gdata.Leaf('enumeration', _vlan_stack_action)
        if _outer_vlan_id is not None:
            children['outer-vlan-id'] = yang.gdata.Leaf('uint16', _outer_vlan_id)
        if _outer_tpid is not None:
            children['outer-tpid'] = yang.gdata.Leaf('identityref', _outer_tpid)
        if _inner_vlan_id is not None:
            children['inner-vlan-id'] = yang.gdata.Leaf('uint16', _inner_vlan_id)
        if _inner_tpid is not None:
            children['inner-tpid'] = yang.gdata.Leaf('identityref', _inner_tpid)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping(vlan_stack_action=n.get_opt_str("vlan-stack-action"), outer_vlan_id=n.get_opt_int("outer-vlan-id"), outer_tpid=n.get_opt_str("outer-tpid"), inner_vlan_id=n.get_opt_int("inner-vlan-id"), inner_tpid=n.get_opt_str("inner-tpid"))
        return srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping(vlan_stack_action=yang.gdata.from_xml_opt_str(n, "vlan-stack-action"), outer_vlan_id=yang.gdata.from_xml_opt_int(n, "outer-vlan-id"), outer_tpid=yang.gdata.from_xml_opt_str(n, "outer-tpid"), inner_vlan_id=yang.gdata.from_xml_opt_int(n, "inner-vlan-id"), inner_tpid=yang.gdata.from_xml_opt_str(n, "inner-tpid"))
        return srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping()



mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping__vlan_stack_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping__outer_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping__outer_tpid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping__inner_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping__inner_tpid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

class srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping(yang.adata.MNode):
    vlan_stack_action: ?str
    outer_vlan_id: ?int
    outer_tpid: ?str
    inner_vlan_id: ?int
    inner_tpid: ?str

    mut def __init__(self, vlan_stack_action: ?str, outer_vlan_id: ?int, outer_tpid: ?str, inner_vlan_id: ?int, inner_tpid: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self.vlan_stack_action = vlan_stack_action
        self.outer_vlan_id = outer_vlan_id
        self.outer_tpid = outer_tpid
        self.inner_vlan_id = inner_vlan_id
        self.inner_tpid = inner_tpid

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_stack_action = self.vlan_stack_action
        _outer_vlan_id = self.outer_vlan_id
        _outer_tpid = self.outer_tpid
        _inner_vlan_id = self.inner_vlan_id
        _inner_tpid = self.inner_tpid
        if _vlan_stack_action is not None:
            children['vlan-stack-action'] = yang.gdata.Leaf('enumeration', _vlan_stack_action)
        if _outer_vlan_id is not None:
            children['outer-vlan-id'] = yang.gdata.Leaf('uint16', _outer_vlan_id)
        if _outer_tpid is not None:
            children['outer-tpid'] = yang.gdata.Leaf('identityref', _outer_tpid)
        if _inner_vlan_id is not None:
            children['inner-vlan-id'] = yang.gdata.Leaf('uint16', _inner_vlan_id)
        if _inner_tpid is not None:
            children['inner-tpid'] = yang.gdata.Leaf('identityref', _inner_tpid)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping(vlan_stack_action=n.get_opt_str("vlan-stack-action"), outer_vlan_id=n.get_opt_int("outer-vlan-id"), outer_tpid=n.get_opt_str("outer-tpid"), inner_vlan_id=n.get_opt_int("inner-vlan-id"), inner_tpid=n.get_opt_str("inner-tpid"))
        return srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping(vlan_stack_action=yang.gdata.from_xml_opt_str(n, "vlan-stack-action"), outer_vlan_id=yang.gdata.from_xml_opt_int(n, "outer-vlan-id"), outer_tpid=yang.gdata.from_xml_opt_str(n, "outer-tpid"), inner_vlan_id=yang.gdata.from_xml_opt_int(n, "inner-vlan-id"), inner_tpid=yang.gdata.from_xml_opt_str(n, "inner-tpid"))
        return srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping()



class srl_nokia_interfaces__interface__subinterface__vlan(yang.adata.MNode):
    vlan_discovery: ?srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery
    encap: srl_nokia_interfaces__interface__subinterface__vlan__encap
    ingress_mapping: srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping
    egress_mapping: srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping

    mut def __init__(self, vlan_discovery: ?srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery=None, encap: ?srl_nokia_interfaces__interface__subinterface__vlan__encap=None, ingress_mapping: ?srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping=None, egress_mapping: ?srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces-vlans"
        self.vlan_discovery = vlan_discovery
        self_vlan_discovery = self.vlan_discovery
        if self_vlan_discovery is not None:
            self_vlan_discovery._parent = self
        if encap is not None:
            self.encap = encap
        else:
            self.encap = srl_nokia_interfaces__interface__subinterface__vlan__encap()
        self_encap = self.encap
        if self_encap is not None:
            self_encap._parent = self
        if ingress_mapping is not None:
            self.ingress_mapping = ingress_mapping
        else:
            self.ingress_mapping = srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping()
        self_ingress_mapping = self.ingress_mapping
        if self_ingress_mapping is not None:
            self_ingress_mapping._parent = self
        if egress_mapping is not None:
            self.egress_mapping = egress_mapping
        else:
            self.egress_mapping = srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping()
        self_egress_mapping = self.egress_mapping
        if self_egress_mapping is not None:
            self_egress_mapping._parent = self

    mut def create_vlan_discovery(self):
        res = srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery()
        self.vlan_discovery = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_discovery = self.vlan_discovery
        _encap = self.encap
        _ingress_mapping = self.ingress_mapping
        _egress_mapping = self.egress_mapping
        if _vlan_discovery is not None:
            children['vlan-discovery'] = _vlan_discovery.to_gdata()
        if _encap is not None:
            children['encap'] = _encap.to_gdata()
        if _ingress_mapping is not None:
            children['ingress-mapping'] = _ingress_mapping.to_gdata()
        if _egress_mapping is not None:
            children['egress-mapping'] = _egress_mapping.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:interfaces-vlans')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__vlan:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan(vlan_discovery=srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery.from_gdata(n.get_opt_container("vlan-discovery")), encap=srl_nokia_interfaces__interface__subinterface__vlan__encap.from_gdata(n.get_opt_container("encap")), ingress_mapping=srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping.from_gdata(n.get_opt_container("ingress-mapping")), egress_mapping=srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping.from_gdata(n.get_opt_container("egress-mapping")))
        return srl_nokia_interfaces__interface__subinterface__vlan()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__vlan:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__vlan(vlan_discovery=srl_nokia_interfaces__interface__subinterface__vlan__vlan_discovery.from_xml(yang.gdata.get_xml_opt_child(n, "vlan-discovery")), encap=srl_nokia_interfaces__interface__subinterface__vlan__encap.from_xml(yang.gdata.get_xml_opt_child(n, "encap")), ingress_mapping=srl_nokia_interfaces__interface__subinterface__vlan__ingress_mapping.from_xml(yang.gdata.get_xml_opt_child(n, "ingress-mapping")), egress_mapping=srl_nokia_interfaces__interface__subinterface__vlan__egress_mapping.from_xml(yang.gdata.get_xml_opt_child(n, "egress-mapping")))
        return srl_nokia_interfaces__interface__subinterface__vlan()



mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_terminated_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_terminated_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_forwarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_forwarded_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__in_matched_ra_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__out_forwarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__out_forwarded_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__out_originated_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__out_originated_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__out_discarded_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__out_octets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_interfaces__interface__subinterface__mpls__statistics__last_clear(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_interfaces__interface__subinterface__mpls__statistics(yang.adata.MNode):
    in_packets: int
    in_octets: int
    in_error_packets: int
    in_discarded_packets: int
    in_terminated_packets: int
    in_terminated_octets: int
    in_forwarded_packets: int
    in_forwarded_octets: int
    in_matched_ra_packets: int
    out_forwarded_packets: int
    out_forwarded_octets: int
    out_originated_packets: int
    out_originated_octets: int
    out_error_packets: int
    out_discarded_packets: int
    out_packets: int
    out_octets: int
    last_clear: ?str

    mut def __init__(self, in_packets: ?int=None, in_octets: ?int=None, in_error_packets: ?int=None, in_discarded_packets: ?int=None, in_terminated_packets: ?int=None, in_terminated_octets: ?int=None, in_forwarded_packets: ?int=None, in_forwarded_octets: ?int=None, in_matched_ra_packets: ?int=None, out_forwarded_packets: ?int=None, out_forwarded_octets: ?int=None, out_originated_packets: ?int=None, out_originated_octets: ?int=None, out_error_packets: ?int=None, out_discarded_packets: ?int=None, out_packets: ?int=None, out_octets: ?int=None, last_clear: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:if-mpls"
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if in_octets != None:
            self.in_octets = in_octets
        else:
            self.in_octets = 0
        if in_error_packets != None:
            self.in_error_packets = in_error_packets
        else:
            self.in_error_packets = 0
        if in_discarded_packets != None:
            self.in_discarded_packets = in_discarded_packets
        else:
            self.in_discarded_packets = 0
        if in_terminated_packets != None:
            self.in_terminated_packets = in_terminated_packets
        else:
            self.in_terminated_packets = 0
        if in_terminated_octets != None:
            self.in_terminated_octets = in_terminated_octets
        else:
            self.in_terminated_octets = 0
        if in_forwarded_packets != None:
            self.in_forwarded_packets = in_forwarded_packets
        else:
            self.in_forwarded_packets = 0
        if in_forwarded_octets != None:
            self.in_forwarded_octets = in_forwarded_octets
        else:
            self.in_forwarded_octets = 0
        if in_matched_ra_packets != None:
            self.in_matched_ra_packets = in_matched_ra_packets
        else:
            self.in_matched_ra_packets = 0
        if out_forwarded_packets != None:
            self.out_forwarded_packets = out_forwarded_packets
        else:
            self.out_forwarded_packets = 0
        if out_forwarded_octets != None:
            self.out_forwarded_octets = out_forwarded_octets
        else:
            self.out_forwarded_octets = 0
        if out_originated_packets != None:
            self.out_originated_packets = out_originated_packets
        else:
            self.out_originated_packets = 0
        if out_originated_octets != None:
            self.out_originated_octets = out_originated_octets
        else:
            self.out_originated_octets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0
        if out_discarded_packets != None:
            self.out_discarded_packets = out_discarded_packets
        else:
            self.out_discarded_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_octets != None:
            self.out_octets = out_octets
        else:
            self.out_octets = 0
        self.last_clear = last_clear

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_packets = self.in_packets
        _in_octets = self.in_octets
        _in_error_packets = self.in_error_packets
        _in_discarded_packets = self.in_discarded_packets
        _in_terminated_packets = self.in_terminated_packets
        _in_terminated_octets = self.in_terminated_octets
        _in_forwarded_packets = self.in_forwarded_packets
        _in_forwarded_octets = self.in_forwarded_octets
        _in_matched_ra_packets = self.in_matched_ra_packets
        _out_forwarded_packets = self.out_forwarded_packets
        _out_forwarded_octets = self.out_forwarded_octets
        _out_originated_packets = self.out_originated_packets
        _out_originated_octets = self.out_originated_octets
        _out_error_packets = self.out_error_packets
        _out_discarded_packets = self.out_discarded_packets
        _out_packets = self.out_packets
        _out_octets = self.out_octets
        _last_clear = self.last_clear
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _in_octets is not None:
            children['in-octets'] = yang.gdata.Leaf('uint64', _in_octets)
        if _in_error_packets is not None:
            children['in-error-packets'] = yang.gdata.Leaf('uint64', _in_error_packets)
        if _in_discarded_packets is not None:
            children['in-discarded-packets'] = yang.gdata.Leaf('uint64', _in_discarded_packets)
        if _in_terminated_packets is not None:
            children['in-terminated-packets'] = yang.gdata.Leaf('uint64', _in_terminated_packets)
        if _in_terminated_octets is not None:
            children['in-terminated-octets'] = yang.gdata.Leaf('uint64', _in_terminated_octets)
        if _in_forwarded_packets is not None:
            children['in-forwarded-packets'] = yang.gdata.Leaf('uint64', _in_forwarded_packets)
        if _in_forwarded_octets is not None:
            children['in-forwarded-octets'] = yang.gdata.Leaf('uint64', _in_forwarded_octets)
        if _in_matched_ra_packets is not None:
            children['in-matched-ra-packets'] = yang.gdata.Leaf('uint64', _in_matched_ra_packets)
        if _out_forwarded_packets is not None:
            children['out-forwarded-packets'] = yang.gdata.Leaf('uint64', _out_forwarded_packets)
        if _out_forwarded_octets is not None:
            children['out-forwarded-octets'] = yang.gdata.Leaf('uint64', _out_forwarded_octets)
        if _out_originated_packets is not None:
            children['out-originated-packets'] = yang.gdata.Leaf('uint64', _out_originated_packets)
        if _out_originated_octets is not None:
            children['out-originated-octets'] = yang.gdata.Leaf('uint64', _out_originated_octets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        if _out_discarded_packets is not None:
            children['out-discarded-packets'] = yang.gdata.Leaf('uint64', _out_discarded_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_octets is not None:
            children['out-octets'] = yang.gdata.Leaf('uint64', _out_octets)
        if _last_clear is not None:
            children['last-clear'] = yang.gdata.Leaf('string', _last_clear)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__mpls__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__mpls__statistics(in_packets=n.get_opt_int("in-packets"), in_octets=n.get_opt_int("in-octets"), in_error_packets=n.get_opt_int("in-error-packets"), in_discarded_packets=n.get_opt_int("in-discarded-packets"), in_terminated_packets=n.get_opt_int("in-terminated-packets"), in_terminated_octets=n.get_opt_int("in-terminated-octets"), in_forwarded_packets=n.get_opt_int("in-forwarded-packets"), in_forwarded_octets=n.get_opt_int("in-forwarded-octets"), in_matched_ra_packets=n.get_opt_int("in-matched-ra-packets"), out_forwarded_packets=n.get_opt_int("out-forwarded-packets"), out_forwarded_octets=n.get_opt_int("out-forwarded-octets"), out_originated_packets=n.get_opt_int("out-originated-packets"), out_originated_octets=n.get_opt_int("out-originated-octets"), out_error_packets=n.get_opt_int("out-error-packets"), out_discarded_packets=n.get_opt_int("out-discarded-packets"), out_packets=n.get_opt_int("out-packets"), out_octets=n.get_opt_int("out-octets"), last_clear=n.get_opt_str("last-clear"))
        return srl_nokia_interfaces__interface__subinterface__mpls__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__mpls__statistics:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__mpls__statistics(in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), in_octets=yang.gdata.from_xml_opt_int(n, "in-octets"), in_error_packets=yang.gdata.from_xml_opt_int(n, "in-error-packets"), in_discarded_packets=yang.gdata.from_xml_opt_int(n, "in-discarded-packets"), in_terminated_packets=yang.gdata.from_xml_opt_int(n, "in-terminated-packets"), in_terminated_octets=yang.gdata.from_xml_opt_int(n, "in-terminated-octets"), in_forwarded_packets=yang.gdata.from_xml_opt_int(n, "in-forwarded-packets"), in_forwarded_octets=yang.gdata.from_xml_opt_int(n, "in-forwarded-octets"), in_matched_ra_packets=yang.gdata.from_xml_opt_int(n, "in-matched-ra-packets"), out_forwarded_packets=yang.gdata.from_xml_opt_int(n, "out-forwarded-packets"), out_forwarded_octets=yang.gdata.from_xml_opt_int(n, "out-forwarded-octets"), out_originated_packets=yang.gdata.from_xml_opt_int(n, "out-originated-packets"), out_originated_octets=yang.gdata.from_xml_opt_int(n, "out-originated-octets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"), out_discarded_packets=yang.gdata.from_xml_opt_int(n, "out-discarded-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_octets=yang.gdata.from_xml_opt_int(n, "out-octets"), last_clear=yang.gdata.from_xml_opt_str(n, "last-clear"))
        return srl_nokia_interfaces__interface__subinterface__mpls__statistics()



class srl_nokia_interfaces__interface__subinterface__mpls(yang.adata.MNode):
    statistics: srl_nokia_interfaces__interface__subinterface__mpls__statistics

    mut def __init__(self, statistics: ?srl_nokia_interfaces__interface__subinterface__mpls__statistics=None):
        self._ns = "urn:nokia.com:srlinux:chassis:if-mpls"
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_interfaces__interface__subinterface__mpls__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _statistics = self.statistics
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:if-mpls')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__mpls:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__mpls(statistics=srl_nokia_interfaces__interface__subinterface__mpls__statistics.from_gdata(n.get_opt_container("statistics")))
        return srl_nokia_interfaces__interface__subinterface__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_interfaces__interface__subinterface__mpls:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__mpls(statistics=srl_nokia_interfaces__interface__subinterface__mpls__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")))
        return srl_nokia_interfaces__interface__subinterface__mpls()



class srl_nokia_interfaces__interface__subinterface_entry(yang.adata.MNode):
    index: int
    type: ?str
    description: ?str
    admin_state: str
    ip_mtu: ?int
    l2_mtu: ?int
    mpls_mtu: ?int
    unidirectional_link_delay: srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay
    name: ?str
    ifindex: ?int
    oper_state: ?str
    oper_down_reason: ?str
    last_change: ?str
    collect_irb_stats: ?bool
    collect_detailed_stats: ?bool
    ipv4: srl_nokia_interfaces__interface__subinterface__ipv4
    ipv6: srl_nokia_interfaces__interface__subinterface__ipv6
    anycast_gw: ?srl_nokia_interfaces__interface__subinterface__anycast_gw
    statistics: srl_nokia_interfaces__interface__subinterface__statistics
    bridge_table: ?srl_nokia_interfaces__interface__subinterface__bridge_table
    vlan: srl_nokia_interfaces__interface__subinterface__vlan
    mpls: srl_nokia_interfaces__interface__subinterface__mpls

    mut def __init__(self, index: int, type: ?str, description: ?str, admin_state: ?str=None, ip_mtu: ?int, l2_mtu: ?int, mpls_mtu: ?int, unidirectional_link_delay: ?srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay=None, name: ?str, ifindex: ?int, oper_state: ?str, oper_down_reason: ?str, last_change: ?str, collect_irb_stats: ?bool, collect_detailed_stats: ?bool, ipv4: ?srl_nokia_interfaces__interface__subinterface__ipv4=None, ipv6: ?srl_nokia_interfaces__interface__subinterface__ipv6=None, anycast_gw: ?srl_nokia_interfaces__interface__subinterface__anycast_gw=None, statistics: ?srl_nokia_interfaces__interface__subinterface__statistics=None, bridge_table: ?srl_nokia_interfaces__interface__subinterface__bridge_table=None, vlan: ?srl_nokia_interfaces__interface__subinterface__vlan=None, mpls: ?srl_nokia_interfaces__interface__subinterface__mpls=None):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.index = index
        self.type = type
        self.description = description
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.ip_mtu = ip_mtu
        self.l2_mtu = l2_mtu
        self.mpls_mtu = mpls_mtu
        if unidirectional_link_delay is not None:
            self.unidirectional_link_delay = unidirectional_link_delay
        else:
            self.unidirectional_link_delay = srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()
        self_unidirectional_link_delay = self.unidirectional_link_delay
        if self_unidirectional_link_delay is not None:
            self_unidirectional_link_delay._parent = self
        self.name = name
        self.ifindex = ifindex
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason
        self.last_change = last_change
        self.collect_irb_stats = collect_irb_stats
        self.collect_detailed_stats = collect_detailed_stats
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = srl_nokia_interfaces__interface__subinterface__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = srl_nokia_interfaces__interface__subinterface__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        self.anycast_gw = anycast_gw
        self_anycast_gw = self.anycast_gw
        if self_anycast_gw is not None:
            self_anycast_gw._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_interfaces__interface__subinterface__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        self.bridge_table = bridge_table
        self_bridge_table = self.bridge_table
        if self_bridge_table is not None:
            self_bridge_table._parent = self
        if vlan is not None:
            self.vlan = vlan
        else:
            self.vlan = srl_nokia_interfaces__interface__subinterface__vlan()
        self_vlan = self.vlan
        if self_vlan is not None:
            self_vlan._parent = self
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = srl_nokia_interfaces__interface__subinterface__mpls()
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self

    mut def create_anycast_gw(self):
        res = srl_nokia_interfaces__interface__subinterface__anycast_gw()
        self.anycast_gw = res
        return res

    mut def create_bridge_table(self):
        res = srl_nokia_interfaces__interface__subinterface__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _type = self.type
        _description = self.description
        _admin_state = self.admin_state
        _ip_mtu = self.ip_mtu
        _l2_mtu = self.l2_mtu
        _mpls_mtu = self.mpls_mtu
        _unidirectional_link_delay = self.unidirectional_link_delay
        _name = self.name
        _ifindex = self.ifindex
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        _last_change = self.last_change
        _collect_irb_stats = self.collect_irb_stats
        _collect_detailed_stats = self.collect_detailed_stats
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _anycast_gw = self.anycast_gw
        _statistics = self.statistics
        _bridge_table = self.bridge_table
        _vlan = self.vlan
        _mpls = self.mpls
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ip_mtu is not None:
            children['ip-mtu'] = yang.gdata.Leaf('uint16', _ip_mtu)
        if _l2_mtu is not None:
            children['l2-mtu'] = yang.gdata.Leaf('uint16', _l2_mtu)
        if _mpls_mtu is not None:
            children['mpls-mtu'] = yang.gdata.Leaf('uint16', _mpls_mtu)
        if _unidirectional_link_delay is not None:
            children['unidirectional-link-delay'] = _unidirectional_link_delay.to_gdata()
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _ifindex is not None:
            children['ifindex'] = yang.gdata.Leaf('uint32', _ifindex)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        if _last_change is not None:
            children['last-change'] = yang.gdata.Leaf('string', _last_change)
        if _collect_irb_stats is not None:
            children['collect-irb-stats'] = yang.gdata.Leaf('boolean', _collect_irb_stats)
        if _collect_detailed_stats is not None:
            children['collect-detailed-stats'] = yang.gdata.Leaf('boolean', _collect_detailed_stats)
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        if _anycast_gw is not None:
            children['anycast-gw'] = _anycast_gw.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        if _vlan is not None:
            children['vlan'] = _vlan.to_gdata()
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface_entry:
        return srl_nokia_interfaces__interface__subinterface_entry(index=n.get_int("index"), type=n.get_opt_str("type"), description=n.get_opt_str("description"), admin_state=n.get_opt_str("admin-state"), ip_mtu=n.get_opt_int("ip-mtu"), l2_mtu=n.get_opt_int("l2-mtu"), mpls_mtu=n.get_opt_int("mpls-mtu"), unidirectional_link_delay=srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay.from_gdata(n.get_opt_container("unidirectional-link-delay")), name=n.get_opt_str("name"), ifindex=n.get_opt_int("ifindex"), oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"), last_change=n.get_opt_str("last-change"), collect_irb_stats=n.get_opt_bool("collect-irb-stats"), collect_detailed_stats=n.get_opt_bool("collect-detailed-stats"), ipv4=srl_nokia_interfaces__interface__subinterface__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=srl_nokia_interfaces__interface__subinterface__ipv6.from_gdata(n.get_opt_container("ipv6")), anycast_gw=srl_nokia_interfaces__interface__subinterface__anycast_gw.from_gdata(n.get_opt_container("anycast-gw")), statistics=srl_nokia_interfaces__interface__subinterface__statistics.from_gdata(n.get_opt_container("statistics")), bridge_table=srl_nokia_interfaces__interface__subinterface__bridge_table.from_gdata(n.get_opt_container("bridge-table")), vlan=srl_nokia_interfaces__interface__subinterface__vlan.from_gdata(n.get_opt_container("vlan")), mpls=srl_nokia_interfaces__interface__subinterface__mpls.from_gdata(n.get_opt_container("mpls")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_interfaces__interface__subinterface_entry:
        return srl_nokia_interfaces__interface__subinterface_entry(index=yang.gdata.from_xml_int(n, "index"), type=yang.gdata.from_xml_opt_str(n, "type"), description=yang.gdata.from_xml_opt_str(n, "description"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ip_mtu=yang.gdata.from_xml_opt_int(n, "ip-mtu"), l2_mtu=yang.gdata.from_xml_opt_int(n, "l2-mtu"), mpls_mtu=yang.gdata.from_xml_opt_int(n, "mpls-mtu"), unidirectional_link_delay=srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay.from_xml(yang.gdata.get_xml_opt_child(n, "unidirectional-link-delay")), name=yang.gdata.from_xml_opt_str(n, "name"), ifindex=yang.gdata.from_xml_opt_int(n, "ifindex"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"), last_change=yang.gdata.from_xml_opt_str(n, "last-change"), collect_irb_stats=yang.gdata.from_xml_opt_bool(n, "collect-irb-stats"), collect_detailed_stats=yang.gdata.from_xml_opt_bool(n, "collect-detailed-stats"), ipv4=srl_nokia_interfaces__interface__subinterface__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4")), ipv6=srl_nokia_interfaces__interface__subinterface__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6")), anycast_gw=srl_nokia_interfaces__interface__subinterface__anycast_gw.from_xml(yang.gdata.get_xml_opt_child(n, "anycast-gw")), statistics=srl_nokia_interfaces__interface__subinterface__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), bridge_table=srl_nokia_interfaces__interface__subinterface__bridge_table.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-table")), vlan=srl_nokia_interfaces__interface__subinterface__vlan.from_xml(yang.gdata.get_xml_opt_child(n, "vlan", "urn:nokia.com:srlinux:chassis:interfaces-vlans")), mpls=srl_nokia_interfaces__interface__subinterface__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls", "urn:nokia.com:srlinux:chassis:if-mpls")))

class srl_nokia_interfaces__interface__subinterface(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self._name = 'subinterface'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_interfaces__interface__subinterface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_interfaces__interface__subinterface_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_interfaces__interface__subinterface_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_interfaces__interface__sflow__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_interfaces__interface__sflow__ingress_sampling_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_interfaces__interface__sflow__egress_sampling_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_interfaces__interface__sflow(yang.adata.MNode):
    admin_state: ?str
    ingress_sampling_rate: ?int
    egress_sampling_rate: ?int

    mut def __init__(self, admin_state: ?str, ingress_sampling_rate: ?int, egress_sampling_rate: ?int):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.admin_state = admin_state
        self.ingress_sampling_rate = ingress_sampling_rate
        self.egress_sampling_rate = egress_sampling_rate

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ingress_sampling_rate = self.ingress_sampling_rate
        _egress_sampling_rate = self.egress_sampling_rate
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ingress_sampling_rate is not None:
            children['ingress-sampling-rate'] = yang.gdata.Leaf('uint32', _ingress_sampling_rate)
        if _egress_sampling_rate is not None:
            children['egress-sampling-rate'] = yang.gdata.Leaf('uint32', _egress_sampling_rate)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__sflow:
        if n != None:
            return srl_nokia_interfaces__interface__sflow(admin_state=n.get_opt_str("admin-state"), ingress_sampling_rate=n.get_opt_int("ingress-sampling-rate"), egress_sampling_rate=n.get_opt_int("egress-sampling-rate"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_interfaces__interface__sflow:
        if n != None:
            return srl_nokia_interfaces__interface__sflow(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ingress_sampling_rate=yang.gdata.from_xml_opt_int(n, "ingress-sampling-rate"), egress_sampling_rate=yang.gdata.from_xml_opt_int(n, "egress-sampling-rate"))
        return None



mut def from_json_srl_nokia_interfaces__interface__vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_interfaces__interface__tpid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

class srl_nokia_interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    admin_state: str
    num_physical_channels: ?int
    breakout_mode: ?srl_nokia_interfaces__interface__breakout_mode
    mtu: ?int
    loopback_mode: ?str
    ifindex: ?int
    oper_state: ?str
    oper_down_reason: ?str
    last_change: ?str
    linecard: ?str
    forwarding_complex: ?str
    phy_group_members: list[str]
    physical_channel: list[str]
    forwarding_mode: ?str
    statistics: srl_nokia_interfaces__interface__statistics
    traffic_rate: srl_nokia_interfaces__interface__traffic_rate
    adapter: srl_nokia_interfaces__interface__adapter
    transceiver: srl_nokia_interfaces__interface__transceiver
    ethernet: srl_nokia_interfaces__interface__ethernet
    subinterface: srl_nokia_interfaces__interface__subinterface
    sflow: ?srl_nokia_interfaces__interface__sflow
    vlan_tagging: ?bool
    tpid: ?str

    mut def __init__(self, name: str, description: ?str, admin_state: ?str=None, num_physical_channels: ?int, breakout_mode: ?srl_nokia_interfaces__interface__breakout_mode=None, mtu: ?int, loopback_mode: ?str, ifindex: ?int, oper_state: ?str, oper_down_reason: ?str, last_change: ?str, linecard: ?str, forwarding_complex: ?str, phy_group_members: ?list[str]=None, physical_channel: ?list[str]=None, forwarding_mode: ?str, statistics: ?srl_nokia_interfaces__interface__statistics=None, traffic_rate: ?srl_nokia_interfaces__interface__traffic_rate=None, adapter: ?srl_nokia_interfaces__interface__adapter=None, transceiver: ?srl_nokia_interfaces__interface__transceiver=None, ethernet: ?srl_nokia_interfaces__interface__ethernet=None, subinterface: list[srl_nokia_interfaces__interface__subinterface_entry]=[], sflow: ?srl_nokia_interfaces__interface__sflow=None, vlan_tagging: ?bool, tpid: ?str):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self.name = name
        self.description = description
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.num_physical_channels = num_physical_channels
        self.breakout_mode = breakout_mode
        self_breakout_mode = self.breakout_mode
        if self_breakout_mode is not None:
            self_breakout_mode._parent = self
        self.mtu = mtu
        self.loopback_mode = loopback_mode
        self.ifindex = ifindex
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason
        self.last_change = last_change
        self.linecard = linecard
        self.forwarding_complex = forwarding_complex
        if phy_group_members is not None:
            self.phy_group_members = phy_group_members
        else:
            self.phy_group_members = []
        if physical_channel is not None:
            self.physical_channel = physical_channel
        else:
            self.physical_channel = []
        self.forwarding_mode = forwarding_mode
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_interfaces__interface__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        if traffic_rate is not None:
            self.traffic_rate = traffic_rate
        else:
            self.traffic_rate = srl_nokia_interfaces__interface__traffic_rate()
        self_traffic_rate = self.traffic_rate
        if self_traffic_rate is not None:
            self_traffic_rate._parent = self
        if adapter is not None:
            self.adapter = adapter
        else:
            self.adapter = srl_nokia_interfaces__interface__adapter()
        self_adapter = self.adapter
        if self_adapter is not None:
            self_adapter._parent = self
        if transceiver is not None:
            self.transceiver = transceiver
        else:
            self.transceiver = srl_nokia_interfaces__interface__transceiver()
        self_transceiver = self.transceiver
        if self_transceiver is not None:
            self_transceiver._parent = self
        if ethernet is not None:
            self.ethernet = ethernet
        else:
            self.ethernet = srl_nokia_interfaces__interface__ethernet()
        self_ethernet = self.ethernet
        if self_ethernet is not None:
            self_ethernet._parent = self
        self.subinterface = srl_nokia_interfaces__interface__subinterface(elements=subinterface)
        self.subinterface._parent = self
        self.sflow = sflow
        self_sflow = self.sflow
        if self_sflow is not None:
            self_sflow._parent = self
        self.vlan_tagging = vlan_tagging
        self.tpid = tpid

    mut def create_breakout_mode(self, num_breakout_ports, breakout_port_speed):
        res = srl_nokia_interfaces__interface__breakout_mode(num_breakout_ports, breakout_port_speed)
        self.breakout_mode = res
        return res

    mut def create_sflow(self):
        res = srl_nokia_interfaces__interface__sflow()
        self.sflow = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _description = self.description
        _admin_state = self.admin_state
        _num_physical_channels = self.num_physical_channels
        _breakout_mode = self.breakout_mode
        _mtu = self.mtu
        _loopback_mode = self.loopback_mode
        _ifindex = self.ifindex
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        _last_change = self.last_change
        _linecard = self.linecard
        _forwarding_complex = self.forwarding_complex
        _forwarding_mode = self.forwarding_mode
        _statistics = self.statistics
        _traffic_rate = self.traffic_rate
        _adapter = self.adapter
        _transceiver = self.transceiver
        _ethernet = self.ethernet
        _subinterface = self.subinterface
        _sflow = self.sflow
        _vlan_tagging = self.vlan_tagging
        _tpid = self.tpid
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _num_physical_channels is not None:
            children['num-physical-channels'] = yang.gdata.Leaf('uint8', _num_physical_channels)
        if _breakout_mode is not None:
            children['breakout-mode'] = _breakout_mode.to_gdata()
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('uint16', _mtu)
        if _loopback_mode is not None:
            children['loopback-mode'] = yang.gdata.Leaf('enumeration', _loopback_mode)
        if _ifindex is not None:
            children['ifindex'] = yang.gdata.Leaf('uint32', _ifindex)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        if _last_change is not None:
            children['last-change'] = yang.gdata.Leaf('string', _last_change)
        if _linecard is not None:
            children['linecard'] = yang.gdata.Leaf('leafref', _linecard)
        if _forwarding_complex is not None:
            children['forwarding-complex'] = yang.gdata.Leaf('leafref', _forwarding_complex)
        children['phy-group-members'] = yang.gdata.LeafList(self.phy_group_members)
        children['physical-channel'] = yang.gdata.LeafList(self.physical_channel)
        if _forwarding_mode is not None:
            children['forwarding-mode'] = yang.gdata.Leaf('enumeration', _forwarding_mode)
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _traffic_rate is not None:
            children['traffic-rate'] = _traffic_rate.to_gdata()
        if _adapter is not None:
            children['adapter'] = _adapter.to_gdata()
        if _transceiver is not None:
            children['transceiver'] = _transceiver.to_gdata()
        if _ethernet is not None:
            children['ethernet'] = _ethernet.to_gdata()
        if _subinterface is not None:
            children['subinterface'] = _subinterface.to_gdata()
        if _sflow is not None:
            children['sflow'] = _sflow.to_gdata()
        if _vlan_tagging is not None:
            children['vlan-tagging'] = yang.gdata.Leaf('boolean', _vlan_tagging, ns='urn:nokia.com:srlinux:chassis:interfaces-vlans')
        if _tpid is not None:
            children['tpid'] = yang.gdata.Leaf('identityref', _tpid, ns='urn:nokia.com:srlinux:chassis:interfaces-vlans')
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface_entry:
        return srl_nokia_interfaces__interface_entry(name=n.get_str("name"), description=n.get_opt_str("description"), admin_state=n.get_opt_str("admin-state"), num_physical_channels=n.get_opt_int("num-physical-channels"), breakout_mode=srl_nokia_interfaces__interface__breakout_mode.from_gdata(n.get_opt_container("breakout-mode")), mtu=n.get_opt_int("mtu"), loopback_mode=n.get_opt_str("loopback-mode"), ifindex=n.get_opt_int("ifindex"), oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"), last_change=n.get_opt_str("last-change"), linecard=n.get_opt_str("linecard"), forwarding_complex=n.get_opt_str("forwarding-complex"), phy_group_members=n.get_opt_strs("phy-group-members"), physical_channel=n.get_opt_strs("physical-channel"), forwarding_mode=n.get_opt_str("forwarding-mode"), statistics=srl_nokia_interfaces__interface__statistics.from_gdata(n.get_opt_container("statistics")), traffic_rate=srl_nokia_interfaces__interface__traffic_rate.from_gdata(n.get_opt_container("traffic-rate")), adapter=srl_nokia_interfaces__interface__adapter.from_gdata(n.get_opt_container("adapter")), transceiver=srl_nokia_interfaces__interface__transceiver.from_gdata(n.get_opt_container("transceiver")), ethernet=srl_nokia_interfaces__interface__ethernet.from_gdata(n.get_opt_container("ethernet")), subinterface=srl_nokia_interfaces__interface__subinterface.from_gdata(n.get_opt_list("subinterface")), sflow=srl_nokia_interfaces__interface__sflow.from_gdata(n.get_opt_container("sflow")), vlan_tagging=n.get_opt_bool("vlan-tagging"), tpid=n.get_opt_str("tpid"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_interfaces__interface_entry:
        return srl_nokia_interfaces__interface_entry(name=yang.gdata.from_xml_str(n, "name"), description=yang.gdata.from_xml_opt_str(n, "description"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), num_physical_channels=yang.gdata.from_xml_opt_int(n, "num-physical-channels"), breakout_mode=srl_nokia_interfaces__interface__breakout_mode.from_xml(yang.gdata.get_xml_opt_child(n, "breakout-mode")), mtu=yang.gdata.from_xml_opt_int(n, "mtu"), loopback_mode=yang.gdata.from_xml_opt_str(n, "loopback-mode"), ifindex=yang.gdata.from_xml_opt_int(n, "ifindex"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"), last_change=yang.gdata.from_xml_opt_str(n, "last-change"), linecard=yang.gdata.from_xml_opt_str(n, "linecard"), forwarding_complex=yang.gdata.from_xml_opt_str(n, "forwarding-complex"), phy_group_members=yang.gdata.from_xml_opt_strs(n, "phy-group-members"), physical_channel=yang.gdata.from_xml_opt_strs(n, "physical-channel"), forwarding_mode=yang.gdata.from_xml_opt_str(n, "forwarding-mode"), statistics=srl_nokia_interfaces__interface__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), traffic_rate=srl_nokia_interfaces__interface__traffic_rate.from_xml(yang.gdata.get_xml_opt_child(n, "traffic-rate")), adapter=srl_nokia_interfaces__interface__adapter.from_xml(yang.gdata.get_xml_opt_child(n, "adapter")), transceiver=srl_nokia_interfaces__interface__transceiver.from_xml(yang.gdata.get_xml_opt_child(n, "transceiver")), ethernet=srl_nokia_interfaces__interface__ethernet.from_xml(yang.gdata.get_xml_opt_child(n, "ethernet")), subinterface=srl_nokia_interfaces__interface__subinterface.from_xml(yang.gdata.get_xml_children(n, "subinterface")), sflow=srl_nokia_interfaces__interface__sflow.from_xml(yang.gdata.get_xml_opt_child(n, "sflow")), vlan_tagging=yang.gdata.from_xml_opt_bool(n, "vlan-tagging", "urn:nokia.com:srlinux:chassis:interfaces-vlans"), tpid=yang.gdata.from_xml_opt_str(n, "tpid", "urn:nokia.com:srlinux:chassis:interfaces-vlans"))

class srl_nokia_interfaces__interface(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:chassis:interfaces"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name, breakout_mode):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface_entry(name, breakout_mode)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:chassis:interfaces')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_interfaces__interface_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_routing_policy__routing_policy__as_path_set__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__as_path_set__expression(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__as_path_set__as_path_set_member(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_routing_policy__routing_policy__as_path_set_entry(yang.adata.MNode):
    name: str
    expression: ?str
    as_path_set_member: list[str]

    mut def __init__(self, name: str, expression: ?str, as_path_set_member: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.name = name
        self.expression = expression
        if as_path_set_member is not None:
            self.as_path_set_member = as_path_set_member
        else:
            self.as_path_set_member = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _expression = self.expression
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _expression is not None:
            children['expression'] = yang.gdata.Leaf('string', _expression)
        children['as-path-set-member'] = yang.gdata.LeafList(self.as_path_set_member)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__as_path_set_entry:
        return srl_nokia_routing_policy__routing_policy__as_path_set_entry(name=n.get_str("name"), expression=n.get_opt_str("expression"), as_path_set_member=n.get_opt_strs("as-path-set-member"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__as_path_set_entry:
        return srl_nokia_routing_policy__routing_policy__as_path_set_entry(name=yang.gdata.from_xml_str(n, "name"), expression=yang.gdata.from_xml_opt_str(n, "expression"), as_path_set_member=yang.gdata.from_xml_opt_strs(n, "as-path-set-member"))

class srl_nokia_routing_policy__routing_policy__as_path_set(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__as_path_set_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'as-path-set'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__as_path_set_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__as_path_set_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__as_path_set_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__as_path_set_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__as_path_set_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_routing_policy__routing_policy__prefix_set__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__prefix_set__prefix__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__prefix_set__prefix__mask_length_range(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry(yang.adata.MNode):
    ip_prefix: str
    mask_length_range: str

    mut def __init__(self, ip_prefix: str, mask_length_range: str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.ip_prefix = ip_prefix
        self.mask_length_range = mask_length_range

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        _mask_length_range = self.mask_length_range
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('union', _ip_prefix)
        if _mask_length_range is not None:
            children['mask-length-range'] = yang.gdata.Leaf('string', _mask_length_range)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_prefix), yang.gdata.yang_str(self.mask_length_range)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry:
        return srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry(ip_prefix=n.get_str("ip-prefix"), mask_length_range=n.get_str("mask-length-range"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry:
        return srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry(ip_prefix=yang.gdata.from_xml_str(n, "ip-prefix"), mask_length_range=yang.gdata.from_xml_str(n, "mask-length-range"))

class srl_nokia_routing_policy__routing_policy__prefix_set__prefix(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'prefix'
        self.elements = elements

    mut def create(self, ip_prefix, mask_length_range):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if e.mask_length_range != mask_length_range:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry(ip_prefix, mask_length_range)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix', 'mask-length-range'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry.from_xml(node))
        return res



class srl_nokia_routing_policy__routing_policy__prefix_set_entry(yang.adata.MNode):
    name: str
    prefix: srl_nokia_routing_policy__routing_policy__prefix_set__prefix

    mut def __init__(self, name: str, prefix: list[srl_nokia_routing_policy__routing_policy__prefix_set__prefix_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.name = name
        self.prefix = srl_nokia_routing_policy__routing_policy__prefix_set__prefix(elements=prefix)
        self.prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _prefix = self.prefix
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _prefix is not None:
            children['prefix'] = _prefix.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__prefix_set_entry:
        return srl_nokia_routing_policy__routing_policy__prefix_set_entry(name=n.get_str("name"), prefix=srl_nokia_routing_policy__routing_policy__prefix_set__prefix.from_gdata(n.get_opt_list("prefix")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__prefix_set_entry:
        return srl_nokia_routing_policy__routing_policy__prefix_set_entry(name=yang.gdata.from_xml_str(n, "name"), prefix=srl_nokia_routing_policy__routing_policy__prefix_set__prefix.from_xml(yang.gdata.get_xml_children(n, "prefix")))

class srl_nokia_routing_policy__routing_policy__prefix_set(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__prefix_set_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'prefix-set'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__prefix_set_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__prefix_set_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__prefix_set_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__prefix_set_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__prefix_set_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_routing_policy__routing_policy__community_set__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__community_set__member(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__community_set__match_set_options(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__community_set_entry(yang.adata.MNode):
    name: str
    member: list[value]
    match_set_options: str

    mut def __init__(self, name: str, member: ?list[value]=None, match_set_options: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.name = name
        if member is not None:
            self.member = member
        else:
            self.member = []
        if match_set_options != None:
            self.match_set_options = match_set_options
        else:
            self.match_set_options = "all"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _match_set_options = self.match_set_options
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        children['member'] = yang.gdata.LeafList(self.member)
        if _match_set_options is not None:
            children['match-set-options'] = yang.gdata.Leaf('enumeration', _match_set_options)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__community_set_entry:
        return srl_nokia_routing_policy__routing_policy__community_set_entry(name=n.get_str("name"), member=n.get_opt_values("member"), match_set_options=n.get_opt_str("match-set-options"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__community_set_entry:
        return srl_nokia_routing_policy__routing_policy__community_set_entry(name=yang.gdata.from_xml_str(n, "name"), member=yang.gdata.from_xml_opt_values(n, "member"), match_set_options=yang.gdata.from_xml_opt_str(n, "match-set-options"))

class srl_nokia_routing_policy__routing_policy__community_set(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__community_set_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'community-set'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__community_set_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__community_set_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__community_set_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__community_set_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__community_set_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_routing_policy__routing_policy__standard_community_set__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__standard_community_set__member(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_routing_policy__routing_policy__standard_community_set_entry(yang.adata.MNode):
    name: str
    member: list[value]

    mut def __init__(self, name: str, member: ?list[value]=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.name = name
        if member is not None:
            self.member = member
        else:
            self.member = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        children['member'] = yang.gdata.LeafList(self.member)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__standard_community_set_entry:
        return srl_nokia_routing_policy__routing_policy__standard_community_set_entry(name=n.get_str("name"), member=n.get_opt_values("member"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__standard_community_set_entry:
        return srl_nokia_routing_policy__routing_policy__standard_community_set_entry(name=yang.gdata.from_xml_str(n, "name"), member=yang.gdata.from_xml_opt_values(n, "member"))

class srl_nokia_routing_policy__routing_policy__standard_community_set(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__standard_community_set_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'standard-community-set'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__standard_community_set_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__standard_community_set_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__standard_community_set_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__standard_community_set_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__standard_community_set_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_routing_policy__routing_policy__extended_community_set__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__extended_community_set__member(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_routing_policy__routing_policy__extended_community_set_entry(yang.adata.MNode):
    name: str
    member: list[str]

    mut def __init__(self, name: str, member: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.name = name
        if member is not None:
            self.member = member
        else:
            self.member = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        children['member'] = yang.gdata.LeafList(self.member)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__extended_community_set_entry:
        return srl_nokia_routing_policy__routing_policy__extended_community_set_entry(name=n.get_str("name"), member=n.get_opt_strs("member"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__extended_community_set_entry:
        return srl_nokia_routing_policy__routing_policy__extended_community_set_entry(name=yang.gdata.from_xml_str(n, "name"), member=yang.gdata.from_xml_opt_strs(n, "member"))

class srl_nokia_routing_policy__routing_policy__extended_community_set(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__extended_community_set_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'extended-community-set'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__extended_community_set_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__extended_community_set_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__extended_community_set_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__extended_community_set_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__extended_community_set_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_routing_policy__routing_policy__tag_set__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__tag_set__tag_value(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__tag_set__tag_set_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_routing_policy__routing_policy__tag_set_entry(yang.adata.MNode):
    name: str
    tag_value: list[value]
    tag_set_index: ?int

    mut def __init__(self, name: str, tag_value: ?list[value]=None, tag_set_index: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.name = name
        if tag_value is not None:
            self.tag_value = tag_value
        else:
            self.tag_value = []
        self.tag_set_index = tag_set_index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _tag_set_index = self.tag_set_index
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        children['tag-value'] = yang.gdata.LeafList(self.tag_value)
        if _tag_set_index is not None:
            children['tag-set-index'] = yang.gdata.Leaf('uint32', _tag_set_index)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__tag_set_entry:
        return srl_nokia_routing_policy__routing_policy__tag_set_entry(name=n.get_str("name"), tag_value=n.get_opt_values("tag-value"), tag_set_index=n.get_opt_int("tag-set-index"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__tag_set_entry:
        return srl_nokia_routing_policy__routing_policy__tag_set_entry(name=yang.gdata.from_xml_str(n, "name"), tag_value=yang.gdata.from_xml_opt_values(n, "tag-value"), tag_set_index=yang.gdata.from_xml_opt_int(n, "tag-set-index"))

class srl_nokia_routing_policy__routing_policy__tag_set(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__tag_set_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'tag-set'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__tag_set_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__tag_set_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__tag_set_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__tag_set_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__tag_set_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__policy_result(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__remove(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__replace(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend__repeat_n(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend(yang.adata.MNode):
    as_number: ?value
    repeat_n: ?int

    mut def __init__(self, as_number: ?value, repeat_n: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.as_number = as_number
        self.repeat_n = repeat_n

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _repeat_n = self.repeat_n
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('union', _as_number)
        if _repeat_n is not None:
            children['repeat-n'] = yang.gdata.Leaf('uint8', _repeat_n)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend(as_number=n.get_opt_value("as-number"), repeat_n=n.get_opt_int("repeat-n"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend(as_number=yang.gdata.from_xml_opt_value(n, "as-number"), repeat_n=yang.gdata.from_xml_opt_int(n, "repeat-n"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend()



class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path(yang.adata.MNode):
    remove: ?bool
    replace: list[int]
    prepend: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend

    mut def __init__(self, remove: ?bool, replace: ?list[int]=None, prepend: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.remove = remove
        if replace is not None:
            self.replace = replace
        else:
            self.replace = []
        if prepend is not None:
            self.prepend = prepend
        else:
            self.prepend = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend()
        self_prepend = self.prepend
        if self_prepend is not None:
            self_prepend._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _remove = self.remove
        _prepend = self.prepend
        if _remove is not None:
            children['remove'] = yang.gdata.Leaf('boolean', _remove)
        children['replace'] = yang.gdata.LeafList(self.replace)
        if _prepend is not None:
            children['prepend'] = _prepend.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path(remove=n.get_opt_bool("remove"), replace=n.get_opt_ints("replace"), prepend=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend.from_gdata(n.get_opt_container("prepend")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path(remove=yang.gdata.from_xml_opt_bool(n, "remove"), replace=yang.gdata.from_xml_opt_ints(n, "replace"), prepend=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path__prepend.from_xml(yang.gdata.get_xml_opt_child(n, "prepend")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities__add(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities__remove(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities__replace(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities(yang.adata.MNode):
    add: ?str
    remove: ?str
    replace: ?str

    mut def __init__(self, add: ?str, remove: ?str, replace: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.add = add
        self.remove = remove
        self.replace = replace

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add = self.add
        _remove = self.remove
        _replace = self.replace
        if _add is not None:
            children['add'] = yang.gdata.Leaf('leafref', _add)
        if _remove is not None:
            children['remove'] = yang.gdata.Leaf('leafref', _remove)
        if _replace is not None:
            children['replace'] = yang.gdata.Leaf('leafref', _replace)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities(add=n.get_opt_str("add"), remove=n.get_opt_str("remove"), replace=n.get_opt_str("replace"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities(add=yang.gdata.from_xml_opt_str(n, "add"), remove=yang.gdata.from_xml_opt_str(n, "remove"), replace=yang.gdata.from_xml_opt_str(n, "replace"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community__operation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community__referenced_sets(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community__method(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community(yang.adata.MNode):
    operation: ?str
    referenced_sets: list[str]
    method: str

    mut def __init__(self, operation: ?str, referenced_sets: ?list[str]=None, method: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.operation = operation
        if referenced_sets is not None:
            self.referenced_sets = referenced_sets
        else:
            self.referenced_sets = []
        if method != None:
            self.method = method
        else:
            self.method = "reference"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _operation = self.operation
        _method = self.method
        if _operation is not None:
            children['operation'] = yang.gdata.Leaf('enumeration', _operation)
        children['referenced-sets'] = yang.gdata.LeafList(self.referenced_sets)
        if _method is not None:
            children['method'] = yang.gdata.Leaf('enumeration', _method)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community(operation=n.get_opt_str("operation"), referenced_sets=n.get_opt_strs("referenced-sets"), method=n.get_opt_str("method"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community(operation=yang.gdata.from_xml_opt_str(n, "operation"), referenced_sets=yang.gdata.from_xml_opt_strs(n, "referenced-sets"), method=yang.gdata.from_xml_opt_str(n, "method"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community__operation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community__referenced_sets(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community__method(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community(yang.adata.MNode):
    operation: ?str
    referenced_sets: list[str]
    method: str

    mut def __init__(self, operation: ?str, referenced_sets: ?list[str]=None, method: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.operation = operation
        if referenced_sets is not None:
            self.referenced_sets = referenced_sets
        else:
            self.referenced_sets = []
        if method != None:
            self.method = method
        else:
            self.method = "reference"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _operation = self.operation
        _method = self.method
        if _operation is not None:
            children['operation'] = yang.gdata.Leaf('enumeration', _operation)
        children['referenced-sets'] = yang.gdata.LeafList(self.referenced_sets)
        if _method is not None:
            children['method'] = yang.gdata.Leaf('enumeration', _method)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community(operation=n.get_opt_str("operation"), referenced_sets=n.get_opt_strs("referenced-sets"), method=n.get_opt_str("method"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community(operation=yang.gdata.from_xml_opt_str(n, "operation"), referenced_sets=yang.gdata.from_xml_opt_strs(n, "referenced-sets"), method=yang.gdata.from_xml_opt_str(n, "method"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__disable_ip_route_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference(yang.adata.MNode):
    set: ?int

    mut def __init__(self, set: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('uint32', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference(set=n.get_opt_int("set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference(set=yang.gdata.from_xml_opt_int(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med(yang.adata.MNode):
    set: ?value

    mut def __init__(self, set: ?value):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('union', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med(set=n.get_opt_value("set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med(set=yang.gdata.from_xml_opt_value(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop(yang.adata.MNode):
    set: ?value

    mut def __init__(self, set: ?value):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('union', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop(set=n.get_opt_value("set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop(set=yang.gdata.from_xml_opt_value(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution__set_tag_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution(yang.adata.MNode):
    set_tag_set: ?str

    mut def __init__(self, set_tag_set: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set_tag_set = set_tag_set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set_tag_set = self.set_tag_set
        if _set_tag_set is not None:
            children['set-tag-set'] = yang.gdata.Leaf('leafref', _set_tag_set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution(set_tag_set=n.get_opt_str("set-tag-set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution(set_tag_set=yang.gdata.from_xml_opt_str(n, "set-tag-set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin(yang.adata.MNode):
    set: ?str

    mut def __init__(self, set: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('enumeration', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin(set=n.get_opt_str("set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin(set=yang.gdata.from_xml_opt_str(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics__ingress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics__egress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics(yang.adata.MNode):
    ingress: ?bool
    egress: ?bool

    mut def __init__(self, ingress: ?bool, egress: ?bool):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.ingress = ingress
        self.egress = egress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress = self.ingress
        _egress = self.egress
        if _ingress is not None:
            children['ingress'] = yang.gdata.Leaf('boolean', _ingress)
        if _egress is not None:
            children['egress'] = yang.gdata.Leaf('boolean', _egress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics(ingress=n.get_opt_bool("ingress"), egress=n.get_opt_bool("egress"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics(ingress=yang.gdata.from_xml_opt_bool(n, "ingress"), egress=yang.gdata.from_xml_opt_bool(n, "egress"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid__reuse_igp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid(yang.adata.MNode):
    reuse_igp: ?bool

    mut def __init__(self, reuse_igp: ?bool):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.reuse_igp = reuse_igp

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _reuse_igp = self.reuse_igp
        if _reuse_igp is not None:
            children['reuse-igp'] = yang.gdata.Leaf('boolean', _reuse_igp)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid(reuse_igp=n.get_opt_bool("reuse-igp"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid(reuse_igp=yang.gdata.from_xml_opt_bool(n, "reuse-igp"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid()



class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation(yang.adata.MNode):
    prefix_sid: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid

    mut def __init__(self, prefix_sid: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if prefix_sid is not None:
            self.prefix_sid = prefix_sid
        else:
            self.prefix_sid = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid()
        self_prefix_sid = self.prefix_sid
        if self_prefix_sid is not None:
            self_prefix_sid._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_sid = self.prefix_sid
        if _prefix_sid is not None:
            children['prefix-sid'] = _prefix_sid.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation(prefix_sid=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid.from_gdata(n.get_opt_container("prefix-sid")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation(prefix_sid=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation__prefix_sid.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-sid")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation()



class srl_nokia_routing_policy__routing_policy__policy__default_action__bgp(yang.adata.MNode):
    as_path: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path
    communities: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities
    standard_community: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community
    extended_community: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community
    disable_ip_route_install: ?bool
    local_preference: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference
    med: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med
    next_hop: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop
    next_hop_resolution: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution
    origin: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin
    statistics: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics
    label_allocation: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation

    mut def __init__(self, as_path: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path=None, communities: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities=None, standard_community: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community=None, extended_community: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community=None, disable_ip_route_install: ?bool, local_preference: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference=None, med: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med=None, next_hop: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop=None, next_hop_resolution: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution=None, origin: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin=None, statistics: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics=None, label_allocation: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if as_path is not None:
            self.as_path = as_path
        else:
            self.as_path = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path()
        self_as_path = self.as_path
        if self_as_path is not None:
            self_as_path._parent = self
        if communities is not None:
            self.communities = communities
        else:
            self.communities = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities()
        self_communities = self.communities
        if self_communities is not None:
            self_communities._parent = self
        if standard_community is not None:
            self.standard_community = standard_community
        else:
            self.standard_community = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community()
        self_standard_community = self.standard_community
        if self_standard_community is not None:
            self_standard_community._parent = self
        if extended_community is not None:
            self.extended_community = extended_community
        else:
            self.extended_community = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community()
        self_extended_community = self.extended_community
        if self_extended_community is not None:
            self_extended_community._parent = self
        self.disable_ip_route_install = disable_ip_route_install
        if local_preference is not None:
            self.local_preference = local_preference
        else:
            self.local_preference = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference()
        self_local_preference = self.local_preference
        if self_local_preference is not None:
            self_local_preference._parent = self
        if med is not None:
            self.med = med
        else:
            self.med = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med()
        self_med = self.med
        if self_med is not None:
            self_med._parent = self
        if next_hop is not None:
            self.next_hop = next_hop
        else:
            self.next_hop = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop()
        self_next_hop = self.next_hop
        if self_next_hop is not None:
            self_next_hop._parent = self
        if next_hop_resolution is not None:
            self.next_hop_resolution = next_hop_resolution
        else:
            self.next_hop_resolution = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution()
        self_next_hop_resolution = self.next_hop_resolution
        if self_next_hop_resolution is not None:
            self_next_hop_resolution._parent = self
        if origin is not None:
            self.origin = origin
        else:
            self.origin = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin()
        self_origin = self.origin
        if self_origin is not None:
            self_origin._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        if label_allocation is not None:
            self.label_allocation = label_allocation
        else:
            self.label_allocation = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation()
        self_label_allocation = self.label_allocation
        if self_label_allocation is not None:
            self_label_allocation._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_path = self.as_path
        _communities = self.communities
        _standard_community = self.standard_community
        _extended_community = self.extended_community
        _disable_ip_route_install = self.disable_ip_route_install
        _local_preference = self.local_preference
        _med = self.med
        _next_hop = self.next_hop
        _next_hop_resolution = self.next_hop_resolution
        _origin = self.origin
        _statistics = self.statistics
        _label_allocation = self.label_allocation
        if _as_path is not None:
            children['as-path'] = _as_path.to_gdata()
        if _communities is not None:
            children['communities'] = _communities.to_gdata()
        if _standard_community is not None:
            children['standard-community'] = _standard_community.to_gdata()
        if _extended_community is not None:
            children['extended-community'] = _extended_community.to_gdata()
        if _disable_ip_route_install is not None:
            children['disable-ip-route-install'] = yang.gdata.Leaf('boolean', _disable_ip_route_install)
        if _local_preference is not None:
            children['local-preference'] = _local_preference.to_gdata()
        if _med is not None:
            children['med'] = _med.to_gdata()
        if _next_hop is not None:
            children['next-hop'] = _next_hop.to_gdata()
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        if _origin is not None:
            children['origin'] = _origin.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _label_allocation is not None:
            children['label-allocation'] = _label_allocation.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp(as_path=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path.from_gdata(n.get_opt_container("as-path")), communities=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities.from_gdata(n.get_opt_container("communities")), standard_community=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community.from_gdata(n.get_opt_container("standard-community")), extended_community=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community.from_gdata(n.get_opt_container("extended-community")), disable_ip_route_install=n.get_opt_bool("disable-ip-route-install"), local_preference=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference.from_gdata(n.get_opt_container("local-preference")), med=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med.from_gdata(n.get_opt_container("med")), next_hop=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop.from_gdata(n.get_opt_container("next-hop")), next_hop_resolution=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution.from_gdata(n.get_opt_container("next-hop-resolution")), origin=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin.from_gdata(n.get_opt_container("origin")), statistics=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics.from_gdata(n.get_opt_container("statistics")), label_allocation=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation.from_gdata(n.get_opt_container("label-allocation")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__bgp:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp(as_path=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__as_path.from_xml(yang.gdata.get_xml_opt_child(n, "as-path")), communities=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__communities.from_xml(yang.gdata.get_xml_opt_child(n, "communities")), standard_community=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__standard_community.from_xml(yang.gdata.get_xml_opt_child(n, "standard-community")), extended_community=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__extended_community.from_xml(yang.gdata.get_xml_opt_child(n, "extended-community")), disable_ip_route_install=yang.gdata.from_xml_opt_bool(n, "disable-ip-route-install"), local_preference=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__local_preference.from_xml(yang.gdata.get_xml_opt_child(n, "local-preference")), med=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__med.from_xml(yang.gdata.get_xml_opt_child(n, "med")), next_hop=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop")), next_hop_resolution=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__next_hop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-resolution")), origin=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__origin.from_xml(yang.gdata.get_xml_opt_child(n, "origin")), statistics=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), label_allocation=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp__label_allocation.from_xml(yang.gdata.get_xml_opt_child(n, "label-allocation")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__bgp()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__isis__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric__set_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric__set_style(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric__set_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric(yang.adata.MNode):
    set_type: ?str
    set_style: ?str
    set_value: ?int

    mut def __init__(self, set_type: ?str, set_style: ?str, set_value: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set_type = set_type
        self.set_style = set_style
        self.set_value = set_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set_type = self.set_type
        _set_style = self.set_style
        _set_value = self.set_value
        if _set_type is not None:
            children['set-type'] = yang.gdata.Leaf('enumeration', _set_type)
        if _set_style is not None:
            children['set-style'] = yang.gdata.Leaf('enumeration', _set_style)
        if _set_value is not None:
            children['set-value'] = yang.gdata.Leaf('uint32', _set_value)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric(set_type=n.get_opt_str("set-type"), set_style=n.get_opt_str("set-style"), set_value=n.get_opt_int("set-value"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric(set_type=yang.gdata.from_xml_opt_str(n, "set-type"), set_style=yang.gdata.from_xml_opt_str(n, "set-style"), set_value=yang.gdata.from_xml_opt_int(n, "set-value"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric()



class srl_nokia_routing_policy__routing_policy__policy__default_action__isis(yang.adata.MNode):
    level: ?int
    metric: srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric

    mut def __init__(self, level: ?int, metric: ?srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.level = level
        if metric is not None:
            self.metric = metric
        else:
            self.metric = srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        _metric = self.metric
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint8', _level)
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__isis:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__isis(level=n.get_opt_int("level"), metric=srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric.from_gdata(n.get_opt_container("metric")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__isis()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__isis:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__isis(level=yang.gdata.from_xml_opt_int(n, "level"), metric=srl_nokia_routing_policy__routing_policy__policy__default_action__isis__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__isis()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference(yang.adata.MNode):
    set: ?int

    mut def __init__(self, set: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('uint8', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference(set=n.get_opt_int("set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference(set=yang.gdata.from_xml_opt_int(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags__set_tag_set(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags(yang.adata.MNode):
    set_tag_set: list[str]

    mut def __init__(self, set_tag_set: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if set_tag_set is not None:
            self.set_tag_set = set_tag_set
        else:
            self.set_tag_set = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['set-tag-set'] = yang.gdata.LeafList(self.set_tag_set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags(set_tag_set=n.get_opt_strs("set-tag-set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags(set_tag_set=yang.gdata.from_xml_opt_strs(n, "set-tag-set"))
        return srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags()



class srl_nokia_routing_policy__routing_policy__policy__default_action(yang.adata.MNode):
    policy_result: ?str
    bgp: srl_nokia_routing_policy__routing_policy__policy__default_action__bgp
    isis: srl_nokia_routing_policy__routing_policy__policy__default_action__isis
    route_preference: srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference
    internal_tags: srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags

    mut def __init__(self, policy_result: ?str, bgp: ?srl_nokia_routing_policy__routing_policy__policy__default_action__bgp=None, isis: ?srl_nokia_routing_policy__routing_policy__policy__default_action__isis=None, route_preference: ?srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference=None, internal_tags: ?srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.policy_result = policy_result
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = srl_nokia_routing_policy__routing_policy__policy__default_action__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self
        if isis is not None:
            self.isis = isis
        else:
            self.isis = srl_nokia_routing_policy__routing_policy__policy__default_action__isis()
        self_isis = self.isis
        if self_isis is not None:
            self_isis._parent = self
        if route_preference is not None:
            self.route_preference = route_preference
        else:
            self.route_preference = srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference()
        self_route_preference = self.route_preference
        if self_route_preference is not None:
            self_route_preference._parent = self
        if internal_tags is not None:
            self.internal_tags = internal_tags
        else:
            self.internal_tags = srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags()
        self_internal_tags = self.internal_tags
        if self_internal_tags is not None:
            self_internal_tags._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _policy_result = self.policy_result
        _bgp = self.bgp
        _isis = self.isis
        _route_preference = self.route_preference
        _internal_tags = self.internal_tags
        if _policy_result is not None:
            children['policy-result'] = yang.gdata.Leaf('enumeration', _policy_result)
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        if _route_preference is not None:
            children['route-preference'] = _route_preference.to_gdata()
        if _internal_tags is not None:
            children['internal-tags'] = _internal_tags.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action(policy_result=n.get_opt_str("policy-result"), bgp=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp.from_gdata(n.get_opt_container("bgp")), isis=srl_nokia_routing_policy__routing_policy__policy__default_action__isis.from_gdata(n.get_opt_container("isis")), route_preference=srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference.from_gdata(n.get_opt_container("route-preference")), internal_tags=srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags.from_gdata(n.get_opt_container("internal-tags")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__default_action:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__default_action(policy_result=yang.gdata.from_xml_opt_str(n, "policy-result"), bgp=srl_nokia_routing_policy__routing_policy__policy__default_action__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), isis=srl_nokia_routing_policy__routing_policy__policy__default_action__isis.from_xml(yang.gdata.get_xml_opt_child(n, "isis")), route_preference=srl_nokia_routing_policy__routing_policy__policy__default_action__route_preference.from_xml(yang.gdata.get_xml_opt_child(n, "route-preference")), internal_tags=srl_nokia_routing_policy__routing_policy__policy__default_action__internal_tags.from_xml(yang.gdata.get_xml_opt_child(n, "internal-tags")))
        return srl_nokia_routing_policy__routing_policy__policy__default_action()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix__prefix_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix__match_set_options(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix(yang.adata.MNode):
    prefix_set: ?str
    match_set_options: ?str

    mut def __init__(self, prefix_set: ?str, match_set_options: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.prefix_set = prefix_set
        self.match_set_options = match_set_options

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_set = self.prefix_set
        _match_set_options = self.match_set_options
        if _prefix_set is not None:
            children['prefix-set'] = yang.gdata.Leaf('leafref', _prefix_set)
        if _match_set_options is not None:
            children['match-set-options'] = yang.gdata.Leaf('enumeration', _match_set_options)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix(prefix_set=n.get_opt_str("prefix-set"), match_set_options=n.get_opt_str("match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix(prefix_set=yang.gdata.from_xml_opt_str(n, "prefix-set"), match_set_options=yang.gdata.from_xml_opt_str(n, "match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path__as_path_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path__match_set_options(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path(yang.adata.MNode):
    as_path_set: ?str
    match_set_options: ?str

    mut def __init__(self, as_path_set: ?str, match_set_options: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.as_path_set = as_path_set
        self.match_set_options = match_set_options

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_path_set = self.as_path_set
        _match_set_options = self.match_set_options
        if _as_path_set is not None:
            children['as-path-set'] = yang.gdata.Leaf('leafref', _as_path_set)
        if _match_set_options is not None:
            children['match-set-options'] = yang.gdata.Leaf('enumeration', _match_set_options)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path(as_path_set=n.get_opt_str("as-path-set"), match_set_options=n.get_opt_str("match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path(as_path_set=yang.gdata.from_xml_opt_str(n, "as-path-set"), match_set_options=yang.gdata.from_xml_opt_str(n, "match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length__operator(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length__unique(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length(yang.adata.MNode):
    value: ?int
    operator: ?str
    unique: ?bool

    mut def __init__(self, value: ?int, operator: ?str, unique: ?bool):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.value = value
        self.operator = operator
        self.unique = unique

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _value = self.value
        _operator = self.operator
        _unique = self.unique
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint8', _value)
        if _operator is not None:
            children['operator'] = yang.gdata.Leaf('enumeration', _operator)
        if _unique is not None:
            children['unique'] = yang.gdata.Leaf('boolean', _unique)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length(value=n.get_opt_int("value"), operator=n.get_opt_str("operator"), unique=n.get_opt_bool("unique"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length(value=yang.gdata.from_xml_opt_int(n, "value"), operator=yang.gdata.from_xml_opt_str(n, "operator"), unique=yang.gdata.from_xml_opt_bool(n, "unique"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__community_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community__standard_community_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community__match_set_options(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community(yang.adata.MNode):
    standard_community_set: ?str
    match_set_options: str

    mut def __init__(self, standard_community_set: ?str, match_set_options: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.standard_community_set = standard_community_set
        if match_set_options != None:
            self.match_set_options = match_set_options
        else:
            self.match_set_options = "any"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard_community_set = self.standard_community_set
        _match_set_options = self.match_set_options
        if _standard_community_set is not None:
            children['standard-community-set'] = yang.gdata.Leaf('leafref', _standard_community_set)
        if _match_set_options is not None:
            children['match-set-options'] = yang.gdata.Leaf('enumeration', _match_set_options)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community(standard_community_set=n.get_opt_str("standard-community-set"), match_set_options=n.get_opt_str("match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community(standard_community_set=yang.gdata.from_xml_opt_str(n, "standard-community-set"), match_set_options=yang.gdata.from_xml_opt_str(n, "match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community__extended_community_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community__match_set_options(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community(yang.adata.MNode):
    extended_community_set: ?str
    match_set_options: str

    mut def __init__(self, extended_community_set: ?str, match_set_options: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.extended_community_set = extended_community_set
        if match_set_options != None:
            self.match_set_options = match_set_options
        else:
            self.match_set_options = "any"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _extended_community_set = self.extended_community_set
        _match_set_options = self.match_set_options
        if _extended_community_set is not None:
            children['extended-community-set'] = yang.gdata.Leaf('leafref', _extended_community_set)
        if _match_set_options is not None:
            children['match-set-options'] = yang.gdata.Leaf('enumeration', _match_set_options)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community(extended_community_set=n.get_opt_str("extended-community-set"), match_set_options=n.get_opt_str("match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community(extended_community_set=yang.gdata.from_xml_opt_str(n, "extended-community-set"), match_set_options=yang.gdata.from_xml_opt_str(n, "match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn__route_type(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn(yang.adata.MNode):
    route_type: list[int]

    mut def __init__(self, route_type: ?list[int]=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if route_type is not None:
            self.route_type = route_type
        else:
            self.route_type = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['route-type'] = yang.gdata.LeafList(self.route_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn(route_type=n.get_opt_ints("route-type"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn(route_type=yang.gdata.from_xml_opt_ints(n, "route-type"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn()



class srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp(yang.adata.MNode):
    as_path_set: ?str
    as_path: srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path
    as_path_length: srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length
    community_set: ?str
    standard_community: srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community
    extended_community: srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community
    evpn: srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn

    mut def __init__(self, as_path_set: ?str, as_path: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path=None, as_path_length: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length=None, community_set: ?str, standard_community: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community=None, extended_community: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community=None, evpn: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.as_path_set = as_path_set
        if as_path is not None:
            self.as_path = as_path
        else:
            self.as_path = srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path()
        self_as_path = self.as_path
        if self_as_path is not None:
            self_as_path._parent = self
        if as_path_length is not None:
            self.as_path_length = as_path_length
        else:
            self.as_path_length = srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length()
        self_as_path_length = self.as_path_length
        if self_as_path_length is not None:
            self_as_path_length._parent = self
        self.community_set = community_set
        if standard_community is not None:
            self.standard_community = standard_community
        else:
            self.standard_community = srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community()
        self_standard_community = self.standard_community
        if self_standard_community is not None:
            self_standard_community._parent = self
        if extended_community is not None:
            self.extended_community = extended_community
        else:
            self.extended_community = srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community()
        self_extended_community = self.extended_community
        if self_extended_community is not None:
            self_extended_community._parent = self
        if evpn is not None:
            self.evpn = evpn
        else:
            self.evpn = srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn()
        self_evpn = self.evpn
        if self_evpn is not None:
            self_evpn._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_path_set = self.as_path_set
        _as_path = self.as_path
        _as_path_length = self.as_path_length
        _community_set = self.community_set
        _standard_community = self.standard_community
        _extended_community = self.extended_community
        _evpn = self.evpn
        if _as_path_set is not None:
            children['as-path-set'] = yang.gdata.Leaf('leafref', _as_path_set)
        if _as_path is not None:
            children['as-path'] = _as_path.to_gdata()
        if _as_path_length is not None:
            children['as-path-length'] = _as_path_length.to_gdata()
        if _community_set is not None:
            children['community-set'] = yang.gdata.Leaf('leafref', _community_set)
        if _standard_community is not None:
            children['standard-community'] = _standard_community.to_gdata()
        if _extended_community is not None:
            children['extended-community'] = _extended_community.to_gdata()
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp(as_path_set=n.get_opt_str("as-path-set"), as_path=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path.from_gdata(n.get_opt_container("as-path")), as_path_length=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length.from_gdata(n.get_opt_container("as-path-length")), community_set=n.get_opt_str("community-set"), standard_community=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community.from_gdata(n.get_opt_container("standard-community")), extended_community=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community.from_gdata(n.get_opt_container("extended-community")), evpn=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn.from_gdata(n.get_opt_container("evpn")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp(as_path_set=yang.gdata.from_xml_opt_str(n, "as-path-set"), as_path=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path.from_xml(yang.gdata.get_xml_opt_child(n, "as-path")), as_path_length=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__as_path_length.from_xml(yang.gdata.get_xml_opt_child(n, "as-path-length")), community_set=yang.gdata.from_xml_opt_str(n, "community-set"), standard_community=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__standard_community.from_xml(yang.gdata.get_xml_opt_child(n, "standard-community")), extended_community=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__extended_community.from_xml(yang.gdata.get_xml_opt_child(n, "extended-community")), evpn=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp__evpn.from_xml(yang.gdata.get_xml_opt_child(n, "evpn")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__family(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__protocol(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__call_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags__tag_set(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags__match_set_options(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags(yang.adata.MNode):
    tag_set: list[str]
    match_set_options: str

    mut def __init__(self, tag_set: ?list[str]=None, match_set_options: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if tag_set is not None:
            self.tag_set = tag_set
        else:
            self.tag_set = []
        if match_set_options != None:
            self.match_set_options = match_set_options
        else:
            self.match_set_options = "any"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _match_set_options = self.match_set_options
        children['tag-set'] = yang.gdata.LeafList(self.tag_set)
        if _match_set_options is not None:
            children['match-set-options'] = yang.gdata.Leaf('enumeration', _match_set_options)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags(tag_set=n.get_opt_strs("tag-set"), match_set_options=n.get_opt_str("match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags(tag_set=yang.gdata.from_xml_opt_strs(n, "tag-set"), match_set_options=yang.gdata.from_xml_opt_str(n, "match-set-options"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__isis__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__isis__route_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__isis(yang.adata.MNode):
    level: ?int
    route_type: ?str

    mut def __init__(self, level: ?int, route_type: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.level = level
        self.route_type = route_type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        _route_type = self.route_type
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint8', _level)
        if _route_type is not None:
            children['route-type'] = yang.gdata.Leaf('enumeration', _route_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__isis:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__isis(level=n.get_opt_int("level"), route_type=n.get_opt_str("route-type"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__isis()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__isis:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__isis(level=yang.gdata.from_xml_opt_int(n, "level"), route_type=yang.gdata.from_xml_opt_str(n, "route-type"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__isis()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf__area_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf__route_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf__instance_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf(yang.adata.MNode):
    area_id: ?str
    route_type: ?str
    instance_id: ?int

    mut def __init__(self, area_id: ?str, route_type: ?str, instance_id: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.area_id = area_id
        self.route_type = route_type
        self.instance_id = instance_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _area_id = self.area_id
        _route_type = self.route_type
        _instance_id = self.instance_id
        if _area_id is not None:
            children['area-id'] = yang.gdata.Leaf('string', _area_id)
        if _route_type is not None:
            children['route-type'] = yang.gdata.Leaf('identityref', _route_type)
        if _instance_id is not None:
            children['instance-id'] = yang.gdata.Leaf('uint32', _instance_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf(area_id=n.get_opt_str("area-id"), route_type=n.get_opt_str("route-type"), instance_id=n.get_opt_int("instance-id"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf(area_id=yang.gdata.from_xml_opt_str(n, "area-id"), route_type=yang.gdata.from_xml_opt_str(n, "route-type"), instance_id=yang.gdata.from_xml_opt_int(n, "instance-id"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address__prefix_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address(yang.adata.MNode):
    prefix_set: ?str

    mut def __init__(self, prefix_set: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.prefix_set = prefix_set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_set = self.prefix_set
        if _prefix_set is not None:
            children['prefix-set'] = yang.gdata.Leaf('leafref', _prefix_set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address(prefix_set=n.get_opt_str("prefix-set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address(prefix_set=yang.gdata.from_xml_opt_str(n, "prefix-set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address__prefix_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address(yang.adata.MNode):
    prefix_set: ?str

    mut def __init__(self, prefix_set: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.prefix_set = prefix_set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_set = self.prefix_set
        if _prefix_set is not None:
            children['prefix-set'] = yang.gdata.Leaf('leafref', _prefix_set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address(prefix_set=n.get_opt_str("prefix-set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address(prefix_set=yang.gdata.from_xml_opt_str(n, "prefix-set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address()



class srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast(yang.adata.MNode):
    group_address: srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address
    source_address: srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address

    mut def __init__(self, group_address: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address=None, source_address: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if group_address is not None:
            self.group_address = group_address
        else:
            self.group_address = srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address()
        self_group_address = self.group_address
        if self_group_address is not None:
            self_group_address._parent = self
        if source_address is not None:
            self.source_address = source_address
        else:
            self.source_address = srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address()
        self_source_address = self.source_address
        if self_source_address is not None:
            self_source_address._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_address = self.group_address
        _source_address = self.source_address
        if _group_address is not None:
            children['group-address'] = _group_address.to_gdata()
        if _source_address is not None:
            children['source-address'] = _source_address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast(group_address=srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address.from_gdata(n.get_opt_container("group-address")), source_address=srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address.from_gdata(n.get_opt_container("source-address")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast(group_address=srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__group_address.from_xml(yang.gdata.get_xml_opt_child(n, "group-address")), source_address=srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast__source_address.from_xml(yang.gdata.get_xml_opt_child(n, "source-address")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast()



class srl_nokia_routing_policy__routing_policy__policy__statement__match(yang.adata.MNode):
    prefix_set: ?str
    prefix: srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix
    bgp: srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp
    family: list[str]
    protocol_: ?str
    call_policy: list[str]
    internal_tags: srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags
    isis: srl_nokia_routing_policy__routing_policy__policy__statement__match__isis
    ospf: srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf
    multicast: srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast

    mut def __init__(self, prefix_set: ?str, prefix: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix=None, bgp: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp=None, family: ?list[str]=None, protocol_: ?str, call_policy: ?list[str]=None, internal_tags: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags=None, isis: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__isis=None, ospf: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf=None, multicast: ?srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.prefix_set = prefix_set
        if prefix is not None:
            self.prefix = prefix
        else:
            self.prefix = srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix()
        self_prefix = self.prefix
        if self_prefix is not None:
            self_prefix._parent = self
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self
        if family is not None:
            self.family = family
        else:
            self.family = []
        self.protocol_ = protocol_
        if call_policy is not None:
            self.call_policy = call_policy
        else:
            self.call_policy = []
        if internal_tags is not None:
            self.internal_tags = internal_tags
        else:
            self.internal_tags = srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags()
        self_internal_tags = self.internal_tags
        if self_internal_tags is not None:
            self_internal_tags._parent = self
        if isis is not None:
            self.isis = isis
        else:
            self.isis = srl_nokia_routing_policy__routing_policy__policy__statement__match__isis()
        self_isis = self.isis
        if self_isis is not None:
            self_isis._parent = self
        if ospf is not None:
            self.ospf = ospf
        else:
            self.ospf = srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf()
        self_ospf = self.ospf
        if self_ospf is not None:
            self_ospf._parent = self
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast()
        self_multicast = self.multicast
        if self_multicast is not None:
            self_multicast._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_set = self.prefix_set
        _prefix = self.prefix
        _bgp = self.bgp
        _protocol_ = self.protocol_
        _internal_tags = self.internal_tags
        _isis = self.isis
        _ospf = self.ospf
        _multicast = self.multicast
        if _prefix_set is not None:
            children['prefix-set'] = yang.gdata.Leaf('leafref', _prefix_set)
        if _prefix is not None:
            children['prefix'] = _prefix.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        children['family'] = yang.gdata.LeafList(self.family)
        if _protocol_ is not None:
            children['protocol'] = yang.gdata.Leaf('identityref', _protocol_)
        children['call-policy'] = yang.gdata.LeafList(self.call_policy)
        if _internal_tags is not None:
            children['internal-tags'] = _internal_tags.to_gdata()
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        if _ospf is not None:
            children['ospf'] = _ospf.to_gdata()
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match(prefix_set=n.get_opt_str("prefix-set"), prefix=srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix.from_gdata(n.get_opt_container("prefix")), bgp=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp.from_gdata(n.get_opt_container("bgp")), family=n.get_opt_strs("family"), protocol_=n.get_opt_str("protocol"), call_policy=n.get_opt_strs("call-policy"), internal_tags=srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags.from_gdata(n.get_opt_container("internal-tags")), isis=srl_nokia_routing_policy__routing_policy__policy__statement__match__isis.from_gdata(n.get_opt_container("isis")), ospf=srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf.from_gdata(n.get_opt_container("ospf")), multicast=srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast.from_gdata(n.get_opt_container("multicast")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__match:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__match(prefix_set=yang.gdata.from_xml_opt_str(n, "prefix-set"), prefix=srl_nokia_routing_policy__routing_policy__policy__statement__match__prefix.from_xml(yang.gdata.get_xml_opt_child(n, "prefix")), bgp=srl_nokia_routing_policy__routing_policy__policy__statement__match__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), family=yang.gdata.from_xml_opt_strs(n, "family"), protocol_=yang.gdata.from_xml_opt_str(n, "protocol"), call_policy=yang.gdata.from_xml_opt_strs(n, "call-policy"), internal_tags=srl_nokia_routing_policy__routing_policy__policy__statement__match__internal_tags.from_xml(yang.gdata.get_xml_opt_child(n, "internal-tags")), isis=srl_nokia_routing_policy__routing_policy__policy__statement__match__isis.from_xml(yang.gdata.get_xml_opt_child(n, "isis")), ospf=srl_nokia_routing_policy__routing_policy__policy__statement__match__ospf.from_xml(yang.gdata.get_xml_opt_child(n, "ospf")), multicast=srl_nokia_routing_policy__routing_policy__policy__statement__match__multicast.from_xml(yang.gdata.get_xml_opt_child(n, "multicast")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__match()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__policy_result(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__remove(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__replace(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend__repeat_n(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend(yang.adata.MNode):
    as_number: ?value
    repeat_n: ?int

    mut def __init__(self, as_number: ?value, repeat_n: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.as_number = as_number
        self.repeat_n = repeat_n

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _repeat_n = self.repeat_n
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('union', _as_number)
        if _repeat_n is not None:
            children['repeat-n'] = yang.gdata.Leaf('uint8', _repeat_n)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend(as_number=n.get_opt_value("as-number"), repeat_n=n.get_opt_int("repeat-n"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend(as_number=yang.gdata.from_xml_opt_value(n, "as-number"), repeat_n=yang.gdata.from_xml_opt_int(n, "repeat-n"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend()



class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path(yang.adata.MNode):
    remove: ?bool
    replace: list[int]
    prepend: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend

    mut def __init__(self, remove: ?bool, replace: ?list[int]=None, prepend: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.remove = remove
        if replace is not None:
            self.replace = replace
        else:
            self.replace = []
        if prepend is not None:
            self.prepend = prepend
        else:
            self.prepend = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend()
        self_prepend = self.prepend
        if self_prepend is not None:
            self_prepend._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _remove = self.remove
        _prepend = self.prepend
        if _remove is not None:
            children['remove'] = yang.gdata.Leaf('boolean', _remove)
        children['replace'] = yang.gdata.LeafList(self.replace)
        if _prepend is not None:
            children['prepend'] = _prepend.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path(remove=n.get_opt_bool("remove"), replace=n.get_opt_ints("replace"), prepend=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend.from_gdata(n.get_opt_container("prepend")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path(remove=yang.gdata.from_xml_opt_bool(n, "remove"), replace=yang.gdata.from_xml_opt_ints(n, "replace"), prepend=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path__prepend.from_xml(yang.gdata.get_xml_opt_child(n, "prepend")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities__add(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities__remove(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities__replace(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities(yang.adata.MNode):
    add: ?str
    remove: ?str
    replace: ?str

    mut def __init__(self, add: ?str, remove: ?str, replace: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.add = add
        self.remove = remove
        self.replace = replace

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add = self.add
        _remove = self.remove
        _replace = self.replace
        if _add is not None:
            children['add'] = yang.gdata.Leaf('leafref', _add)
        if _remove is not None:
            children['remove'] = yang.gdata.Leaf('leafref', _remove)
        if _replace is not None:
            children['replace'] = yang.gdata.Leaf('leafref', _replace)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities(add=n.get_opt_str("add"), remove=n.get_opt_str("remove"), replace=n.get_opt_str("replace"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities(add=yang.gdata.from_xml_opt_str(n, "add"), remove=yang.gdata.from_xml_opt_str(n, "remove"), replace=yang.gdata.from_xml_opt_str(n, "replace"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community__operation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community__referenced_sets(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community__method(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community(yang.adata.MNode):
    operation: ?str
    referenced_sets: list[str]
    method: str

    mut def __init__(self, operation: ?str, referenced_sets: ?list[str]=None, method: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.operation = operation
        if referenced_sets is not None:
            self.referenced_sets = referenced_sets
        else:
            self.referenced_sets = []
        if method != None:
            self.method = method
        else:
            self.method = "reference"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _operation = self.operation
        _method = self.method
        if _operation is not None:
            children['operation'] = yang.gdata.Leaf('enumeration', _operation)
        children['referenced-sets'] = yang.gdata.LeafList(self.referenced_sets)
        if _method is not None:
            children['method'] = yang.gdata.Leaf('enumeration', _method)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community(operation=n.get_opt_str("operation"), referenced_sets=n.get_opt_strs("referenced-sets"), method=n.get_opt_str("method"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community(operation=yang.gdata.from_xml_opt_str(n, "operation"), referenced_sets=yang.gdata.from_xml_opt_strs(n, "referenced-sets"), method=yang.gdata.from_xml_opt_str(n, "method"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community__operation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community__referenced_sets(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community__method(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community(yang.adata.MNode):
    operation: ?str
    referenced_sets: list[str]
    method: str

    mut def __init__(self, operation: ?str, referenced_sets: ?list[str]=None, method: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.operation = operation
        if referenced_sets is not None:
            self.referenced_sets = referenced_sets
        else:
            self.referenced_sets = []
        if method != None:
            self.method = method
        else:
            self.method = "reference"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _operation = self.operation
        _method = self.method
        if _operation is not None:
            children['operation'] = yang.gdata.Leaf('enumeration', _operation)
        children['referenced-sets'] = yang.gdata.LeafList(self.referenced_sets)
        if _method is not None:
            children['method'] = yang.gdata.Leaf('enumeration', _method)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community(operation=n.get_opt_str("operation"), referenced_sets=n.get_opt_strs("referenced-sets"), method=n.get_opt_str("method"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community(operation=yang.gdata.from_xml_opt_str(n, "operation"), referenced_sets=yang.gdata.from_xml_opt_strs(n, "referenced-sets"), method=yang.gdata.from_xml_opt_str(n, "method"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__disable_ip_route_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference(yang.adata.MNode):
    set: ?int

    mut def __init__(self, set: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('uint32', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference(set=n.get_opt_int("set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference(set=yang.gdata.from_xml_opt_int(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med(yang.adata.MNode):
    set: ?value

    mut def __init__(self, set: ?value):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('union', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med(set=n.get_opt_value("set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med(set=yang.gdata.from_xml_opt_value(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop(yang.adata.MNode):
    set: ?value

    mut def __init__(self, set: ?value):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('union', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop(set=n.get_opt_value("set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop(set=yang.gdata.from_xml_opt_value(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution__set_tag_set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution(yang.adata.MNode):
    set_tag_set: ?str

    mut def __init__(self, set_tag_set: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set_tag_set = set_tag_set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set_tag_set = self.set_tag_set
        if _set_tag_set is not None:
            children['set-tag-set'] = yang.gdata.Leaf('leafref', _set_tag_set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution(set_tag_set=n.get_opt_str("set-tag-set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution(set_tag_set=yang.gdata.from_xml_opt_str(n, "set-tag-set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin(yang.adata.MNode):
    set: ?str

    mut def __init__(self, set: ?str):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('enumeration', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin(set=n.get_opt_str("set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin(set=yang.gdata.from_xml_opt_str(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics__ingress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics__egress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics(yang.adata.MNode):
    ingress: ?bool
    egress: ?bool

    mut def __init__(self, ingress: ?bool, egress: ?bool):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.ingress = ingress
        self.egress = egress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress = self.ingress
        _egress = self.egress
        if _ingress is not None:
            children['ingress'] = yang.gdata.Leaf('boolean', _ingress)
        if _egress is not None:
            children['egress'] = yang.gdata.Leaf('boolean', _egress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics(ingress=n.get_opt_bool("ingress"), egress=n.get_opt_bool("egress"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics(ingress=yang.gdata.from_xml_opt_bool(n, "ingress"), egress=yang.gdata.from_xml_opt_bool(n, "egress"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid__reuse_igp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid(yang.adata.MNode):
    reuse_igp: ?bool

    mut def __init__(self, reuse_igp: ?bool):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.reuse_igp = reuse_igp

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _reuse_igp = self.reuse_igp
        if _reuse_igp is not None:
            children['reuse-igp'] = yang.gdata.Leaf('boolean', _reuse_igp)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid(reuse_igp=n.get_opt_bool("reuse-igp"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid(reuse_igp=yang.gdata.from_xml_opt_bool(n, "reuse-igp"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid()



class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation(yang.adata.MNode):
    prefix_sid: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid

    mut def __init__(self, prefix_sid: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if prefix_sid is not None:
            self.prefix_sid = prefix_sid
        else:
            self.prefix_sid = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid()
        self_prefix_sid = self.prefix_sid
        if self_prefix_sid is not None:
            self_prefix_sid._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_sid = self.prefix_sid
        if _prefix_sid is not None:
            children['prefix-sid'] = _prefix_sid.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation(prefix_sid=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid.from_gdata(n.get_opt_container("prefix-sid")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation(prefix_sid=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation__prefix_sid.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-sid")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation()



class srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp(yang.adata.MNode):
    as_path: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path
    communities: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities
    standard_community: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community
    extended_community: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community
    disable_ip_route_install: ?bool
    local_preference: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference
    med: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med
    next_hop: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop
    next_hop_resolution: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution
    origin: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin
    statistics: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics
    label_allocation: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation

    mut def __init__(self, as_path: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path=None, communities: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities=None, standard_community: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community=None, extended_community: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community=None, disable_ip_route_install: ?bool, local_preference: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference=None, med: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med=None, next_hop: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop=None, next_hop_resolution: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution=None, origin: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin=None, statistics: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics=None, label_allocation: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if as_path is not None:
            self.as_path = as_path
        else:
            self.as_path = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path()
        self_as_path = self.as_path
        if self_as_path is not None:
            self_as_path._parent = self
        if communities is not None:
            self.communities = communities
        else:
            self.communities = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities()
        self_communities = self.communities
        if self_communities is not None:
            self_communities._parent = self
        if standard_community is not None:
            self.standard_community = standard_community
        else:
            self.standard_community = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community()
        self_standard_community = self.standard_community
        if self_standard_community is not None:
            self_standard_community._parent = self
        if extended_community is not None:
            self.extended_community = extended_community
        else:
            self.extended_community = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community()
        self_extended_community = self.extended_community
        if self_extended_community is not None:
            self_extended_community._parent = self
        self.disable_ip_route_install = disable_ip_route_install
        if local_preference is not None:
            self.local_preference = local_preference
        else:
            self.local_preference = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference()
        self_local_preference = self.local_preference
        if self_local_preference is not None:
            self_local_preference._parent = self
        if med is not None:
            self.med = med
        else:
            self.med = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med()
        self_med = self.med
        if self_med is not None:
            self_med._parent = self
        if next_hop is not None:
            self.next_hop = next_hop
        else:
            self.next_hop = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop()
        self_next_hop = self.next_hop
        if self_next_hop is not None:
            self_next_hop._parent = self
        if next_hop_resolution is not None:
            self.next_hop_resolution = next_hop_resolution
        else:
            self.next_hop_resolution = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution()
        self_next_hop_resolution = self.next_hop_resolution
        if self_next_hop_resolution is not None:
            self_next_hop_resolution._parent = self
        if origin is not None:
            self.origin = origin
        else:
            self.origin = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin()
        self_origin = self.origin
        if self_origin is not None:
            self_origin._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        if label_allocation is not None:
            self.label_allocation = label_allocation
        else:
            self.label_allocation = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation()
        self_label_allocation = self.label_allocation
        if self_label_allocation is not None:
            self_label_allocation._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_path = self.as_path
        _communities = self.communities
        _standard_community = self.standard_community
        _extended_community = self.extended_community
        _disable_ip_route_install = self.disable_ip_route_install
        _local_preference = self.local_preference
        _med = self.med
        _next_hop = self.next_hop
        _next_hop_resolution = self.next_hop_resolution
        _origin = self.origin
        _statistics = self.statistics
        _label_allocation = self.label_allocation
        if _as_path is not None:
            children['as-path'] = _as_path.to_gdata()
        if _communities is not None:
            children['communities'] = _communities.to_gdata()
        if _standard_community is not None:
            children['standard-community'] = _standard_community.to_gdata()
        if _extended_community is not None:
            children['extended-community'] = _extended_community.to_gdata()
        if _disable_ip_route_install is not None:
            children['disable-ip-route-install'] = yang.gdata.Leaf('boolean', _disable_ip_route_install)
        if _local_preference is not None:
            children['local-preference'] = _local_preference.to_gdata()
        if _med is not None:
            children['med'] = _med.to_gdata()
        if _next_hop is not None:
            children['next-hop'] = _next_hop.to_gdata()
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        if _origin is not None:
            children['origin'] = _origin.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _label_allocation is not None:
            children['label-allocation'] = _label_allocation.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp(as_path=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path.from_gdata(n.get_opt_container("as-path")), communities=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities.from_gdata(n.get_opt_container("communities")), standard_community=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community.from_gdata(n.get_opt_container("standard-community")), extended_community=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community.from_gdata(n.get_opt_container("extended-community")), disable_ip_route_install=n.get_opt_bool("disable-ip-route-install"), local_preference=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference.from_gdata(n.get_opt_container("local-preference")), med=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med.from_gdata(n.get_opt_container("med")), next_hop=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop.from_gdata(n.get_opt_container("next-hop")), next_hop_resolution=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution.from_gdata(n.get_opt_container("next-hop-resolution")), origin=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin.from_gdata(n.get_opt_container("origin")), statistics=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics.from_gdata(n.get_opt_container("statistics")), label_allocation=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation.from_gdata(n.get_opt_container("label-allocation")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp(as_path=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__as_path.from_xml(yang.gdata.get_xml_opt_child(n, "as-path")), communities=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__communities.from_xml(yang.gdata.get_xml_opt_child(n, "communities")), standard_community=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__standard_community.from_xml(yang.gdata.get_xml_opt_child(n, "standard-community")), extended_community=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__extended_community.from_xml(yang.gdata.get_xml_opt_child(n, "extended-community")), disable_ip_route_install=yang.gdata.from_xml_opt_bool(n, "disable-ip-route-install"), local_preference=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__local_preference.from_xml(yang.gdata.get_xml_opt_child(n, "local-preference")), med=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__med.from_xml(yang.gdata.get_xml_opt_child(n, "med")), next_hop=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop")), next_hop_resolution=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__next_hop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-resolution")), origin=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__origin.from_xml(yang.gdata.get_xml_opt_child(n, "origin")), statistics=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), label_allocation=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp__label_allocation.from_xml(yang.gdata.get_xml_opt_child(n, "label-allocation")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__level(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric__set_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric__set_style(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric__set_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric(yang.adata.MNode):
    set_type: ?str
    set_style: ?str
    set_value: ?int

    mut def __init__(self, set_type: ?str, set_style: ?str, set_value: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set_type = set_type
        self.set_style = set_style
        self.set_value = set_value

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set_type = self.set_type
        _set_style = self.set_style
        _set_value = self.set_value
        if _set_type is not None:
            children['set-type'] = yang.gdata.Leaf('enumeration', _set_type)
        if _set_style is not None:
            children['set-style'] = yang.gdata.Leaf('enumeration', _set_style)
        if _set_value is not None:
            children['set-value'] = yang.gdata.Leaf('uint32', _set_value)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric(set_type=n.get_opt_str("set-type"), set_style=n.get_opt_str("set-style"), set_value=n.get_opt_int("set-value"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric(set_type=yang.gdata.from_xml_opt_str(n, "set-type"), set_style=yang.gdata.from_xml_opt_str(n, "set-style"), set_value=yang.gdata.from_xml_opt_int(n, "set-value"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric()



class srl_nokia_routing_policy__routing_policy__policy__statement__action__isis(yang.adata.MNode):
    level: ?int
    metric: srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric

    mut def __init__(self, level: ?int, metric: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.level = level
        if metric is not None:
            self.metric = metric
        else:
            self.metric = srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric()
        self_metric = self.metric
        if self_metric is not None:
            self_metric._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        _metric = self.metric
        if _level is not None:
            children['level'] = yang.gdata.Leaf('uint8', _level)
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__isis:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__isis(level=n.get_opt_int("level"), metric=srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric.from_gdata(n.get_opt_container("metric")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__isis()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__isis:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__isis(level=yang.gdata.from_xml_opt_int(n, "level"), metric=srl_nokia_routing_policy__routing_policy__policy__statement__action__isis__metric.from_xml(yang.gdata.get_xml_opt_child(n, "metric")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__isis()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference__set(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference(yang.adata.MNode):
    set: ?int

    mut def __init__(self, set: ?int):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.set = set

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set = self.set
        if _set is not None:
            children['set'] = yang.gdata.Leaf('uint8', _set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference(set=n.get_opt_int("set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference(set=yang.gdata.from_xml_opt_int(n, "set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference()



mut def from_json_srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags__set_tag_set(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags(yang.adata.MNode):
    set_tag_set: list[str]

    mut def __init__(self, set_tag_set: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        if set_tag_set is not None:
            self.set_tag_set = set_tag_set
        else:
            self.set_tag_set = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['set-tag-set'] = yang.gdata.LeafList(self.set_tag_set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags(set_tag_set=n.get_opt_strs("set-tag-set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags(set_tag_set=yang.gdata.from_xml_opt_strs(n, "set-tag-set"))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags()



class srl_nokia_routing_policy__routing_policy__policy__statement__action(yang.adata.MNode):
    policy_result: ?str
    bgp: srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp
    isis: srl_nokia_routing_policy__routing_policy__policy__statement__action__isis
    route_preference: srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference
    internal_tags: srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags

    mut def __init__(self, policy_result: ?str, bgp: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp=None, isis: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__isis=None, route_preference: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference=None, internal_tags: ?srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.policy_result = policy_result
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp()
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self
        if isis is not None:
            self.isis = isis
        else:
            self.isis = srl_nokia_routing_policy__routing_policy__policy__statement__action__isis()
        self_isis = self.isis
        if self_isis is not None:
            self_isis._parent = self
        if route_preference is not None:
            self.route_preference = route_preference
        else:
            self.route_preference = srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference()
        self_route_preference = self.route_preference
        if self_route_preference is not None:
            self_route_preference._parent = self
        if internal_tags is not None:
            self.internal_tags = internal_tags
        else:
            self.internal_tags = srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags()
        self_internal_tags = self.internal_tags
        if self_internal_tags is not None:
            self_internal_tags._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _policy_result = self.policy_result
        _bgp = self.bgp
        _isis = self.isis
        _route_preference = self.route_preference
        _internal_tags = self.internal_tags
        if _policy_result is not None:
            children['policy-result'] = yang.gdata.Leaf('enumeration', _policy_result)
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        if _route_preference is not None:
            children['route-preference'] = _route_preference.to_gdata()
        if _internal_tags is not None:
            children['internal-tags'] = _internal_tags.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action(policy_result=n.get_opt_str("policy-result"), bgp=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp.from_gdata(n.get_opt_container("bgp")), isis=srl_nokia_routing_policy__routing_policy__policy__statement__action__isis.from_gdata(n.get_opt_container("isis")), route_preference=srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference.from_gdata(n.get_opt_container("route-preference")), internal_tags=srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags.from_gdata(n.get_opt_container("internal-tags")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement__action:
        if n != None:
            return srl_nokia_routing_policy__routing_policy__policy__statement__action(policy_result=yang.gdata.from_xml_opt_str(n, "policy-result"), bgp=srl_nokia_routing_policy__routing_policy__policy__statement__action__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp")), isis=srl_nokia_routing_policy__routing_policy__policy__statement__action__isis.from_xml(yang.gdata.get_xml_opt_child(n, "isis")), route_preference=srl_nokia_routing_policy__routing_policy__policy__statement__action__route_preference.from_xml(yang.gdata.get_xml_opt_child(n, "route-preference")), internal_tags=srl_nokia_routing_policy__routing_policy__policy__statement__action__internal_tags.from_xml(yang.gdata.get_xml_opt_child(n, "internal-tags")))
        return srl_nokia_routing_policy__routing_policy__policy__statement__action()



class srl_nokia_routing_policy__routing_policy__policy__statement_entry(yang.adata.MNode):
    name: str
    match: srl_nokia_routing_policy__routing_policy__policy__statement__match
    action_: srl_nokia_routing_policy__routing_policy__policy__statement__action

    mut def __init__(self, name: str, match: ?srl_nokia_routing_policy__routing_policy__policy__statement__match=None, action_: ?srl_nokia_routing_policy__routing_policy__policy__statement__action=None):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.name = name
        if match is not None:
            self.match = match
        else:
            self.match = srl_nokia_routing_policy__routing_policy__policy__statement__match()
        self_match = self.match
        if self_match is not None:
            self_match._parent = self
        if action_ is not None:
            self.action_ = action_
        else:
            self.action_ = srl_nokia_routing_policy__routing_policy__policy__statement__action()
        self_action_ = self.action_
        if self_action_ is not None:
            self_action_._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _match = self.match
        _action_ = self.action_
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _match is not None:
            children['match'] = _match.to_gdata()
        if _action_ is not None:
            children['action'] = _action_.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement_entry:
        return srl_nokia_routing_policy__routing_policy__policy__statement_entry(name=n.get_str("name"), match=srl_nokia_routing_policy__routing_policy__policy__statement__match.from_gdata(n.get_opt_container("match")), action_=srl_nokia_routing_policy__routing_policy__policy__statement__action.from_gdata(n.get_opt_container("action")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__policy__statement_entry:
        return srl_nokia_routing_policy__routing_policy__policy__statement_entry(name=yang.gdata.from_xml_str(n, "name"), match=srl_nokia_routing_policy__routing_policy__policy__statement__match.from_xml(yang.gdata.get_xml_opt_child(n, "match")), action_=srl_nokia_routing_policy__routing_policy__policy__statement__action.from_xml(yang.gdata.get_xml_opt_child(n, "action")))

class srl_nokia_routing_policy__routing_policy__policy__statement(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__policy__statement_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'statement'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__policy__statement_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__policy__statement_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__policy__statement_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__policy__statement_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__policy__statement_entry.from_xml(node))
        return res



class srl_nokia_routing_policy__routing_policy__policy_entry(yang.adata.MNode):
    name: str
    default_action: srl_nokia_routing_policy__routing_policy__policy__default_action
    statement: srl_nokia_routing_policy__routing_policy__policy__statement

    mut def __init__(self, name: str, default_action: ?srl_nokia_routing_policy__routing_policy__policy__default_action=None, statement: list[srl_nokia_routing_policy__routing_policy__policy__statement_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.name = name
        if default_action is not None:
            self.default_action = default_action
        else:
            self.default_action = srl_nokia_routing_policy__routing_policy__policy__default_action()
        self_default_action = self.default_action
        if self_default_action is not None:
            self_default_action._parent = self
        self.statement = srl_nokia_routing_policy__routing_policy__policy__statement(elements=statement)
        self.statement._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _default_action = self.default_action
        _statement = self.statement
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _default_action is not None:
            children['default-action'] = _default_action.to_gdata()
        if _statement is not None:
            children['statement'] = _statement.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy__policy_entry:
        return srl_nokia_routing_policy__routing_policy__policy_entry(name=n.get_str("name"), default_action=srl_nokia_routing_policy__routing_policy__policy__default_action.from_gdata(n.get_opt_container("default-action")), statement=srl_nokia_routing_policy__routing_policy__policy__statement.from_gdata(n.get_opt_list("statement")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_routing_policy__routing_policy__policy_entry:
        return srl_nokia_routing_policy__routing_policy__policy_entry(name=yang.gdata.from_xml_str(n, "name"), default_action=srl_nokia_routing_policy__routing_policy__policy__default_action.from_xml(yang.gdata.get_xml_opt_child(n, "default-action")), statement=srl_nokia_routing_policy__routing_policy__policy__statement.from_xml(yang.gdata.get_xml_children(n, "statement")))

class srl_nokia_routing_policy__routing_policy__policy(yang.adata.MNode):
    elements: list[srl_nokia_routing_policy__routing_policy__policy_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self._name = 'policy'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_routing_policy__routing_policy__policy_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_routing_policy__routing_policy__policy_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_routing_policy__routing_policy__policy_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_routing_policy__routing_policy__policy_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_routing_policy__routing_policy__policy_entry.from_xml(node))
        return res



class srl_nokia_routing_policy__routing_policy(yang.adata.MNode):
    as_path_set: srl_nokia_routing_policy__routing_policy__as_path_set
    prefix_set: srl_nokia_routing_policy__routing_policy__prefix_set
    community_set: srl_nokia_routing_policy__routing_policy__community_set
    standard_community_set: srl_nokia_routing_policy__routing_policy__standard_community_set
    extended_community_set: srl_nokia_routing_policy__routing_policy__extended_community_set
    tag_set: srl_nokia_routing_policy__routing_policy__tag_set
    policy: srl_nokia_routing_policy__routing_policy__policy

    mut def __init__(self, as_path_set: list[srl_nokia_routing_policy__routing_policy__as_path_set_entry]=[], prefix_set: list[srl_nokia_routing_policy__routing_policy__prefix_set_entry]=[], community_set: list[srl_nokia_routing_policy__routing_policy__community_set_entry]=[], standard_community_set: list[srl_nokia_routing_policy__routing_policy__standard_community_set_entry]=[], extended_community_set: list[srl_nokia_routing_policy__routing_policy__extended_community_set_entry]=[], tag_set: list[srl_nokia_routing_policy__routing_policy__tag_set_entry]=[], policy: list[srl_nokia_routing_policy__routing_policy__policy_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:routing-policy"
        self.as_path_set = srl_nokia_routing_policy__routing_policy__as_path_set(elements=as_path_set)
        self.as_path_set._parent = self
        self.prefix_set = srl_nokia_routing_policy__routing_policy__prefix_set(elements=prefix_set)
        self.prefix_set._parent = self
        self.community_set = srl_nokia_routing_policy__routing_policy__community_set(elements=community_set)
        self.community_set._parent = self
        self.standard_community_set = srl_nokia_routing_policy__routing_policy__standard_community_set(elements=standard_community_set)
        self.standard_community_set._parent = self
        self.extended_community_set = srl_nokia_routing_policy__routing_policy__extended_community_set(elements=extended_community_set)
        self.extended_community_set._parent = self
        self.tag_set = srl_nokia_routing_policy__routing_policy__tag_set(elements=tag_set)
        self.tag_set._parent = self
        self.policy = srl_nokia_routing_policy__routing_policy__policy(elements=policy)
        self.policy._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_path_set = self.as_path_set
        _prefix_set = self.prefix_set
        _community_set = self.community_set
        _standard_community_set = self.standard_community_set
        _extended_community_set = self.extended_community_set
        _tag_set = self.tag_set
        _policy = self.policy
        if _as_path_set is not None:
            children['as-path-set'] = _as_path_set.to_gdata()
        if _prefix_set is not None:
            children['prefix-set'] = _prefix_set.to_gdata()
        if _community_set is not None:
            children['community-set'] = _community_set.to_gdata()
        if _standard_community_set is not None:
            children['standard-community-set'] = _standard_community_set.to_gdata()
        if _extended_community_set is not None:
            children['extended-community-set'] = _extended_community_set.to_gdata()
        if _tag_set is not None:
            children['tag-set'] = _tag_set.to_gdata()
        if _policy is not None:
            children['policy'] = _policy.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:plcy:routing-policy')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_routing_policy__routing_policy:
        if n != None:
            return srl_nokia_routing_policy__routing_policy(as_path_set=srl_nokia_routing_policy__routing_policy__as_path_set.from_gdata(n.get_opt_list("as-path-set")), prefix_set=srl_nokia_routing_policy__routing_policy__prefix_set.from_gdata(n.get_opt_list("prefix-set")), community_set=srl_nokia_routing_policy__routing_policy__community_set.from_gdata(n.get_opt_list("community-set")), standard_community_set=srl_nokia_routing_policy__routing_policy__standard_community_set.from_gdata(n.get_opt_list("standard-community-set")), extended_community_set=srl_nokia_routing_policy__routing_policy__extended_community_set.from_gdata(n.get_opt_list("extended-community-set")), tag_set=srl_nokia_routing_policy__routing_policy__tag_set.from_gdata(n.get_opt_list("tag-set")), policy=srl_nokia_routing_policy__routing_policy__policy.from_gdata(n.get_opt_list("policy")))
        return srl_nokia_routing_policy__routing_policy()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_routing_policy__routing_policy:
        if n != None:
            return srl_nokia_routing_policy__routing_policy(as_path_set=srl_nokia_routing_policy__routing_policy__as_path_set.from_xml(yang.gdata.get_xml_children(n, "as-path-set")), prefix_set=srl_nokia_routing_policy__routing_policy__prefix_set.from_xml(yang.gdata.get_xml_children(n, "prefix-set")), community_set=srl_nokia_routing_policy__routing_policy__community_set.from_xml(yang.gdata.get_xml_children(n, "community-set")), standard_community_set=srl_nokia_routing_policy__routing_policy__standard_community_set.from_xml(yang.gdata.get_xml_children(n, "standard-community-set")), extended_community_set=srl_nokia_routing_policy__routing_policy__extended_community_set.from_xml(yang.gdata.get_xml_children(n, "extended-community-set")), tag_set=srl_nokia_routing_policy__routing_policy__tag_set.from_xml(yang.gdata.get_xml_children(n, "tag-set")), policy=srl_nokia_routing_policy__routing_policy__policy.from_xml(yang.gdata.get_xml_children(n, "policy")))
        return srl_nokia_routing_policy__routing_policy()



mut def from_json_srl_nokia_network_instance__network_instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__oper_mac_vrf_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__oper_vpws_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__mpls_forwarding__forward_received_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__mpls_forwarding(yang.adata.MNode):
    forward_received_packets: ?bool

    mut def __init__(self, forward_received_packets: ?bool):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.forward_received_packets = forward_received_packets

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forward_received_packets = self.forward_received_packets
        if _forward_received_packets is not None:
            children['forward-received-packets'] = yang.gdata.Leaf('boolean', _forward_received_packets)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__mpls_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__mpls_forwarding(forward_received_packets=n.get_opt_bool("forward-received-packets"))
        return srl_nokia_network_instance__network_instance__mpls_forwarding()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__mpls_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__mpls_forwarding(forward_received_packets=yang.gdata.from_xml_opt_bool(n, "forward-received-packets"))
        return srl_nokia_network_instance__network_instance__mpls_forwarding()



mut def from_json_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv4_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv6_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup__network_instance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup(yang.adata.MNode):
    network_instance: ?str

    mut def __init__(self, network_instance: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.network_instance = network_instance

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _network_instance = self.network_instance
        if _network_instance is not None:
            children['network-instance'] = yang.gdata.Leaf('leafref', _network_instance)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup(network_instance=n.get_opt_str("network-instance"))
        return srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup(network_instance=yang.gdata.from_xml_opt_str(n, "network-instance"))
        return srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup()



class srl_nokia_network_instance__network_instance__ip_forwarding(yang.adata.MNode):
    receive_ipv4_check: ?bool
    receive_ipv6_check: ?bool
    last_resort_lookup: srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup

    mut def __init__(self, receive_ipv4_check: ?bool, receive_ipv6_check: ?bool, last_resort_lookup: ?srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.receive_ipv4_check = receive_ipv4_check
        self.receive_ipv6_check = receive_ipv6_check
        if last_resort_lookup is not None:
            self.last_resort_lookup = last_resort_lookup
        else:
            self.last_resort_lookup = srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup()
        self_last_resort_lookup = self.last_resort_lookup
        if self_last_resort_lookup is not None:
            self_last_resort_lookup._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive_ipv4_check = self.receive_ipv4_check
        _receive_ipv6_check = self.receive_ipv6_check
        _last_resort_lookup = self.last_resort_lookup
        if _receive_ipv4_check is not None:
            children['receive-ipv4-check'] = yang.gdata.Leaf('boolean', _receive_ipv4_check)
        if _receive_ipv6_check is not None:
            children['receive-ipv6-check'] = yang.gdata.Leaf('boolean', _receive_ipv6_check)
        if _last_resort_lookup is not None:
            children['last-resort-lookup'] = _last_resort_lookup.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__ip_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_forwarding(receive_ipv4_check=n.get_opt_bool("receive-ipv4-check"), receive_ipv6_check=n.get_opt_bool("receive-ipv6-check"), last_resort_lookup=srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup.from_gdata(n.get_opt_container("last-resort-lookup")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__ip_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_forwarding(receive_ipv4_check=yang.gdata.from_xml_opt_bool(n, "receive-ipv4-check"), receive_ipv6_check=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-check"), last_resort_lookup=srl_nokia_network_instance__network_instance__ip_forwarding__last_resort_lookup.from_xml(yang.gdata.get_xml_opt_child(n, "last-resort-lookup")))
        return None



mut def from_json_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__hash_buckets_per_path(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__max_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(yang.adata.MNode):
    ip_prefix: str
    hash_buckets_per_path: int
    max_paths: int

    mut def __init__(self, ip_prefix: str, hash_buckets_per_path: ?int=None, max_paths: ?int=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.ip_prefix = ip_prefix
        if hash_buckets_per_path != None:
            self.hash_buckets_per_path = hash_buckets_per_path
        else:
            self.hash_buckets_per_path = 1
        if max_paths != None:
            self.max_paths = max_paths
        else:
            self.max_paths = 1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        _hash_buckets_per_path = self.hash_buckets_per_path
        _max_paths = self.max_paths
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('union', _ip_prefix)
        if _hash_buckets_per_path is not None:
            children['hash-buckets-per-path'] = yang.gdata.Leaf('uint8', _hash_buckets_per_path)
        if _max_paths is not None:
            children['max-paths'] = yang.gdata.Leaf('uint8', _max_paths)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry:
        return srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(ip_prefix=n.get_str("ip-prefix"), hash_buckets_per_path=n.get_opt_int("hash-buckets-per-path"), max_paths=n.get_opt_int("max-paths"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry:
        return srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(ip_prefix=yang.gdata.from_xml_str(n, "ip-prefix"), hash_buckets_per_path=yang.gdata.from_xml_opt_int(n, "hash-buckets-per-path"), max_paths=yang.gdata.from_xml_opt_int(n, "max-paths"))

class srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'resilient-hash-prefix'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__ip_load_balancing(yang.adata.MNode):
    resilient_hash_prefix: srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix

    mut def __init__(self, resilient_hash_prefix: list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.resilient_hash_prefix = srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix(elements=resilient_hash_prefix)
        self.resilient_hash_prefix._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _resilient_hash_prefix = self.resilient_hash_prefix
        if _resilient_hash_prefix is not None:
            children['resilient-hash-prefix'] = _resilient_hash_prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__ip_load_balancing:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_load_balancing(resilient_hash_prefix=srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix.from_gdata(n.get_opt_list("resilient-hash-prefix")))
        return srl_nokia_network_instance__network_instance__ip_load_balancing()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__ip_load_balancing:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_load_balancing(resilient_hash_prefix=srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix.from_xml(yang.gdata.get_xml_children(n, "resilient-hash-prefix")))
        return srl_nokia_network_instance__network_instance__ip_load_balancing()



mut def from_json_srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy__import_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy(yang.adata.MNode):
    import_policy: ?str
    export_policy: ?str

    mut def __init__(self, import_policy: ?str, export_policy: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.import_policy = import_policy
        self.export_policy = export_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_policy = self.import_policy
        _export_policy = self.export_policy
        if _import_policy is not None:
            children['import-policy'] = yang.gdata.Leaf('leafref', _import_policy)
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy:
        if n != None:
            return srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy(import_policy=n.get_opt_str("import-policy"), export_policy=n.get_opt_str("export-policy"))
        return srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy:
        if n != None:
            return srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy(import_policy=yang.gdata.from_xml_opt_str(n, "import-policy"), export_policy=yang.gdata.from_xml_opt_str(n, "export-policy"))
        return srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy()



class srl_nokia_network_instance__network_instance__inter_instance_policies(yang.adata.MNode):
    apply_policy: srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy

    mut def __init__(self, apply_policy: ?srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if apply_policy is not None:
            self.apply_policy = apply_policy
        else:
            self.apply_policy = srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy()
        self_apply_policy = self.apply_policy
        if self_apply_policy is not None:
            self_apply_policy._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _apply_policy = self.apply_policy
        if _apply_policy is not None:
            children['apply-policy'] = _apply_policy.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__inter_instance_policies:
        if n != None:
            return srl_nokia_network_instance__network_instance__inter_instance_policies(apply_policy=srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy.from_gdata(n.get_opt_container("apply-policy")))
        return srl_nokia_network_instance__network_instance__inter_instance_policies()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__inter_instance_policies:
        if n != None:
            return srl_nokia_network_instance__network_instance__inter_instance_policies(apply_policy=srl_nokia_network_instance__network_instance__inter_instance_policies__apply_policy.from_xml(yang.gdata.get_xml_opt_child(n, "apply-policy")))
        return srl_nokia_network_instance__network_instance__inter_instance_policies()



mut def from_json_srl_nokia_network_instance__network_instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__interface_ref__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__interface_ref__subinterface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__interface__interface_ref(yang.adata.MNode):
    interface: ?str
    subinterface: ?str

    mut def __init__(self, interface: ?str, subinterface: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.interface = interface
        self.subinterface = subinterface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        _subinterface = self.subinterface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('leafref', _interface)
        if _subinterface is not None:
            children['subinterface'] = yang.gdata.Leaf('leafref', _subinterface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__interface__interface_ref:
        if n != None:
            return srl_nokia_network_instance__network_instance__interface__interface_ref(interface=n.get_opt_str("interface"), subinterface=n.get_opt_str("subinterface"))
        return srl_nokia_network_instance__network_instance__interface__interface_ref()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__interface__interface_ref:
        if n != None:
            return srl_nokia_network_instance__network_instance__interface__interface_ref(interface=yang.gdata.from_xml_opt_str(n, "interface"), subinterface=yang.gdata.from_xml_opt_str(n, "subinterface"))
        return srl_nokia_network_instance__network_instance__interface__interface_ref()



mut def from_json_srl_nokia_network_instance__network_instance__interface__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__bridge_table__split_horizon_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__bridge_table__mac_relearn_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__bridge_table__multicast_forwarding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__bridge_table__oper_mac_learning(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__interface__bridge_table__oper_mac_learning_disabled_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__interface__bridge_table(yang.adata.MNode):
    split_horizon_group: ?str
    mac_relearn_only: bool
    multicast_forwarding: ?str
    oper_mac_learning: ?str
    oper_mac_learning_disabled_reason: ?str

    mut def __init__(self, split_horizon_group: ?str, mac_relearn_only: ?bool=None, multicast_forwarding: ?str, oper_mac_learning: ?str, oper_mac_learning_disabled_reason: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.split_horizon_group = split_horizon_group
        if mac_relearn_only != None:
            self.mac_relearn_only = mac_relearn_only
        else:
            self.mac_relearn_only = True
        self.multicast_forwarding = multicast_forwarding
        self.oper_mac_learning = oper_mac_learning
        self.oper_mac_learning_disabled_reason = oper_mac_learning_disabled_reason

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _split_horizon_group = self.split_horizon_group
        _mac_relearn_only = self.mac_relearn_only
        _multicast_forwarding = self.multicast_forwarding
        _oper_mac_learning = self.oper_mac_learning
        _oper_mac_learning_disabled_reason = self.oper_mac_learning_disabled_reason
        if _split_horizon_group is not None:
            children['split-horizon-group'] = yang.gdata.Leaf('leafref', _split_horizon_group)
        if _mac_relearn_only is not None:
            children['mac-relearn-only'] = yang.gdata.Leaf('boolean', _mac_relearn_only)
        if _multicast_forwarding is not None:
            children['multicast-forwarding'] = yang.gdata.Leaf('enumeration', _multicast_forwarding)
        if _oper_mac_learning is not None:
            children['oper-mac-learning'] = yang.gdata.Leaf('enumeration', _oper_mac_learning)
        if _oper_mac_learning_disabled_reason is not None:
            children['oper-mac-learning-disabled-reason'] = yang.gdata.Leaf('enumeration', _oper_mac_learning_disabled_reason)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__interface__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__interface__bridge_table(split_horizon_group=n.get_opt_str("split-horizon-group"), mac_relearn_only=n.get_opt_bool("mac-relearn-only"), multicast_forwarding=n.get_opt_str("multicast-forwarding"), oper_mac_learning=n.get_opt_str("oper-mac-learning"), oper_mac_learning_disabled_reason=n.get_opt_str("oper-mac-learning-disabled-reason"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__interface__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__interface__bridge_table(split_horizon_group=yang.gdata.from_xml_opt_str(n, "split-horizon-group"), mac_relearn_only=yang.gdata.from_xml_opt_bool(n, "mac-relearn-only"), multicast_forwarding=yang.gdata.from_xml_opt_str(n, "multicast-forwarding"), oper_mac_learning=yang.gdata.from_xml_opt_str(n, "oper-mac-learning"), oper_mac_learning_disabled_reason=yang.gdata.from_xml_opt_str(n, "oper-mac-learning-disabled-reason"))
        return None



mut def from_json_srl_nokia_network_instance__network_instance__interface__connection_point(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__interface_entry(yang.adata.MNode):
    name: str
    interface_ref: srl_nokia_network_instance__network_instance__interface__interface_ref
    oper_state: ?str
    oper_down_reason: ?str
    index: int
    bridge_table: ?srl_nokia_network_instance__network_instance__interface__bridge_table
    connection_point: ?str

    mut def __init__(self, name: str, interface_ref: ?srl_nokia_network_instance__network_instance__interface__interface_ref=None, oper_state: ?str, oper_down_reason: ?str, index: ?int=None, bridge_table: ?srl_nokia_network_instance__network_instance__interface__bridge_table=None, connection_point: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.name = name
        if interface_ref is not None:
            self.interface_ref = interface_ref
        else:
            self.interface_ref = srl_nokia_network_instance__network_instance__interface__interface_ref()
        self_interface_ref = self.interface_ref
        if self_interface_ref is not None:
            self_interface_ref._parent = self
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason
        if index != None:
            self.index = index
        else:
            self.index = 0
        self.bridge_table = bridge_table
        self_bridge_table = self.bridge_table
        if self_bridge_table is not None:
            self_bridge_table._parent = self
        self.connection_point = connection_point

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__interface__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _interface_ref = self.interface_ref
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        _index = self.index
        _bridge_table = self.bridge_table
        _connection_point = self.connection_point
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _interface_ref is not None:
            children['interface-ref'] = _interface_ref.to_gdata()
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint64', _index)
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        if _connection_point is not None:
            children['connection-point'] = yang.gdata.Leaf('leafref', _connection_point)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__interface_entry:
        return srl_nokia_network_instance__network_instance__interface_entry(name=n.get_str("name"), interface_ref=srl_nokia_network_instance__network_instance__interface__interface_ref.from_gdata(n.get_opt_container("interface-ref")), oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"), index=n.get_opt_int("index"), bridge_table=srl_nokia_network_instance__network_instance__interface__bridge_table.from_gdata(n.get_opt_container("bridge-table")), connection_point=n.get_opt_str("connection-point"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__interface_entry:
        return srl_nokia_network_instance__network_instance__interface_entry(name=yang.gdata.from_xml_str(n, "name"), interface_ref=srl_nokia_network_instance__network_instance__interface__interface_ref.from_xml(yang.gdata.get_xml_opt_child(n, "interface-ref")), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"), index=yang.gdata.from_xml_opt_int(n, "index"), bridge_table=srl_nokia_network_instance__network_instance__interface__bridge_table.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-table")), connection_point=yang.gdata.from_xml_opt_str(n, "connection-point"))

class srl_nokia_network_instance__network_instance__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__interface_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__interface_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__system_ipv4_address__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__system_ipv4_address__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__system_ipv4_address(yang.adata.MNode):
    oper_state: ?str
    oper_down_reason: ?str

    mut def __init__(self, oper_state: ?str, oper_down_reason: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__system_ipv4_address:
        if n != None:
            return srl_nokia_network_instance__network_instance__system_ipv4_address(oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"))
        return srl_nokia_network_instance__network_instance__system_ipv4_address()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__system_ipv4_address:
        if n != None:
            return srl_nokia_network_instance__network_instance__system_ipv4_address(oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"))
        return srl_nokia_network_instance__network_instance__system_ipv4_address()



mut def from_json_srl_nokia_network_instance__network_instance__system_ipv6_address__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__system_ipv6_address__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__system_ipv6_address(yang.adata.MNode):
    oper_state: ?str
    oper_down_reason: ?str

    mut def __init__(self, oper_state: ?str, oper_down_reason: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__system_ipv6_address:
        if n != None:
            return srl_nokia_network_instance__network_instance__system_ipv6_address(oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"))
        return srl_nokia_network_instance__network_instance__system_ipv6_address()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__system_ipv6_address:
        if n != None:
            return srl_nokia_network_instance__network_instance__system_ipv6_address(oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"))
        return srl_nokia_network_instance__network_instance__system_ipv6_address()



mut def from_json_srl_nokia_network_instance__network_instance__vxlan_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__vxlan_interface__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__vxlan_interface__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__vxlan_interface_entry(yang.adata.MNode):
    name: str
    oper_state: ?str
    oper_down_reason: ?str

    mut def __init__(self, name: str, oper_state: ?str, oper_down_reason: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.name = name
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__vxlan_interface_entry:
        return srl_nokia_network_instance__network_instance__vxlan_interface_entry(name=n.get_str("name"), oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__vxlan_interface_entry:
        return srl_nokia_network_instance__network_instance__vxlan_interface_entry(name=yang.gdata.from_xml_str(n, "name"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"))

class srl_nokia_network_instance__network_instance__vxlan_interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'vxlan-interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__vxlan_interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__vxlan_interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__vxlan_interface_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__total__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__total__in_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__total__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__total__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__icmp__statistics__total(yang.adata.MNode):
    in_packets: int
    in_error_packets: int
    out_packets: int
    out_error_packets: int

    mut def __init__(self, in_packets: ?int=None, in_error_packets: ?int=None, out_packets: ?int=None, out_error_packets: ?int=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if in_error_packets != None:
            self.in_error_packets = in_error_packets
        else:
            self.in_error_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_packets = self.in_packets
        _in_error_packets = self.in_error_packets
        _out_packets = self.out_packets
        _out_error_packets = self.out_error_packets
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _in_error_packets is not None:
            children['in-error-packets'] = yang.gdata.Leaf('uint64', _in_error_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__icmp__statistics__total:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp__statistics__total(in_packets=n.get_opt_int("in-packets"), in_error_packets=n.get_opt_int("in-error-packets"), out_packets=n.get_opt_int("out-packets"), out_error_packets=n.get_opt_int("out-error-packets"))
        return srl_nokia_network_instance__network_instance__icmp__statistics__total()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__icmp__statistics__total:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp__statistics__total(in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), in_error_packets=yang.gdata.from_xml_opt_int(n, "in-error-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"))
        return srl_nokia_network_instance__network_instance__icmp__statistics__total()



mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__type__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__type__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__type__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__type__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__icmp__statistics__type_entry(yang.adata.MNode):
    name: str
    in_packets: int
    out_packets: int
    out_error_packets: int

    mut def __init__(self, name: str, in_packets: ?int=None, out_packets: ?int=None, out_error_packets: ?int=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.name = name
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _in_packets = self.in_packets
        _out_packets = self.out_packets
        _out_error_packets = self.out_error_packets
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__icmp__statistics__type_entry:
        return srl_nokia_network_instance__network_instance__icmp__statistics__type_entry(name=n.get_str("name"), in_packets=n.get_opt_int("in-packets"), out_packets=n.get_opt_int("out-packets"), out_error_packets=n.get_opt_int("out-error-packets"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__icmp__statistics__type_entry:
        return srl_nokia_network_instance__network_instance__icmp__statistics__type_entry(name=yang.gdata.from_xml_str(n, "name"), in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"))

class srl_nokia_network_instance__network_instance__icmp__statistics__type(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__icmp__statistics__type_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'type'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__icmp__statistics__type_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__icmp__statistics__type_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__icmp__statistics__type_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__icmp__statistics__type_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__icmp__statistics__type_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__icmp__statistics__last_clear(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_network_instance__network_instance__icmp__statistics(yang.adata.MNode):
    total: srl_nokia_network_instance__network_instance__icmp__statistics__total
    type: srl_nokia_network_instance__network_instance__icmp__statistics__type
    last_clear: ?str

    mut def __init__(self, total: ?srl_nokia_network_instance__network_instance__icmp__statistics__total=None, type: list[srl_nokia_network_instance__network_instance__icmp__statistics__type_entry]=[], last_clear: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if total is not None:
            self.total = total
        else:
            self.total = srl_nokia_network_instance__network_instance__icmp__statistics__total()
        self_total = self.total
        if self_total is not None:
            self_total._parent = self
        self.type = srl_nokia_network_instance__network_instance__icmp__statistics__type(elements=type)
        self.type._parent = self
        self.last_clear = last_clear

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _total = self.total
        _type = self.type
        _last_clear = self.last_clear
        if _total is not None:
            children['total'] = _total.to_gdata()
        if _type is not None:
            children['type'] = _type.to_gdata()
        if _last_clear is not None:
            children['last-clear'] = yang.gdata.Leaf('string', _last_clear)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__icmp__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp__statistics(total=srl_nokia_network_instance__network_instance__icmp__statistics__total.from_gdata(n.get_opt_container("total")), type=srl_nokia_network_instance__network_instance__icmp__statistics__type.from_gdata(n.get_opt_list("type")), last_clear=n.get_opt_str("last-clear"))
        return srl_nokia_network_instance__network_instance__icmp__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__icmp__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp__statistics(total=srl_nokia_network_instance__network_instance__icmp__statistics__total.from_xml(yang.gdata.get_xml_opt_child(n, "total")), type=srl_nokia_network_instance__network_instance__icmp__statistics__type.from_xml(yang.gdata.get_xml_children(n, "type")), last_clear=yang.gdata.from_xml_opt_str(n, "last-clear"))
        return srl_nokia_network_instance__network_instance__icmp__statistics()



class srl_nokia_network_instance__network_instance__icmp(yang.adata.MNode):
    statistics: srl_nokia_network_instance__network_instance__icmp__statistics

    mut def __init__(self, statistics: ?srl_nokia_network_instance__network_instance__icmp__statistics=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__icmp__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _statistics = self.statistics
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__icmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp(statistics=srl_nokia_network_instance__network_instance__icmp__statistics.from_gdata(n.get_opt_container("statistics")))
        return srl_nokia_network_instance__network_instance__icmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__icmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp(statistics=srl_nokia_network_instance__network_instance__icmp__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")))
        return srl_nokia_network_instance__network_instance__icmp()



mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__total__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__total__in_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__total__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__total__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__icmp6__statistics__total(yang.adata.MNode):
    in_packets: int
    in_error_packets: int
    out_packets: int
    out_error_packets: int

    mut def __init__(self, in_packets: ?int=None, in_error_packets: ?int=None, out_packets: ?int=None, out_error_packets: ?int=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if in_error_packets != None:
            self.in_error_packets = in_error_packets
        else:
            self.in_error_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_packets = self.in_packets
        _in_error_packets = self.in_error_packets
        _out_packets = self.out_packets
        _out_error_packets = self.out_error_packets
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _in_error_packets is not None:
            children['in-error-packets'] = yang.gdata.Leaf('uint64', _in_error_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__icmp6__statistics__total:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp6__statistics__total(in_packets=n.get_opt_int("in-packets"), in_error_packets=n.get_opt_int("in-error-packets"), out_packets=n.get_opt_int("out-packets"), out_error_packets=n.get_opt_int("out-error-packets"))
        return srl_nokia_network_instance__network_instance__icmp6__statistics__total()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__icmp6__statistics__total:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp6__statistics__total(in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), in_error_packets=yang.gdata.from_xml_opt_int(n, "in-error-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"))
        return srl_nokia_network_instance__network_instance__icmp6__statistics__total()



mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__type__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__type__in_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__type__out_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__type__out_error_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry(yang.adata.MNode):
    name: str
    in_packets: int
    out_packets: int
    out_error_packets: int

    mut def __init__(self, name: str, in_packets: ?int=None, out_packets: ?int=None, out_error_packets: ?int=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.name = name
        if in_packets != None:
            self.in_packets = in_packets
        else:
            self.in_packets = 0
        if out_packets != None:
            self.out_packets = out_packets
        else:
            self.out_packets = 0
        if out_error_packets != None:
            self.out_error_packets = out_error_packets
        else:
            self.out_error_packets = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _in_packets = self.in_packets
        _out_packets = self.out_packets
        _out_error_packets = self.out_error_packets
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        if _in_packets is not None:
            children['in-packets'] = yang.gdata.Leaf('uint64', _in_packets)
        if _out_packets is not None:
            children['out-packets'] = yang.gdata.Leaf('uint64', _out_packets)
        if _out_error_packets is not None:
            children['out-error-packets'] = yang.gdata.Leaf('uint64', _out_error_packets)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry:
        return srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry(name=n.get_str("name"), in_packets=n.get_opt_int("in-packets"), out_packets=n.get_opt_int("out-packets"), out_error_packets=n.get_opt_int("out-error-packets"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry:
        return srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry(name=yang.gdata.from_xml_str(n, "name"), in_packets=yang.gdata.from_xml_opt_int(n, "in-packets"), out_packets=yang.gdata.from_xml_opt_int(n, "out-packets"), out_error_packets=yang.gdata.from_xml_opt_int(n, "out-error-packets"))

class srl_nokia_network_instance__network_instance__icmp6__statistics__type(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'type'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__icmp6__statistics__last_clear(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_network_instance__network_instance__icmp6__statistics(yang.adata.MNode):
    total: srl_nokia_network_instance__network_instance__icmp6__statistics__total
    type: srl_nokia_network_instance__network_instance__icmp6__statistics__type
    last_clear: ?str

    mut def __init__(self, total: ?srl_nokia_network_instance__network_instance__icmp6__statistics__total=None, type: list[srl_nokia_network_instance__network_instance__icmp6__statistics__type_entry]=[], last_clear: ?str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if total is not None:
            self.total = total
        else:
            self.total = srl_nokia_network_instance__network_instance__icmp6__statistics__total()
        self_total = self.total
        if self_total is not None:
            self_total._parent = self
        self.type = srl_nokia_network_instance__network_instance__icmp6__statistics__type(elements=type)
        self.type._parent = self
        self.last_clear = last_clear

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _total = self.total
        _type = self.type
        _last_clear = self.last_clear
        if _total is not None:
            children['total'] = _total.to_gdata()
        if _type is not None:
            children['type'] = _type.to_gdata()
        if _last_clear is not None:
            children['last-clear'] = yang.gdata.Leaf('string', _last_clear)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__icmp6__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp6__statistics(total=srl_nokia_network_instance__network_instance__icmp6__statistics__total.from_gdata(n.get_opt_container("total")), type=srl_nokia_network_instance__network_instance__icmp6__statistics__type.from_gdata(n.get_opt_list("type")), last_clear=n.get_opt_str("last-clear"))
        return srl_nokia_network_instance__network_instance__icmp6__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__icmp6__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp6__statistics(total=srl_nokia_network_instance__network_instance__icmp6__statistics__total.from_xml(yang.gdata.get_xml_opt_child(n, "total")), type=srl_nokia_network_instance__network_instance__icmp6__statistics__type.from_xml(yang.gdata.get_xml_children(n, "type")), last_clear=yang.gdata.from_xml_opt_str(n, "last-clear"))
        return srl_nokia_network_instance__network_instance__icmp6__statistics()



class srl_nokia_network_instance__network_instance__icmp6(yang.adata.MNode):
    statistics: srl_nokia_network_instance__network_instance__icmp6__statistics

    mut def __init__(self, statistics: ?srl_nokia_network_instance__network_instance__icmp6__statistics=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__icmp6__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _statistics = self.statistics
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__icmp6:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp6(statistics=srl_nokia_network_instance__network_instance__icmp6__statistics.from_gdata(n.get_opt_container("statistics")))
        return srl_nokia_network_instance__network_instance__icmp6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__icmp6:
        if n != None:
            return srl_nokia_network_instance__network_instance__icmp6(statistics=srl_nokia_network_instance__network_instance__icmp6__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")))
        return srl_nokia_network_instance__network_instance__icmp6()



class srl_nokia_network_instance__network_instance__protocols__bgp_evpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn()
        return None



class srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        return None



class srl_nokia_network_instance__network_instance__protocols__directly_connected(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__directly_connected:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__directly_connected()
        return srl_nokia_network_instance__network_instance__protocols__directly_connected()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__directly_connected:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__directly_connected()
        return srl_nokia_network_instance__network_instance__protocols__directly_connected()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__under_maintenance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__maintenance_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__autonomous_system(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(yang.adata.MNode):
    mode: str
    leading_only: bool
    ignore_peer_as: bool

    mut def __init__(self, mode: ?str=None, leading_only: ?bool=None, ignore_peer_as: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mode != None:
            self.mode = mode
        else:
            self.mode = "disabled"
        if leading_only != None:
            self.leading_only = leading_only
        else:
            self.leading_only = False
        if ignore_peer_as != None:
            self.ignore_peer_as = ignore_peer_as
        else:
            self.ignore_peer_as = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        _leading_only = self.leading_only
        _ignore_peer_as = self.ignore_peer_as
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(mode=n.get_opt_str("mode"), leading_only=n.get_opt_bool("leading-only"), ignore_peer_as=n.get_opt_bool("ignore-peer-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(mode=yang.gdata.from_xml_opt_str(n, "mode"), leading_only=yang.gdata.from_xml_opt_bool(n, "leading-only"), ignore_peer_as=yang.gdata.from_xml_opt_bool(n, "ignore-peer-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()



class srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(yang.adata.MNode):
    allow_own_as: int
    remove_private_as: srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as

    mut def __init__(self, allow_own_as: ?int=None, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allow_own_as != None:
            self.allow_own_as = allow_own_as
        else:
            self.allow_own_as = 0
        if remove_private_as is not None:
            self.remove_private_as = remove_private_as
        else:
            self.remove_private_as = srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()
        self_remove_private_as = self.remove_private_as
        if self_remove_private_as is not None:
            self_remove_private_as._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        _remove_private_as = self.remove_private_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(allow_own_as=n.get_opt_int("allow-own-as"), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as.from_gdata(n.get_opt_container("remove-private-as")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(allow_own_as=yang.gdata.from_xml_opt_int(n, "allow-own-as"), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as.from_xml(yang.gdata.get_xml_opt_child(n, "remove-private-as")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str

    mut def __init__(self, keychain: ?str, password: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.keychain = keychain
        self.password = password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        _password = self.password
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__authentication(keychain=n.get_opt_str("keychain"), password=n.get_opt_str("password"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__authentication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__authentication(keychain=yang.gdata.from_xml_opt_str(n, "keychain"), password=yang.gdata.from_xml_opt_str(n, "password"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__authentication()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection__always_compare_med(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection__advertise_inactive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection(yang.adata.MNode):
    always_compare_med: bool
    advertise_inactive: bool

    mut def __init__(self, always_compare_med: ?bool=None, advertise_inactive: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if always_compare_med != None:
            self.always_compare_med = always_compare_med
        else:
            self.always_compare_med = False
        if advertise_inactive != None:
            self.advertise_inactive = advertise_inactive
        else:
            self.advertise_inactive = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always_compare_med = self.always_compare_med
        _advertise_inactive = self.advertise_inactive
        if _always_compare_med is not None:
            children['always-compare-med'] = yang.gdata.Leaf('boolean', _always_compare_med)
        if _advertise_inactive is not None:
            children['advertise-inactive'] = yang.gdata.Leaf('boolean', _advertise_inactive)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection(always_compare_med=n.get_opt_bool("always-compare-med"), advertise_inactive=n.get_opt_bool("advertise-inactive"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection(always_compare_med=yang.gdata.from_xml_opt_bool(n, "always-compare-med"), advertise_inactive=yang.gdata.from_xml_opt_bool(n, "advertise-inactive"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__dynamic_label_block(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__dynamic_label_block_status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label__transmit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label(yang.adata.MNode):
    transmit: str

    mut def __init__(self, transmit: ?str=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if transmit != None:
            self.transmit = transmit
        else:
            self.transmit = "disable"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _transmit = self.transmit
        if _transmit is not None:
            children['transmit'] = yang.gdata.Leaf('enumeration', _transmit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label(transmit=n.get_opt_str("transmit"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label(transmit=yang.gdata.from_xml_opt_str(n, "transmit"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install__program_label_swap(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install__program_route(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install(yang.adata.MNode):
    program_label_swap: bool
    program_route: bool

    mut def __init__(self, program_label_swap: ?bool=None, program_route: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if program_label_swap != None:
            self.program_label_swap = program_label_swap
        else:
            self.program_label_swap = False
        if program_route != None:
            self.program_route = program_route
        else:
            self.program_route = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _program_label_swap = self.program_label_swap
        _program_route = self.program_route
        if _program_label_swap is not None:
            children['program-label-swap'] = yang.gdata.Leaf('boolean', _program_label_swap)
        if _program_route is not None:
            children['program-route'] = yang.gdata.Leaf('boolean', _program_route)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install(program_label_swap=n.get_opt_bool("program-label-swap"), program_route=n.get_opt_bool("program-route"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install(program_label_swap=yang.gdata.from_xml_opt_bool(n, "program-label-swap"), program_route=yang.gdata.from_xml_opt_bool(n, "program-route"))
        return None



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast(yang.adata.MNode):
    dynamic_label_block: ?str
    dynamic_label_block_status: ?str
    entropy_label: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label
    selective_labeled_unicast_install: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install

    mut def __init__(self, dynamic_label_block: ?str, dynamic_label_block_status: ?str, entropy_label: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label=None, selective_labeled_unicast_install: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.dynamic_label_block = dynamic_label_block
        self.dynamic_label_block_status = dynamic_label_block_status
        if entropy_label is not None:
            self.entropy_label = entropy_label
        else:
            self.entropy_label = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label()
        self_entropy_label = self.entropy_label
        if self_entropy_label is not None:
            self_entropy_label._parent = self
        self.selective_labeled_unicast_install = selective_labeled_unicast_install
        self_selective_labeled_unicast_install = self.selective_labeled_unicast_install
        if self_selective_labeled_unicast_install is not None:
            self_selective_labeled_unicast_install._parent = self

    mut def create_selective_labeled_unicast_install(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install()
        self.selective_labeled_unicast_install = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dynamic_label_block = self.dynamic_label_block
        _dynamic_label_block_status = self.dynamic_label_block_status
        _entropy_label = self.entropy_label
        _selective_labeled_unicast_install = self.selective_labeled_unicast_install
        if _dynamic_label_block is not None:
            children['dynamic-label-block'] = yang.gdata.Leaf('leafref', _dynamic_label_block)
        if _dynamic_label_block_status is not None:
            children['dynamic-label-block-status'] = yang.gdata.Leaf('enumeration', _dynamic_label_block_status)
        if _entropy_label is not None:
            children['entropy-label'] = _entropy_label.to_gdata()
        if _selective_labeled_unicast_install is not None:
            children['selective-labeled-unicast-install'] = _selective_labeled_unicast_install.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast(dynamic_label_block=n.get_opt_str("dynamic-label-block"), dynamic_label_block_status=n.get_opt_str("dynamic-label-block-status"), entropy_label=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label.from_gdata(n.get_opt_container("entropy-label")), selective_labeled_unicast_install=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install.from_gdata(n.get_opt_container("selective-labeled-unicast-install")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast(dynamic_label_block=yang.gdata.from_xml_opt_str(n, "dynamic-label-block"), dynamic_label_block_status=yang.gdata.from_xml_opt_str(n, "dynamic-label-block-status"), entropy_label=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label.from_xml(yang.gdata.get_xml_opt_child(n, "entropy-label")), selective_labeled_unicast_install=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install.from_xml(yang.gdata.get_xml_opt_child(n, "selective-labeled-unicast-install")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn__dynamic_label_block(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn__dynamic_label_block_status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn(yang.adata.MNode):
    dynamic_label_block: ?str
    dynamic_label_block_status: ?str

    mut def __init__(self, dynamic_label_block: ?str, dynamic_label_block_status: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.dynamic_label_block = dynamic_label_block
        self.dynamic_label_block_status = dynamic_label_block_status

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dynamic_label_block = self.dynamic_label_block
        _dynamic_label_block_status = self.dynamic_label_block_status
        if _dynamic_label_block is not None:
            children['dynamic-label-block'] = yang.gdata.Leaf('leafref', _dynamic_label_block)
        if _dynamic_label_block_status is not None:
            children['dynamic-label-block-status'] = yang.gdata.Leaf('enumeration', _dynamic_label_block_status)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn(dynamic_label_block=n.get_opt_str("dynamic-label-block"), dynamic_label_block_status=n.get_opt_str("dynamic-label-block-status"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn(dynamic_label_block=yang.gdata.from_xml_opt_str(n, "dynamic-label-block"), dynamic_label_block_status=yang.gdata.from_xml_opt_str(n, "dynamic-label-block-status"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution(yang.adata.MNode):
    admin_state: str
    ignore_default_routes: bool

    mut def __init__(self, admin_state: ?str=None, ignore_default_routes: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if ignore_default_routes != None:
            self.ignore_default_routes = ignore_default_routes
        else:
            self.ignore_default_routes = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ignore_default_routes = self.ignore_default_routes
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=n.get_opt_str("admin-state"), ignore_default_routes=n.get_opt_bool("ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ignore_default_routes=yang.gdata.from_xml_opt_bool(n, "ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _selection_attributes = self.selection_attributes
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if route_resolution is not None:
            self.route_resolution = route_resolution
        else:
            self.route_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution()
        self_route_resolution = self.route_resolution
        if self_route_resolution is not None:
            self_route_resolution._parent = self
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        _tunnel_resolution = self.tunnel_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution.from_gdata(n.get_opt_container("route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution(yang.adata.MNode):
    admin_state: str
    ignore_default_routes: bool

    mut def __init__(self, admin_state: ?str=None, ignore_default_routes: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if ignore_default_routes != None:
            self.ignore_default_routes = ignore_default_routes
        else:
            self.ignore_default_routes = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ignore_default_routes = self.ignore_default_routes
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=n.get_opt_str("admin-state"), ignore_default_routes=n.get_opt_bool("ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ignore_default_routes=yang.gdata.from_xml_opt_bool(n, "ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _selection_attributes = self.selection_attributes
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if route_resolution is not None:
            self.route_resolution = route_resolution
        else:
            self.route_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution()
        self_route_resolution = self.route_resolution
        if self_route_resolution is not None:
            self_route_resolution._parent = self
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        _tunnel_resolution = self.tunnel_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution.from_gdata(n.get_opt_container("route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ipv4_next_hops is not None:
            self.ipv4_next_hops = ipv4_next_hops
        else:
            self.ipv4_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops()
        self_ipv4_next_hops = self.ipv4_next_hops
        if self_ipv4_next_hops is not None:
            self_ipv4_next_hops._parent = self
        if ipv6_next_hops is not None:
            self.ipv6_next_hops = ipv6_next_hops
        else:
            self.ipv6_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops()
        self_ipv6_next_hops = self.ipv6_next_hops
        if self_ipv6_next_hops is not None:
            self_ipv6_next_hops._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_container("ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_container("ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn(yang.adata.MNode):
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution

    mut def __init__(self, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if next_hop_resolution is not None:
            self.next_hop_resolution = next_hop_resolution
        else:
            self.next_hop_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution()
        self_next_hop_resolution = self.next_hop_resolution
        if self_next_hop_resolution is not None:
            self_next_hop_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn(next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution.from_gdata(n.get_opt_container("next-hop-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn(next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn()



class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label(yang.adata.MNode):
    labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast
    bgp_vpn: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn
    bgp_ipvpn: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn

    mut def __init__(self, labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast=None, bgp_vpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn=None, bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if labeled_unicast is not None:
            self.labeled_unicast = labeled_unicast
        else:
            self.labeled_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast()
        self_labeled_unicast = self.labeled_unicast
        if self_labeled_unicast is not None:
            self_labeled_unicast._parent = self
        if bgp_vpn is not None:
            self.bgp_vpn = bgp_vpn
        else:
            self.bgp_vpn = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn()
        self_bgp_vpn = self.bgp_vpn
        if self_bgp_vpn is not None:
            self_bgp_vpn._parent = self
        if bgp_ipvpn is not None:
            self.bgp_ipvpn = bgp_ipvpn
        else:
            self.bgp_ipvpn = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn()
        self_bgp_ipvpn = self.bgp_ipvpn
        if self_bgp_ipvpn is not None:
            self_bgp_ipvpn._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _labeled_unicast = self.labeled_unicast
        _bgp_vpn = self.bgp_vpn
        _bgp_ipvpn = self.bgp_ipvpn
        if _labeled_unicast is not None:
            children['labeled-unicast'] = _labeled_unicast.to_gdata()
        if _bgp_vpn is not None:
            children['bgp-vpn'] = _bgp_vpn.to_gdata()
        if _bgp_ipvpn is not None:
            children['bgp-ipvpn'] = _bgp_ipvpn.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label(labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast.from_gdata(n.get_opt_container("labeled-unicast")), bgp_vpn=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn.from_gdata(n.get_opt_container("bgp-vpn")), bgp_ipvpn=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn.from_gdata(n.get_opt_container("bgp-ipvpn")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label(labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "labeled-unicast")), bgp_vpn=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn.from_xml(yang.gdata.get_xml_opt_child(n, "bgp-vpn")), bgp_ipvpn=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn.from_xml(yang.gdata.get_xml_opt_child(n, "bgp-ipvpn")))
        return None



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__convergence__min_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__convergence(yang.adata.MNode):
    min_wait_to_advertise: int

    mut def __init__(self, min_wait_to_advertise: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if min_wait_to_advertise != None:
            self.min_wait_to_advertise = min_wait_to_advertise
        else:
            self.min_wait_to_advertise = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _min_wait_to_advertise = self.min_wait_to_advertise
        if _min_wait_to_advertise is not None:
            children['min-wait-to-advertise'] = yang.gdata.Leaf('uint16', _min_wait_to_advertise)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__convergence(min_wait_to_advertise=n.get_opt_int("min-wait-to-advertise"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__convergence()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__convergence(min_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "min-wait-to-advertise"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__convergence()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__allowed_peer_as(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__peer_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry(yang.adata.MNode):
    prefix: str
    allowed_peer_as: list[str]
    peer_group: str

    mut def __init__(self, prefix: str, peer_group: str, allowed_peer_as: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.prefix = prefix
        if allowed_peer_as is not None:
            self.allowed_peer_as = allowed_peer_as
        else:
            self.allowed_peer_as = []
        self.peer_group = peer_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix = self.prefix
        _peer_group = self.peer_group
        if _prefix is not None:
            children['prefix'] = yang.gdata.Leaf('union', _prefix)
        children['allowed-peer-as'] = yang.gdata.LeafList(self.allowed_peer_as)
        if _peer_group is not None:
            children['peer-group'] = yang.gdata.Leaf('leafref', _peer_group)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.prefix)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry(prefix=n.get_str("prefix"), allowed_peer_as=n.get_opt_strs("allowed-peer-as"), peer_group=n.get_str("peer-group"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry(prefix=yang.gdata.from_xml_str(n, "prefix"), allowed_peer_as=yang.gdata.from_xml_opt_strs(n, "allowed-peer-as"), peer_group=yang.gdata.from_xml_str(n, "peer-group"))

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'match'
        self.elements = elements

    mut def create(self, prefix, peer_group):
        for e in self.elements:
            match = True
            if e.prefix != prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry(prefix, peer_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__max_sessions(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept(yang.adata.MNode):
    match: srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match
    max_sessions: int

    mut def __init__(self, match: list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry]=[], max_sessions: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.match = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match(elements=match)
        self.match._parent = self
        if max_sessions != None:
            self.max_sessions = max_sessions
        else:
            self.max_sessions = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _match = self.match
        _max_sessions = self.max_sessions
        if _match is not None:
            children['match'] = _match.to_gdata()
        if _max_sessions is not None:
            children['max-sessions'] = yang.gdata.Leaf('uint16', _max_sessions)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept(match=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match.from_gdata(n.get_opt_list("match")), max_sessions=n.get_opt_int("max-sessions"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept(match=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match.from_xml(yang.gdata.get_xml_children(n, "match")), max_sessions=yang.gdata.from_xml_opt_int(n, "max-sessions"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__allowed_peer_as(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__peer_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__max_sessions(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry(yang.adata.MNode):
    interface_name: str
    allowed_peer_as: list[str]
    peer_group: str
    max_sessions: int

    mut def __init__(self, interface_name: str, peer_group: str, allowed_peer_as: ?list[str]=None, max_sessions: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.interface_name = interface_name
        if allowed_peer_as is not None:
            self.allowed_peer_as = allowed_peer_as
        else:
            self.allowed_peer_as = []
        self.peer_group = peer_group
        if max_sessions != None:
            self.max_sessions = max_sessions
        else:
            self.max_sessions = 1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        _peer_group = self.peer_group
        _max_sessions = self.max_sessions
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        children['allowed-peer-as'] = yang.gdata.LeafList(self.allowed_peer_as)
        if _peer_group is not None:
            children['peer-group'] = yang.gdata.Leaf('leafref', _peer_group)
        if _max_sessions is not None:
            children['max-sessions'] = yang.gdata.Leaf('uint16', _max_sessions)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.interface_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry(interface_name=n.get_str("interface-name"), allowed_peer_as=n.get_opt_strs("allowed-peer-as"), peer_group=n.get_str("peer-group"), max_sessions=n.get_opt_int("max-sessions"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), allowed_peer_as=yang.gdata.from_xml_opt_strs(n, "allowed-peer-as"), peer_group=yang.gdata.from_xml_str(n, "peer-group"), max_sessions=yang.gdata.from_xml_opt_int(n, "max-sessions"))

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name, peer_group):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry(interface_name, peer_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors(yang.adata.MNode):
    accept: srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept
    interface: srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface

    mut def __init__(self, accept: ?srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept=None, interface: list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if accept is not None:
            self.accept = accept
        else:
            self.accept = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept()
        self_accept = self.accept
        if self_accept is not None:
            self_accept._parent = self
        self.interface = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface(elements=interface)
        self.interface._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _accept = self.accept
        _interface = self.interface
        if _accept is not None:
            children['accept'] = _accept.to_gdata()
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors(accept=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept.from_gdata(n.get_opt_container("accept")), interface=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface.from_gdata(n.get_opt_list("interface")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors(accept=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept.from_xml(yang.gdata.get_xml_opt_child(n, "accept")), interface=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface.from_xml(yang.gdata.get_xml_children(n, "interface")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__import_reject_all(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__export_reject_all(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(yang.adata.MNode):
    import_reject_all: bool
    export_reject_all: bool

    mut def __init__(self, import_reject_all: ?bool=None, export_reject_all: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if import_reject_all != None:
            self.import_reject_all = import_reject_all
        else:
            self.import_reject_all = True
        if export_reject_all != None:
            self.export_reject_all = export_reject_all
        else:
            self.export_reject_all = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_reject_all = self.import_reject_all
        _export_reject_all = self.export_reject_all
        if _import_reject_all is not None:
            children['import-reject-all'] = yang.gdata.Leaf('boolean', _import_reject_all)
        if _export_reject_all is not None:
            children['export-reject-all'] = yang.gdata.Leaf('boolean', _export_reject_all)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(import_reject_all=n.get_opt_bool("import-reject-all"), export_reject_all=n.get_opt_bool("export-reject-all"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(import_reject_all=yang.gdata.from_xml_opt_bool(n, "import-reject-all"), export_reject_all=yang.gdata.from_xml_opt_bool(n, "export-reject-all"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection__fast_failover(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection(yang.adata.MNode):
    enable_bfd: bool
    fast_failover: bool

    mut def __init__(self, enable_bfd: ?bool=None, fast_failover: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if enable_bfd != None:
            self.enable_bfd = enable_bfd
        else:
            self.enable_bfd = False
        if fast_failover != None:
            self.fast_failover = fast_failover
        else:
            self.fast_failover = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable_bfd = self.enable_bfd
        _fast_failover = self.fast_failover
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        if _fast_failover is not None:
            children['fast-failover'] = yang.gdata.Leaf('boolean', _fast_failover)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection(enable_bfd=n.get_opt_bool("enable-bfd"), fast_failover=n.get_opt_bool("fast-failover"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection(enable_bfd=yang.gdata.from_xml_opt_bool(n, "enable-bfd"), fast_failover=yang.gdata.from_xml_opt_bool(n, "fast-failover"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__stale_routes_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__requested_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart(yang.adata.MNode):
    admin_state: str
    stale_routes_time: int
    requested_restart_time: int

    mut def __init__(self, admin_state: ?str=None, stale_routes_time: ?int=None, requested_restart_time: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        if stale_routes_time != None:
            self.stale_routes_time = stale_routes_time
        else:
            self.stale_routes_time = 360
        if requested_restart_time != None:
            self.requested_restart_time = requested_restart_time
        else:
            self.requested_restart_time = 300

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _stale_routes_time = self.stale_routes_time
        _requested_restart_time = self.requested_restart_time
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _stale_routes_time is not None:
            children['stale-routes-time'] = yang.gdata.Leaf('uint16', _stale_routes_time)
        if _requested_restart_time is not None:
            children['requested-restart-time'] = yang.gdata.Leaf('uint16', _requested_restart_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart(admin_state=n.get_opt_str("admin-state"), stale_routes_time=n.get_opt_int("stale-routes-time"), requested_restart_time=n.get_opt_int("requested-restart-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), stale_routes_time=yang.gdata.from_xml_opt_int(n, "stale-routes-time"), requested_restart_time=yang.gdata.from_xml_opt_int(n, "requested-restart-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__max_ecmp_hash_buckets_per_next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__afi_safi_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send_max(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send_multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__eligible_prefix_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths(yang.adata.MNode):
    receive: ?bool
    send: ?bool
    send_max: ?int
    send_multipath: ?bool
    eligible_prefix_policy: ?str

    mut def __init__(self, receive: ?bool, send: ?bool, send_max: ?int, send_multipath: ?bool, eligible_prefix_policy: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.receive = receive
        self.send = send
        self.send_max = send_max
        self.send_multipath = send_multipath
        self.eligible_prefix_policy = eligible_prefix_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        _send = self.send
        _send_max = self.send_max
        _send_multipath = self.send_multipath
        _eligible_prefix_policy = self.eligible_prefix_policy
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        if _send is not None:
            children['send'] = yang.gdata.Leaf('boolean', _send)
        if _send_max is not None:
            children['send-max'] = yang.gdata.Leaf('uint8', _send_max)
        if _send_multipath is not None:
            children['send-multipath'] = yang.gdata.Leaf('empty', _send_multipath)
        if _eligible_prefix_policy is not None:
            children['eligible-prefix-policy'] = yang.gdata.Leaf('leafref', _eligible_prefix_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths(receive=n.get_opt_bool("receive"), send=n.get_opt_bool("send"), send_max=n.get_opt_int("send-max"), send_multipath=n.get_opt_bool("send-multipath"), eligible_prefix_policy=n.get_opt_str("eligible-prefix-policy"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths(receive=yang.gdata.from_xml_opt_bool(n, "receive"), send=yang.gdata.from_xml_opt_bool(n, "send"), send_max=yang.gdata.from_xml_opt_int(n, "send-max"), send_multipath=yang.gdata.from_xml_opt_bool(n, "send-multipath"), eligible_prefix_policy=yang.gdata.from_xml_opt_str(n, "eligible-prefix-policy"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__allow_multiple_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__maximum_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__maximum_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp(admin_state=n.get_opt_str("admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp(yang.adata.MNode):
    maximum_paths: int
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp

    mut def __init__(self, maximum_paths: ?int=None, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if maximum_paths != None:
            self.maximum_paths = maximum_paths
        else:
            self.maximum_paths = 1
        if weighted_ecmp is not None:
            self.weighted_ecmp = weighted_ecmp
        else:
            self.weighted_ecmp = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp()
        self_weighted_ecmp = self.weighted_ecmp
        if self_weighted_ecmp is not None:
            self_weighted_ecmp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_paths = self.maximum_paths
        _weighted_ecmp = self.weighted_ecmp
        if _maximum_paths is not None:
            children['maximum-paths'] = yang.gdata.Leaf('uint32', _maximum_paths)
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp(maximum_paths=n.get_opt_int("maximum-paths"), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp.from_gdata(n.get_opt_container("weighted-ecmp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp(maximum_paths=yang.gdata.from_xml_opt_int(n, "maximum-paths"), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp.from_xml(yang.gdata.get_xml_opt_child(n, "weighted-ecmp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__maximum_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp(admin_state=n.get_opt_str("admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp(yang.adata.MNode):
    maximum_paths: int
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp

    mut def __init__(self, maximum_paths: ?int=None, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if maximum_paths != None:
            self.maximum_paths = maximum_paths
        else:
            self.maximum_paths = 1
        if weighted_ecmp is not None:
            self.weighted_ecmp = weighted_ecmp
        else:
            self.weighted_ecmp = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp()
        self_weighted_ecmp = self.weighted_ecmp
        if self_weighted_ecmp is not None:
            self_weighted_ecmp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_paths = self.maximum_paths
        _weighted_ecmp = self.weighted_ecmp
        if _maximum_paths is not None:
            children['maximum-paths'] = yang.gdata.Leaf('uint32', _maximum_paths)
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp(maximum_paths=n.get_opt_int("maximum-paths"), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp.from_gdata(n.get_opt_container("weighted-ecmp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp(maximum_paths=yang.gdata.from_xml_opt_int(n, "maximum-paths"), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp.from_xml(yang.gdata.get_xml_opt_child(n, "weighted-ecmp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath(yang.adata.MNode):
    allow_multiple_as: bool
    maximum_paths: int
    ebgp: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp
    ibgp: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp

    mut def __init__(self, allow_multiple_as: ?bool=None, maximum_paths: ?int=None, ebgp: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp=None, ibgp: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allow_multiple_as != None:
            self.allow_multiple_as = allow_multiple_as
        else:
            self.allow_multiple_as = True
        if maximum_paths != None:
            self.maximum_paths = maximum_paths
        else:
            self.maximum_paths = 1
        if ebgp is not None:
            self.ebgp = ebgp
        else:
            self.ebgp = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp()
        self_ebgp = self.ebgp
        if self_ebgp is not None:
            self_ebgp._parent = self
        if ibgp is not None:
            self.ibgp = ibgp
        else:
            self.ibgp = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp()
        self_ibgp = self.ibgp
        if self_ibgp is not None:
            self_ibgp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_multiple_as = self.allow_multiple_as
        _maximum_paths = self.maximum_paths
        _ebgp = self.ebgp
        _ibgp = self.ibgp
        if _allow_multiple_as is not None:
            children['allow-multiple-as'] = yang.gdata.Leaf('boolean', _allow_multiple_as)
        if _maximum_paths is not None:
            children['maximum-paths'] = yang.gdata.Leaf('uint32', _maximum_paths)
        if _ebgp is not None:
            children['ebgp'] = _ebgp.to_gdata()
        if _ibgp is not None:
            children['ibgp'] = _ibgp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath(allow_multiple_as=n.get_opt_bool("allow-multiple-as"), maximum_paths=n.get_opt_int("maximum-paths"), ebgp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp.from_gdata(n.get_opt_container("ebgp")), ibgp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp.from_gdata(n.get_opt_container("ibgp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath(allow_multiple_as=yang.gdata.from_xml_opt_bool(n, "allow-multiple-as"), maximum_paths=yang.gdata.from_xml_opt_int(n, "maximum-paths"), ebgp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp")), ibgp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp.from_xml(yang.gdata.get_xml_opt_child(n, "ibgp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection__accumulated_igp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection(yang.adata.MNode):
    accumulated_igp: ?bool

    mut def __init__(self, accumulated_igp: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.accumulated_igp = accumulated_igp

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _accumulated_igp = self.accumulated_igp
        if _accumulated_igp is not None:
            children['accumulated-igp'] = yang.gdata.Leaf('boolean', _accumulated_igp)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection(accumulated_igp=n.get_opt_bool("accumulated-igp"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection(accumulated_igp=yang.gdata.from_xml_opt_bool(n, "accumulated-igp"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__active_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths(yang.adata.MNode):
    install: bool

    mut def __init__(self, install: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if install != None:
            self.install = install
        else:
            self.install = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths(install=n.get_opt_bool("install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths(install=yang.gdata.from_xml_opt_bool(n, "install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__oper_max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__up_peers_when_min_expired(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__up_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__converged_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__first_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__last_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__convergence_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__convergence_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: int
    oper_max_wait_to_advertise: ?int
    up_peers_when_min_expired: ?int
    up_peers: ?int
    converged_peers: ?int
    first_up_peer_time: ?int
    last_up_peer_time: ?int
    convergence_state: ?str
    convergence_time: ?int

    mut def __init__(self, max_wait_to_advertise: ?int=None, oper_max_wait_to_advertise: ?int, up_peers_when_min_expired: ?int, up_peers: ?int, converged_peers: ?int, first_up_peer_time: ?int, last_up_peer_time: ?int, convergence_state: ?str, convergence_time: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_wait_to_advertise != None:
            self.max_wait_to_advertise = max_wait_to_advertise
        else:
            self.max_wait_to_advertise = 0
        self.oper_max_wait_to_advertise = oper_max_wait_to_advertise
        self.up_peers_when_min_expired = up_peers_when_min_expired
        self.up_peers = up_peers
        self.converged_peers = converged_peers
        self.first_up_peer_time = first_up_peer_time
        self.last_up_peer_time = last_up_peer_time
        self.convergence_state = convergence_state
        self.convergence_time = convergence_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        _oper_max_wait_to_advertise = self.oper_max_wait_to_advertise
        _up_peers_when_min_expired = self.up_peers_when_min_expired
        _up_peers = self.up_peers
        _converged_peers = self.converged_peers
        _first_up_peer_time = self.first_up_peer_time
        _last_up_peer_time = self.last_up_peer_time
        _convergence_state = self.convergence_state
        _convergence_time = self.convergence_time
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        if _oper_max_wait_to_advertise is not None:
            children['oper-max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _oper_max_wait_to_advertise)
        if _up_peers_when_min_expired is not None:
            children['up-peers-when-min-expired'] = yang.gdata.Leaf('uint16', _up_peers_when_min_expired)
        if _up_peers is not None:
            children['up-peers'] = yang.gdata.Leaf('uint16', _up_peers)
        if _converged_peers is not None:
            children['converged-peers'] = yang.gdata.Leaf('uint16', _converged_peers)
        if _first_up_peer_time is not None:
            children['first-up-peer-time'] = yang.gdata.Leaf('uint64', _first_up_peer_time)
        if _last_up_peer_time is not None:
            children['last-up-peer-time'] = yang.gdata.Leaf('uint64', _last_up_peer_time)
        if _convergence_state is not None:
            children['convergence-state'] = yang.gdata.Leaf('enumeration', _convergence_state)
        if _convergence_time is not None:
            children['convergence-time'] = yang.gdata.Leaf('uint64', _convergence_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence(max_wait_to_advertise=n.get_opt_int("max-wait-to-advertise"), oper_max_wait_to_advertise=n.get_opt_int("oper-max-wait-to-advertise"), up_peers_when_min_expired=n.get_opt_int("up-peers-when-min-expired"), up_peers=n.get_opt_int("up-peers"), converged_peers=n.get_opt_int("converged-peers"), first_up_peer_time=n.get_opt_int("first-up-peer-time"), last_up_peer_time=n.get_opt_int("last-up-peer-time"), convergence_state=n.get_opt_str("convergence-state"), convergence_time=n.get_opt_int("convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence(max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "max-wait-to-advertise"), oper_max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "oper-max-wait-to-advertise"), up_peers_when_min_expired=yang.gdata.from_xml_opt_int(n, "up-peers-when-min-expired"), up_peers=yang.gdata.from_xml_opt_int(n, "up-peers"), converged_peers=yang.gdata.from_xml_opt_int(n, "converged-peers"), first_up_peer_time=yang.gdata.from_xml_opt_int(n, "first-up-peer-time"), last_up_peer_time=yang.gdata.from_xml_opt_int(n, "last-up-peer-time"), convergence_state=yang.gdata.from_xml_opt_str(n, "convergence-state"), convergence_time=yang.gdata.from_xml_opt_int(n, "convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    mode: str
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, mode: ?str=None, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mode != None:
            self.mode = mode
        else:
            self.mode = "disabled"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        _selection_attributes = self.selection_attributes
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(mode=n.get_opt_str("mode"), allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(mode=yang.gdata.from_xml_opt_str(n, "mode"), allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    mode: str
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, mode: ?str=None, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mode != None:
            self.mode = mode
        else:
            self.mode = "disabled"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        _selection_attributes = self.selection_attributes
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(mode=n.get_opt_str("mode"), allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(mode=yang.gdata.from_xml_opt_str(n, "mode"), allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ipv4_next_hops is not None:
            self.ipv4_next_hops = ipv4_next_hops
        else:
            self.ipv4_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops()
        self_ipv4_next_hops = self.ipv4_next_hops
        if self_ipv4_next_hops is not None:
            self_ipv4_next_hops._parent = self
        if ipv6_next_hops is not None:
            self.ipv6_next_hops = ipv6_next_hops
        else:
            self.ipv6_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops()
        self_ipv6_next_hops = self.ipv6_next_hops
        if self_ipv6_next_hops is not None:
            self_ipv6_next_hops._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_container("ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_container("ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: bool
    receive_ipv6_next_hops: bool
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution

    mut def __init__(self, advertise_ipv6_next_hops: ?bool=None, receive_ipv6_next_hops: ?bool=None, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if advertise_ipv6_next_hops != None:
            self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        else:
            self.advertise_ipv6_next_hops = False
        if receive_ipv6_next_hops != None:
            self.receive_ipv6_next_hops = receive_ipv6_next_hops
        else:
            self.receive_ipv6_next_hops = False
        if backup_paths is not None:
            self.backup_paths = backup_paths
        else:
            self.backup_paths = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths()
        self_backup_paths = self.backup_paths
        if self_backup_paths is not None:
            self_backup_paths._parent = self
        if convergence is not None:
            self.convergence = convergence
        else:
            self.convergence = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence()
        self_convergence = self.convergence
        if self_convergence is not None:
            self_convergence._parent = self
        if next_hop_resolution is not None:
            self.next_hop_resolution = next_hop_resolution
        else:
            self.next_hop_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution()
        self_next_hop_resolution = self.next_hop_resolution
        if self_next_hop_resolution is not None:
            self_next_hop_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _backup_paths = self.backup_paths
        _convergence = self.convergence
        _next_hop_resolution = self.next_hop_resolution
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths.from_gdata(n.get_opt_container("backup-paths")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence.from_gdata(n.get_opt_container("convergence")), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution.from_gdata(n.get_opt_container("next-hop-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths.from_xml(yang.gdata.get_xml_opt_child(n, "backup-paths")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence.from_xml(yang.gdata.get_xml_opt_child(n, "convergence")), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths(yang.adata.MNode):
    install: bool

    mut def __init__(self, install: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if install != None:
            self.install = install
        else:
            self.install = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths(install=n.get_opt_bool("install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths(install=yang.gdata.from_xml_opt_bool(n, "install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__oper_max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__up_peers_when_min_expired(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__up_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__converged_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__first_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__last_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__convergence_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__convergence_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: int
    oper_max_wait_to_advertise: ?int
    up_peers_when_min_expired: ?int
    up_peers: ?int
    converged_peers: ?int
    first_up_peer_time: ?int
    last_up_peer_time: ?int
    convergence_state: ?str
    convergence_time: ?int

    mut def __init__(self, max_wait_to_advertise: ?int=None, oper_max_wait_to_advertise: ?int, up_peers_when_min_expired: ?int, up_peers: ?int, converged_peers: ?int, first_up_peer_time: ?int, last_up_peer_time: ?int, convergence_state: ?str, convergence_time: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_wait_to_advertise != None:
            self.max_wait_to_advertise = max_wait_to_advertise
        else:
            self.max_wait_to_advertise = 0
        self.oper_max_wait_to_advertise = oper_max_wait_to_advertise
        self.up_peers_when_min_expired = up_peers_when_min_expired
        self.up_peers = up_peers
        self.converged_peers = converged_peers
        self.first_up_peer_time = first_up_peer_time
        self.last_up_peer_time = last_up_peer_time
        self.convergence_state = convergence_state
        self.convergence_time = convergence_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        _oper_max_wait_to_advertise = self.oper_max_wait_to_advertise
        _up_peers_when_min_expired = self.up_peers_when_min_expired
        _up_peers = self.up_peers
        _converged_peers = self.converged_peers
        _first_up_peer_time = self.first_up_peer_time
        _last_up_peer_time = self.last_up_peer_time
        _convergence_state = self.convergence_state
        _convergence_time = self.convergence_time
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        if _oper_max_wait_to_advertise is not None:
            children['oper-max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _oper_max_wait_to_advertise)
        if _up_peers_when_min_expired is not None:
            children['up-peers-when-min-expired'] = yang.gdata.Leaf('uint16', _up_peers_when_min_expired)
        if _up_peers is not None:
            children['up-peers'] = yang.gdata.Leaf('uint16', _up_peers)
        if _converged_peers is not None:
            children['converged-peers'] = yang.gdata.Leaf('uint16', _converged_peers)
        if _first_up_peer_time is not None:
            children['first-up-peer-time'] = yang.gdata.Leaf('uint64', _first_up_peer_time)
        if _last_up_peer_time is not None:
            children['last-up-peer-time'] = yang.gdata.Leaf('uint64', _last_up_peer_time)
        if _convergence_state is not None:
            children['convergence-state'] = yang.gdata.Leaf('enumeration', _convergence_state)
        if _convergence_time is not None:
            children['convergence-time'] = yang.gdata.Leaf('uint64', _convergence_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence(max_wait_to_advertise=n.get_opt_int("max-wait-to-advertise"), oper_max_wait_to_advertise=n.get_opt_int("oper-max-wait-to-advertise"), up_peers_when_min_expired=n.get_opt_int("up-peers-when-min-expired"), up_peers=n.get_opt_int("up-peers"), converged_peers=n.get_opt_int("converged-peers"), first_up_peer_time=n.get_opt_int("first-up-peer-time"), last_up_peer_time=n.get_opt_int("last-up-peer-time"), convergence_state=n.get_opt_str("convergence-state"), convergence_time=n.get_opt_int("convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence(max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "max-wait-to-advertise"), oper_max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "oper-max-wait-to-advertise"), up_peers_when_min_expired=yang.gdata.from_xml_opt_int(n, "up-peers-when-min-expired"), up_peers=yang.gdata.from_xml_opt_int(n, "up-peers"), converged_peers=yang.gdata.from_xml_opt_int(n, "converged-peers"), first_up_peer_time=yang.gdata.from_xml_opt_int(n, "first-up-peer-time"), last_up_peer_time=yang.gdata.from_xml_opt_int(n, "last-up-peer-time"), convergence_state=yang.gdata.from_xml_opt_str(n, "convergence-state"), convergence_time=yang.gdata.from_xml_opt_int(n, "convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(yang.adata.MNode):
    admin_state: str
    ignore_default_routes: bool

    mut def __init__(self, admin_state: ?str=None, ignore_default_routes: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if ignore_default_routes != None:
            self.ignore_default_routes = ignore_default_routes
        else:
            self.ignore_default_routes = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ignore_default_routes = self.ignore_default_routes
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=n.get_opt_str("admin-state"), ignore_default_routes=n.get_opt_bool("ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ignore_default_routes=yang.gdata.from_xml_opt_bool(n, "ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _selection_attributes = self.selection_attributes
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if route_resolution is not None:
            self.route_resolution = route_resolution
        else:
            self.route_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()
        self_route_resolution = self.route_resolution
        if self_route_resolution is not None:
            self_route_resolution._parent = self
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        _tunnel_resolution = self.tunnel_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution.from_gdata(n.get_opt_container("route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(yang.adata.MNode):
    admin_state: str
    ignore_default_routes: bool

    mut def __init__(self, admin_state: ?str=None, ignore_default_routes: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if ignore_default_routes != None:
            self.ignore_default_routes = ignore_default_routes
        else:
            self.ignore_default_routes = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ignore_default_routes = self.ignore_default_routes
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=n.get_opt_str("admin-state"), ignore_default_routes=n.get_opt_bool("ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ignore_default_routes=yang.gdata.from_xml_opt_bool(n, "ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _selection_attributes = self.selection_attributes
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if route_resolution is not None:
            self.route_resolution = route_resolution
        else:
            self.route_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()
        self_route_resolution = self.route_resolution
        if self_route_resolution is not None:
            self_route_resolution._parent = self
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        _tunnel_resolution = self.tunnel_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution.from_gdata(n.get_opt_container("route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ipv4_next_hops is not None:
            self.ipv4_next_hops = ipv4_next_hops
        else:
            self.ipv4_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops()
        self_ipv4_next_hops = self.ipv4_next_hops
        if self_ipv4_next_hops is not None:
            self_ipv4_next_hops._parent = self
        if ipv6_next_hops is not None:
            self.ipv6_next_hops = ipv6_next_hops
        else:
            self.ipv6_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops()
        self_ipv6_next_hops = self.ipv6_next_hops
        if self_ipv6_next_hops is not None:
            self_ipv6_next_hops._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_container("ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_container("ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: bool
    receive_ipv6_next_hops: bool
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution
    rapid_update: bool

    mut def __init__(self, advertise_ipv6_next_hops: ?bool=None, receive_ipv6_next_hops: ?bool=None, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution=None, rapid_update: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if advertise_ipv6_next_hops != None:
            self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        else:
            self.advertise_ipv6_next_hops = False
        if receive_ipv6_next_hops != None:
            self.receive_ipv6_next_hops = receive_ipv6_next_hops
        else:
            self.receive_ipv6_next_hops = False
        if backup_paths is not None:
            self.backup_paths = backup_paths
        else:
            self.backup_paths = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths()
        self_backup_paths = self.backup_paths
        if self_backup_paths is not None:
            self_backup_paths._parent = self
        if convergence is not None:
            self.convergence = convergence
        else:
            self.convergence = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence()
        self_convergence = self.convergence
        if self_convergence is not None:
            self_convergence._parent = self
        if next_hop_resolution is not None:
            self.next_hop_resolution = next_hop_resolution
        else:
            self.next_hop_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution()
        self_next_hop_resolution = self.next_hop_resolution
        if self_next_hop_resolution is not None:
            self_next_hop_resolution._parent = self
        if rapid_update != None:
            self.rapid_update = rapid_update
        else:
            self.rapid_update = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _backup_paths = self.backup_paths
        _convergence = self.convergence
        _next_hop_resolution = self.next_hop_resolution
        _rapid_update = self.rapid_update
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths.from_gdata(n.get_opt_container("backup-paths")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence.from_gdata(n.get_opt_container("convergence")), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution.from_gdata(n.get_opt_container("next-hop-resolution")), rapid_update=n.get_opt_bool("rapid-update"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths.from_xml(yang.gdata.get_xml_opt_child(n, "backup-paths")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence.from_xml(yang.gdata.get_xml_opt_child(n, "convergence")), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-resolution")), rapid_update=yang.gdata.from_xml_opt_bool(n, "rapid-update"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__oper_max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__up_peers_when_min_expired(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__up_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__converged_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__first_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__last_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__convergence_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__convergence_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: int
    oper_max_wait_to_advertise: ?int
    up_peers_when_min_expired: ?int
    up_peers: ?int
    converged_peers: ?int
    first_up_peer_time: ?int
    last_up_peer_time: ?int
    convergence_state: ?str
    convergence_time: ?int

    mut def __init__(self, max_wait_to_advertise: ?int=None, oper_max_wait_to_advertise: ?int, up_peers_when_min_expired: ?int, up_peers: ?int, converged_peers: ?int, first_up_peer_time: ?int, last_up_peer_time: ?int, convergence_state: ?str, convergence_time: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_wait_to_advertise != None:
            self.max_wait_to_advertise = max_wait_to_advertise
        else:
            self.max_wait_to_advertise = 0
        self.oper_max_wait_to_advertise = oper_max_wait_to_advertise
        self.up_peers_when_min_expired = up_peers_when_min_expired
        self.up_peers = up_peers
        self.converged_peers = converged_peers
        self.first_up_peer_time = first_up_peer_time
        self.last_up_peer_time = last_up_peer_time
        self.convergence_state = convergence_state
        self.convergence_time = convergence_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        _oper_max_wait_to_advertise = self.oper_max_wait_to_advertise
        _up_peers_when_min_expired = self.up_peers_when_min_expired
        _up_peers = self.up_peers
        _converged_peers = self.converged_peers
        _first_up_peer_time = self.first_up_peer_time
        _last_up_peer_time = self.last_up_peer_time
        _convergence_state = self.convergence_state
        _convergence_time = self.convergence_time
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        if _oper_max_wait_to_advertise is not None:
            children['oper-max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _oper_max_wait_to_advertise)
        if _up_peers_when_min_expired is not None:
            children['up-peers-when-min-expired'] = yang.gdata.Leaf('uint16', _up_peers_when_min_expired)
        if _up_peers is not None:
            children['up-peers'] = yang.gdata.Leaf('uint16', _up_peers)
        if _converged_peers is not None:
            children['converged-peers'] = yang.gdata.Leaf('uint16', _converged_peers)
        if _first_up_peer_time is not None:
            children['first-up-peer-time'] = yang.gdata.Leaf('uint64', _first_up_peer_time)
        if _last_up_peer_time is not None:
            children['last-up-peer-time'] = yang.gdata.Leaf('uint64', _last_up_peer_time)
        if _convergence_state is not None:
            children['convergence-state'] = yang.gdata.Leaf('enumeration', _convergence_state)
        if _convergence_time is not None:
            children['convergence-time'] = yang.gdata.Leaf('uint64', _convergence_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence(max_wait_to_advertise=n.get_opt_int("max-wait-to-advertise"), oper_max_wait_to_advertise=n.get_opt_int("oper-max-wait-to-advertise"), up_peers_when_min_expired=n.get_opt_int("up-peers-when-min-expired"), up_peers=n.get_opt_int("up-peers"), converged_peers=n.get_opt_int("converged-peers"), first_up_peer_time=n.get_opt_int("first-up-peer-time"), last_up_peer_time=n.get_opt_int("last-up-peer-time"), convergence_state=n.get_opt_str("convergence-state"), convergence_time=n.get_opt_int("convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence(max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "max-wait-to-advertise"), oper_max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "oper-max-wait-to-advertise"), up_peers_when_min_expired=yang.gdata.from_xml_opt_int(n, "up-peers-when-min-expired"), up_peers=yang.gdata.from_xml_opt_int(n, "up-peers"), converged_peers=yang.gdata.from_xml_opt_int(n, "converged-peers"), first_up_peer_time=yang.gdata.from_xml_opt_int(n, "first-up-peer-time"), last_up_peer_time=yang.gdata.from_xml_opt_int(n, "last-up-peer-time"), convergence_state=yang.gdata.from_xml_opt_str(n, "convergence-state"), convergence_time=yang.gdata.from_xml_opt_int(n, "convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__keep_all_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__next_hop_self_route_reflector(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__inter_as_vpn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: bool
    receive_ipv6_next_hops: bool
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence
    keep_all_routes: bool
    next_hop_self_route_reflector: bool
    inter_as_vpn: bool
    rapid_update: bool

    mut def __init__(self, advertise_ipv6_next_hops: ?bool=None, receive_ipv6_next_hops: ?bool=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence=None, keep_all_routes: ?bool=None, next_hop_self_route_reflector: ?bool=None, inter_as_vpn: ?bool=None, rapid_update: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if advertise_ipv6_next_hops != None:
            self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        else:
            self.advertise_ipv6_next_hops = False
        if receive_ipv6_next_hops != None:
            self.receive_ipv6_next_hops = receive_ipv6_next_hops
        else:
            self.receive_ipv6_next_hops = False
        if convergence is not None:
            self.convergence = convergence
        else:
            self.convergence = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence()
        self_convergence = self.convergence
        if self_convergence is not None:
            self_convergence._parent = self
        if keep_all_routes != None:
            self.keep_all_routes = keep_all_routes
        else:
            self.keep_all_routes = False
        if next_hop_self_route_reflector != None:
            self.next_hop_self_route_reflector = next_hop_self_route_reflector
        else:
            self.next_hop_self_route_reflector = False
        if inter_as_vpn != None:
            self.inter_as_vpn = inter_as_vpn
        else:
            self.inter_as_vpn = False
        if rapid_update != None:
            self.rapid_update = rapid_update
        else:
            self.rapid_update = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _convergence = self.convergence
        _keep_all_routes = self.keep_all_routes
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        _inter_as_vpn = self.inter_as_vpn
        _rapid_update = self.rapid_update
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        if _keep_all_routes is not None:
            children['keep-all-routes'] = yang.gdata.Leaf('boolean', _keep_all_routes)
        if _next_hop_self_route_reflector is not None:
            children['next-hop-self-route-reflector'] = yang.gdata.Leaf('boolean', _next_hop_self_route_reflector)
        if _inter_as_vpn is not None:
            children['inter-as-vpn'] = yang.gdata.Leaf('boolean', _inter_as_vpn)
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence.from_gdata(n.get_opt_container("convergence")), keep_all_routes=n.get_opt_bool("keep-all-routes"), next_hop_self_route_reflector=n.get_opt_bool("next-hop-self-route-reflector"), inter_as_vpn=n.get_opt_bool("inter-as-vpn"), rapid_update=n.get_opt_bool("rapid-update"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence.from_xml(yang.gdata.get_xml_opt_child(n, "convergence")), keep_all_routes=yang.gdata.from_xml_opt_bool(n, "keep-all-routes"), next_hop_self_route_reflector=yang.gdata.from_xml_opt_bool(n, "next-hop-self-route-reflector"), inter_as_vpn=yang.gdata.from_xml_opt_bool(n, "inter-as-vpn"), rapid_update=yang.gdata.from_xml_opt_bool(n, "rapid-update"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths(yang.adata.MNode):
    install: bool

    mut def __init__(self, install: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if install != None:
            self.install = install
        else:
            self.install = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths(install=n.get_opt_bool("install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths(install=yang.gdata.from_xml_opt_bool(n, "install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__oper_max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__up_peers_when_min_expired(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__up_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__converged_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__first_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__last_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__convergence_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__convergence_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: int
    oper_max_wait_to_advertise: ?int
    up_peers_when_min_expired: ?int
    up_peers: ?int
    converged_peers: ?int
    first_up_peer_time: ?int
    last_up_peer_time: ?int
    convergence_state: ?str
    convergence_time: ?int

    mut def __init__(self, max_wait_to_advertise: ?int=None, oper_max_wait_to_advertise: ?int, up_peers_when_min_expired: ?int, up_peers: ?int, converged_peers: ?int, first_up_peer_time: ?int, last_up_peer_time: ?int, convergence_state: ?str, convergence_time: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_wait_to_advertise != None:
            self.max_wait_to_advertise = max_wait_to_advertise
        else:
            self.max_wait_to_advertise = 0
        self.oper_max_wait_to_advertise = oper_max_wait_to_advertise
        self.up_peers_when_min_expired = up_peers_when_min_expired
        self.up_peers = up_peers
        self.converged_peers = converged_peers
        self.first_up_peer_time = first_up_peer_time
        self.last_up_peer_time = last_up_peer_time
        self.convergence_state = convergence_state
        self.convergence_time = convergence_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        _oper_max_wait_to_advertise = self.oper_max_wait_to_advertise
        _up_peers_when_min_expired = self.up_peers_when_min_expired
        _up_peers = self.up_peers
        _converged_peers = self.converged_peers
        _first_up_peer_time = self.first_up_peer_time
        _last_up_peer_time = self.last_up_peer_time
        _convergence_state = self.convergence_state
        _convergence_time = self.convergence_time
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        if _oper_max_wait_to_advertise is not None:
            children['oper-max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _oper_max_wait_to_advertise)
        if _up_peers_when_min_expired is not None:
            children['up-peers-when-min-expired'] = yang.gdata.Leaf('uint16', _up_peers_when_min_expired)
        if _up_peers is not None:
            children['up-peers'] = yang.gdata.Leaf('uint16', _up_peers)
        if _converged_peers is not None:
            children['converged-peers'] = yang.gdata.Leaf('uint16', _converged_peers)
        if _first_up_peer_time is not None:
            children['first-up-peer-time'] = yang.gdata.Leaf('uint64', _first_up_peer_time)
        if _last_up_peer_time is not None:
            children['last-up-peer-time'] = yang.gdata.Leaf('uint64', _last_up_peer_time)
        if _convergence_state is not None:
            children['convergence-state'] = yang.gdata.Leaf('enumeration', _convergence_state)
        if _convergence_time is not None:
            children['convergence-time'] = yang.gdata.Leaf('uint64', _convergence_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence(max_wait_to_advertise=n.get_opt_int("max-wait-to-advertise"), oper_max_wait_to_advertise=n.get_opt_int("oper-max-wait-to-advertise"), up_peers_when_min_expired=n.get_opt_int("up-peers-when-min-expired"), up_peers=n.get_opt_int("up-peers"), converged_peers=n.get_opt_int("converged-peers"), first_up_peer_time=n.get_opt_int("first-up-peer-time"), last_up_peer_time=n.get_opt_int("last-up-peer-time"), convergence_state=n.get_opt_str("convergence-state"), convergence_time=n.get_opt_int("convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence(max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "max-wait-to-advertise"), oper_max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "oper-max-wait-to-advertise"), up_peers_when_min_expired=yang.gdata.from_xml_opt_int(n, "up-peers-when-min-expired"), up_peers=yang.gdata.from_xml_opt_int(n, "up-peers"), converged_peers=yang.gdata.from_xml_opt_int(n, "converged-peers"), first_up_peer_time=yang.gdata.from_xml_opt_int(n, "first-up-peer-time"), last_up_peer_time=yang.gdata.from_xml_opt_int(n, "last-up-peer-time"), convergence_state=yang.gdata.from_xml_opt_str(n, "convergence-state"), convergence_time=yang.gdata.from_xml_opt_int(n, "convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    mode: str
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, mode: ?str=None, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mode != None:
            self.mode = mode
        else:
            self.mode = "disabled"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        _selection_attributes = self.selection_attributes
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(mode=n.get_opt_str("mode"), allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(mode=yang.gdata.from_xml_opt_str(n, "mode"), allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    mode: str
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, mode: ?str=None, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mode != None:
            self.mode = mode
        else:
            self.mode = "disabled"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        _selection_attributes = self.selection_attributes
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(mode=n.get_opt_str("mode"), allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(mode=yang.gdata.from_xml_opt_str(n, "mode"), allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ipv4_next_hops is not None:
            self.ipv4_next_hops = ipv4_next_hops
        else:
            self.ipv4_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops()
        self_ipv4_next_hops = self.ipv4_next_hops
        if self_ipv4_next_hops is not None:
            self_ipv4_next_hops._parent = self
        if ipv6_next_hops is not None:
            self.ipv6_next_hops = ipv6_next_hops
        else:
            self.ipv6_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops()
        self_ipv6_next_hops = self.ipv6_next_hops
        if self_ipv6_next_hops is not None:
            self_ipv6_next_hops._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_container("ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_container("ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast(yang.adata.MNode):
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution

    mut def __init__(self, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if backup_paths is not None:
            self.backup_paths = backup_paths
        else:
            self.backup_paths = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths()
        self_backup_paths = self.backup_paths
        if self_backup_paths is not None:
            self_backup_paths._parent = self
        if convergence is not None:
            self.convergence = convergence
        else:
            self.convergence = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence()
        self_convergence = self.convergence
        if self_convergence is not None:
            self_convergence._parent = self
        if next_hop_resolution is not None:
            self.next_hop_resolution = next_hop_resolution
        else:
            self.next_hop_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution()
        self_next_hop_resolution = self.next_hop_resolution
        if self_next_hop_resolution is not None:
            self_next_hop_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup_paths = self.backup_paths
        _convergence = self.convergence
        _next_hop_resolution = self.next_hop_resolution
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast(backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths.from_gdata(n.get_opt_container("backup-paths")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence.from_gdata(n.get_opt_container("convergence")), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution.from_gdata(n.get_opt_container("next-hop-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast(backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths.from_xml(yang.gdata.get_xml_opt_child(n, "backup-paths")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence.from_xml(yang.gdata.get_xml_opt_child(n, "convergence")), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths(yang.adata.MNode):
    install: bool

    mut def __init__(self, install: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if install != None:
            self.install = install
        else:
            self.install = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths(install=n.get_opt_bool("install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths(install=yang.gdata.from_xml_opt_bool(n, "install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__oper_max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__up_peers_when_min_expired(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__up_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__converged_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__first_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__last_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__convergence_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__convergence_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: int
    oper_max_wait_to_advertise: ?int
    up_peers_when_min_expired: ?int
    up_peers: ?int
    converged_peers: ?int
    first_up_peer_time: ?int
    last_up_peer_time: ?int
    convergence_state: ?str
    convergence_time: ?int

    mut def __init__(self, max_wait_to_advertise: ?int=None, oper_max_wait_to_advertise: ?int, up_peers_when_min_expired: ?int, up_peers: ?int, converged_peers: ?int, first_up_peer_time: ?int, last_up_peer_time: ?int, convergence_state: ?str, convergence_time: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_wait_to_advertise != None:
            self.max_wait_to_advertise = max_wait_to_advertise
        else:
            self.max_wait_to_advertise = 0
        self.oper_max_wait_to_advertise = oper_max_wait_to_advertise
        self.up_peers_when_min_expired = up_peers_when_min_expired
        self.up_peers = up_peers
        self.converged_peers = converged_peers
        self.first_up_peer_time = first_up_peer_time
        self.last_up_peer_time = last_up_peer_time
        self.convergence_state = convergence_state
        self.convergence_time = convergence_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        _oper_max_wait_to_advertise = self.oper_max_wait_to_advertise
        _up_peers_when_min_expired = self.up_peers_when_min_expired
        _up_peers = self.up_peers
        _converged_peers = self.converged_peers
        _first_up_peer_time = self.first_up_peer_time
        _last_up_peer_time = self.last_up_peer_time
        _convergence_state = self.convergence_state
        _convergence_time = self.convergence_time
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        if _oper_max_wait_to_advertise is not None:
            children['oper-max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _oper_max_wait_to_advertise)
        if _up_peers_when_min_expired is not None:
            children['up-peers-when-min-expired'] = yang.gdata.Leaf('uint16', _up_peers_when_min_expired)
        if _up_peers is not None:
            children['up-peers'] = yang.gdata.Leaf('uint16', _up_peers)
        if _converged_peers is not None:
            children['converged-peers'] = yang.gdata.Leaf('uint16', _converged_peers)
        if _first_up_peer_time is not None:
            children['first-up-peer-time'] = yang.gdata.Leaf('uint64', _first_up_peer_time)
        if _last_up_peer_time is not None:
            children['last-up-peer-time'] = yang.gdata.Leaf('uint64', _last_up_peer_time)
        if _convergence_state is not None:
            children['convergence-state'] = yang.gdata.Leaf('enumeration', _convergence_state)
        if _convergence_time is not None:
            children['convergence-time'] = yang.gdata.Leaf('uint64', _convergence_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence(max_wait_to_advertise=n.get_opt_int("max-wait-to-advertise"), oper_max_wait_to_advertise=n.get_opt_int("oper-max-wait-to-advertise"), up_peers_when_min_expired=n.get_opt_int("up-peers-when-min-expired"), up_peers=n.get_opt_int("up-peers"), converged_peers=n.get_opt_int("converged-peers"), first_up_peer_time=n.get_opt_int("first-up-peer-time"), last_up_peer_time=n.get_opt_int("last-up-peer-time"), convergence_state=n.get_opt_str("convergence-state"), convergence_time=n.get_opt_int("convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence(max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "max-wait-to-advertise"), oper_max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "oper-max-wait-to-advertise"), up_peers_when_min_expired=yang.gdata.from_xml_opt_int(n, "up-peers-when-min-expired"), up_peers=yang.gdata.from_xml_opt_int(n, "up-peers"), converged_peers=yang.gdata.from_xml_opt_int(n, "converged-peers"), first_up_peer_time=yang.gdata.from_xml_opt_int(n, "first-up-peer-time"), last_up_peer_time=yang.gdata.from_xml_opt_int(n, "last-up-peer-time"), convergence_state=yang.gdata.from_xml_opt_str(n, "convergence-state"), convergence_time=yang.gdata.from_xml_opt_int(n, "convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(yang.adata.MNode):
    admin_state: str
    ignore_default_routes: bool

    mut def __init__(self, admin_state: ?str=None, ignore_default_routes: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if ignore_default_routes != None:
            self.ignore_default_routes = ignore_default_routes
        else:
            self.ignore_default_routes = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ignore_default_routes = self.ignore_default_routes
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=n.get_opt_str("admin-state"), ignore_default_routes=n.get_opt_bool("ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ignore_default_routes=yang.gdata.from_xml_opt_bool(n, "ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _selection_attributes = self.selection_attributes
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if route_resolution is not None:
            self.route_resolution = route_resolution
        else:
            self.route_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()
        self_route_resolution = self.route_resolution
        if self_route_resolution is not None:
            self_route_resolution._parent = self
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        _tunnel_resolution = self.tunnel_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution.from_gdata(n.get_opt_container("route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(yang.adata.MNode):
    admin_state: str
    ignore_default_routes: bool

    mut def __init__(self, admin_state: ?str=None, ignore_default_routes: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if ignore_default_routes != None:
            self.ignore_default_routes = ignore_default_routes
        else:
            self.ignore_default_routes = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ignore_default_routes = self.ignore_default_routes
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=n.get_opt_str("admin-state"), ignore_default_routes=n.get_opt_bool("ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ignore_default_routes=yang.gdata.from_xml_opt_bool(n, "ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _selection_attributes = self.selection_attributes
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if route_resolution is not None:
            self.route_resolution = route_resolution
        else:
            self.route_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()
        self_route_resolution = self.route_resolution
        if self_route_resolution is not None:
            self_route_resolution._parent = self
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        _tunnel_resolution = self.tunnel_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution.from_gdata(n.get_opt_container("route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ipv4_next_hops is not None:
            self.ipv4_next_hops = ipv4_next_hops
        else:
            self.ipv4_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops()
        self_ipv4_next_hops = self.ipv4_next_hops
        if self_ipv4_next_hops is not None:
            self_ipv4_next_hops._parent = self
        if ipv6_next_hops is not None:
            self.ipv6_next_hops = ipv6_next_hops
        else:
            self.ipv6_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops()
        self_ipv6_next_hops = self.ipv6_next_hops
        if self_ipv6_next_hops is not None:
            self_ipv6_next_hops._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_container("ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_container("ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast(yang.adata.MNode):
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution
    rapid_update: bool

    mut def __init__(self, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution=None, rapid_update: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if backup_paths is not None:
            self.backup_paths = backup_paths
        else:
            self.backup_paths = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths()
        self_backup_paths = self.backup_paths
        if self_backup_paths is not None:
            self_backup_paths._parent = self
        if convergence is not None:
            self.convergence = convergence
        else:
            self.convergence = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence()
        self_convergence = self.convergence
        if self_convergence is not None:
            self_convergence._parent = self
        if next_hop_resolution is not None:
            self.next_hop_resolution = next_hop_resolution
        else:
            self.next_hop_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution()
        self_next_hop_resolution = self.next_hop_resolution
        if self_next_hop_resolution is not None:
            self_next_hop_resolution._parent = self
        if rapid_update != None:
            self.rapid_update = rapid_update
        else:
            self.rapid_update = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup_paths = self.backup_paths
        _convergence = self.convergence
        _next_hop_resolution = self.next_hop_resolution
        _rapid_update = self.rapid_update
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast(backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths.from_gdata(n.get_opt_container("backup-paths")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence.from_gdata(n.get_opt_container("convergence")), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution.from_gdata(n.get_opt_container("next-hop-resolution")), rapid_update=n.get_opt_bool("rapid-update"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast(backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths.from_xml(yang.gdata.get_xml_opt_child(n, "backup-paths")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence.from_xml(yang.gdata.get_xml_opt_child(n, "convergence")), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-resolution")), rapid_update=yang.gdata.from_xml_opt_bool(n, "rapid-update"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__oper_max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__up_peers_when_min_expired(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__up_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__converged_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__first_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__last_up_peer_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__convergence_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__convergence_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: int
    oper_max_wait_to_advertise: ?int
    up_peers_when_min_expired: ?int
    up_peers: ?int
    converged_peers: ?int
    first_up_peer_time: ?int
    last_up_peer_time: ?int
    convergence_state: ?str
    convergence_time: ?int

    mut def __init__(self, max_wait_to_advertise: ?int=None, oper_max_wait_to_advertise: ?int, up_peers_when_min_expired: ?int, up_peers: ?int, converged_peers: ?int, first_up_peer_time: ?int, last_up_peer_time: ?int, convergence_state: ?str, convergence_time: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_wait_to_advertise != None:
            self.max_wait_to_advertise = max_wait_to_advertise
        else:
            self.max_wait_to_advertise = 0
        self.oper_max_wait_to_advertise = oper_max_wait_to_advertise
        self.up_peers_when_min_expired = up_peers_when_min_expired
        self.up_peers = up_peers
        self.converged_peers = converged_peers
        self.first_up_peer_time = first_up_peer_time
        self.last_up_peer_time = last_up_peer_time
        self.convergence_state = convergence_state
        self.convergence_time = convergence_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        _oper_max_wait_to_advertise = self.oper_max_wait_to_advertise
        _up_peers_when_min_expired = self.up_peers_when_min_expired
        _up_peers = self.up_peers
        _converged_peers = self.converged_peers
        _first_up_peer_time = self.first_up_peer_time
        _last_up_peer_time = self.last_up_peer_time
        _convergence_state = self.convergence_state
        _convergence_time = self.convergence_time
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        if _oper_max_wait_to_advertise is not None:
            children['oper-max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _oper_max_wait_to_advertise)
        if _up_peers_when_min_expired is not None:
            children['up-peers-when-min-expired'] = yang.gdata.Leaf('uint16', _up_peers_when_min_expired)
        if _up_peers is not None:
            children['up-peers'] = yang.gdata.Leaf('uint16', _up_peers)
        if _converged_peers is not None:
            children['converged-peers'] = yang.gdata.Leaf('uint16', _converged_peers)
        if _first_up_peer_time is not None:
            children['first-up-peer-time'] = yang.gdata.Leaf('uint64', _first_up_peer_time)
        if _last_up_peer_time is not None:
            children['last-up-peer-time'] = yang.gdata.Leaf('uint64', _last_up_peer_time)
        if _convergence_state is not None:
            children['convergence-state'] = yang.gdata.Leaf('enumeration', _convergence_state)
        if _convergence_time is not None:
            children['convergence-time'] = yang.gdata.Leaf('uint64', _convergence_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence(max_wait_to_advertise=n.get_opt_int("max-wait-to-advertise"), oper_max_wait_to_advertise=n.get_opt_int("oper-max-wait-to-advertise"), up_peers_when_min_expired=n.get_opt_int("up-peers-when-min-expired"), up_peers=n.get_opt_int("up-peers"), converged_peers=n.get_opt_int("converged-peers"), first_up_peer_time=n.get_opt_int("first-up-peer-time"), last_up_peer_time=n.get_opt_int("last-up-peer-time"), convergence_state=n.get_opt_str("convergence-state"), convergence_time=n.get_opt_int("convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence(max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "max-wait-to-advertise"), oper_max_wait_to_advertise=yang.gdata.from_xml_opt_int(n, "oper-max-wait-to-advertise"), up_peers_when_min_expired=yang.gdata.from_xml_opt_int(n, "up-peers-when-min-expired"), up_peers=yang.gdata.from_xml_opt_int(n, "up-peers"), converged_peers=yang.gdata.from_xml_opt_int(n, "converged-peers"), first_up_peer_time=yang.gdata.from_xml_opt_int(n, "first-up-peer-time"), last_up_peer_time=yang.gdata.from_xml_opt_int(n, "last-up-peer-time"), convergence_state=yang.gdata.from_xml_opt_str(n, "convergence-state"), convergence_time=yang.gdata.from_xml_opt_int(n, "convergence-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__keep_all_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__next_hop_self_route_reflector(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__inter_as_vpn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast(yang.adata.MNode):
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence
    keep_all_routes: bool
    next_hop_self_route_reflector: bool
    inter_as_vpn: bool
    rapid_update: bool

    mut def __init__(self, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence=None, keep_all_routes: ?bool=None, next_hop_self_route_reflector: ?bool=None, inter_as_vpn: ?bool=None, rapid_update: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if convergence is not None:
            self.convergence = convergence
        else:
            self.convergence = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence()
        self_convergence = self.convergence
        if self_convergence is not None:
            self_convergence._parent = self
        if keep_all_routes != None:
            self.keep_all_routes = keep_all_routes
        else:
            self.keep_all_routes = False
        if next_hop_self_route_reflector != None:
            self.next_hop_self_route_reflector = next_hop_self_route_reflector
        else:
            self.next_hop_self_route_reflector = False
        if inter_as_vpn != None:
            self.inter_as_vpn = inter_as_vpn
        else:
            self.inter_as_vpn = False
        if rapid_update != None:
            self.rapid_update = rapid_update
        else:
            self.rapid_update = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _convergence = self.convergence
        _keep_all_routes = self.keep_all_routes
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        _inter_as_vpn = self.inter_as_vpn
        _rapid_update = self.rapid_update
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        if _keep_all_routes is not None:
            children['keep-all-routes'] = yang.gdata.Leaf('boolean', _keep_all_routes)
        if _next_hop_self_route_reflector is not None:
            children['next-hop-self-route-reflector'] = yang.gdata.Leaf('boolean', _next_hop_self_route_reflector)
        if _inter_as_vpn is not None:
            children['inter-as-vpn'] = yang.gdata.Leaf('boolean', _inter_as_vpn)
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast(convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence.from_gdata(n.get_opt_container("convergence")), keep_all_routes=n.get_opt_bool("keep-all-routes"), next_hop_self_route_reflector=n.get_opt_bool("next-hop-self-route-reflector"), inter_as_vpn=n.get_opt_bool("inter-as-vpn"), rapid_update=n.get_opt_bool("rapid-update"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast(convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence.from_xml(yang.gdata.get_xml_opt_child(n, "convergence")), keep_all_routes=yang.gdata.from_xml_opt_bool(n, "keep-all-routes"), next_hop_self_route_reflector=yang.gdata.from_xml_opt_bool(n, "next-hop-self-route-reflector"), inter_as_vpn=yang.gdata.from_xml_opt_bool(n, "inter-as-vpn"), rapid_update=yang.gdata.from_xml_opt_bool(n, "rapid-update"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__keep_all_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution(yang.adata.MNode):
    admin_state: str
    ignore_default_routes: bool

    mut def __init__(self, admin_state: ?str=None, ignore_default_routes: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if ignore_default_routes != None:
            self.ignore_default_routes = ignore_default_routes
        else:
            self.ignore_default_routes = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ignore_default_routes = self.ignore_default_routes
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=n.get_opt_str("admin-state"), ignore_default_routes=n.get_opt_bool("ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ignore_default_routes=yang.gdata.from_xml_opt_bool(n, "ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _selection_attributes = self.selection_attributes
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if route_resolution is not None:
            self.route_resolution = route_resolution
        else:
            self.route_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution()
        self_route_resolution = self.route_resolution
        if self_route_resolution is not None:
            self_route_resolution._parent = self
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        _tunnel_resolution = self.tunnel_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution.from_gdata(n.get_opt_container("route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution(yang.adata.MNode):
    admin_state: str
    ignore_default_routes: bool

    mut def __init__(self, admin_state: ?str=None, ignore_default_routes: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if ignore_default_routes != None:
            self.ignore_default_routes = ignore_default_routes
        else:
            self.ignore_default_routes = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _ignore_default_routes = self.ignore_default_routes
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=n.get_opt_str("admin-state"), ignore_default_routes=n.get_opt_bool("ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), ignore_default_routes=yang.gdata.from_xml_opt_bool(n, "ignore-default-routes"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: bool

    mut def __init__(self, mandatory: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if mandatory != None:
            self.mandatory = mandatory
        else:
            self.mandatory = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool("mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=yang.gdata.from_xml_opt_bool(n, "mandatory"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if tag is not None:
            self.tag = tag
        else:
            self.tag = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()
        self_tag = self.tag
        if self_tag is not None:
            self_tag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_container("tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_xml(yang.gdata.get_xml_opt_child(n, "tag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if allowed_tunnel_types is not None:
            self.allowed_tunnel_types = allowed_tunnel_types
        else:
            self.allowed_tunnel_types = []
        if selection_attributes is not None:
            self.selection_attributes = selection_attributes
        else:
            self.selection_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()
        self_selection_attributes = self.selection_attributes
        if self_selection_attributes is not None:
            self_selection_attributes._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _selection_attributes = self.selection_attributes
        children['allowed-tunnel-types'] = yang.gdata.LeafList(self.allowed_tunnel_types)
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs("allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_container("selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=yang.gdata.from_xml_opt_strs(n, "allowed-tunnel-types"), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "selection-attributes")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if route_resolution is not None:
            self.route_resolution = route_resolution
        else:
            self.route_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution()
        self_route_resolution = self.route_resolution
        if self_route_resolution is not None:
            self_route_resolution._parent = self
        if tunnel_resolution is not None:
            self.tunnel_resolution = tunnel_resolution
        else:
            self.tunnel_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()
        self_tunnel_resolution = self.tunnel_resolution
        if self_tunnel_resolution is not None:
            self_tunnel_resolution._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        _tunnel_resolution = self.tunnel_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution.from_gdata(n.get_opt_container("route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_container("tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "route-resolution")), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-resolution")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ipv4_next_hops is not None:
            self.ipv4_next_hops = ipv4_next_hops
        else:
            self.ipv4_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops()
        self_ipv4_next_hops = self.ipv4_next_hops
        if self_ipv4_next_hops is not None:
            self_ipv4_next_hops._parent = self
        if ipv6_next_hops is not None:
            self.ipv6_next_hops = ipv6_next_hops
        else:
            self.ipv6_next_hops = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops()
        self_ipv6_next_hops = self.ipv6_next_hops
        if self_ipv6_next_hops is not None:
            self_ipv6_next_hops._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_container("ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_container("ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-next-hops")), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-next-hops")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_self_route_reflector(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__inter_as_vpn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__default_received_encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn(yang.adata.MNode):
    advertise_ipv6_next_hops: bool
    keep_all_routes: bool
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution
    next_hop_self_route_reflector: bool
    inter_as_vpn: bool
    rapid_update: bool
    default_received_encapsulation: str

    mut def __init__(self, advertise_ipv6_next_hops: ?bool=None, keep_all_routes: ?bool=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution=None, next_hop_self_route_reflector: ?bool=None, inter_as_vpn: ?bool=None, rapid_update: ?bool=None, default_received_encapsulation: ?str=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if advertise_ipv6_next_hops != None:
            self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        else:
            self.advertise_ipv6_next_hops = False
        if keep_all_routes != None:
            self.keep_all_routes = keep_all_routes
        else:
            self.keep_all_routes = False
        if next_hop_resolution is not None:
            self.next_hop_resolution = next_hop_resolution
        else:
            self.next_hop_resolution = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution()
        self_next_hop_resolution = self.next_hop_resolution
        if self_next_hop_resolution is not None:
            self_next_hop_resolution._parent = self
        if next_hop_self_route_reflector != None:
            self.next_hop_self_route_reflector = next_hop_self_route_reflector
        else:
            self.next_hop_self_route_reflector = False
        if inter_as_vpn != None:
            self.inter_as_vpn = inter_as_vpn
        else:
            self.inter_as_vpn = False
        if rapid_update != None:
            self.rapid_update = rapid_update
        else:
            self.rapid_update = False
        if default_received_encapsulation != None:
            self.default_received_encapsulation = default_received_encapsulation
        else:
            self.default_received_encapsulation = "vxlan"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _keep_all_routes = self.keep_all_routes
        _next_hop_resolution = self.next_hop_resolution
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        _inter_as_vpn = self.inter_as_vpn
        _rapid_update = self.rapid_update
        _default_received_encapsulation = self.default_received_encapsulation
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _keep_all_routes is not None:
            children['keep-all-routes'] = yang.gdata.Leaf('boolean', _keep_all_routes)
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        if _next_hop_self_route_reflector is not None:
            children['next-hop-self-route-reflector'] = yang.gdata.Leaf('boolean', _next_hop_self_route_reflector)
        if _inter_as_vpn is not None:
            children['inter-as-vpn'] = yang.gdata.Leaf('boolean', _inter_as_vpn)
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        if _default_received_encapsulation is not None:
            children['default-received-encapsulation'] = yang.gdata.Leaf('enumeration', _default_received_encapsulation)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), keep_all_routes=n.get_opt_bool("keep-all-routes"), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution.from_gdata(n.get_opt_container("next-hop-resolution")), next_hop_self_route_reflector=n.get_opt_bool("next-hop-self-route-reflector"), inter_as_vpn=n.get_opt_bool("inter-as-vpn"), rapid_update=n.get_opt_bool("rapid-update"), default_received_encapsulation=n.get_opt_str("default-received-encapsulation"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), keep_all_routes=yang.gdata.from_xml_opt_bool(n, "keep-all-routes"), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution.from_xml(yang.gdata.get_xml_opt_child(n, "next-hop-resolution")), next_hop_self_route_reflector=yang.gdata.from_xml_opt_bool(n, "next-hop-self-route-reflector"), inter_as_vpn=yang.gdata.from_xml_opt_bool(n, "inter-as-vpn"), rapid_update=yang.gdata.from_xml_opt_bool(n, "rapid-update"), default_received_encapsulation=yang.gdata.from_xml_opt_str(n, "default-received-encapsulation"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn()



class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: str
    admin_state: str
    export_policy: list[str]
    import_policy: list[str]
    add_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths
    multipath: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath
    best_path_selection: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection
    received_routes: int
    active_routes: int
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast
    ipv4_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast
    l3vpn_ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast
    ipv6_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast
    l3vpn_ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast
    evpn: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn

    mut def __init__(self, afi_safi_name: str, admin_state: ?str=None, export_policy: ?list[str]=None, import_policy: ?list[str]=None, add_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths=None, multipath: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath=None, best_path_selection: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection=None, received_routes: ?int=None, active_routes: ?int=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast=None, ipv4_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast=None, l3vpn_ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast=None, ipv6_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast=None, l3vpn_ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast=None, evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.afi_safi_name = afi_safi_name
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        if export_policy is not None:
            self.export_policy = export_policy
        else:
            self.export_policy = []
        if import_policy is not None:
            self.import_policy = import_policy
        else:
            self.import_policy = []
        if add_paths is not None:
            self.add_paths = add_paths
        else:
            self.add_paths = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths()
        self_add_paths = self.add_paths
        if self_add_paths is not None:
            self_add_paths._parent = self
        if multipath is not None:
            self.multipath = multipath
        else:
            self.multipath = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath()
        self_multipath = self.multipath
        if self_multipath is not None:
            self_multipath._parent = self
        if best_path_selection is not None:
            self.best_path_selection = best_path_selection
        else:
            self.best_path_selection = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection()
        self_best_path_selection = self.best_path_selection
        if self_best_path_selection is not None:
            self_best_path_selection._parent = self
        if received_routes != None:
            self.received_routes = received_routes
        else:
            self.received_routes = 0
        if active_routes != None:
            self.active_routes = active_routes
        else:
            self.active_routes = 0
        if ipv4_unicast is not None:
            self.ipv4_unicast = ipv4_unicast
        else:
            self.ipv4_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast()
        self_ipv4_unicast = self.ipv4_unicast
        if self_ipv4_unicast is not None:
            self_ipv4_unicast._parent = self
        if ipv4_labeled_unicast is not None:
            self.ipv4_labeled_unicast = ipv4_labeled_unicast
        else:
            self.ipv4_labeled_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast()
        self_ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if self_ipv4_labeled_unicast is not None:
            self_ipv4_labeled_unicast._parent = self
        if l3vpn_ipv4_unicast is not None:
            self.l3vpn_ipv4_unicast = l3vpn_ipv4_unicast
        else:
            self.l3vpn_ipv4_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast()
        self_l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if self_l3vpn_ipv4_unicast is not None:
            self_l3vpn_ipv4_unicast._parent = self
        if ipv6_unicast is not None:
            self.ipv6_unicast = ipv6_unicast
        else:
            self.ipv6_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast()
        self_ipv6_unicast = self.ipv6_unicast
        if self_ipv6_unicast is not None:
            self_ipv6_unicast._parent = self
        if ipv6_labeled_unicast is not None:
            self.ipv6_labeled_unicast = ipv6_labeled_unicast
        else:
            self.ipv6_labeled_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast()
        self_ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if self_ipv6_labeled_unicast is not None:
            self_ipv6_labeled_unicast._parent = self
        if l3vpn_ipv6_unicast is not None:
            self.l3vpn_ipv6_unicast = l3vpn_ipv6_unicast
        else:
            self.l3vpn_ipv6_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast()
        self_l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if self_l3vpn_ipv6_unicast is not None:
            self_l3vpn_ipv6_unicast._parent = self
        if evpn is not None:
            self.evpn = evpn
        else:
            self.evpn = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn()
        self_evpn = self.evpn
        if self_evpn is not None:
            self_evpn._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        _admin_state = self.admin_state
        _add_paths = self.add_paths
        _multipath = self.multipath
        _best_path_selection = self.best_path_selection
        _received_routes = self.received_routes
        _active_routes = self.active_routes
        _ipv4_unicast = self.ipv4_unicast
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        _ipv6_unicast = self.ipv6_unicast
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        _evpn = self.evpn
        if _afi_safi_name is not None:
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        children['export-policy'] = yang.gdata.LeafList(self.export_policy)
        children['import-policy'] = yang.gdata.LeafList(self.import_policy)
        if _add_paths is not None:
            children['add-paths'] = _add_paths.to_gdata()
        if _multipath is not None:
            children['multipath'] = _multipath.to_gdata()
        if _best_path_selection is not None:
            children['best-path-selection'] = _best_path_selection.to_gdata()
        if _received_routes is not None:
            children['received-routes'] = yang.gdata.Leaf('uint64', _received_routes)
        if _active_routes is not None:
            children['active-routes'] = yang.gdata.Leaf('uint64', _active_routes)
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        if _ipv4_labeled_unicast is not None:
            children['ipv4-labeled-unicast'] = _ipv4_labeled_unicast.to_gdata()
        if _l3vpn_ipv4_unicast is not None:
            children['l3vpn-ipv4-unicast'] = _l3vpn_ipv4_unicast.to_gdata()
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        if _ipv6_labeled_unicast is not None:
            children['ipv6-labeled-unicast'] = _ipv6_labeled_unicast.to_gdata()
        if _l3vpn_ipv6_unicast is not None:
            children['l3vpn-ipv6-unicast'] = _l3vpn_ipv6_unicast.to_gdata()
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.afi_safi_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(afi_safi_name=n.get_str("afi-safi-name"), admin_state=n.get_opt_str("admin-state"), export_policy=n.get_opt_strs("export-policy"), import_policy=n.get_opt_strs("import-policy"), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths.from_gdata(n.get_opt_container("add-paths")), multipath=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath.from_gdata(n.get_opt_container("multipath")), best_path_selection=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection.from_gdata(n.get_opt_container("best-path-selection")), received_routes=n.get_opt_int("received-routes"), active_routes=n.get_opt_int("active-routes"), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast.from_gdata(n.get_opt_container("ipv4-unicast")), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast.from_gdata(n.get_opt_container("ipv4-labeled-unicast")), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast.from_gdata(n.get_opt_container("l3vpn-ipv4-unicast")), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast.from_gdata(n.get_opt_container("ipv6-unicast")), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast.from_gdata(n.get_opt_container("ipv6-labeled-unicast")), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast.from_gdata(n.get_opt_container("l3vpn-ipv6-unicast")), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn.from_gdata(n.get_opt_container("evpn")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(afi_safi_name=yang.gdata.from_xml_str(n, "afi-safi-name"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), export_policy=yang.gdata.from_xml_opt_strs(n, "export-policy"), import_policy=yang.gdata.from_xml_opt_strs(n, "import-policy"), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths.from_xml(yang.gdata.get_xml_opt_child(n, "add-paths")), multipath=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath.from_xml(yang.gdata.get_xml_opt_child(n, "multipath")), best_path_selection=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection.from_xml(yang.gdata.get_xml_opt_child(n, "best-path-selection")), received_routes=yang.gdata.from_xml_opt_int(n, "received-routes"), active_routes=yang.gdata.from_xml_opt_int(n, "active-routes"), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-unicast")), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-labeled-unicast")), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "l3vpn-ipv4-unicast")), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-unicast")), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-labeled-unicast")), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "l3vpn-ipv6-unicast")), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn.from_xml(yang.gdata.get_xml_opt_child(n, "evpn")))

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ebgp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ibgp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__preference(yang.adata.MNode):
    ebgp: int
    ibgp: int

    mut def __init__(self, ebgp: ?int=None, ibgp: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ebgp != None:
            self.ebgp = ebgp
        else:
            self.ebgp = 170
        if ibgp != None:
            self.ibgp = ibgp
        else:
            self.ibgp = 170

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ebgp = self.ebgp
        _ibgp = self.ibgp
        if _ebgp is not None:
            children['ebgp'] = yang.gdata.Leaf('uint8', _ebgp)
        if _ibgp is not None:
            children['ibgp'] = yang.gdata.Leaf('uint8', _ibgp)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__preference:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__preference(ebgp=n.get_opt_int("ebgp"), ibgp=n.get_opt_int("ibgp"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__preference()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__preference:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__preference(ebgp=yang.gdata.from_xml_opt_int(n, "ebgp"), ibgp=yang.gdata.from_xml_opt_int(n, "ibgp"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__preference()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__address_family(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__route_table_import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(yang.adata.MNode):
    address_family: str
    route_table_import: ?str

    mut def __init__(self, address_family: str, route_table_import: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.address_family = address_family
        self.route_table_import = route_table_import

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        _route_table_import = self.route_table_import
        if _address_family is not None:
            children['address-family'] = yang.gdata.Leaf('identityref', _address_family)
        if _route_table_import is not None:
            children['route-table-import'] = yang.gdata.Leaf('leafref', _route_table_import)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address_family)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(address_family=n.get_str("address-family"), route_table_import=n.get_opt_str("route-table-import"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(address_family=yang.gdata.from_xml_str(n, "address-family"), route_table_import=yang.gdata.from_xml_opt_str(n, "route-table-import"))

class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'table'
        self.elements = elements

    mut def create(self, address_family):
        for e in self.elements:
            match = True
            if e.address_family != address_family:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(address_family)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address-family'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(yang.adata.MNode):
    table: srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table

    mut def __init__(self, table: list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.table = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table(elements=table)
        self.table._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _table = self.table
        if _table is not None:
            children['table'] = _table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__rib_management:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(table=srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table.from_gdata(n.get_opt_list("table")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__rib_management:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(table=srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table.from_xml(yang.gdata.get_xml_children(n, "table")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__rapid_withdrawal(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__wait_for_fib_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(yang.adata.MNode):
    rapid_withdrawal: bool
    wait_for_fib_install: bool

    mut def __init__(self, rapid_withdrawal: ?bool=None, wait_for_fib_install: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if rapid_withdrawal != None:
            self.rapid_withdrawal = rapid_withdrawal
        else:
            self.rapid_withdrawal = False
        if wait_for_fib_install != None:
            self.wait_for_fib_install = wait_for_fib_install
        else:
            self.wait_for_fib_install = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rapid_withdrawal = self.rapid_withdrawal
        _wait_for_fib_install = self.wait_for_fib_install
        if _rapid_withdrawal is not None:
            children['rapid-withdrawal'] = yang.gdata.Leaf('boolean', _rapid_withdrawal)
        if _wait_for_fib_install is not None:
            children['wait-for-fib-install'] = yang.gdata.Leaf('boolean', _wait_for_fib_install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(rapid_withdrawal=n.get_opt_bool("rapid-withdrawal"), wait_for_fib_install=n.get_opt_bool("wait-for-fib-install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(rapid_withdrawal=yang.gdata.from_xml_opt_bool(n, "rapid-withdrawal"), wait_for_fib_install=yang.gdata.from_xml_opt_bool(n, "wait-for-fib-install"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__half_life(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__max_suppress_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__reuse_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__suppress_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(yang.adata.MNode):
    half_life: int
    max_suppress_time: int
    reuse_threshold: int
    suppress_threshold: int

    mut def __init__(self, half_life: ?int=None, max_suppress_time: ?int=None, reuse_threshold: ?int=None, suppress_threshold: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if half_life != None:
            self.half_life = half_life
        else:
            self.half_life = 15
        if max_suppress_time != None:
            self.max_suppress_time = max_suppress_time
        else:
            self.max_suppress_time = 60
        if reuse_threshold != None:
            self.reuse_threshold = reuse_threshold
        else:
            self.reuse_threshold = 750
        if suppress_threshold != None:
            self.suppress_threshold = suppress_threshold
        else:
            self.suppress_threshold = 3000

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _half_life = self.half_life
        _max_suppress_time = self.max_suppress_time
        _reuse_threshold = self.reuse_threshold
        _suppress_threshold = self.suppress_threshold
        if _half_life is not None:
            children['half-life'] = yang.gdata.Leaf('uint16', _half_life)
        if _max_suppress_time is not None:
            children['max-suppress-time'] = yang.gdata.Leaf('uint16', _max_suppress_time)
        if _reuse_threshold is not None:
            children['reuse-threshold'] = yang.gdata.Leaf('uint16', _reuse_threshold)
        if _suppress_threshold is not None:
            children['suppress-threshold'] = yang.gdata.Leaf('uint16', _suppress_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(half_life=n.get_opt_int("half-life"), max_suppress_time=n.get_opt_int("max-suppress-time"), reuse_threshold=n.get_opt_int("reuse-threshold"), suppress_threshold=n.get_opt_int("suppress-threshold"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(half_life=yang.gdata.from_xml_opt_int(n, "half-life"), max_suppress_time=yang.gdata.from_xml_opt_int(n, "max-suppress-time"), reuse_threshold=yang.gdata.from_xml_opt_int(n, "reuse-threshold"), suppress_threshold=yang.gdata.from_xml_opt_int(n, "suppress-threshold"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(yang.adata.MNode):
    client: bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool=None, cluster_id: ?value):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if client != None:
            self.client = client
        else:
            self.client = False
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        _cluster_id = self.cluster_id
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(client=n.get_opt_bool("client"), cluster_id=n.get_opt_value("cluster-id"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(client=yang.gdata.from_xml_opt_bool(n, "client"), cluster_id=yang.gdata.from_xml_opt_value(n, "cluster-id"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(yang.adata.MNode):
    admin_state: str

    mut def __init__(self, admin_state: ?str=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(admin_state=n.get_opt_str("admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__send_community_type(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__send_community(yang.adata.MNode):
    standard: bool
    large: bool

    mut def __init__(self, standard: ?bool=None, large: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if standard != None:
            self.standard = standard
        else:
            self.standard = True
        if large != None:
            self.large = large
        else:
            self.large = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        _large = self.large
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__send_community(standard=n.get_opt_bool("standard"), large=n.get_opt_bool("large"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__send_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__send_community(standard=yang.gdata.from_xml_opt_bool(n, "standard"), large=yang.gdata.from_xml_opt_bool(n, "large"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__send_community()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__transport__single_hop_connected_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__transport__mtu_discovery(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__transport__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__transport(yang.adata.MNode):
    single_hop_connected_check: bool
    mtu_discovery: ?bool
    tcp_mss: int

    mut def __init__(self, single_hop_connected_check: ?bool=None, mtu_discovery: ?bool, tcp_mss: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if single_hop_connected_check != None:
            self.single_hop_connected_check = single_hop_connected_check
        else:
            self.single_hop_connected_check = True
        self.mtu_discovery = mtu_discovery
        if tcp_mss != None:
            self.tcp_mss = tcp_mss
        else:
            self.tcp_mss = 1024

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _single_hop_connected_check = self.single_hop_connected_check
        _mtu_discovery = self.mtu_discovery
        _tcp_mss = self.tcp_mss
        if _single_hop_connected_check is not None:
            children['single-hop-connected-check'] = yang.gdata.Leaf('boolean', _single_hop_connected_check)
        if _mtu_discovery is not None:
            children['mtu-discovery'] = yang.gdata.Leaf('boolean', _mtu_discovery)
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('uint16', _tcp_mss)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__transport(single_hop_connected_check=n.get_opt_bool("single-hop-connected-check"), mtu_discovery=n.get_opt_bool("mtu-discovery"), tcp_mss=n.get_opt_int("tcp-mss"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__transport()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__transport(single_hop_connected_check=yang.gdata.from_xml_opt_bool(n, "single-hop-connected-check"), mtu_discovery=yang.gdata.from_xml_opt_bool(n, "mtu-discovery"), tcp_mss=yang.gdata.from_xml_opt_int(n, "tcp-mss"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__transport()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag__modifier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry(yang.adata.MNode):
    name: str
    modifier: ?str

    mut def __init__(self, name: str, modifier: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.name = name
        self.modifier = modifier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _modifier = self.modifier
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        if _modifier is not None:
            children['modifier'] = yang.gdata.Leaf('enumeration', _modifier)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry(name=n.get_str("name"), modifier=n.get_opt_str("modifier"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry(name=yang.gdata.from_xml_str(n, "name"), modifier=yang.gdata.from_xml_opt_str(n, "modifier"))

class srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'flag'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__protocols__bgp__trace_options(yang.adata.MNode):
    flag: srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag

    mut def __init__(self, flag: list[srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.flag = srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag(elements=flag)
        self.flag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flag = self.flag
        if _flag is not None:
            children['flag'] = _flag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag.from_gdata(n.get_opt_list("flag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag.from_xml(yang.gdata.get_xml_children(n, "flag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__total_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__total_prefixes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__path_memory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__total_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__total_active_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__total_decayed_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__total_history_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__total_suppressed_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__total_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__up_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__disabled_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__statistics__dynamic_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__statistics(yang.adata.MNode):
    total_paths: int
    total_prefixes: ?int
    path_memory: int
    total_received_routes: int
    total_active_routes: int
    total_decayed_routes: int
    total_history_routes: int
    total_suppressed_routes: int
    total_peers: ?int
    up_peers: ?int
    disabled_peers: ?int
    dynamic_peers: ?int

    mut def __init__(self, total_paths: ?int=None, total_prefixes: ?int, path_memory: ?int=None, total_received_routes: ?int=None, total_active_routes: ?int=None, total_decayed_routes: ?int=None, total_history_routes: ?int=None, total_suppressed_routes: ?int=None, total_peers: ?int, up_peers: ?int, disabled_peers: ?int, dynamic_peers: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if total_paths != None:
            self.total_paths = total_paths
        else:
            self.total_paths = 0
        self.total_prefixes = total_prefixes
        if path_memory != None:
            self.path_memory = path_memory
        else:
            self.path_memory = 0
        if total_received_routes != None:
            self.total_received_routes = total_received_routes
        else:
            self.total_received_routes = 0
        if total_active_routes != None:
            self.total_active_routes = total_active_routes
        else:
            self.total_active_routes = 0
        if total_decayed_routes != None:
            self.total_decayed_routes = total_decayed_routes
        else:
            self.total_decayed_routes = 0
        if total_history_routes != None:
            self.total_history_routes = total_history_routes
        else:
            self.total_history_routes = 0
        if total_suppressed_routes != None:
            self.total_suppressed_routes = total_suppressed_routes
        else:
            self.total_suppressed_routes = 0
        self.total_peers = total_peers
        self.up_peers = up_peers
        self.disabled_peers = disabled_peers
        self.dynamic_peers = dynamic_peers

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _total_paths = self.total_paths
        _total_prefixes = self.total_prefixes
        _path_memory = self.path_memory
        _total_received_routes = self.total_received_routes
        _total_active_routes = self.total_active_routes
        _total_decayed_routes = self.total_decayed_routes
        _total_history_routes = self.total_history_routes
        _total_suppressed_routes = self.total_suppressed_routes
        _total_peers = self.total_peers
        _up_peers = self.up_peers
        _disabled_peers = self.disabled_peers
        _dynamic_peers = self.dynamic_peers
        if _total_paths is not None:
            children['total-paths'] = yang.gdata.Leaf('uint64', _total_paths)
        if _total_prefixes is not None:
            children['total-prefixes'] = yang.gdata.Leaf('uint64', _total_prefixes)
        if _path_memory is not None:
            children['path-memory'] = yang.gdata.Leaf('uint64', _path_memory)
        if _total_received_routes is not None:
            children['total-received-routes'] = yang.gdata.Leaf('uint64', _total_received_routes)
        if _total_active_routes is not None:
            children['total-active-routes'] = yang.gdata.Leaf('uint64', _total_active_routes)
        if _total_decayed_routes is not None:
            children['total-decayed-routes'] = yang.gdata.Leaf('uint64', _total_decayed_routes)
        if _total_history_routes is not None:
            children['total-history-routes'] = yang.gdata.Leaf('uint64', _total_history_routes)
        if _total_suppressed_routes is not None:
            children['total-suppressed-routes'] = yang.gdata.Leaf('uint64', _total_suppressed_routes)
        if _total_peers is not None:
            children['total-peers'] = yang.gdata.Leaf('uint16', _total_peers)
        if _up_peers is not None:
            children['up-peers'] = yang.gdata.Leaf('uint16', _up_peers)
        if _disabled_peers is not None:
            children['disabled-peers'] = yang.gdata.Leaf('uint16', _disabled_peers)
        if _dynamic_peers is not None:
            children['dynamic-peers'] = yang.gdata.Leaf('uint16', _dynamic_peers)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__statistics(total_paths=n.get_opt_int("total-paths"), total_prefixes=n.get_opt_int("total-prefixes"), path_memory=n.get_opt_int("path-memory"), total_received_routes=n.get_opt_int("total-received-routes"), total_active_routes=n.get_opt_int("total-active-routes"), total_decayed_routes=n.get_opt_int("total-decayed-routes"), total_history_routes=n.get_opt_int("total-history-routes"), total_suppressed_routes=n.get_opt_int("total-suppressed-routes"), total_peers=n.get_opt_int("total-peers"), up_peers=n.get_opt_int("up-peers"), disabled_peers=n.get_opt_int("disabled-peers"), dynamic_peers=n.get_opt_int("dynamic-peers"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__statistics(total_paths=yang.gdata.from_xml_opt_int(n, "total-paths"), total_prefixes=yang.gdata.from_xml_opt_int(n, "total-prefixes"), path_memory=yang.gdata.from_xml_opt_int(n, "path-memory"), total_received_routes=yang.gdata.from_xml_opt_int(n, "total-received-routes"), total_active_routes=yang.gdata.from_xml_opt_int(n, "total-active-routes"), total_decayed_routes=yang.gdata.from_xml_opt_int(n, "total-decayed-routes"), total_history_routes=yang.gdata.from_xml_opt_int(n, "total-history-routes"), total_suppressed_routes=yang.gdata.from_xml_opt_int(n, "total-suppressed-routes"), total_peers=yang.gdata.from_xml_opt_int(n, "total-peers"), up_peers=yang.gdata.from_xml_opt_int(n, "up-peers"), disabled_peers=yang.gdata.from_xml_opt_int(n, "disabled-peers"), dynamic_peers=yang.gdata.from_xml_opt_int(n, "dynamic-peers"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__statistics()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__under_maintenance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__maintenance_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__next_hop_self(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(yang.adata.MNode):
    mode: str
    leading_only: bool
    ignore_peer_as: bool

    mut def __init__(self, mode: str, leading_only: ?bool=None, ignore_peer_as: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.mode = mode
        if leading_only != None:
            self.leading_only = leading_only
        else:
            self.leading_only = False
        if ignore_peer_as != None:
            self.ignore_peer_as = ignore_peer_as
        else:
            self.ignore_peer_as = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        _leading_only = self.leading_only
        _ignore_peer_as = self.ignore_peer_as
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(mode=n.get_str("mode"), leading_only=n.get_opt_bool("leading-only"), ignore_peer_as=n.get_opt_bool("ignore-peer-as"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(mode=yang.gdata.from_xml_str(n, "mode"), leading_only=yang.gdata.from_xml_opt_bool(n, "leading-only"), ignore_peer_as=yang.gdata.from_xml_opt_bool(n, "ignore-peer-as"))
        return None



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__replace_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(yang.adata.MNode):
    allow_own_as: ?int
    remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as
    replace_peer_as: ?bool

    mut def __init__(self, allow_own_as: ?int, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as=None, replace_peer_as: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.allow_own_as = allow_own_as
        self.remove_private_as = remove_private_as
        self_remove_private_as = self.remove_private_as
        if self_remove_private_as is not None:
            self_remove_private_as._parent = self
        self.replace_peer_as = replace_peer_as

    mut def create_remove_private_as(self, mode):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(mode)
        self.remove_private_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        _remove_private_as = self.remove_private_as
        _replace_peer_as = self.replace_peer_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        if _replace_peer_as is not None:
            children['replace-peer-as'] = yang.gdata.Leaf('boolean', _replace_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(allow_own_as=n.get_opt_int("allow-own-as"), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as.from_gdata(n.get_opt_container("remove-private-as")), replace_peer_as=n.get_opt_bool("replace-peer-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(allow_own_as=yang.gdata.from_xml_opt_int(n, "allow-own-as"), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as.from_xml(yang.gdata.get_xml_opt_child(n, "remove-private-as")), replace_peer_as=yang.gdata.from_xml_opt_bool(n, "replace-peer-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str

    mut def __init__(self, keychain: ?str, password: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.keychain = keychain
        self.password = password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        _password = self.password
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(keychain=n.get_opt_str("keychain"), password=n.get_opt_str("password"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(keychain=yang.gdata.from_xml_opt_str(n, "keychain"), password=yang.gdata.from_xml_opt_str(n, "password"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__fast_failover(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(yang.adata.MNode):
    enable_bfd: ?bool
    fast_failover: ?bool

    mut def __init__(self, enable_bfd: ?bool, fast_failover: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.enable_bfd = enable_bfd
        self.fast_failover = fast_failover

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable_bfd = self.enable_bfd
        _fast_failover = self.fast_failover
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        if _fast_failover is not None:
            children['fast-failover'] = yang.gdata.Leaf('boolean', _fast_failover)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(enable_bfd=n.get_opt_bool("enable-bfd"), fast_failover=n.get_opt_bool("fast-failover"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(enable_bfd=yang.gdata.from_xml_opt_bool(n, "enable-bfd"), fast_failover=yang.gdata.from_xml_opt_bool(n, "fast-failover"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__maximum_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(yang.adata.MNode):
    admin_state: ?str
    maximum_hops: ?int

    mut def __init__(self, admin_state: ?str, maximum_hops: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.admin_state = admin_state
        self.maximum_hops = maximum_hops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _maximum_hops = self.maximum_hops
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _maximum_hops is not None:
            children['maximum-hops'] = yang.gdata.Leaf('uint8', _maximum_hops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(admin_state=n.get_opt_str("admin-state"), maximum_hops=n.get_opt_int("maximum-hops"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), maximum_hops=yang.gdata.from_xml_opt_int(n, "maximum-hops"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes__block_prefix_sid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes(yang.adata.MNode):
    block_prefix_sid: bool

    mut def __init__(self, block_prefix_sid: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if block_prefix_sid != None:
            self.block_prefix_sid = block_prefix_sid
        else:
            self.block_prefix_sid = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _block_prefix_sid = self.block_prefix_sid
        if _block_prefix_sid is not None:
            children['block-prefix-sid'] = yang.gdata.Leaf('boolean', _block_prefix_sid)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes(block_prefix_sid=n.get_opt_bool("block-prefix-sid"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes(block_prefix_sid=yang.gdata.from_xml_opt_bool(n, "block-prefix-sid"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__stale_routes_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__requested_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart(yang.adata.MNode):
    admin_state: ?str
    stale_routes_time: ?int
    requested_restart_time: int

    mut def __init__(self, admin_state: ?str, stale_routes_time: ?int, requested_restart_time: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.admin_state = admin_state
        self.stale_routes_time = stale_routes_time
        if requested_restart_time != None:
            self.requested_restart_time = requested_restart_time
        else:
            self.requested_restart_time = 300

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _stale_routes_time = self.stale_routes_time
        _requested_restart_time = self.requested_restart_time
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _stale_routes_time is not None:
            children['stale-routes-time'] = yang.gdata.Leaf('uint16', _stale_routes_time)
        if _requested_restart_time is not None:
            children['requested-restart-time'] = yang.gdata.Leaf('uint16', _requested_restart_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart(admin_state=n.get_opt_str("admin-state"), stale_routes_time=n.get_opt_int("stale-routes-time"), requested_restart_time=n.get_opt_int("requested-restart-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), stale_routes_time=yang.gdata.from_xml_opt_int(n, "stale-routes-time"), requested_restart_time=yang.gdata.from_xml_opt_int(n, "requested-restart-time"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__afi_safi_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send_max(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send_multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths(yang.adata.MNode):
    receive: ?bool
    send: ?bool
    send_max: ?int
    send_multipath: ?bool

    mut def __init__(self, receive: ?bool, send: ?bool, send_max: ?int, send_multipath: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.receive = receive
        self.send = send
        self.send_max = send_max
        self.send_multipath = send_multipath

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        _send = self.send
        _send_max = self.send_max
        _send_multipath = self.send_multipath
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        if _send is not None:
            children['send'] = yang.gdata.Leaf('boolean', _send)
        if _send_max is not None:
            children['send-max'] = yang.gdata.Leaf('uint8', _send_max)
        if _send_multipath is not None:
            children['send-multipath'] = yang.gdata.Leaf('empty', _send_multipath)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths(receive=n.get_opt_bool("receive"), send=n.get_opt_bool("send"), send_max=n.get_opt_int("send-max"), send_multipath=n.get_opt_bool("send-multipath"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths(receive=yang.gdata.from_xml_opt_bool(n, "receive"), send=yang.gdata.from_xml_opt_bool(n, "send"), send_max=yang.gdata.from_xml_opt_int(n, "send-max"), send_multipath=yang.gdata.from_xml_opt_bool(n, "send-multipath"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp(admin_state=n.get_opt_str("admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp(yang.adata.MNode):
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp

    mut def __init__(self, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if weighted_ecmp is not None:
            self.weighted_ecmp = weighted_ecmp
        else:
            self.weighted_ecmp = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp()
        self_weighted_ecmp = self.weighted_ecmp
        if self_weighted_ecmp is not None:
            self_weighted_ecmp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp(weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp.from_gdata(n.get_opt_container("weighted-ecmp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp(weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp.from_xml(yang.gdata.get_xml_opt_child(n, "weighted-ecmp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp(admin_state=n.get_opt_str("admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp(yang.adata.MNode):
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp

    mut def __init__(self, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if weighted_ecmp is not None:
            self.weighted_ecmp = weighted_ecmp
        else:
            self.weighted_ecmp = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp()
        self_weighted_ecmp = self.weighted_ecmp
        if self_weighted_ecmp is not None:
            self_weighted_ecmp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp(weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp.from_gdata(n.get_opt_container("weighted-ecmp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp(weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp.from_xml(yang.gdata.get_xml_opt_child(n, "weighted-ecmp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath(yang.adata.MNode):
    ebgp: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp
    ibgp: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp

    mut def __init__(self, ebgp: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp=None, ibgp: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ebgp is not None:
            self.ebgp = ebgp
        else:
            self.ebgp = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp()
        self_ebgp = self.ebgp
        if self_ebgp is not None:
            self_ebgp._parent = self
        if ibgp is not None:
            self.ibgp = ibgp
        else:
            self.ibgp = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp()
        self_ibgp = self.ibgp
        if self_ibgp is not None:
            self_ibgp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ebgp = self.ebgp
        _ibgp = self.ibgp
        if _ebgp is not None:
            children['ebgp'] = _ebgp.to_gdata()
        if _ibgp is not None:
            children['ibgp'] = _ibgp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath(ebgp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp.from_gdata(n.get_opt_container("ebgp")), ibgp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp.from_gdata(n.get_opt_container("ibgp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath(ebgp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp")), ibgp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp.from_xml(yang.gdata.get_xml_opt_child(n, "ibgp")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int=None, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_received_routes != None:
            self.max_received_routes = max_received_routes
        else:
            self.max_received_routes = 4294967295
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth__aggregate_used_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth(yang.adata.MNode):
    add_next_hop_count_to_received_bgp_routes: ?value
    aggregate_used_paths: ?bool

    mut def __init__(self, add_next_hop_count_to_received_bgp_routes: ?value, aggregate_used_paths: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.add_next_hop_count_to_received_bgp_routes = add_next_hop_count_to_received_bgp_routes
        self.aggregate_used_paths = aggregate_used_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        _aggregate_used_paths = self.aggregate_used_paths
        if _add_next_hop_count_to_received_bgp_routes is not None:
            children['add-next-hop-count-to-received-bgp-routes'] = yang.gdata.Leaf('union', _add_next_hop_count_to_received_bgp_routes)
        if _aggregate_used_paths is not None:
            children['aggregate-used-paths'] = yang.gdata.Leaf('boolean', _aggregate_used_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=n.get_opt_value("add-next-hop-count-to-received-bgp-routes"), aggregate_used_paths=n.get_opt_bool("aggregate-used-paths"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=yang.gdata.from_xml_opt_value(n, "add-next-hop-count-to-received-bgp-routes"), aggregate_used_paths=yang.gdata.from_xml_opt_bool(n, "aggregate-used-paths"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted
    link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted=None, link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self
        if link_bandwidth is not None:
            self.link_bandwidth = link_bandwidth
        else:
            self.link_bandwidth = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth()
        self_link_bandwidth = self.link_bandwidth
        if self_link_bandwidth is not None:
            self_link_bandwidth._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        _link_bandwidth = self.link_bandwidth
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        if _link_bandwidth is not None:
            children['link-bandwidth'] = _link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth.from_gdata(n.get_opt_container("link-bandwidth")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "link-bandwidth")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__next_hop_unchanged(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int=None, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_received_routes != None:
            self.max_received_routes = max_received_routes
        else:
            self.max_received_routes = 4294967295
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    next_hop_unchanged: bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, next_hop_unchanged: ?bool=None, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        if next_hop_unchanged != None:
            self.next_hop_unchanged = next_hop_unchanged
        else:
            self.next_hop_unchanged = False
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _next_hop_unchanged = self.next_hop_unchanged
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _next_hop_unchanged is not None:
            children['next-hop-unchanged'] = yang.gdata.Leaf('boolean', _next_hop_unchanged)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), next_hop_unchanged=n.get_opt_bool("next-hop-unchanged"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), next_hop_unchanged=yang.gdata.from_xml_opt_bool(n, "next-hop-unchanged"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int=None, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_received_routes != None:
            self.max_received_routes = max_received_routes
        else:
            self.max_received_routes = 4294967295
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int=None, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_received_routes != None:
            self.max_received_routes = max_received_routes
        else:
            self.max_received_routes = 4294967295
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth__aggregate_used_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth(yang.adata.MNode):
    add_next_hop_count_to_received_bgp_routes: ?value
    aggregate_used_paths: ?bool

    mut def __init__(self, add_next_hop_count_to_received_bgp_routes: ?value, aggregate_used_paths: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.add_next_hop_count_to_received_bgp_routes = add_next_hop_count_to_received_bgp_routes
        self.aggregate_used_paths = aggregate_used_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        _aggregate_used_paths = self.aggregate_used_paths
        if _add_next_hop_count_to_received_bgp_routes is not None:
            children['add-next-hop-count-to-received-bgp-routes'] = yang.gdata.Leaf('union', _add_next_hop_count_to_received_bgp_routes)
        if _aggregate_used_paths is not None:
            children['aggregate-used-paths'] = yang.gdata.Leaf('boolean', _aggregate_used_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=n.get_opt_value("add-next-hop-count-to-received-bgp-routes"), aggregate_used_paths=n.get_opt_bool("aggregate-used-paths"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=yang.gdata.from_xml_opt_value(n, "add-next-hop-count-to-received-bgp-routes"), aggregate_used_paths=yang.gdata.from_xml_opt_bool(n, "aggregate-used-paths"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted
    link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted=None, link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self
        if link_bandwidth is not None:
            self.link_bandwidth = link_bandwidth
        else:
            self.link_bandwidth = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth()
        self_link_bandwidth = self.link_bandwidth
        if self_link_bandwidth is not None:
            self_link_bandwidth._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        _link_bandwidth = self.link_bandwidth
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        if _link_bandwidth is not None:
            children['link-bandwidth'] = _link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth.from_gdata(n.get_opt_container("link-bandwidth")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "link-bandwidth")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__next_hop_unchanged(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int=None, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_received_routes != None:
            self.max_received_routes = max_received_routes
        else:
            self.max_received_routes = 4294967295
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast(yang.adata.MNode):
    next_hop_unchanged: bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted

    mut def __init__(self, next_hop_unchanged: ?bool=None, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if next_hop_unchanged != None:
            self.next_hop_unchanged = next_hop_unchanged
        else:
            self.next_hop_unchanged = False
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _next_hop_unchanged = self.next_hop_unchanged
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _next_hop_unchanged is not None:
            children['next-hop-unchanged'] = yang.gdata.Leaf('boolean', _next_hop_unchanged)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast(next_hop_unchanged=n.get_opt_bool("next-hop-unchanged"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast(next_hop_unchanged=yang.gdata.from_xml_opt_bool(n, "next-hop-unchanged"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int=None, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_received_routes != None:
            self.max_received_routes = max_received_routes
        else:
            self.max_received_routes = 4294967295
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received(yang.adata.MNode):
    max_received_routes: int
    warning_threshold_pct: int

    mut def __init__(self, max_received_routes: ?int=None, warning_threshold_pct: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_received_routes != None:
            self.max_received_routes = max_received_routes
        else:
            self.max_received_routes = 4294967295
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: int

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__default_received_encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted
    default_received_encapsulation: ?str

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted=None, default_received_encapsulation: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self
        self.default_received_encapsulation = default_received_encapsulation

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        _default_received_encapsulation = self.default_received_encapsulation
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        if _default_received_encapsulation is not None:
            children['default-received-encapsulation'] = yang.gdata.Leaf('enumeration', _default_received_encapsulation)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")), default_received_encapsulation=n.get_opt_str("default-received-encapsulation"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")), default_received_encapsulation=yang.gdata.from_xml_opt_str(n, "default-received-encapsulation"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__send_default_route(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received(yang.adata.MNode):
    max_received_routes: int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int=None, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if max_received_routes != None:
            self.max_received_routes = max_received_routes
        else:
            self.max_received_routes = 4294967295
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: int
    prevent_teardown: bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int=None, prevent_teardown: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 90
        if prevent_teardown != None:
            self.prevent_teardown = prevent_teardown
        else:
            self.prevent_teardown = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target(yang.adata.MNode):
    send_default_route: bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted

    mut def __init__(self, send_default_route: ?bool=None, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if send_default_route != None:
            self.send_default_route = send_default_route
        else:
            self.send_default_route = False
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send_default_route = self.send_default_route
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _send_default_route is not None:
            children['send-default-route'] = yang.gdata.Leaf('boolean', _send_default_route)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target(send_default_route=n.get_opt_bool("send-default-route"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target(send_default_route=yang.gdata.from_xml_opt_bool(n, "send-default-route"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target()



class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: str
    admin_state: ?str
    export_policy: list[str]
    import_policy: list[str]
    add_paths: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths
    multipath: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast
    ipv4_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast
    l3vpn_ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast
    ipv6_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast
    l3vpn_ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast
    evpn: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn
    route_target: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target

    mut def __init__(self, afi_safi_name: str, admin_state: ?str, export_policy: ?list[str]=None, import_policy: ?list[str]=None, add_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths=None, multipath: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast=None, ipv4_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast=None, l3vpn_ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast=None, ipv6_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast=None, l3vpn_ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast=None, evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn=None, route_target: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.afi_safi_name = afi_safi_name
        self.admin_state = admin_state
        if export_policy is not None:
            self.export_policy = export_policy
        else:
            self.export_policy = []
        if import_policy is not None:
            self.import_policy = import_policy
        else:
            self.import_policy = []
        if add_paths is not None:
            self.add_paths = add_paths
        else:
            self.add_paths = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths()
        self_add_paths = self.add_paths
        if self_add_paths is not None:
            self_add_paths._parent = self
        if multipath is not None:
            self.multipath = multipath
        else:
            self.multipath = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath()
        self_multipath = self.multipath
        if self_multipath is not None:
            self_multipath._parent = self
        if ipv4_unicast is not None:
            self.ipv4_unicast = ipv4_unicast
        else:
            self.ipv4_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast()
        self_ipv4_unicast = self.ipv4_unicast
        if self_ipv4_unicast is not None:
            self_ipv4_unicast._parent = self
        if ipv4_labeled_unicast is not None:
            self.ipv4_labeled_unicast = ipv4_labeled_unicast
        else:
            self.ipv4_labeled_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast()
        self_ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if self_ipv4_labeled_unicast is not None:
            self_ipv4_labeled_unicast._parent = self
        if l3vpn_ipv4_unicast is not None:
            self.l3vpn_ipv4_unicast = l3vpn_ipv4_unicast
        else:
            self.l3vpn_ipv4_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast()
        self_l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if self_l3vpn_ipv4_unicast is not None:
            self_l3vpn_ipv4_unicast._parent = self
        if ipv6_unicast is not None:
            self.ipv6_unicast = ipv6_unicast
        else:
            self.ipv6_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast()
        self_ipv6_unicast = self.ipv6_unicast
        if self_ipv6_unicast is not None:
            self_ipv6_unicast._parent = self
        if ipv6_labeled_unicast is not None:
            self.ipv6_labeled_unicast = ipv6_labeled_unicast
        else:
            self.ipv6_labeled_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast()
        self_ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if self_ipv6_labeled_unicast is not None:
            self_ipv6_labeled_unicast._parent = self
        if l3vpn_ipv6_unicast is not None:
            self.l3vpn_ipv6_unicast = l3vpn_ipv6_unicast
        else:
            self.l3vpn_ipv6_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast()
        self_l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if self_l3vpn_ipv6_unicast is not None:
            self_l3vpn_ipv6_unicast._parent = self
        if evpn is not None:
            self.evpn = evpn
        else:
            self.evpn = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn()
        self_evpn = self.evpn
        if self_evpn is not None:
            self_evpn._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        _admin_state = self.admin_state
        _add_paths = self.add_paths
        _multipath = self.multipath
        _ipv4_unicast = self.ipv4_unicast
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        _ipv6_unicast = self.ipv6_unicast
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        _evpn = self.evpn
        _route_target = self.route_target
        if _afi_safi_name is not None:
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        children['export-policy'] = yang.gdata.LeafList(self.export_policy)
        children['import-policy'] = yang.gdata.LeafList(self.import_policy)
        if _add_paths is not None:
            children['add-paths'] = _add_paths.to_gdata()
        if _multipath is not None:
            children['multipath'] = _multipath.to_gdata()
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        if _ipv4_labeled_unicast is not None:
            children['ipv4-labeled-unicast'] = _ipv4_labeled_unicast.to_gdata()
        if _l3vpn_ipv4_unicast is not None:
            children['l3vpn-ipv4-unicast'] = _l3vpn_ipv4_unicast.to_gdata()
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        if _ipv6_labeled_unicast is not None:
            children['ipv6-labeled-unicast'] = _ipv6_labeled_unicast.to_gdata()
        if _l3vpn_ipv6_unicast is not None:
            children['l3vpn-ipv6-unicast'] = _l3vpn_ipv6_unicast.to_gdata()
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.afi_safi_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(afi_safi_name=n.get_str("afi-safi-name"), admin_state=n.get_opt_str("admin-state"), export_policy=n.get_opt_strs("export-policy"), import_policy=n.get_opt_strs("import-policy"), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths.from_gdata(n.get_opt_container("add-paths")), multipath=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath.from_gdata(n.get_opt_container("multipath")), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast.from_gdata(n.get_opt_container("ipv4-unicast")), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast.from_gdata(n.get_opt_container("ipv4-labeled-unicast")), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast.from_gdata(n.get_opt_container("l3vpn-ipv4-unicast")), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast.from_gdata(n.get_opt_container("ipv6-unicast")), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast.from_gdata(n.get_opt_container("ipv6-labeled-unicast")), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast.from_gdata(n.get_opt_container("l3vpn-ipv6-unicast")), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn.from_gdata(n.get_opt_container("evpn")), route_target=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target.from_gdata(n.get_opt_container("route-target")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(afi_safi_name=yang.gdata.from_xml_str(n, "afi-safi-name"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), export_policy=yang.gdata.from_xml_opt_strs(n, "export-policy"), import_policy=yang.gdata.from_xml_opt_strs(n, "import-policy"), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths.from_xml(yang.gdata.get_xml_opt_child(n, "add-paths")), multipath=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath.from_xml(yang.gdata.get_xml_opt_child(n, "multipath")), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-unicast")), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-labeled-unicast")), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "l3vpn-ipv4-unicast")), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-unicast")), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-labeled-unicast")), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "l3vpn-ipv6-unicast")), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn.from_xml(yang.gdata.get_xml_opt_child(n, "evpn")), route_target=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_global_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_local_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(yang.adata.MNode):
    as_number: ?int
    prepend_global_as: ?bool
    prepend_local_as: ?bool

    mut def __init__(self, as_number: ?int, prepend_global_as: ?bool, prepend_local_as: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.as_number = as_number
        self.prepend_global_as = prepend_global_as
        self.prepend_local_as = prepend_local_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _prepend_global_as = self.prepend_global_as
        _prepend_local_as = self.prepend_local_as
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _prepend_global_as is not None:
            children['prepend-global-as'] = yang.gdata.Leaf('boolean', _prepend_global_as)
        if _prepend_local_as is not None:
            children['prepend-local-as'] = yang.gdata.Leaf('boolean', _prepend_local_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(as_number=n.get_opt_int("as-number"), prepend_global_as=n.get_opt_bool("prepend-global-as"), prepend_local_as=n.get_opt_bool("prepend-local-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(as_number=yang.gdata.from_xml_opt_int(n, "as-number"), prepend_global_as=yang.gdata.from_xml_opt_bool(n, "prepend-global-as"), prepend_local_as=yang.gdata.from_xml_opt_bool(n, "prepend-local-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_flap_damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(yang.adata.MNode):
    client: ?bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool, cluster_id: ?value):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.client = client
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        _cluster_id = self.cluster_id
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(client=n.get_opt_bool("client"), cluster_id=n.get_opt_value("cluster-id"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(client=yang.gdata.from_xml_opt_bool(n, "client"), cluster_id=yang.gdata.from_xml_opt_value(n, "cluster-id"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community_type(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(yang.adata.MNode):
    standard: ?bool
    large: ?bool

    mut def __init__(self, standard: ?bool, large: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.standard = standard
        self.large = large

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        _large = self.large
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(standard=n.get_opt_bool("standard"), large=n.get_opt_bool("large"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(standard=yang.gdata.from_xml_opt_bool(n, "standard"), large=yang.gdata.from_xml_opt_bool(n, "large"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv4_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv6_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(yang.adata.MNode):
    ipv4_unicast: bool
    ipv6_unicast: bool
    export_policy: ?str

    mut def __init__(self, ipv4_unicast: ?bool=None, ipv6_unicast: ?bool=None, export_policy: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if ipv4_unicast != None:
            self.ipv4_unicast = ipv4_unicast
        else:
            self.ipv4_unicast = False
        if ipv6_unicast != None:
            self.ipv6_unicast = ipv6_unicast
        else:
            self.ipv6_unicast = False
        self.export_policy = export_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_unicast = self.ipv4_unicast
        _ipv6_unicast = self.ipv6_unicast
        _export_policy = self.export_policy
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = yang.gdata.Leaf('boolean', _ipv4_unicast)
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = yang.gdata.Leaf('boolean', _ipv6_unicast)
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(ipv4_unicast=n.get_opt_bool("ipv4-unicast"), ipv6_unicast=n.get_opt_bool("ipv6-unicast"), export_policy=n.get_opt_str("export-policy"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(ipv4_unicast=yang.gdata.from_xml_opt_bool(n, "ipv4-unicast"), ipv6_unicast=yang.gdata.from_xml_opt_bool(n, "ipv6-unicast"), export_policy=yang.gdata.from_xml_opt_str(n, "export-policy"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__connect_retry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__keepalive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__minimum_advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__prefix_limit_restart_timer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__timers(yang.adata.MNode):
    connect_retry: int
    hold_time: int
    keepalive_interval: ?int
    minimum_advertisement_interval: int
    prefix_limit_restart_timer: int

    mut def __init__(self, connect_retry: ?int=None, hold_time: ?int=None, keepalive_interval: ?int, minimum_advertisement_interval: ?int=None, prefix_limit_restart_timer: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if connect_retry != None:
            self.connect_retry = connect_retry
        else:
            self.connect_retry = 120
        if hold_time != None:
            self.hold_time = hold_time
        else:
            self.hold_time = 90
        self.keepalive_interval = keepalive_interval
        if minimum_advertisement_interval != None:
            self.minimum_advertisement_interval = minimum_advertisement_interval
        else:
            self.minimum_advertisement_interval = 5
        if prefix_limit_restart_timer != None:
            self.prefix_limit_restart_timer = prefix_limit_restart_timer
        else:
            self.prefix_limit_restart_timer = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _connect_retry = self.connect_retry
        _hold_time = self.hold_time
        _keepalive_interval = self.keepalive_interval
        _minimum_advertisement_interval = self.minimum_advertisement_interval
        _prefix_limit_restart_timer = self.prefix_limit_restart_timer
        if _connect_retry is not None:
            children['connect-retry'] = yang.gdata.Leaf('uint16', _connect_retry)
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('uint16', _hold_time)
        if _keepalive_interval is not None:
            children['keepalive-interval'] = yang.gdata.Leaf('uint16', _keepalive_interval)
        if _minimum_advertisement_interval is not None:
            children['minimum-advertisement-interval'] = yang.gdata.Leaf('uint16', _minimum_advertisement_interval)
        if _prefix_limit_restart_timer is not None:
            children['prefix-limit-restart-timer'] = yang.gdata.Leaf('uint16', _prefix_limit_restart_timer)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__timers(connect_retry=n.get_opt_int("connect-retry"), hold_time=n.get_opt_int("hold-time"), keepalive_interval=n.get_opt_int("keepalive-interval"), minimum_advertisement_interval=n.get_opt_int("minimum-advertisement-interval"), prefix_limit_restart_timer=n.get_opt_int("prefix-limit-restart-timer"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__timers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__timers(connect_retry=yang.gdata.from_xml_opt_int(n, "connect-retry"), hold_time=yang.gdata.from_xml_opt_int(n, "hold-time"), keepalive_interval=yang.gdata.from_xml_opt_int(n, "keepalive-interval"), minimum_advertisement_interval=yang.gdata.from_xml_opt_int(n, "minimum-advertisement-interval"), prefix_limit_restart_timer=yang.gdata.from_xml_opt_int(n, "prefix-limit-restart-timer"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__timers()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag__modifier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry(yang.adata.MNode):
    name: str
    modifier: ?str

    mut def __init__(self, name: str, modifier: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.name = name
        self.modifier = modifier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _modifier = self.modifier
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        if _modifier is not None:
            children['modifier'] = yang.gdata.Leaf('enumeration', _modifier)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry(name=n.get_str("name"), modifier=n.get_opt_str("modifier"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry(name=yang.gdata.from_xml_str(n, "name"), modifier=yang.gdata.from_xml_opt_str(n, "modifier"))

class srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'flag'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options(yang.adata.MNode):
    flag: srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag

    mut def __init__(self, flag: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.flag = srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag(elements=flag)
        self.flag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flag = self.flag
        if _flag is not None:
            children['flag'] = _flag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag.from_gdata(n.get_opt_list("flag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag.from_xml(yang.gdata.get_xml_children(n, "flag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__mtu_discovery(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__passive_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__local_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__transport(yang.adata.MNode):
    mtu_discovery: ?bool
    tcp_mss: ?int
    passive_mode: bool
    local_address: ?str

    mut def __init__(self, mtu_discovery: ?bool, tcp_mss: ?int, passive_mode: ?bool=None, local_address: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.mtu_discovery = mtu_discovery
        self.tcp_mss = tcp_mss
        if passive_mode != None:
            self.passive_mode = passive_mode
        else:
            self.passive_mode = False
        self.local_address = local_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mtu_discovery = self.mtu_discovery
        _tcp_mss = self.tcp_mss
        _passive_mode = self.passive_mode
        _local_address = self.local_address
        if _mtu_discovery is not None:
            children['mtu-discovery'] = yang.gdata.Leaf('boolean', _mtu_discovery)
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('uint16', _tcp_mss)
        if _passive_mode is not None:
            children['passive-mode'] = yang.gdata.Leaf('boolean', _passive_mode)
        if _local_address is not None:
            children['local-address'] = yang.gdata.Leaf('union', _local_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__transport(mtu_discovery=n.get_opt_bool("mtu-discovery"), tcp_mss=n.get_opt_int("tcp-mss"), passive_mode=n.get_opt_bool("passive-mode"), local_address=n.get_opt_str("local-address"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__transport()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__transport(mtu_discovery=yang.gdata.from_xml_opt_bool(n, "mtu-discovery"), tcp_mss=yang.gdata.from_xml_opt_int(n, "tcp-mss"), passive_mode=yang.gdata.from_xml_opt_bool(n, "passive-mode"), local_address=yang.gdata.from_xml_opt_str(n, "local-address"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__transport()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__total_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__total_prefixes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__path_memory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__total_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__total_active_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__total_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__up_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__disabled_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics__dynamic_peers(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics(yang.adata.MNode):
    total_paths: int
    total_prefixes: ?int
    path_memory: int
    total_received_routes: int
    total_active_routes: int
    total_peers: ?int
    up_peers: ?int
    disabled_peers: ?int
    dynamic_peers: ?int

    mut def __init__(self, total_paths: ?int=None, total_prefixes: ?int, path_memory: ?int=None, total_received_routes: ?int=None, total_active_routes: ?int=None, total_peers: ?int, up_peers: ?int, disabled_peers: ?int, dynamic_peers: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if total_paths != None:
            self.total_paths = total_paths
        else:
            self.total_paths = 0
        self.total_prefixes = total_prefixes
        if path_memory != None:
            self.path_memory = path_memory
        else:
            self.path_memory = 0
        if total_received_routes != None:
            self.total_received_routes = total_received_routes
        else:
            self.total_received_routes = 0
        if total_active_routes != None:
            self.total_active_routes = total_active_routes
        else:
            self.total_active_routes = 0
        self.total_peers = total_peers
        self.up_peers = up_peers
        self.disabled_peers = disabled_peers
        self.dynamic_peers = dynamic_peers

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _total_paths = self.total_paths
        _total_prefixes = self.total_prefixes
        _path_memory = self.path_memory
        _total_received_routes = self.total_received_routes
        _total_active_routes = self.total_active_routes
        _total_peers = self.total_peers
        _up_peers = self.up_peers
        _disabled_peers = self.disabled_peers
        _dynamic_peers = self.dynamic_peers
        if _total_paths is not None:
            children['total-paths'] = yang.gdata.Leaf('uint64', _total_paths)
        if _total_prefixes is not None:
            children['total-prefixes'] = yang.gdata.Leaf('uint64', _total_prefixes)
        if _path_memory is not None:
            children['path-memory'] = yang.gdata.Leaf('uint64', _path_memory)
        if _total_received_routes is not None:
            children['total-received-routes'] = yang.gdata.Leaf('uint64', _total_received_routes)
        if _total_active_routes is not None:
            children['total-active-routes'] = yang.gdata.Leaf('uint64', _total_active_routes)
        if _total_peers is not None:
            children['total-peers'] = yang.gdata.Leaf('uint16', _total_peers)
        if _up_peers is not None:
            children['up-peers'] = yang.gdata.Leaf('uint16', _up_peers)
        if _disabled_peers is not None:
            children['disabled-peers'] = yang.gdata.Leaf('uint16', _disabled_peers)
        if _dynamic_peers is not None:
            children['dynamic-peers'] = yang.gdata.Leaf('uint16', _dynamic_peers)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics(total_paths=n.get_opt_int("total-paths"), total_prefixes=n.get_opt_int("total-prefixes"), path_memory=n.get_opt_int("path-memory"), total_received_routes=n.get_opt_int("total-received-routes"), total_active_routes=n.get_opt_int("total-active-routes"), total_peers=n.get_opt_int("total-peers"), up_peers=n.get_opt_int("up-peers"), disabled_peers=n.get_opt_int("disabled-peers"), dynamic_peers=n.get_opt_int("dynamic-peers"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics(total_paths=yang.gdata.from_xml_opt_int(n, "total-paths"), total_prefixes=yang.gdata.from_xml_opt_int(n, "total-prefixes"), path_memory=yang.gdata.from_xml_opt_int(n, "path-memory"), total_received_routes=yang.gdata.from_xml_opt_int(n, "total-received-routes"), total_active_routes=yang.gdata.from_xml_opt_int(n, "total-active-routes"), total_peers=yang.gdata.from_xml_opt_int(n, "total-peers"), up_peers=yang.gdata.from_xml_opt_int(n, "up-peers"), disabled_peers=yang.gdata.from_xml_opt_int(n, "disabled-peers"), dynamic_peers=yang.gdata.from_xml_opt_int(n, "dynamic-peers"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics()



class srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(yang.adata.MNode):
    group_name: str
    admin_state: str
    description: ?str
    under_maintenance: ?bool
    maintenance_group: ?str
    export_policy: list[str]
    import_policy: list[str]
    local_preference: ?int
    next_hop_self: bool
    peer_as: ?int
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication
    failure_detection: srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection
    multihop: srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop
    optional_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi
    local_as: srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as
    route_flap_damping: bool
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector
    send_community_type: list[str]
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community
    send_default_route: srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route
    timers: srl_nokia_network_instance__network_instance__protocols__bgp__group__timers
    trace_options: srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options
    transport: srl_nokia_network_instance__network_instance__protocols__bgp__group__transport
    statistics: srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics

    mut def __init__(self, group_name: str, admin_state: ?str=None, description: ?str, under_maintenance: ?bool, maintenance_group: ?str, export_policy: ?list[str]=None, import_policy: ?list[str]=None, local_preference: ?int, next_hop_self: ?bool=None, peer_as: ?int, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication=None, failure_detection: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection=None, multihop: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop=None, optional_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart=None, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]=[], local_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as=None, route_flap_damping: ?bool=None, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector=None, send_community_type: ?list[str]=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community=None, send_default_route: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route=None, timers: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__timers=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options=None, transport: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__transport=None, statistics: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.group_name = group_name
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.description = description
        self.under_maintenance = under_maintenance
        self.maintenance_group = maintenance_group
        if export_policy is not None:
            self.export_policy = export_policy
        else:
            self.export_policy = []
        if import_policy is not None:
            self.import_policy = import_policy
        else:
            self.import_policy = []
        self.local_preference = local_preference
        if next_hop_self != None:
            self.next_hop_self = next_hop_self
        else:
            self.next_hop_self = False
        self.peer_as = peer_as
        if as_path_options is not None:
            self.as_path_options = as_path_options
        else:
            self.as_path_options = srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()
        self_as_path_options = self.as_path_options
        if self_as_path_options is not None:
            self_as_path_options._parent = self
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()
        self_authentication = self.authentication
        if self_authentication is not None:
            self_authentication._parent = self
        if failure_detection is not None:
            self.failure_detection = failure_detection
        else:
            self.failure_detection = srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()
        self_failure_detection = self.failure_detection
        if self_failure_detection is not None:
            self_failure_detection._parent = self
        if multihop is not None:
            self.multihop = multihop
        else:
            self.multihop = srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()
        self_multihop = self.multihop
        if self_multihop is not None:
            self_multihop._parent = self
        if optional_attributes is not None:
            self.optional_attributes = optional_attributes
        else:
            self.optional_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes()
        self_optional_attributes = self.optional_attributes
        if self_optional_attributes is not None:
            self_optional_attributes._parent = self
        if graceful_restart is not None:
            self.graceful_restart = graceful_restart
        else:
            self.graceful_restart = srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart()
        self_graceful_restart = self.graceful_restart
        if self_graceful_restart is not None:
            self_graceful_restart._parent = self
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi(elements=afi_safi)
        self.afi_safi._parent = self
        if local_as is not None:
            self.local_as = local_as
        else:
            self.local_as = srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()
        self_local_as = self.local_as
        if self_local_as is not None:
            self_local_as._parent = self
        if route_flap_damping != None:
            self.route_flap_damping = route_flap_damping
        else:
            self.route_flap_damping = False
        if route_reflector is not None:
            self.route_reflector = route_reflector
        else:
            self.route_reflector = srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()
        self_route_reflector = self.route_reflector
        if self_route_reflector is not None:
            self_route_reflector._parent = self
        if send_community_type is not None:
            self.send_community_type = send_community_type
        else:
            self.send_community_type = []
        if send_community is not None:
            self.send_community = send_community
        else:
            self.send_community = srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()
        self_send_community = self.send_community
        if self_send_community is not None:
            self_send_community._parent = self
        if send_default_route is not None:
            self.send_default_route = send_default_route
        else:
            self.send_default_route = srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()
        self_send_default_route = self.send_default_route
        if self_send_default_route is not None:
            self_send_default_route._parent = self
        if timers is not None:
            self.timers = timers
        else:
            self.timers = srl_nokia_network_instance__network_instance__protocols__bgp__group__timers()
        self_timers = self.timers
        if self_timers is not None:
            self_timers._parent = self
        if trace_options is not None:
            self.trace_options = trace_options
        else:
            self.trace_options = srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options()
        self_trace_options = self.trace_options
        if self_trace_options is not None:
            self_trace_options._parent = self
        if transport is not None:
            self.transport = transport
        else:
            self.transport = srl_nokia_network_instance__network_instance__protocols__bgp__group__transport()
        self_transport = self.transport
        if self_transport is not None:
            self_transport._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        _admin_state = self.admin_state
        _description = self.description
        _under_maintenance = self.under_maintenance
        _maintenance_group = self.maintenance_group
        _local_preference = self.local_preference
        _next_hop_self = self.next_hop_self
        _peer_as = self.peer_as
        _as_path_options = self.as_path_options
        _authentication = self.authentication
        _failure_detection = self.failure_detection
        _multihop = self.multihop
        _optional_attributes = self.optional_attributes
        _graceful_restart = self.graceful_restart
        _afi_safi = self.afi_safi
        _local_as = self.local_as
        _route_flap_damping = self.route_flap_damping
        _route_reflector = self.route_reflector
        _send_community = self.send_community
        _send_default_route = self.send_default_route
        _timers = self.timers
        _trace_options = self.trace_options
        _transport = self.transport
        _statistics = self.statistics
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _under_maintenance is not None:
            children['under-maintenance'] = yang.gdata.Leaf('boolean', _under_maintenance)
        if _maintenance_group is not None:
            children['maintenance-group'] = yang.gdata.Leaf('string', _maintenance_group)
        children['export-policy'] = yang.gdata.LeafList(self.export_policy)
        children['import-policy'] = yang.gdata.LeafList(self.import_policy)
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        if _next_hop_self is not None:
            children['next-hop-self'] = yang.gdata.Leaf('boolean', _next_hop_self)
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('uint32', _peer_as)
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        if _failure_detection is not None:
            children['failure-detection'] = _failure_detection.to_gdata()
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        if _optional_attributes is not None:
            children['optional-attributes'] = _optional_attributes.to_gdata()
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        if _local_as is not None:
            children['local-as'] = _local_as.to_gdata()
        if _route_flap_damping is not None:
            children['route-flap-damping'] = yang.gdata.Leaf('boolean', _route_flap_damping)
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        children['send-community-type'] = yang.gdata.LeafList(self.send_community_type)
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        if _send_default_route is not None:
            children['send-default-route'] = _send_default_route.to_gdata()
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.group_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(group_name=n.get_str("group-name"), admin_state=n.get_opt_str("admin-state"), description=n.get_opt_str("description"), under_maintenance=n.get_opt_bool("under-maintenance"), maintenance_group=n.get_opt_str("maintenance-group"), export_policy=n.get_opt_strs("export-policy"), import_policy=n.get_opt_strs("import-policy"), local_preference=n.get_opt_int("local-preference"), next_hop_self=n.get_opt_bool("next-hop-self"), peer_as=n.get_opt_int("peer-as"), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options.from_gdata(n.get_opt_container("as-path-options")), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication.from_gdata(n.get_opt_container("authentication")), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection.from_gdata(n.get_opt_container("failure-detection")), multihop=srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop.from_gdata(n.get_opt_container("multihop")), optional_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes.from_gdata(n.get_opt_container("optional-attributes")), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart.from_gdata(n.get_opt_container("graceful-restart")), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi.from_gdata(n.get_opt_list("afi-safi")), local_as=srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as.from_gdata(n.get_opt_container("local-as")), route_flap_damping=n.get_opt_bool("route-flap-damping"), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector.from_gdata(n.get_opt_container("route-reflector")), send_community_type=n.get_opt_strs("send-community-type"), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community.from_gdata(n.get_opt_container("send-community")), send_default_route=srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route.from_gdata(n.get_opt_container("send-default-route")), timers=srl_nokia_network_instance__network_instance__protocols__bgp__group__timers.from_gdata(n.get_opt_container("timers")), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options.from_gdata(n.get_opt_container("trace-options")), transport=srl_nokia_network_instance__network_instance__protocols__bgp__group__transport.from_gdata(n.get_opt_container("transport")), statistics=srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics.from_gdata(n.get_opt_container("statistics")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(group_name=yang.gdata.from_xml_str(n, "group-name"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), description=yang.gdata.from_xml_opt_str(n, "description"), under_maintenance=yang.gdata.from_xml_opt_bool(n, "under-maintenance"), maintenance_group=yang.gdata.from_xml_opt_str(n, "maintenance-group"), export_policy=yang.gdata.from_xml_opt_strs(n, "export-policy"), import_policy=yang.gdata.from_xml_opt_strs(n, "import-policy"), local_preference=yang.gdata.from_xml_opt_int(n, "local-preference"), next_hop_self=yang.gdata.from_xml_opt_bool(n, "next-hop-self"), peer_as=yang.gdata.from_xml_opt_int(n, "peer-as"), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options.from_xml(yang.gdata.get_xml_opt_child(n, "as-path-options")), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication.from_xml(yang.gdata.get_xml_opt_child(n, "authentication")), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection.from_xml(yang.gdata.get_xml_opt_child(n, "failure-detection")), multihop=srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop.from_xml(yang.gdata.get_xml_opt_child(n, "multihop")), optional_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "optional-attributes")), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-restart")), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi.from_xml(yang.gdata.get_xml_children(n, "afi-safi")), local_as=srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as.from_xml(yang.gdata.get_xml_opt_child(n, "local-as")), route_flap_damping=yang.gdata.from_xml_opt_bool(n, "route-flap-damping"), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector.from_xml(yang.gdata.get_xml_opt_child(n, "route-reflector")), send_community_type=yang.gdata.from_xml_opt_strs(n, "send-community-type"), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community.from_xml(yang.gdata.get_xml_opt_child(n, "send-community")), send_default_route=srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route.from_xml(yang.gdata.get_xml_opt_child(n, "send-default-route")), timers=srl_nokia_network_instance__network_instance__protocols__bgp__group__timers.from_xml(yang.gdata.get_xml_opt_child(n, "timers")), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options.from_xml(yang.gdata.get_xml_opt_child(n, "trace-options")), transport=srl_nokia_network_instance__network_instance__protocols__bgp__group__transport.from_xml(yang.gdata.get_xml_opt_child(n, "transport")), statistics=srl_nokia_network_instance__network_instance__protocols__bgp__group__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")))

class srl_nokia_network_instance__network_instance__protocols__bgp__group(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__group_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__under_maintenance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__maintenance_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__next_hop_self(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__last_prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(yang.adata.MNode):
    mode: str
    leading_only: bool
    ignore_peer_as: bool

    mut def __init__(self, mode: str, leading_only: ?bool=None, ignore_peer_as: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.mode = mode
        if leading_only != None:
            self.leading_only = leading_only
        else:
            self.leading_only = False
        if ignore_peer_as != None:
            self.ignore_peer_as = ignore_peer_as
        else:
            self.ignore_peer_as = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        _leading_only = self.leading_only
        _ignore_peer_as = self.ignore_peer_as
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(mode=n.get_str("mode"), leading_only=n.get_opt_bool("leading-only"), ignore_peer_as=n.get_opt_bool("ignore-peer-as"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(mode=yang.gdata.from_xml_str(n, "mode"), leading_only=yang.gdata.from_xml_opt_bool(n, "leading-only"), ignore_peer_as=yang.gdata.from_xml_opt_bool(n, "ignore-peer-as"))
        return None



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__replace_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(yang.adata.MNode):
    allow_own_as: ?int
    remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as
    replace_peer_as: ?bool

    mut def __init__(self, allow_own_as: ?int, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as=None, replace_peer_as: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.allow_own_as = allow_own_as
        self.remove_private_as = remove_private_as
        self_remove_private_as = self.remove_private_as
        if self_remove_private_as is not None:
            self_remove_private_as._parent = self
        self.replace_peer_as = replace_peer_as

    mut def create_remove_private_as(self, mode):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(mode)
        self.remove_private_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        _remove_private_as = self.remove_private_as
        _replace_peer_as = self.replace_peer_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        if _replace_peer_as is not None:
            children['replace-peer-as'] = yang.gdata.Leaf('boolean', _replace_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(allow_own_as=n.get_opt_int("allow-own-as"), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as.from_gdata(n.get_opt_container("remove-private-as")), replace_peer_as=n.get_opt_bool("replace-peer-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(allow_own_as=yang.gdata.from_xml_opt_int(n, "allow-own-as"), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as.from_xml(yang.gdata.get_xml_opt_child(n, "remove-private-as")), replace_peer_as=yang.gdata.from_xml_opt_bool(n, "replace-peer-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__transmit_active(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str
    transmit_active: ?bool

    mut def __init__(self, keychain: ?str, password: ?str, transmit_active: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.keychain = keychain
        self.password = password
        self.transmit_active = transmit_active

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        _password = self.password
        _transmit_active = self.transmit_active
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        if _transmit_active is not None:
            children['transmit-active'] = yang.gdata.Leaf('boolean', _transmit_active)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(keychain=n.get_opt_str("keychain"), password=n.get_opt_str("password"), transmit_active=n.get_opt_bool("transmit-active"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(keychain=yang.gdata.from_xml_opt_str(n, "keychain"), password=yang.gdata.from_xml_opt_str(n, "password"), transmit_active=yang.gdata.from_xml_opt_bool(n, "transmit-active"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__fast_failover(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(yang.adata.MNode):
    enable_bfd: ?bool
    fast_failover: ?bool

    mut def __init__(self, enable_bfd: ?bool, fast_failover: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.enable_bfd = enable_bfd
        self.fast_failover = fast_failover

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable_bfd = self.enable_bfd
        _fast_failover = self.fast_failover
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        if _fast_failover is not None:
            children['fast-failover'] = yang.gdata.Leaf('boolean', _fast_failover)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(enable_bfd=n.get_opt_bool("enable-bfd"), fast_failover=n.get_opt_bool("fast-failover"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(enable_bfd=yang.gdata.from_xml_opt_bool(n, "enable-bfd"), fast_failover=yang.gdata.from_xml_opt_bool(n, "fast-failover"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__stale_routes_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__requested_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__number_of_restarts(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__last_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__helper_active(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi__forwarding_preserved(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry(yang.adata.MNode):
    name: str
    forwarding_preserved: ?bool

    mut def __init__(self, name: str, forwarding_preserved: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.name = name
        self.forwarding_preserved = forwarding_preserved

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _forwarding_preserved = self.forwarding_preserved
        if _name is not None:
            children['name'] = yang.gdata.Leaf('identityref', _name)
        if _forwarding_preserved is not None:
            children['forwarding-preserved'] = yang.gdata.Leaf('boolean', _forwarding_preserved)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry(name=n.get_str("name"), forwarding_preserved=n.get_opt_bool("forwarding-preserved"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry(name=yang.gdata.from_xml_str(n, "name"), forwarding_preserved=yang.gdata.from_xml_opt_bool(n, "forwarding-preserved"))

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability(yang.adata.MNode):
    restart_time: ?int
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi

    mut def __init__(self, restart_time: ?int, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.restart_time = restart_time
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi(elements=afi_safi)
        self.afi_safi._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restart_time = self.restart_time
        _afi_safi = self.afi_safi
        if _restart_time is not None:
            children['restart-time'] = yang.gdata.Leaf('uint16', _restart_time)
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability(restart_time=n.get_opt_int("restart-time"), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi.from_gdata(n.get_opt_list("afi-safi")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability(restart_time=yang.gdata.from_xml_opt_int(n, "restart-time"), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability__afi_safi.from_xml(yang.gdata.get_xml_children(n, "afi-safi")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(yang.adata.MNode):
    admin_state: ?str
    stale_routes_time: ?int
    requested_restart_time: int
    number_of_restarts: ?int
    last_restart_time: ?str
    helper_active: ?bool
    neighbor_capability: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability

    mut def __init__(self, admin_state: ?str, stale_routes_time: ?int, requested_restart_time: ?int=None, number_of_restarts: ?int, last_restart_time: ?str, helper_active: ?bool, neighbor_capability: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.admin_state = admin_state
        self.stale_routes_time = stale_routes_time
        if requested_restart_time != None:
            self.requested_restart_time = requested_restart_time
        else:
            self.requested_restart_time = 300
        self.number_of_restarts = number_of_restarts
        self.last_restart_time = last_restart_time
        self.helper_active = helper_active
        if neighbor_capability is not None:
            self.neighbor_capability = neighbor_capability
        else:
            self.neighbor_capability = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability()
        self_neighbor_capability = self.neighbor_capability
        if self_neighbor_capability is not None:
            self_neighbor_capability._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _stale_routes_time = self.stale_routes_time
        _requested_restart_time = self.requested_restart_time
        _number_of_restarts = self.number_of_restarts
        _last_restart_time = self.last_restart_time
        _helper_active = self.helper_active
        _neighbor_capability = self.neighbor_capability
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _stale_routes_time is not None:
            children['stale-routes-time'] = yang.gdata.Leaf('uint16', _stale_routes_time)
        if _requested_restart_time is not None:
            children['requested-restart-time'] = yang.gdata.Leaf('uint16', _requested_restart_time)
        if _number_of_restarts is not None:
            children['number-of-restarts'] = yang.gdata.Leaf('uint16', _number_of_restarts)
        if _last_restart_time is not None:
            children['last-restart-time'] = yang.gdata.Leaf('string', _last_restart_time)
        if _helper_active is not None:
            children['helper-active'] = yang.gdata.Leaf('boolean', _helper_active)
        if _neighbor_capability is not None:
            children['neighbor-capability'] = _neighbor_capability.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(admin_state=n.get_opt_str("admin-state"), stale_routes_time=n.get_opt_int("stale-routes-time"), requested_restart_time=n.get_opt_int("requested-restart-time"), number_of_restarts=n.get_opt_int("number-of-restarts"), last_restart_time=n.get_opt_str("last-restart-time"), helper_active=n.get_opt_bool("helper-active"), neighbor_capability=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability.from_gdata(n.get_opt_container("neighbor-capability")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), stale_routes_time=yang.gdata.from_xml_opt_int(n, "stale-routes-time"), requested_restart_time=yang.gdata.from_xml_opt_int(n, "requested-restart-time"), number_of_restarts=yang.gdata.from_xml_opt_int(n, "number-of-restarts"), last_restart_time=yang.gdata.from_xml_opt_str(n, "last-restart-time"), helper_active=yang.gdata.from_xml_opt_bool(n, "helper-active"), neighbor_capability=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__neighbor_capability.from_xml(yang.gdata.get_xml_opt_child(n, "neighbor-capability")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__maximum_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(yang.adata.MNode):
    admin_state: ?str
    maximum_hops: ?int

    mut def __init__(self, admin_state: ?str, maximum_hops: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.admin_state = admin_state
        self.maximum_hops = maximum_hops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _maximum_hops = self.maximum_hops
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _maximum_hops is not None:
            children['maximum-hops'] = yang.gdata.Leaf('uint8', _maximum_hops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(admin_state=n.get_opt_str("admin-state"), maximum_hops=n.get_opt_int("maximum-hops"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), maximum_hops=yang.gdata.from_xml_opt_int(n, "maximum-hops"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes__block_prefix_sid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes(yang.adata.MNode):
    block_prefix_sid: ?bool

    mut def __init__(self, block_prefix_sid: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.block_prefix_sid = block_prefix_sid

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _block_prefix_sid = self.block_prefix_sid
        if _block_prefix_sid is not None:
            children['block-prefix-sid'] = yang.gdata.Leaf('boolean', _block_prefix_sid)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes(block_prefix_sid=n.get_opt_bool("block-prefix-sid"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes(block_prefix_sid=yang.gdata.from_xml_opt_bool(n, "block-prefix-sid"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__afi_safi_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send_max(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send_multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("empty", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths(yang.adata.MNode):
    receive: ?bool
    send: ?bool
    send_max: ?int
    send_multipath: ?bool

    mut def __init__(self, receive: ?bool, send: ?bool, send_max: ?int, send_multipath: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.receive = receive
        self.send = send
        self.send_max = send_max
        self.send_multipath = send_multipath

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        _send = self.send
        _send_max = self.send_max
        _send_multipath = self.send_multipath
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        if _send is not None:
            children['send'] = yang.gdata.Leaf('boolean', _send)
        if _send_max is not None:
            children['send-max'] = yang.gdata.Leaf('uint8', _send_max)
        if _send_multipath is not None:
            children['send-multipath'] = yang.gdata.Leaf('empty', _send_multipath)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths(receive=n.get_opt_bool("receive"), send=n.get_opt_bool("send"), send_max=n.get_opt_int("send-max"), send_multipath=n.get_opt_bool("send-multipath"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths(receive=yang.gdata.from_xml_opt_bool(n, "receive"), send=yang.gdata.from_xml_opt_bool(n, "send"), send_max=yang.gdata.from_xml_opt_int(n, "send-max"), send_multipath=yang.gdata.from_xml_opt_bool(n, "send-multipath"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__sent_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__active_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__rejected_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__suppressed_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__received_routes_withdrawn_due_to_error(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth__aggregate_used_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth(yang.adata.MNode):
    add_next_hop_count_to_received_bgp_routes: ?value
    aggregate_used_paths: ?bool

    mut def __init__(self, add_next_hop_count_to_received_bgp_routes: ?value, aggregate_used_paths: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.add_next_hop_count_to_received_bgp_routes = add_next_hop_count_to_received_bgp_routes
        self.aggregate_used_paths = aggregate_used_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        _aggregate_used_paths = self.aggregate_used_paths
        if _add_next_hop_count_to_received_bgp_routes is not None:
            children['add-next-hop-count-to-received-bgp-routes'] = yang.gdata.Leaf('union', _add_next_hop_count_to_received_bgp_routes)
        if _aggregate_used_paths is not None:
            children['aggregate-used-paths'] = yang.gdata.Leaf('boolean', _aggregate_used_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=n.get_opt_value("add-next-hop-count-to-received-bgp-routes"), aggregate_used_paths=n.get_opt_bool("aggregate-used-paths"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=yang.gdata.from_xml_opt_value(n, "add-next-hop-count-to-received-bgp-routes"), aggregate_used_paths=yang.gdata.from_xml_opt_bool(n, "aggregate-used-paths"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted
    link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted=None, link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self
        if link_bandwidth is not None:
            self.link_bandwidth = link_bandwidth
        else:
            self.link_bandwidth = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth()
        self_link_bandwidth = self.link_bandwidth
        if self_link_bandwidth is not None:
            self_link_bandwidth._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        _link_bandwidth = self.link_bandwidth
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        if _link_bandwidth is not None:
            children['link-bandwidth'] = _link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth.from_gdata(n.get_opt_container("link-bandwidth")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "link-bandwidth")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__next_hop_unchanged(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    next_hop_unchanged: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, next_hop_unchanged: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.next_hop_unchanged = next_hop_unchanged
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _next_hop_unchanged = self.next_hop_unchanged
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _next_hop_unchanged is not None:
            children['next-hop-unchanged'] = yang.gdata.Leaf('boolean', _next_hop_unchanged)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), next_hop_unchanged=n.get_opt_bool("next-hop-unchanged"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), next_hop_unchanged=yang.gdata.from_xml_opt_bool(n, "next-hop-unchanged"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), receive_ipv6_next_hops=n.get_opt_bool("receive-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), receive_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "receive-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth__aggregate_used_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth(yang.adata.MNode):
    add_next_hop_count_to_received_bgp_routes: ?value
    aggregate_used_paths: ?bool

    mut def __init__(self, add_next_hop_count_to_received_bgp_routes: ?value, aggregate_used_paths: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.add_next_hop_count_to_received_bgp_routes = add_next_hop_count_to_received_bgp_routes
        self.aggregate_used_paths = aggregate_used_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        _aggregate_used_paths = self.aggregate_used_paths
        if _add_next_hop_count_to_received_bgp_routes is not None:
            children['add-next-hop-count-to-received-bgp-routes'] = yang.gdata.Leaf('union', _add_next_hop_count_to_received_bgp_routes)
        if _aggregate_used_paths is not None:
            children['aggregate-used-paths'] = yang.gdata.Leaf('boolean', _aggregate_used_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=n.get_opt_value("add-next-hop-count-to-received-bgp-routes"), aggregate_used_paths=n.get_opt_bool("aggregate-used-paths"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=yang.gdata.from_xml_opt_value(n, "add-next-hop-count-to-received-bgp-routes"), aggregate_used_paths=yang.gdata.from_xml_opt_bool(n, "aggregate-used-paths"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted
    link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted=None, link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self
        if link_bandwidth is not None:
            self.link_bandwidth = link_bandwidth
        else:
            self.link_bandwidth = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth()
        self_link_bandwidth = self.link_bandwidth
        if self_link_bandwidth is not None:
            self_link_bandwidth._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        _link_bandwidth = self.link_bandwidth
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        if _link_bandwidth is not None:
            children['link-bandwidth'] = _link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth.from_gdata(n.get_opt_container("link-bandwidth")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth.from_xml(yang.gdata.get_xml_opt_child(n, "link-bandwidth")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__next_hop_unchanged(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast(yang.adata.MNode):
    next_hop_unchanged: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted

    mut def __init__(self, next_hop_unchanged: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.next_hop_unchanged = next_hop_unchanged
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _next_hop_unchanged = self.next_hop_unchanged
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _next_hop_unchanged is not None:
            children['next-hop-unchanged'] = yang.gdata.Leaf('boolean', _next_hop_unchanged)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast(next_hop_unchanged=n.get_opt_bool("next-hop-unchanged"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast(next_hop_unchanged=yang.gdata.from_xml_opt_bool(n, "next-hop-unchanged"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__default_received_encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted
    default_received_encapsulation: ?str

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted=None, default_received_encapsulation: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self
        self.default_received_encapsulation = default_received_encapsulation

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        _default_received_encapsulation = self.default_received_encapsulation
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        if _default_received_encapsulation is not None:
            children['default-received-encapsulation'] = yang.gdata.Leaf('enumeration', _default_received_encapsulation)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn(advertise_ipv6_next_hops=n.get_opt_bool("advertise-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")), default_received_encapsulation=n.get_opt_str("default-received-encapsulation"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn(advertise_ipv6_next_hops=yang.gdata.from_xml_opt_bool(n, "advertise-ipv6-next-hops"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")), default_received_encapsulation=yang.gdata.from_xml_opt_str(n, "default-received-encapsulation"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__send_default_route(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__prefix_limit_exceeded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool
    prefix_limit_exceeded: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool, prefix_limit_exceeded: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown
        self.prefix_limit_exceeded = prefix_limit_exceeded

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        _warning_threshold_pct = self.warning_threshold_pct
        _prevent_teardown = self.prevent_teardown
        _prefix_limit_exceeded = self.prefix_limit_exceeded
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        if _prefix_limit_exceeded is not None:
            children['prefix-limit-exceeded'] = yang.gdata.Leaf('boolean', _prefix_limit_exceeded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted(max_received_routes=n.get_opt_int("max-received-routes"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"), prevent_teardown=n.get_opt_bool("prevent-teardown"), prefix_limit_exceeded=n.get_opt_bool("prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted(max_received_routes=yang.gdata.from_xml_opt_int(n, "max-received-routes"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"), prevent_teardown=yang.gdata.from_xml_opt_bool(n, "prevent-teardown"), prefix_limit_exceeded=yang.gdata.from_xml_opt_bool(n, "prefix-limit-exceeded"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target(yang.adata.MNode):
    send_default_route: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted

    mut def __init__(self, send_default_route: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.send_default_route = send_default_route
        if prefix_limit_received is not None:
            self.prefix_limit_received = prefix_limit_received
        else:
            self.prefix_limit_received = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received()
        self_prefix_limit_received = self.prefix_limit_received
        if self_prefix_limit_received is not None:
            self_prefix_limit_received._parent = self
        if prefix_limit_accepted is not None:
            self.prefix_limit_accepted = prefix_limit_accepted
        else:
            self.prefix_limit_accepted = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted()
        self_prefix_limit_accepted = self.prefix_limit_accepted
        if self_prefix_limit_accepted is not None:
            self_prefix_limit_accepted._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send_default_route = self.send_default_route
        _prefix_limit_received = self.prefix_limit_received
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _send_default_route is not None:
            children['send-default-route'] = yang.gdata.Leaf('boolean', _send_default_route)
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target(send_default_route=n.get_opt_bool("send-default-route"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received.from_gdata(n.get_opt_container("prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted.from_gdata(n.get_opt_container("prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target(send_default_route=yang.gdata.from_xml_opt_bool(n, "send-default-route"), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-received")), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted.from_xml(yang.gdata.get_xml_opt_child(n, "prefix-limit-accepted")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: str
    admin_state: ?str
    oper_state: ?str
    export_policy: list[str]
    import_policy: list[str]
    add_paths: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths
    received_routes: ?int
    sent_routes: ?int
    active_routes: ?int
    rejected_routes: ?int
    suppressed_routes: ?int
    received_routes_withdrawn_due_to_error: ?int
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast
    ipv4_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast
    l3vpn_ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast
    ipv6_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast
    l3vpn_ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast
    evpn: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn
    route_target: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target

    mut def __init__(self, afi_safi_name: str, admin_state: ?str, oper_state: ?str, export_policy: ?list[str]=None, import_policy: ?list[str]=None, add_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths=None, received_routes: ?int, sent_routes: ?int, active_routes: ?int, rejected_routes: ?int, suppressed_routes: ?int, received_routes_withdrawn_due_to_error: ?int, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast=None, ipv4_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast=None, l3vpn_ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast=None, ipv6_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast=None, l3vpn_ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast=None, evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn=None, route_target: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.afi_safi_name = afi_safi_name
        self.admin_state = admin_state
        self.oper_state = oper_state
        if export_policy is not None:
            self.export_policy = export_policy
        else:
            self.export_policy = []
        if import_policy is not None:
            self.import_policy = import_policy
        else:
            self.import_policy = []
        if add_paths is not None:
            self.add_paths = add_paths
        else:
            self.add_paths = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths()
        self_add_paths = self.add_paths
        if self_add_paths is not None:
            self_add_paths._parent = self
        self.received_routes = received_routes
        self.sent_routes = sent_routes
        self.active_routes = active_routes
        self.rejected_routes = rejected_routes
        self.suppressed_routes = suppressed_routes
        self.received_routes_withdrawn_due_to_error = received_routes_withdrawn_due_to_error
        if ipv4_unicast is not None:
            self.ipv4_unicast = ipv4_unicast
        else:
            self.ipv4_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast()
        self_ipv4_unicast = self.ipv4_unicast
        if self_ipv4_unicast is not None:
            self_ipv4_unicast._parent = self
        if ipv4_labeled_unicast is not None:
            self.ipv4_labeled_unicast = ipv4_labeled_unicast
        else:
            self.ipv4_labeled_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast()
        self_ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if self_ipv4_labeled_unicast is not None:
            self_ipv4_labeled_unicast._parent = self
        if l3vpn_ipv4_unicast is not None:
            self.l3vpn_ipv4_unicast = l3vpn_ipv4_unicast
        else:
            self.l3vpn_ipv4_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast()
        self_l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if self_l3vpn_ipv4_unicast is not None:
            self_l3vpn_ipv4_unicast._parent = self
        if ipv6_unicast is not None:
            self.ipv6_unicast = ipv6_unicast
        else:
            self.ipv6_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast()
        self_ipv6_unicast = self.ipv6_unicast
        if self_ipv6_unicast is not None:
            self_ipv6_unicast._parent = self
        if ipv6_labeled_unicast is not None:
            self.ipv6_labeled_unicast = ipv6_labeled_unicast
        else:
            self.ipv6_labeled_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast()
        self_ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if self_ipv6_labeled_unicast is not None:
            self_ipv6_labeled_unicast._parent = self
        if l3vpn_ipv6_unicast is not None:
            self.l3vpn_ipv6_unicast = l3vpn_ipv6_unicast
        else:
            self.l3vpn_ipv6_unicast = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast()
        self_l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if self_l3vpn_ipv6_unicast is not None:
            self_l3vpn_ipv6_unicast._parent = self
        if evpn is not None:
            self.evpn = evpn
        else:
            self.evpn = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn()
        self_evpn = self.evpn
        if self_evpn is not None:
            self_evpn._parent = self
        if route_target is not None:
            self.route_target = route_target
        else:
            self.route_target = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target()
        self_route_target = self.route_target
        if self_route_target is not None:
            self_route_target._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        _admin_state = self.admin_state
        _oper_state = self.oper_state
        _add_paths = self.add_paths
        _received_routes = self.received_routes
        _sent_routes = self.sent_routes
        _active_routes = self.active_routes
        _rejected_routes = self.rejected_routes
        _suppressed_routes = self.suppressed_routes
        _received_routes_withdrawn_due_to_error = self.received_routes_withdrawn_due_to_error
        _ipv4_unicast = self.ipv4_unicast
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        _ipv6_unicast = self.ipv6_unicast
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        _evpn = self.evpn
        _route_target = self.route_target
        if _afi_safi_name is not None:
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        children['export-policy'] = yang.gdata.LeafList(self.export_policy)
        children['import-policy'] = yang.gdata.LeafList(self.import_policy)
        if _add_paths is not None:
            children['add-paths'] = _add_paths.to_gdata()
        if _received_routes is not None:
            children['received-routes'] = yang.gdata.Leaf('uint32', _received_routes)
        if _sent_routes is not None:
            children['sent-routes'] = yang.gdata.Leaf('uint32', _sent_routes)
        if _active_routes is not None:
            children['active-routes'] = yang.gdata.Leaf('uint32', _active_routes)
        if _rejected_routes is not None:
            children['rejected-routes'] = yang.gdata.Leaf('uint32', _rejected_routes)
        if _suppressed_routes is not None:
            children['suppressed-routes'] = yang.gdata.Leaf('uint32', _suppressed_routes)
        if _received_routes_withdrawn_due_to_error is not None:
            children['received-routes-withdrawn-due-to-error'] = yang.gdata.Leaf('uint32', _received_routes_withdrawn_due_to_error)
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        if _ipv4_labeled_unicast is not None:
            children['ipv4-labeled-unicast'] = _ipv4_labeled_unicast.to_gdata()
        if _l3vpn_ipv4_unicast is not None:
            children['l3vpn-ipv4-unicast'] = _l3vpn_ipv4_unicast.to_gdata()
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        if _ipv6_labeled_unicast is not None:
            children['ipv6-labeled-unicast'] = _ipv6_labeled_unicast.to_gdata()
        if _l3vpn_ipv6_unicast is not None:
            children['l3vpn-ipv6-unicast'] = _l3vpn_ipv6_unicast.to_gdata()
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.afi_safi_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(afi_safi_name=n.get_str("afi-safi-name"), admin_state=n.get_opt_str("admin-state"), oper_state=n.get_opt_str("oper-state"), export_policy=n.get_opt_strs("export-policy"), import_policy=n.get_opt_strs("import-policy"), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths.from_gdata(n.get_opt_container("add-paths")), received_routes=n.get_opt_int("received-routes"), sent_routes=n.get_opt_int("sent-routes"), active_routes=n.get_opt_int("active-routes"), rejected_routes=n.get_opt_int("rejected-routes"), suppressed_routes=n.get_opt_int("suppressed-routes"), received_routes_withdrawn_due_to_error=n.get_opt_int("received-routes-withdrawn-due-to-error"), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast.from_gdata(n.get_opt_container("ipv4-unicast")), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast.from_gdata(n.get_opt_container("ipv4-labeled-unicast")), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast.from_gdata(n.get_opt_container("l3vpn-ipv4-unicast")), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast.from_gdata(n.get_opt_container("ipv6-unicast")), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast.from_gdata(n.get_opt_container("ipv6-labeled-unicast")), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast.from_gdata(n.get_opt_container("l3vpn-ipv6-unicast")), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn.from_gdata(n.get_opt_container("evpn")), route_target=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target.from_gdata(n.get_opt_container("route-target")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(afi_safi_name=yang.gdata.from_xml_str(n, "afi-safi-name"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), export_policy=yang.gdata.from_xml_opt_strs(n, "export-policy"), import_policy=yang.gdata.from_xml_opt_strs(n, "import-policy"), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths.from_xml(yang.gdata.get_xml_opt_child(n, "add-paths")), received_routes=yang.gdata.from_xml_opt_int(n, "received-routes"), sent_routes=yang.gdata.from_xml_opt_int(n, "sent-routes"), active_routes=yang.gdata.from_xml_opt_int(n, "active-routes"), rejected_routes=yang.gdata.from_xml_opt_int(n, "rejected-routes"), suppressed_routes=yang.gdata.from_xml_opt_int(n, "suppressed-routes"), received_routes_withdrawn_due_to_error=yang.gdata.from_xml_opt_int(n, "received-routes-withdrawn-due-to-error"), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-unicast")), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-labeled-unicast")), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "l3vpn-ipv4-unicast")), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-unicast")), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-labeled-unicast")), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "l3vpn-ipv6-unicast")), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn.from_xml(yang.gdata.get_xml_opt_child(n, "evpn")), route_target=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target.from_xml(yang.gdata.get_xml_opt_child(n, "route-target")))

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_global_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_local_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(yang.adata.MNode):
    as_number: ?int
    prepend_global_as: ?bool
    prepend_local_as: ?bool

    mut def __init__(self, as_number: ?int, prepend_global_as: ?bool, prepend_local_as: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.as_number = as_number
        self.prepend_global_as = prepend_global_as
        self.prepend_local_as = prepend_local_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        _prepend_global_as = self.prepend_global_as
        _prepend_local_as = self.prepend_local_as
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        if _prepend_global_as is not None:
            children['prepend-global-as'] = yang.gdata.Leaf('boolean', _prepend_global_as)
        if _prepend_local_as is not None:
            children['prepend-local-as'] = yang.gdata.Leaf('boolean', _prepend_local_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(as_number=n.get_opt_int("as-number"), prepend_global_as=n.get_opt_bool("prepend-global-as"), prepend_local_as=n.get_opt_bool("prepend-local-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(as_number=yang.gdata.from_xml_opt_int(n, "as-number"), prepend_global_as=yang.gdata.from_xml_opt_bool(n, "prepend-global-as"), prepend_local_as=yang.gdata.from_xml_opt_bool(n, "prepend-local-as"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_flap_damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(yang.adata.MNode):
    client: ?bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool, cluster_id: ?value):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.client = client
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        _cluster_id = self.cluster_id
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(client=n.get_opt_bool("client"), cluster_id=n.get_opt_value("cluster-id"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(client=yang.gdata.from_xml_opt_bool(n, "client"), cluster_id=yang.gdata.from_xml_opt_value(n, "cluster-id"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community_type(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(yang.adata.MNode):
    standard: ?bool
    large: ?bool

    mut def __init__(self, standard: ?bool, large: ?bool):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.standard = standard
        self.large = large

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        _large = self.large
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(standard=n.get_opt_bool("standard"), large=n.get_opt_bool("large"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(standard=yang.gdata.from_xml_opt_bool(n, "standard"), large=yang.gdata.from_xml_opt_bool(n, "large"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv4_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv6_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(yang.adata.MNode):
    ipv4_unicast: ?bool
    ipv6_unicast: ?bool
    export_policy: ?str

    mut def __init__(self, ipv4_unicast: ?bool, ipv6_unicast: ?bool, export_policy: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.ipv4_unicast = ipv4_unicast
        self.ipv6_unicast = ipv6_unicast
        self.export_policy = export_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_unicast = self.ipv4_unicast
        _ipv6_unicast = self.ipv6_unicast
        _export_policy = self.export_policy
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = yang.gdata.Leaf('boolean', _ipv4_unicast)
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = yang.gdata.Leaf('boolean', _ipv6_unicast)
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(ipv4_unicast=n.get_opt_bool("ipv4-unicast"), ipv6_unicast=n.get_opt_bool("ipv6-unicast"), export_policy=n.get_opt_str("export-policy"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(ipv4_unicast=yang.gdata.from_xml_opt_bool(n, "ipv4-unicast"), ipv6_unicast=yang.gdata.from_xml_opt_bool(n, "ipv6-unicast"), export_policy=yang.gdata.from_xml_opt_str(n, "export-policy"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__connect_retry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__keepalive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__minimum_advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__prefix_limit_restart_timer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__next_connect_retry_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__negotiated_hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__negotiated_keepalive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(yang.adata.MNode):
    connect_retry: ?int
    hold_time: ?int
    keepalive_interval: ?int
    minimum_advertisement_interval: ?int
    prefix_limit_restart_timer: ?int
    next_connect_retry_time: ?str
    negotiated_hold_time: ?int
    negotiated_keepalive_interval: ?int

    mut def __init__(self, connect_retry: ?int, hold_time: ?int, keepalive_interval: ?int, minimum_advertisement_interval: ?int, prefix_limit_restart_timer: ?int, next_connect_retry_time: ?str, negotiated_hold_time: ?int, negotiated_keepalive_interval: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.connect_retry = connect_retry
        self.hold_time = hold_time
        self.keepalive_interval = keepalive_interval
        self.minimum_advertisement_interval = minimum_advertisement_interval
        self.prefix_limit_restart_timer = prefix_limit_restart_timer
        self.next_connect_retry_time = next_connect_retry_time
        self.negotiated_hold_time = negotiated_hold_time
        self.negotiated_keepalive_interval = negotiated_keepalive_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _connect_retry = self.connect_retry
        _hold_time = self.hold_time
        _keepalive_interval = self.keepalive_interval
        _minimum_advertisement_interval = self.minimum_advertisement_interval
        _prefix_limit_restart_timer = self.prefix_limit_restart_timer
        _next_connect_retry_time = self.next_connect_retry_time
        _negotiated_hold_time = self.negotiated_hold_time
        _negotiated_keepalive_interval = self.negotiated_keepalive_interval
        if _connect_retry is not None:
            children['connect-retry'] = yang.gdata.Leaf('uint16', _connect_retry)
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('uint16', _hold_time)
        if _keepalive_interval is not None:
            children['keepalive-interval'] = yang.gdata.Leaf('uint16', _keepalive_interval)
        if _minimum_advertisement_interval is not None:
            children['minimum-advertisement-interval'] = yang.gdata.Leaf('uint16', _minimum_advertisement_interval)
        if _prefix_limit_restart_timer is not None:
            children['prefix-limit-restart-timer'] = yang.gdata.Leaf('uint16', _prefix_limit_restart_timer)
        if _next_connect_retry_time is not None:
            children['next-connect-retry-time'] = yang.gdata.Leaf('string', _next_connect_retry_time)
        if _negotiated_hold_time is not None:
            children['negotiated-hold-time'] = yang.gdata.Leaf('uint16', _negotiated_hold_time)
        if _negotiated_keepalive_interval is not None:
            children['negotiated-keepalive-interval'] = yang.gdata.Leaf('uint16', _negotiated_keepalive_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(connect_retry=n.get_opt_int("connect-retry"), hold_time=n.get_opt_int("hold-time"), keepalive_interval=n.get_opt_int("keepalive-interval"), minimum_advertisement_interval=n.get_opt_int("minimum-advertisement-interval"), prefix_limit_restart_timer=n.get_opt_int("prefix-limit-restart-timer"), next_connect_retry_time=n.get_opt_str("next-connect-retry-time"), negotiated_hold_time=n.get_opt_int("negotiated-hold-time"), negotiated_keepalive_interval=n.get_opt_int("negotiated-keepalive-interval"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(connect_retry=yang.gdata.from_xml_opt_int(n, "connect-retry"), hold_time=yang.gdata.from_xml_opt_int(n, "hold-time"), keepalive_interval=yang.gdata.from_xml_opt_int(n, "keepalive-interval"), minimum_advertisement_interval=yang.gdata.from_xml_opt_int(n, "minimum-advertisement-interval"), prefix_limit_restart_timer=yang.gdata.from_xml_opt_int(n, "prefix-limit-restart-timer"), next_connect_retry_time=yang.gdata.from_xml_opt_str(n, "next-connect-retry-time"), negotiated_hold_time=yang.gdata.from_xml_opt_int(n, "negotiated-hold-time"), negotiated_keepalive_interval=yang.gdata.from_xml_opt_int(n, "negotiated-keepalive-interval"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag__modifier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry(yang.adata.MNode):
    name: str
    modifier: ?str

    mut def __init__(self, name: str, modifier: ?str):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.name = name
        self.modifier = modifier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _modifier = self.modifier
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        if _modifier is not None:
            children['modifier'] = yang.gdata.Leaf('enumeration', _modifier)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry(name=n.get_str("name"), modifier=n.get_opt_str("modifier"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry(name=yang.gdata.from_xml_str(n, "name"), modifier=yang.gdata.from_xml_opt_str(n, "modifier"))

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'flag'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options(yang.adata.MNode):
    flag: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag

    mut def __init__(self, flag: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.flag = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag(elements=flag)
        self.flag._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flag = self.flag
        if _flag is not None:
            children['flag'] = _flag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag.from_gdata(n.get_opt_list("flag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag.from_xml(yang.gdata.get_xml_children(n, "flag")))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__mtu_discovery(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__passive_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__local_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__local_port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__remote_port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(yang.adata.MNode):
    mtu_discovery: ?bool
    tcp_mss: ?int
    passive_mode: ?bool
    local_address: ?str
    local_port: ?int
    remote_port: ?int

    mut def __init__(self, mtu_discovery: ?bool, tcp_mss: ?int, passive_mode: ?bool, local_address: ?str, local_port: ?int, remote_port: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.mtu_discovery = mtu_discovery
        self.tcp_mss = tcp_mss
        self.passive_mode = passive_mode
        self.local_address = local_address
        self.local_port = local_port
        self.remote_port = remote_port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mtu_discovery = self.mtu_discovery
        _tcp_mss = self.tcp_mss
        _passive_mode = self.passive_mode
        _local_address = self.local_address
        _local_port = self.local_port
        _remote_port = self.remote_port
        if _mtu_discovery is not None:
            children['mtu-discovery'] = yang.gdata.Leaf('boolean', _mtu_discovery)
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('uint16', _tcp_mss)
        if _passive_mode is not None:
            children['passive-mode'] = yang.gdata.Leaf('boolean', _passive_mode)
        if _local_address is not None:
            children['local-address'] = yang.gdata.Leaf('union', _local_address)
        if _local_port is not None:
            children['local-port'] = yang.gdata.Leaf('uint16', _local_port)
        if _remote_port is not None:
            children['remote-port'] = yang.gdata.Leaf('uint16', _remote_port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(mtu_discovery=n.get_opt_bool("mtu-discovery"), tcp_mss=n.get_opt_int("tcp-mss"), passive_mode=n.get_opt_bool("passive-mode"), local_address=n.get_opt_str("local-address"), local_port=n.get_opt_int("local-port"), remote_port=n.get_opt_int("remote-port"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(mtu_discovery=yang.gdata.from_xml_opt_bool(n, "mtu-discovery"), tcp_mss=yang.gdata.from_xml_opt_int(n, "tcp-mss"), passive_mode=yang.gdata.from_xml_opt_bool(n, "passive-mode"), local_address=yang.gdata.from_xml_opt_str(n, "local-address"), local_port=yang.gdata.from_xml_opt_int(n, "local-port"), remote_port=yang.gdata.from_xml_opt_int(n, "remote-port"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__session_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__last_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__last_event(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__last_established(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__established_transitions(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__advertised_capabilities(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_capabilities(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_afi_safi(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_end_of_rib(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_end_of_rib(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__slow_peer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__dynamic_neighbor(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__discovered_by_lldp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__queue_depth(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__total_updates(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__total_non_updates(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__route_refresh(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__total_messages(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__last_notification_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__last_notification_error_code(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__last_notification_error_subcode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages__total_notifications(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages(yang.adata.MNode):
    queue_depth: ?int
    total_updates: int
    total_non_updates: ?int
    route_refresh: int
    total_messages: int
    last_notification_time: ?str
    last_notification_error_code: ?str
    last_notification_error_subcode: ?str
    total_notifications: ?int

    mut def __init__(self, queue_depth: ?int, total_updates: ?int=None, total_non_updates: ?int, route_refresh: ?int=None, total_messages: ?int=None, last_notification_time: ?str, last_notification_error_code: ?str, last_notification_error_subcode: ?str, total_notifications: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.queue_depth = queue_depth
        if total_updates != None:
            self.total_updates = total_updates
        else:
            self.total_updates = 0
        self.total_non_updates = total_non_updates
        if route_refresh != None:
            self.route_refresh = route_refresh
        else:
            self.route_refresh = 0
        if total_messages != None:
            self.total_messages = total_messages
        else:
            self.total_messages = 0
        self.last_notification_time = last_notification_time
        self.last_notification_error_code = last_notification_error_code
        self.last_notification_error_subcode = last_notification_error_subcode
        self.total_notifications = total_notifications

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _queue_depth = self.queue_depth
        _total_updates = self.total_updates
        _total_non_updates = self.total_non_updates
        _route_refresh = self.route_refresh
        _total_messages = self.total_messages
        _last_notification_time = self.last_notification_time
        _last_notification_error_code = self.last_notification_error_code
        _last_notification_error_subcode = self.last_notification_error_subcode
        _total_notifications = self.total_notifications
        if _queue_depth is not None:
            children['queue-depth'] = yang.gdata.Leaf('uint32', _queue_depth)
        if _total_updates is not None:
            children['total-updates'] = yang.gdata.Leaf('uint64', _total_updates)
        if _total_non_updates is not None:
            children['total-non-updates'] = yang.gdata.Leaf('uint64', _total_non_updates)
        if _route_refresh is not None:
            children['route-refresh'] = yang.gdata.Leaf('uint64', _route_refresh)
        if _total_messages is not None:
            children['total-messages'] = yang.gdata.Leaf('uint64', _total_messages)
        if _last_notification_time is not None:
            children['last-notification-time'] = yang.gdata.Leaf('string', _last_notification_time)
        if _last_notification_error_code is not None:
            children['last-notification-error-code'] = yang.gdata.Leaf('enumeration', _last_notification_error_code)
        if _last_notification_error_subcode is not None:
            children['last-notification-error-subcode'] = yang.gdata.Leaf('enumeration', _last_notification_error_subcode)
        if _total_notifications is not None:
            children['total-notifications'] = yang.gdata.Leaf('uint32', _total_notifications)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages(queue_depth=n.get_opt_int("queue-depth"), total_updates=n.get_opt_int("total-updates"), total_non_updates=n.get_opt_int("total-non-updates"), route_refresh=n.get_opt_int("route-refresh"), total_messages=n.get_opt_int("total-messages"), last_notification_time=n.get_opt_str("last-notification-time"), last_notification_error_code=n.get_opt_str("last-notification-error-code"), last_notification_error_subcode=n.get_opt_str("last-notification-error-subcode"), total_notifications=n.get_opt_int("total-notifications"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages(queue_depth=yang.gdata.from_xml_opt_int(n, "queue-depth"), total_updates=yang.gdata.from_xml_opt_int(n, "total-updates"), total_non_updates=yang.gdata.from_xml_opt_int(n, "total-non-updates"), route_refresh=yang.gdata.from_xml_opt_int(n, "route-refresh"), total_messages=yang.gdata.from_xml_opt_int(n, "total-messages"), last_notification_time=yang.gdata.from_xml_opt_str(n, "last-notification-time"), last_notification_error_code=yang.gdata.from_xml_opt_str(n, "last-notification-error-code"), last_notification_error_subcode=yang.gdata.from_xml_opt_str(n, "last-notification-error-subcode"), total_notifications=yang.gdata.from_xml_opt_int(n, "total-notifications"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages()



mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__queue_depth(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__total_updates(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__total_non_updates(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__malformed_updates(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__route_refresh(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__total_messages(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__last_update_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__last_notification_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__last_notification_error_code(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__last_notification_error_subcode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages__total_notifications(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages(yang.adata.MNode):
    queue_depth: ?int
    total_updates: int
    total_non_updates: ?int
    malformed_updates: int
    route_refresh: int
    total_messages: int
    last_update_time: ?str
    last_notification_time: ?str
    last_notification_error_code: ?str
    last_notification_error_subcode: ?str
    total_notifications: ?int

    mut def __init__(self, queue_depth: ?int, total_updates: ?int=None, total_non_updates: ?int, malformed_updates: ?int=None, route_refresh: ?int=None, total_messages: ?int=None, last_update_time: ?str, last_notification_time: ?str, last_notification_error_code: ?str, last_notification_error_subcode: ?str, total_notifications: ?int):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.queue_depth = queue_depth
        if total_updates != None:
            self.total_updates = total_updates
        else:
            self.total_updates = 0
        self.total_non_updates = total_non_updates
        if malformed_updates != None:
            self.malformed_updates = malformed_updates
        else:
            self.malformed_updates = 0
        if route_refresh != None:
            self.route_refresh = route_refresh
        else:
            self.route_refresh = 0
        if total_messages != None:
            self.total_messages = total_messages
        else:
            self.total_messages = 0
        self.last_update_time = last_update_time
        self.last_notification_time = last_notification_time
        self.last_notification_error_code = last_notification_error_code
        self.last_notification_error_subcode = last_notification_error_subcode
        self.total_notifications = total_notifications

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _queue_depth = self.queue_depth
        _total_updates = self.total_updates
        _total_non_updates = self.total_non_updates
        _malformed_updates = self.malformed_updates
        _route_refresh = self.route_refresh
        _total_messages = self.total_messages
        _last_update_time = self.last_update_time
        _last_notification_time = self.last_notification_time
        _last_notification_error_code = self.last_notification_error_code
        _last_notification_error_subcode = self.last_notification_error_subcode
        _total_notifications = self.total_notifications
        if _queue_depth is not None:
            children['queue-depth'] = yang.gdata.Leaf('uint32', _queue_depth)
        if _total_updates is not None:
            children['total-updates'] = yang.gdata.Leaf('uint64', _total_updates)
        if _total_non_updates is not None:
            children['total-non-updates'] = yang.gdata.Leaf('uint64', _total_non_updates)
        if _malformed_updates is not None:
            children['malformed-updates'] = yang.gdata.Leaf('uint64', _malformed_updates)
        if _route_refresh is not None:
            children['route-refresh'] = yang.gdata.Leaf('uint64', _route_refresh)
        if _total_messages is not None:
            children['total-messages'] = yang.gdata.Leaf('uint64', _total_messages)
        if _last_update_time is not None:
            children['last-update-time'] = yang.gdata.Leaf('string', _last_update_time)
        if _last_notification_time is not None:
            children['last-notification-time'] = yang.gdata.Leaf('string', _last_notification_time)
        if _last_notification_error_code is not None:
            children['last-notification-error-code'] = yang.gdata.Leaf('enumeration', _last_notification_error_code)
        if _last_notification_error_subcode is not None:
            children['last-notification-error-subcode'] = yang.gdata.Leaf('enumeration', _last_notification_error_subcode)
        if _total_notifications is not None:
            children['total-notifications'] = yang.gdata.Leaf('uint32', _total_notifications)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages(queue_depth=n.get_opt_int("queue-depth"), total_updates=n.get_opt_int("total-updates"), total_non_updates=n.get_opt_int("total-non-updates"), malformed_updates=n.get_opt_int("malformed-updates"), route_refresh=n.get_opt_int("route-refresh"), total_messages=n.get_opt_int("total-messages"), last_update_time=n.get_opt_str("last-update-time"), last_notification_time=n.get_opt_str("last-notification-time"), last_notification_error_code=n.get_opt_str("last-notification-error-code"), last_notification_error_subcode=n.get_opt_str("last-notification-error-subcode"), total_notifications=n.get_opt_int("total-notifications"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages(queue_depth=yang.gdata.from_xml_opt_int(n, "queue-depth"), total_updates=yang.gdata.from_xml_opt_int(n, "total-updates"), total_non_updates=yang.gdata.from_xml_opt_int(n, "total-non-updates"), malformed_updates=yang.gdata.from_xml_opt_int(n, "malformed-updates"), route_refresh=yang.gdata.from_xml_opt_int(n, "route-refresh"), total_messages=yang.gdata.from_xml_opt_int(n, "total-messages"), last_update_time=yang.gdata.from_xml_opt_str(n, "last-update-time"), last_notification_time=yang.gdata.from_xml_opt_str(n, "last-notification-time"), last_notification_error_code=yang.gdata.from_xml_opt_str(n, "last-notification-error-code"), last_notification_error_subcode=yang.gdata.from_xml_opt_str(n, "last-notification-error-subcode"), total_notifications=yang.gdata.from_xml_opt_int(n, "total-notifications"))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages()



class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(yang.adata.MNode):
    peer_address: str
    admin_state: str
    description: ?str
    under_maintenance: ?bool
    maintenance_group: ?str
    peer_type: ?str
    export_policy: list[str]
    import_policy: list[str]
    local_preference: ?int
    next_hop_self: ?bool
    peer_as: ?int
    peer_group: str
    last_prefix_limit_exceeded: ?str
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication
    failure_detection: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart
    multihop: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop
    optional_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi
    local_as: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as
    route_flap_damping: ?bool
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector
    send_community_type: list[str]
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community
    send_default_route: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route
    timers: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers
    trace_options: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options
    transport: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport
    peer_router_id: ?str
    session_state: ?str
    last_state: ?str
    last_event: ?str
    last_established: ?str
    established_transitions: int
    advertised_capabilities: list[str]
    received_capabilities: list[str]
    received_afi_safi: list[str]
    received_end_of_rib: list[str]
    sent_end_of_rib: list[str]
    slow_peer: ?str
    dynamic_neighbor: ?bool
    discovered_by_lldp: ?bool
    sent_messages: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages
    received_messages: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages

    mut def __init__(self, peer_address: str, peer_group: str, admin_state: ?str=None, description: ?str, under_maintenance: ?bool, maintenance_group: ?str, peer_type: ?str, export_policy: ?list[str]=None, import_policy: ?list[str]=None, local_preference: ?int, next_hop_self: ?bool, peer_as: ?int, last_prefix_limit_exceeded: ?str, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication=None, failure_detection: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart=None, multihop: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop=None, optional_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes=None, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]=[], local_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as=None, route_flap_damping: ?bool, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector=None, send_community_type: ?list[str]=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community=None, send_default_route: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route=None, timers: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options=None, transport: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport=None, peer_router_id: ?str, session_state: ?str, last_state: ?str, last_event: ?str, last_established: ?str, established_transitions: ?int=None, advertised_capabilities: ?list[str]=None, received_capabilities: ?list[str]=None, received_afi_safi: ?list[str]=None, received_end_of_rib: ?list[str]=None, sent_end_of_rib: ?list[str]=None, slow_peer: ?str, dynamic_neighbor: ?bool, discovered_by_lldp: ?bool, sent_messages: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages=None, received_messages: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self.peer_address = peer_address
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.description = description
        self.under_maintenance = under_maintenance
        self.maintenance_group = maintenance_group
        self.peer_type = peer_type
        if export_policy is not None:
            self.export_policy = export_policy
        else:
            self.export_policy = []
        if import_policy is not None:
            self.import_policy = import_policy
        else:
            self.import_policy = []
        self.local_preference = local_preference
        self.next_hop_self = next_hop_self
        self.peer_as = peer_as
        self.peer_group = peer_group
        self.last_prefix_limit_exceeded = last_prefix_limit_exceeded
        if as_path_options is not None:
            self.as_path_options = as_path_options
        else:
            self.as_path_options = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()
        self_as_path_options = self.as_path_options
        if self_as_path_options is not None:
            self_as_path_options._parent = self
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()
        self_authentication = self.authentication
        if self_authentication is not None:
            self_authentication._parent = self
        if failure_detection is not None:
            self.failure_detection = failure_detection
        else:
            self.failure_detection = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()
        self_failure_detection = self.failure_detection
        if self_failure_detection is not None:
            self_failure_detection._parent = self
        if graceful_restart is not None:
            self.graceful_restart = graceful_restart
        else:
            self.graceful_restart = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()
        self_graceful_restart = self.graceful_restart
        if self_graceful_restart is not None:
            self_graceful_restart._parent = self
        if multihop is not None:
            self.multihop = multihop
        else:
            self.multihop = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()
        self_multihop = self.multihop
        if self_multihop is not None:
            self_multihop._parent = self
        if optional_attributes is not None:
            self.optional_attributes = optional_attributes
        else:
            self.optional_attributes = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes()
        self_optional_attributes = self.optional_attributes
        if self_optional_attributes is not None:
            self_optional_attributes._parent = self
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi(elements=afi_safi)
        self.afi_safi._parent = self
        if local_as is not None:
            self.local_as = local_as
        else:
            self.local_as = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()
        self_local_as = self.local_as
        if self_local_as is not None:
            self_local_as._parent = self
        self.route_flap_damping = route_flap_damping
        if route_reflector is not None:
            self.route_reflector = route_reflector
        else:
            self.route_reflector = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()
        self_route_reflector = self.route_reflector
        if self_route_reflector is not None:
            self_route_reflector._parent = self
        if send_community_type is not None:
            self.send_community_type = send_community_type
        else:
            self.send_community_type = []
        if send_community is not None:
            self.send_community = send_community
        else:
            self.send_community = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()
        self_send_community = self.send_community
        if self_send_community is not None:
            self_send_community._parent = self
        if send_default_route is not None:
            self.send_default_route = send_default_route
        else:
            self.send_default_route = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()
        self_send_default_route = self.send_default_route
        if self_send_default_route is not None:
            self_send_default_route._parent = self
        if timers is not None:
            self.timers = timers
        else:
            self.timers = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()
        self_timers = self.timers
        if self_timers is not None:
            self_timers._parent = self
        if trace_options is not None:
            self.trace_options = trace_options
        else:
            self.trace_options = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options()
        self_trace_options = self.trace_options
        if self_trace_options is not None:
            self_trace_options._parent = self
        if transport is not None:
            self.transport = transport
        else:
            self.transport = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()
        self_transport = self.transport
        if self_transport is not None:
            self_transport._parent = self
        self.peer_router_id = peer_router_id
        self.session_state = session_state
        self.last_state = last_state
        self.last_event = last_event
        self.last_established = last_established
        if established_transitions != None:
            self.established_transitions = established_transitions
        else:
            self.established_transitions = 0
        if advertised_capabilities is not None:
            self.advertised_capabilities = advertised_capabilities
        else:
            self.advertised_capabilities = []
        if received_capabilities is not None:
            self.received_capabilities = received_capabilities
        else:
            self.received_capabilities = []
        if received_afi_safi is not None:
            self.received_afi_safi = received_afi_safi
        else:
            self.received_afi_safi = []
        if received_end_of_rib is not None:
            self.received_end_of_rib = received_end_of_rib
        else:
            self.received_end_of_rib = []
        if sent_end_of_rib is not None:
            self.sent_end_of_rib = sent_end_of_rib
        else:
            self.sent_end_of_rib = []
        self.slow_peer = slow_peer
        self.dynamic_neighbor = dynamic_neighbor
        self.discovered_by_lldp = discovered_by_lldp
        if sent_messages is not None:
            self.sent_messages = sent_messages
        else:
            self.sent_messages = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages()
        self_sent_messages = self.sent_messages
        if self_sent_messages is not None:
            self_sent_messages._parent = self
        if received_messages is not None:
            self.received_messages = received_messages
        else:
            self.received_messages = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages()
        self_received_messages = self.received_messages
        if self_received_messages is not None:
            self_received_messages._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _peer_address = self.peer_address
        _admin_state = self.admin_state
        _description = self.description
        _under_maintenance = self.under_maintenance
        _maintenance_group = self.maintenance_group
        _peer_type = self.peer_type
        _local_preference = self.local_preference
        _next_hop_self = self.next_hop_self
        _peer_as = self.peer_as
        _peer_group = self.peer_group
        _last_prefix_limit_exceeded = self.last_prefix_limit_exceeded
        _as_path_options = self.as_path_options
        _authentication = self.authentication
        _failure_detection = self.failure_detection
        _graceful_restart = self.graceful_restart
        _multihop = self.multihop
        _optional_attributes = self.optional_attributes
        _afi_safi = self.afi_safi
        _local_as = self.local_as
        _route_flap_damping = self.route_flap_damping
        _route_reflector = self.route_reflector
        _send_community = self.send_community
        _send_default_route = self.send_default_route
        _timers = self.timers
        _trace_options = self.trace_options
        _transport = self.transport
        _peer_router_id = self.peer_router_id
        _session_state = self.session_state
        _last_state = self.last_state
        _last_event = self.last_event
        _last_established = self.last_established
        _established_transitions = self.established_transitions
        _slow_peer = self.slow_peer
        _dynamic_neighbor = self.dynamic_neighbor
        _discovered_by_lldp = self.discovered_by_lldp
        _sent_messages = self.sent_messages
        _received_messages = self.received_messages
        if _peer_address is not None:
            children['peer-address'] = yang.gdata.Leaf('union', _peer_address)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _under_maintenance is not None:
            children['under-maintenance'] = yang.gdata.Leaf('boolean', _under_maintenance)
        if _maintenance_group is not None:
            children['maintenance-group'] = yang.gdata.Leaf('string', _maintenance_group)
        if _peer_type is not None:
            children['peer-type'] = yang.gdata.Leaf('enumeration', _peer_type)
        children['export-policy'] = yang.gdata.LeafList(self.export_policy)
        children['import-policy'] = yang.gdata.LeafList(self.import_policy)
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        if _next_hop_self is not None:
            children['next-hop-self'] = yang.gdata.Leaf('boolean', _next_hop_self)
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('uint32', _peer_as)
        if _peer_group is not None:
            children['peer-group'] = yang.gdata.Leaf('leafref', _peer_group)
        if _last_prefix_limit_exceeded is not None:
            children['last-prefix-limit-exceeded'] = yang.gdata.Leaf('string', _last_prefix_limit_exceeded)
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        if _failure_detection is not None:
            children['failure-detection'] = _failure_detection.to_gdata()
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        if _optional_attributes is not None:
            children['optional-attributes'] = _optional_attributes.to_gdata()
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        if _local_as is not None:
            children['local-as'] = _local_as.to_gdata()
        if _route_flap_damping is not None:
            children['route-flap-damping'] = yang.gdata.Leaf('boolean', _route_flap_damping)
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        children['send-community-type'] = yang.gdata.LeafList(self.send_community_type)
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        if _send_default_route is not None:
            children['send-default-route'] = _send_default_route.to_gdata()
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        if _peer_router_id is not None:
            children['peer-router-id'] = yang.gdata.Leaf('string', _peer_router_id)
        if _session_state is not None:
            children['session-state'] = yang.gdata.Leaf('enumeration', _session_state)
        if _last_state is not None:
            children['last-state'] = yang.gdata.Leaf('enumeration', _last_state)
        if _last_event is not None:
            children['last-event'] = yang.gdata.Leaf('enumeration', _last_event)
        if _last_established is not None:
            children['last-established'] = yang.gdata.Leaf('string', _last_established)
        if _established_transitions is not None:
            children['established-transitions'] = yang.gdata.Leaf('uint64', _established_transitions)
        children['advertised-capabilities'] = yang.gdata.LeafList(self.advertised_capabilities)
        children['received-capabilities'] = yang.gdata.LeafList(self.received_capabilities)
        children['received-afi-safi'] = yang.gdata.LeafList(self.received_afi_safi)
        children['received-end-of-rib'] = yang.gdata.LeafList(self.received_end_of_rib)
        children['sent-end-of-rib'] = yang.gdata.LeafList(self.sent_end_of_rib)
        if _slow_peer is not None:
            children['slow-peer'] = yang.gdata.Leaf('enumeration', _slow_peer)
        if _dynamic_neighbor is not None:
            children['dynamic-neighbor'] = yang.gdata.Leaf('boolean', _dynamic_neighbor)
        if _discovered_by_lldp is not None:
            children['discovered-by-lldp'] = yang.gdata.Leaf('boolean', _discovered_by_lldp)
        if _sent_messages is not None:
            children['sent-messages'] = _sent_messages.to_gdata()
        if _received_messages is not None:
            children['received-messages'] = _received_messages.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.peer_address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(peer_address=n.get_str("peer-address"), admin_state=n.get_opt_str("admin-state"), description=n.get_opt_str("description"), under_maintenance=n.get_opt_bool("under-maintenance"), maintenance_group=n.get_opt_str("maintenance-group"), peer_type=n.get_opt_str("peer-type"), export_policy=n.get_opt_strs("export-policy"), import_policy=n.get_opt_strs("import-policy"), local_preference=n.get_opt_int("local-preference"), next_hop_self=n.get_opt_bool("next-hop-self"), peer_as=n.get_opt_int("peer-as"), peer_group=n.get_str("peer-group"), last_prefix_limit_exceeded=n.get_opt_str("last-prefix-limit-exceeded"), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options.from_gdata(n.get_opt_container("as-path-options")), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication.from_gdata(n.get_opt_container("authentication")), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection.from_gdata(n.get_opt_container("failure-detection")), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart.from_gdata(n.get_opt_container("graceful-restart")), multihop=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop.from_gdata(n.get_opt_container("multihop")), optional_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes.from_gdata(n.get_opt_container("optional-attributes")), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi.from_gdata(n.get_opt_list("afi-safi")), local_as=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as.from_gdata(n.get_opt_container("local-as")), route_flap_damping=n.get_opt_bool("route-flap-damping"), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector.from_gdata(n.get_opt_container("route-reflector")), send_community_type=n.get_opt_strs("send-community-type"), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community.from_gdata(n.get_opt_container("send-community")), send_default_route=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route.from_gdata(n.get_opt_container("send-default-route")), timers=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers.from_gdata(n.get_opt_container("timers")), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options.from_gdata(n.get_opt_container("trace-options")), transport=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport.from_gdata(n.get_opt_container("transport")), peer_router_id=n.get_opt_str("peer-router-id"), session_state=n.get_opt_str("session-state"), last_state=n.get_opt_str("last-state"), last_event=n.get_opt_str("last-event"), last_established=n.get_opt_str("last-established"), established_transitions=n.get_opt_int("established-transitions"), advertised_capabilities=n.get_opt_strs("advertised-capabilities"), received_capabilities=n.get_opt_strs("received-capabilities"), received_afi_safi=n.get_opt_strs("received-afi-safi"), received_end_of_rib=n.get_opt_strs("received-end-of-rib"), sent_end_of_rib=n.get_opt_strs("sent-end-of-rib"), slow_peer=n.get_opt_str("slow-peer"), dynamic_neighbor=n.get_opt_bool("dynamic-neighbor"), discovered_by_lldp=n.get_opt_bool("discovered-by-lldp"), sent_messages=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages.from_gdata(n.get_opt_container("sent-messages")), received_messages=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages.from_gdata(n.get_opt_container("received-messages")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(peer_address=yang.gdata.from_xml_str(n, "peer-address"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), description=yang.gdata.from_xml_opt_str(n, "description"), under_maintenance=yang.gdata.from_xml_opt_bool(n, "under-maintenance"), maintenance_group=yang.gdata.from_xml_opt_str(n, "maintenance-group"), peer_type=yang.gdata.from_xml_opt_str(n, "peer-type"), export_policy=yang.gdata.from_xml_opt_strs(n, "export-policy"), import_policy=yang.gdata.from_xml_opt_strs(n, "import-policy"), local_preference=yang.gdata.from_xml_opt_int(n, "local-preference"), next_hop_self=yang.gdata.from_xml_opt_bool(n, "next-hop-self"), peer_as=yang.gdata.from_xml_opt_int(n, "peer-as"), peer_group=yang.gdata.from_xml_str(n, "peer-group"), last_prefix_limit_exceeded=yang.gdata.from_xml_opt_str(n, "last-prefix-limit-exceeded"), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options.from_xml(yang.gdata.get_xml_opt_child(n, "as-path-options")), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication.from_xml(yang.gdata.get_xml_opt_child(n, "authentication")), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection.from_xml(yang.gdata.get_xml_opt_child(n, "failure-detection")), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-restart")), multihop=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop.from_xml(yang.gdata.get_xml_opt_child(n, "multihop")), optional_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes.from_xml(yang.gdata.get_xml_opt_child(n, "optional-attributes")), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi.from_xml(yang.gdata.get_xml_children(n, "afi-safi")), local_as=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as.from_xml(yang.gdata.get_xml_opt_child(n, "local-as")), route_flap_damping=yang.gdata.from_xml_opt_bool(n, "route-flap-damping"), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector.from_xml(yang.gdata.get_xml_opt_child(n, "route-reflector")), send_community_type=yang.gdata.from_xml_opt_strs(n, "send-community-type"), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community.from_xml(yang.gdata.get_xml_opt_child(n, "send-community")), send_default_route=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route.from_xml(yang.gdata.get_xml_opt_child(n, "send-default-route")), timers=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers.from_xml(yang.gdata.get_xml_opt_child(n, "timers")), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options.from_xml(yang.gdata.get_xml_opt_child(n, "trace-options")), transport=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport.from_xml(yang.gdata.get_xml_opt_child(n, "transport")), peer_router_id=yang.gdata.from_xml_opt_str(n, "peer-router-id"), session_state=yang.gdata.from_xml_opt_str(n, "session-state"), last_state=yang.gdata.from_xml_opt_str(n, "last-state"), last_event=yang.gdata.from_xml_opt_str(n, "last-event"), last_established=yang.gdata.from_xml_opt_str(n, "last-established"), established_transitions=yang.gdata.from_xml_opt_int(n, "established-transitions"), advertised_capabilities=yang.gdata.from_xml_opt_strs(n, "advertised-capabilities"), received_capabilities=yang.gdata.from_xml_opt_strs(n, "received-capabilities"), received_afi_safi=yang.gdata.from_xml_opt_strs(n, "received-afi-safi"), received_end_of_rib=yang.gdata.from_xml_opt_strs(n, "received-end-of-rib"), sent_end_of_rib=yang.gdata.from_xml_opt_strs(n, "sent-end-of-rib"), slow_peer=yang.gdata.from_xml_opt_str(n, "slow-peer"), dynamic_neighbor=yang.gdata.from_xml_opt_bool(n, "dynamic-neighbor"), discovered_by_lldp=yang.gdata.from_xml_opt_bool(n, "discovered-by-lldp"), sent_messages=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__sent_messages.from_xml(yang.gdata.get_xml_opt_child(n, "sent-messages")), received_messages=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__received_messages.from_xml(yang.gdata.get_xml_opt_child(n, "received-messages")))

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, peer_address, peer_group):
        for e in self.elements:
            match = True
            if e.peer_address != peer_address:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(peer_address, peer_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['peer-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__protocols__bgp(yang.adata.MNode):
    admin_state: str
    oper_state: ?str
    under_maintenance: ?bool
    maintenance_group: ?str
    autonomous_system: int
    export_policy: list[str]
    import_policy: list[str]
    local_preference: int
    router_id: str
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__authentication
    best_path_selection: srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection
    bgp_label: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__convergence
    dynamic_neighbors: srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors
    ebgp_default_policy: srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy
    failure_detection: srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart
    max_ecmp_hash_buckets_per_next_hop_group: ?int
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi
    preference: srl_nokia_network_instance__network_instance__protocols__bgp__preference
    rib_management: srl_nokia_network_instance__network_instance__protocols__bgp__rib_management
    route_advertisement: srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement
    route_flap_damping: srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector
    segment_routing_mpls: srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls
    send_community_type: list[str]
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__send_community
    transport: srl_nokia_network_instance__network_instance__protocols__bgp__transport
    trace_options: srl_nokia_network_instance__network_instance__protocols__bgp__trace_options
    statistics: srl_nokia_network_instance__network_instance__protocols__bgp__statistics
    group: srl_nokia_network_instance__network_instance__protocols__bgp__group
    neighbor: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor

    mut def __init__(self, autonomous_system: int, router_id: str, admin_state: ?str=None, oper_state: ?str, under_maintenance: ?bool, maintenance_group: ?str, export_policy: ?list[str]=None, import_policy: ?list[str]=None, local_preference: ?int=None, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__authentication=None, best_path_selection: ?srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection=None, bgp_label: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__convergence=None, dynamic_neighbors: ?srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors=None, ebgp_default_policy: ?srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy=None, failure_detection: ?srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart=None, max_ecmp_hash_buckets_per_next_hop_group: ?int, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]=[], preference: ?srl_nokia_network_instance__network_instance__protocols__bgp__preference=None, rib_management: ?srl_nokia_network_instance__network_instance__protocols__bgp__rib_management=None, route_advertisement: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement=None, route_flap_damping: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping=None, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector=None, segment_routing_mpls: ?srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls=None, send_community_type: ?list[str]=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__send_community=None, transport: ?srl_nokia_network_instance__network_instance__protocols__bgp__transport=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__trace_options=None, statistics: ?srl_nokia_network_instance__network_instance__protocols__bgp__statistics=None, group: list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]=[], neighbor: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.oper_state = oper_state
        self.under_maintenance = under_maintenance
        self.maintenance_group = maintenance_group
        self.autonomous_system = autonomous_system
        if export_policy is not None:
            self.export_policy = export_policy
        else:
            self.export_policy = []
        if import_policy is not None:
            self.import_policy = import_policy
        else:
            self.import_policy = []
        if local_preference != None:
            self.local_preference = local_preference
        else:
            self.local_preference = 100
        self.router_id = router_id
        if as_path_options is not None:
            self.as_path_options = as_path_options
        else:
            self.as_path_options = srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()
        self_as_path_options = self.as_path_options
        if self_as_path_options is not None:
            self_as_path_options._parent = self
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = srl_nokia_network_instance__network_instance__protocols__bgp__authentication()
        self_authentication = self.authentication
        if self_authentication is not None:
            self_authentication._parent = self
        if best_path_selection is not None:
            self.best_path_selection = best_path_selection
        else:
            self.best_path_selection = srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection()
        self_best_path_selection = self.best_path_selection
        if self_best_path_selection is not None:
            self_best_path_selection._parent = self
        self.bgp_label = bgp_label
        self_bgp_label = self.bgp_label
        if self_bgp_label is not None:
            self_bgp_label._parent = self
        if convergence is not None:
            self.convergence = convergence
        else:
            self.convergence = srl_nokia_network_instance__network_instance__protocols__bgp__convergence()
        self_convergence = self.convergence
        if self_convergence is not None:
            self_convergence._parent = self
        if dynamic_neighbors is not None:
            self.dynamic_neighbors = dynamic_neighbors
        else:
            self.dynamic_neighbors = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors()
        self_dynamic_neighbors = self.dynamic_neighbors
        if self_dynamic_neighbors is not None:
            self_dynamic_neighbors._parent = self
        if ebgp_default_policy is not None:
            self.ebgp_default_policy = ebgp_default_policy
        else:
            self.ebgp_default_policy = srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()
        self_ebgp_default_policy = self.ebgp_default_policy
        if self_ebgp_default_policy is not None:
            self_ebgp_default_policy._parent = self
        if failure_detection is not None:
            self.failure_detection = failure_detection
        else:
            self.failure_detection = srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection()
        self_failure_detection = self.failure_detection
        if self_failure_detection is not None:
            self_failure_detection._parent = self
        if graceful_restart is not None:
            self.graceful_restart = graceful_restart
        else:
            self.graceful_restart = srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart()
        self_graceful_restart = self.graceful_restart
        if self_graceful_restart is not None:
            self_graceful_restart._parent = self
        self.max_ecmp_hash_buckets_per_next_hop_group = max_ecmp_hash_buckets_per_next_hop_group
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi(elements=afi_safi)
        self.afi_safi._parent = self
        if preference is not None:
            self.preference = preference
        else:
            self.preference = srl_nokia_network_instance__network_instance__protocols__bgp__preference()
        self_preference = self.preference
        if self_preference is not None:
            self_preference._parent = self
        if rib_management is not None:
            self.rib_management = rib_management
        else:
            self.rib_management = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()
        self_rib_management = self.rib_management
        if self_rib_management is not None:
            self_rib_management._parent = self
        if route_advertisement is not None:
            self.route_advertisement = route_advertisement
        else:
            self.route_advertisement = srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()
        self_route_advertisement = self.route_advertisement
        if self_route_advertisement is not None:
            self_route_advertisement._parent = self
        if route_flap_damping is not None:
            self.route_flap_damping = route_flap_damping
        else:
            self.route_flap_damping = srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()
        self_route_flap_damping = self.route_flap_damping
        if self_route_flap_damping is not None:
            self_route_flap_damping._parent = self
        if route_reflector is not None:
            self.route_reflector = route_reflector
        else:
            self.route_reflector = srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()
        self_route_reflector = self.route_reflector
        if self_route_reflector is not None:
            self_route_reflector._parent = self
        if segment_routing_mpls is not None:
            self.segment_routing_mpls = segment_routing_mpls
        else:
            self.segment_routing_mpls = srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()
        self_segment_routing_mpls = self.segment_routing_mpls
        if self_segment_routing_mpls is not None:
            self_segment_routing_mpls._parent = self
        if send_community_type is not None:
            self.send_community_type = send_community_type
        else:
            self.send_community_type = []
        if send_community is not None:
            self.send_community = send_community
        else:
            self.send_community = srl_nokia_network_instance__network_instance__protocols__bgp__send_community()
        self_send_community = self.send_community
        if self_send_community is not None:
            self_send_community._parent = self
        if transport is not None:
            self.transport = transport
        else:
            self.transport = srl_nokia_network_instance__network_instance__protocols__bgp__transport()
        self_transport = self.transport
        if self_transport is not None:
            self_transport._parent = self
        if trace_options is not None:
            self.trace_options = trace_options
        else:
            self.trace_options = srl_nokia_network_instance__network_instance__protocols__bgp__trace_options()
        self_trace_options = self.trace_options
        if self_trace_options is not None:
            self_trace_options._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__protocols__bgp__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        self.group = srl_nokia_network_instance__network_instance__protocols__bgp__group(elements=group)
        self.group._parent = self
        self.neighbor = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor(elements=neighbor)
        self.neighbor._parent = self

    mut def create_bgp_label(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label()
        self.bgp_label = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _oper_state = self.oper_state
        _under_maintenance = self.under_maintenance
        _maintenance_group = self.maintenance_group
        _autonomous_system = self.autonomous_system
        _local_preference = self.local_preference
        _router_id = self.router_id
        _as_path_options = self.as_path_options
        _authentication = self.authentication
        _best_path_selection = self.best_path_selection
        _bgp_label = self.bgp_label
        _convergence = self.convergence
        _dynamic_neighbors = self.dynamic_neighbors
        _ebgp_default_policy = self.ebgp_default_policy
        _failure_detection = self.failure_detection
        _graceful_restart = self.graceful_restart
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        _afi_safi = self.afi_safi
        _preference = self.preference
        _rib_management = self.rib_management
        _route_advertisement = self.route_advertisement
        _route_flap_damping = self.route_flap_damping
        _route_reflector = self.route_reflector
        _segment_routing_mpls = self.segment_routing_mpls
        _send_community = self.send_community
        _transport = self.transport
        _trace_options = self.trace_options
        _statistics = self.statistics
        _group = self.group
        _neighbor = self.neighbor
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _under_maintenance is not None:
            children['under-maintenance'] = yang.gdata.Leaf('boolean', _under_maintenance)
        if _maintenance_group is not None:
            children['maintenance-group'] = yang.gdata.Leaf('string', _maintenance_group)
        if _autonomous_system is not None:
            children['autonomous-system'] = yang.gdata.Leaf('uint32', _autonomous_system)
        children['export-policy'] = yang.gdata.LeafList(self.export_policy)
        children['import-policy'] = yang.gdata.LeafList(self.import_policy)
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('union', _router_id)
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        if _best_path_selection is not None:
            children['best-path-selection'] = _best_path_selection.to_gdata()
        if _bgp_label is not None:
            children['bgp-label'] = _bgp_label.to_gdata()
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        if _dynamic_neighbors is not None:
            children['dynamic-neighbors'] = _dynamic_neighbors.to_gdata()
        if _ebgp_default_policy is not None:
            children['ebgp-default-policy'] = _ebgp_default_policy.to_gdata()
        if _failure_detection is not None:
            children['failure-detection'] = _failure_detection.to_gdata()
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            children['max-ecmp-hash-buckets-per-next-hop-group'] = yang.gdata.Leaf('uint16', _max_ecmp_hash_buckets_per_next_hop_group)
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        if _preference is not None:
            children['preference'] = _preference.to_gdata()
        if _rib_management is not None:
            children['rib-management'] = _rib_management.to_gdata()
        if _route_advertisement is not None:
            children['route-advertisement'] = _route_advertisement.to_gdata()
        if _route_flap_damping is not None:
            children['route-flap-damping'] = _route_flap_damping.to_gdata()
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        if _segment_routing_mpls is not None:
            children['segment-routing-mpls'] = _segment_routing_mpls.to_gdata()
        children['send-community-type'] = yang.gdata.LeafList(self.send_community_type)
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _group is not None:
            children['group'] = _group.to_gdata()
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp(admin_state=n.get_opt_str("admin-state"), oper_state=n.get_opt_str("oper-state"), under_maintenance=n.get_opt_bool("under-maintenance"), maintenance_group=n.get_opt_str("maintenance-group"), autonomous_system=n.get_int("autonomous-system"), export_policy=n.get_opt_strs("export-policy"), import_policy=n.get_opt_strs("import-policy"), local_preference=n.get_opt_int("local-preference"), router_id=n.get_str("router-id"), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options.from_gdata(n.get_opt_container("as-path-options")), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__authentication.from_gdata(n.get_opt_container("authentication")), best_path_selection=srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection.from_gdata(n.get_opt_container("best-path-selection")), bgp_label=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label.from_gdata(n.get_opt_container("bgp-label")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__convergence.from_gdata(n.get_opt_container("convergence")), dynamic_neighbors=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors.from_gdata(n.get_opt_container("dynamic-neighbors")), ebgp_default_policy=srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy.from_gdata(n.get_opt_container("ebgp-default-policy")), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection.from_gdata(n.get_opt_container("failure-detection")), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart.from_gdata(n.get_opt_container("graceful-restart")), max_ecmp_hash_buckets_per_next_hop_group=n.get_opt_int("max-ecmp-hash-buckets-per-next-hop-group"), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi.from_gdata(n.get_opt_list("afi-safi")), preference=srl_nokia_network_instance__network_instance__protocols__bgp__preference.from_gdata(n.get_opt_container("preference")), rib_management=srl_nokia_network_instance__network_instance__protocols__bgp__rib_management.from_gdata(n.get_opt_container("rib-management")), route_advertisement=srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement.from_gdata(n.get_opt_container("route-advertisement")), route_flap_damping=srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping.from_gdata(n.get_opt_container("route-flap-damping")), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector.from_gdata(n.get_opt_container("route-reflector")), segment_routing_mpls=srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls.from_gdata(n.get_opt_container("segment-routing-mpls")), send_community_type=n.get_opt_strs("send-community-type"), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__send_community.from_gdata(n.get_opt_container("send-community")), transport=srl_nokia_network_instance__network_instance__protocols__bgp__transport.from_gdata(n.get_opt_container("transport")), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__trace_options.from_gdata(n.get_opt_container("trace-options")), statistics=srl_nokia_network_instance__network_instance__protocols__bgp__statistics.from_gdata(n.get_opt_container("statistics")), group=srl_nokia_network_instance__network_instance__protocols__bgp__group.from_gdata(n.get_opt_list("group")), neighbor=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor.from_gdata(n.get_opt_list("neighbor")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), under_maintenance=yang.gdata.from_xml_opt_bool(n, "under-maintenance"), maintenance_group=yang.gdata.from_xml_opt_str(n, "maintenance-group"), autonomous_system=yang.gdata.from_xml_int(n, "autonomous-system"), export_policy=yang.gdata.from_xml_opt_strs(n, "export-policy"), import_policy=yang.gdata.from_xml_opt_strs(n, "import-policy"), local_preference=yang.gdata.from_xml_opt_int(n, "local-preference"), router_id=yang.gdata.from_xml_str(n, "router-id"), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options.from_xml(yang.gdata.get_xml_opt_child(n, "as-path-options")), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__authentication.from_xml(yang.gdata.get_xml_opt_child(n, "authentication")), best_path_selection=srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection.from_xml(yang.gdata.get_xml_opt_child(n, "best-path-selection")), bgp_label=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label.from_xml(yang.gdata.get_xml_opt_child(n, "bgp-label")), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__convergence.from_xml(yang.gdata.get_xml_opt_child(n, "convergence")), dynamic_neighbors=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors.from_xml(yang.gdata.get_xml_opt_child(n, "dynamic-neighbors")), ebgp_default_policy=srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy.from_xml(yang.gdata.get_xml_opt_child(n, "ebgp-default-policy")), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection.from_xml(yang.gdata.get_xml_opt_child(n, "failure-detection")), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart.from_xml(yang.gdata.get_xml_opt_child(n, "graceful-restart")), max_ecmp_hash_buckets_per_next_hop_group=yang.gdata.from_xml_opt_int(n, "max-ecmp-hash-buckets-per-next-hop-group"), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi.from_xml(yang.gdata.get_xml_children(n, "afi-safi")), preference=srl_nokia_network_instance__network_instance__protocols__bgp__preference.from_xml(yang.gdata.get_xml_opt_child(n, "preference")), rib_management=srl_nokia_network_instance__network_instance__protocols__bgp__rib_management.from_xml(yang.gdata.get_xml_opt_child(n, "rib-management")), route_advertisement=srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement.from_xml(yang.gdata.get_xml_opt_child(n, "route-advertisement")), route_flap_damping=srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping.from_xml(yang.gdata.get_xml_opt_child(n, "route-flap-damping")), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector.from_xml(yang.gdata.get_xml_opt_child(n, "route-reflector")), segment_routing_mpls=srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls.from_xml(yang.gdata.get_xml_opt_child(n, "segment-routing-mpls")), send_community_type=yang.gdata.from_xml_opt_strs(n, "send-community-type"), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__send_community.from_xml(yang.gdata.get_xml_opt_child(n, "send-community")), transport=srl_nokia_network_instance__network_instance__protocols__bgp__transport.from_xml(yang.gdata.get_xml_opt_child(n, "transport")), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__trace_options.from_xml(yang.gdata.get_xml_opt_child(n, "trace-options")), statistics=srl_nokia_network_instance__network_instance__protocols__bgp__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), group=srl_nokia_network_instance__network_instance__protocols__bgp__group.from_xml(yang.gdata.get_xml_children(n, "group")), neighbor=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor.from_xml(yang.gdata.get_xml_children(n, "neighbor")))
        return None



class srl_nokia_network_instance__network_instance__protocols(yang.adata.MNode):
    bgp_evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn
    bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn
    directly_connected: srl_nokia_network_instance__network_instance__protocols__directly_connected
    bgp: ?srl_nokia_network_instance__network_instance__protocols__bgp

    mut def __init__(self, bgp_evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn=None, bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn=None, directly_connected: ?srl_nokia_network_instance__network_instance__protocols__directly_connected=None, bgp: ?srl_nokia_network_instance__network_instance__protocols__bgp=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.bgp_evpn = bgp_evpn
        self_bgp_evpn = self.bgp_evpn
        if self_bgp_evpn is not None:
            self_bgp_evpn._parent = self
        self.bgp_ipvpn = bgp_ipvpn
        self_bgp_ipvpn = self.bgp_ipvpn
        if self_bgp_ipvpn is not None:
            self_bgp_ipvpn._parent = self
        if directly_connected is not None:
            self.directly_connected = directly_connected
        else:
            self.directly_connected = srl_nokia_network_instance__network_instance__protocols__directly_connected()
        self_directly_connected = self.directly_connected
        if self_directly_connected is not None:
            self_directly_connected._parent = self
        self.bgp = bgp
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self

    mut def create_bgp_evpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn()
        self.bgp_evpn = res
        return res

    mut def create_bgp_ipvpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        self.bgp_ipvpn = res
        return res

    mut def create_bgp(self, autonomous_system, router_id):
        res = srl_nokia_network_instance__network_instance__protocols__bgp(autonomous_system, router_id)
        self.bgp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp_evpn = self.bgp_evpn
        _bgp_ipvpn = self.bgp_ipvpn
        _directly_connected = self.directly_connected
        _bgp = self.bgp
        if _bgp_evpn is not None:
            children['bgp-evpn'] = _bgp_evpn.to_gdata()
        if _bgp_ipvpn is not None:
            children['bgp-ipvpn'] = _bgp_ipvpn.to_gdata()
        if _directly_connected is not None:
            children['directly-connected'] = _directly_connected.to_gdata()
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols(bgp_evpn=srl_nokia_network_instance__network_instance__protocols__bgp_evpn.from_gdata(n.get_opt_container("bgp-evpn")), bgp_ipvpn=srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn.from_gdata(n.get_opt_container("bgp-ipvpn")), directly_connected=srl_nokia_network_instance__network_instance__protocols__directly_connected.from_gdata(n.get_opt_container("directly-connected")), bgp=srl_nokia_network_instance__network_instance__protocols__bgp.from_gdata(n.get_opt_container("bgp")))
        return srl_nokia_network_instance__network_instance__protocols()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__protocols:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols(bgp_evpn=srl_nokia_network_instance__network_instance__protocols__bgp_evpn.from_xml(yang.gdata.get_xml_opt_child(n, "bgp-evpn")), bgp_ipvpn=srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn.from_xml(yang.gdata.get_xml_opt_child(n, "bgp-ipvpn")), directly_connected=srl_nokia_network_instance__network_instance__protocols__directly_connected.from_xml(yang.gdata.get_xml_opt_child(n, "directly-connected")), bgp=srl_nokia_network_instance__network_instance__protocols__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp", "urn:nokia.com:srlinux:bgp:bgp")))
        return srl_nokia_network_instance__network_instance__protocols()



mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__discard_unknown_dest_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__protect_anycast_gw_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush__send_flush_on_failure(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush(yang.adata.MNode):
    send_flush_on_failure: bool

    mut def __init__(self, send_flush_on_failure: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if send_flush_on_failure != None:
            self.send_flush_on_failure = send_flush_on_failure
        else:
            self.send_flush_on_failure = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send_flush_on_failure = self.send_flush_on_failure
        if _send_flush_on_failure is not None:
            children['send-flush-on-failure'] = yang.gdata.Leaf('boolean', _send_flush_on_failure)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush(send_flush_on_failure=n.get_opt_bool("send-flush-on-failure"))
        return srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush(send_flush_on_failure=yang.gdata.from_xml_opt_bool(n, "send-flush-on-failure"))
        return srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush()



mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__oper_mac_learning(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__oper_mac_learning_disabled_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__mac_relearn_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging__age_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int32", val)

class srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging(yang.adata.MNode):
    admin_state: str
    age_time: int

    mut def __init__(self, admin_state: ?str=None, age_time: ?int=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if age_time != None:
            self.age_time = age_time
        else:
            self.age_time = 300

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _age_time = self.age_time
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _age_time is not None:
            children['age-time'] = yang.gdata.Leaf('int32', _age_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging(admin_state=n.get_opt_str("admin-state"), age_time=n.get_opt_int("age-time"))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), age_time=yang.gdata.from_xml_opt_int(n, "age-time"))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging()



mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac__destination(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac__last_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac__aging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry(yang.adata.MNode):
    address: str
    destination: ?str
    last_update: ?str
    aging: ?value

    mut def __init__(self, address: str, destination: ?str, last_update: ?str, aging: ?value):
        self._ns = "urn:nokia.com:srlinux:l2-mac-learn:bridge-table-mac-learning-entries"
        self.address = address
        self.destination = destination
        self.last_update = last_update
        self.aging = aging

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _destination = self.destination
        _last_update = self.last_update
        _aging = self.aging
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _destination is not None:
            children['destination'] = yang.gdata.Leaf('string', _destination)
        if _last_update is not None:
            children['last-update'] = yang.gdata.Leaf('string', _last_update)
        if _aging is not None:
            children['aging'] = yang.gdata.Leaf('union', _aging)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry(address=n.get_str("address"), destination=n.get_opt_str("destination"), last_update=n.get_opt_str("last-update"), aging=n.get_opt_value("aging"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry(address=yang.gdata.from_xml_str(n, "address"), destination=yang.gdata.from_xml_opt_str(n, "destination"), last_update=yang.gdata.from_xml_opt_str(n, "last-update"), aging=yang.gdata.from_xml_opt_value(n, "aging"))

class srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:l2-mac-learn:bridge-table-mac-learning-entries"
        self._name = 'mac'
        self.elements = elements

    mut def create(self, address):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry(address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries(yang.adata.MNode):
    mac: srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac

    mut def __init__(self, mac: list[srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:l2-mac-learn:bridge-table-mac-learning-entries"
        self.mac = srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac(elements=mac)
        self.mac._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mac = self.mac
        if _mac is not None:
            children['mac'] = _mac.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:l2-mac-learn:bridge-table-mac-learning-entries')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries(mac=srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac.from_gdata(n.get_opt_list("mac")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries(mac=srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries__mac.from_xml(yang.gdata.get_xml_children(n, "mac")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries()



class srl_nokia_network_instance__network_instance__bridge_table__mac_learning(yang.adata.MNode):
    admin_state: str
    oper_mac_learning: ?str
    oper_mac_learning_disabled_reason: ?str
    mac_relearn_only: bool
    aging: srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging
    learnt_entries: srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries

    mut def __init__(self, admin_state: ?str=None, oper_mac_learning: ?str, oper_mac_learning_disabled_reason: ?str, mac_relearn_only: ?bool=None, aging: ?srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging=None, learnt_entries: ?srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.oper_mac_learning = oper_mac_learning
        self.oper_mac_learning_disabled_reason = oper_mac_learning_disabled_reason
        if mac_relearn_only != None:
            self.mac_relearn_only = mac_relearn_only
        else:
            self.mac_relearn_only = True
        if aging is not None:
            self.aging = aging
        else:
            self.aging = srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging()
        self_aging = self.aging
        if self_aging is not None:
            self_aging._parent = self
        if learnt_entries is not None:
            self.learnt_entries = learnt_entries
        else:
            self.learnt_entries = srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries()
        self_learnt_entries = self.learnt_entries
        if self_learnt_entries is not None:
            self_learnt_entries._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _oper_mac_learning = self.oper_mac_learning
        _oper_mac_learning_disabled_reason = self.oper_mac_learning_disabled_reason
        _mac_relearn_only = self.mac_relearn_only
        _aging = self.aging
        _learnt_entries = self.learnt_entries
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _oper_mac_learning is not None:
            children['oper-mac-learning'] = yang.gdata.Leaf('enumeration', _oper_mac_learning)
        if _oper_mac_learning_disabled_reason is not None:
            children['oper-mac-learning-disabled-reason'] = yang.gdata.Leaf('enumeration', _oper_mac_learning_disabled_reason)
        if _mac_relearn_only is not None:
            children['mac-relearn-only'] = yang.gdata.Leaf('boolean', _mac_relearn_only)
        if _aging is not None:
            children['aging'] = _aging.to_gdata()
        if _learnt_entries is not None:
            children['learnt-entries'] = _learnt_entries.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_learning(admin_state=n.get_opt_str("admin-state"), oper_mac_learning=n.get_opt_str("oper-mac-learning"), oper_mac_learning_disabled_reason=n.get_opt_str("oper-mac-learning-disabled-reason"), mac_relearn_only=n.get_opt_bool("mac-relearn-only"), aging=srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging.from_gdata(n.get_opt_container("aging")), learnt_entries=srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries.from_gdata(n.get_opt_container("learnt-entries")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_learning()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_learning(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), oper_mac_learning=yang.gdata.from_xml_opt_str(n, "oper-mac-learning"), oper_mac_learning_disabled_reason=yang.gdata.from_xml_opt_str(n, "oper-mac-learning-disabled-reason"), mac_relearn_only=yang.gdata.from_xml_opt_bool(n, "mac-relearn-only"), aging=srl_nokia_network_instance__network_instance__bridge_table__mac_learning__aging.from_xml(yang.gdata.get_xml_opt_child(n, "aging")), learnt_entries=srl_nokia_network_instance__network_instance__bridge_table__mac_learning__learnt_entries.from_xml(yang.gdata.get_xml_opt_child(n, "learnt-entries", "urn:nokia.com:srlinux:l2-mac-learn:bridge-table-mac-learning-entries")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_learning()



mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__monitoring_window(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__num_moves(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__hold_down_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac__destination_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac__destination_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac__dup_detect_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac__hold_down_time_remaining(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac__destination(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry(yang.adata.MNode):
    address: str
    destination_type: ?str
    destination_index: ?int
    dup_detect_time: ?str
    hold_down_time_remaining: ?value
    destination: ?str

    mut def __init__(self, address: str, destination_type: ?str, destination_index: ?int, dup_detect_time: ?str, hold_down_time_remaining: ?value, destination: ?str):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-duplication-entries"
        self.address = address
        self.destination_type = destination_type
        self.destination_index = destination_index
        self.dup_detect_time = dup_detect_time
        self.hold_down_time_remaining = hold_down_time_remaining
        self.destination = destination

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _destination_type = self.destination_type
        _destination_index = self.destination_index
        _dup_detect_time = self.dup_detect_time
        _hold_down_time_remaining = self.hold_down_time_remaining
        _destination = self.destination
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _destination_type is not None:
            children['destination-type'] = yang.gdata.Leaf('enumeration', _destination_type)
        if _destination_index is not None:
            children['destination-index'] = yang.gdata.Leaf('uint64', _destination_index)
        if _dup_detect_time is not None:
            children['dup-detect-time'] = yang.gdata.Leaf('string', _dup_detect_time)
        if _hold_down_time_remaining is not None:
            children['hold-down-time-remaining'] = yang.gdata.Leaf('union', _hold_down_time_remaining)
        if _destination is not None:
            children['destination'] = yang.gdata.Leaf('string', _destination)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry(address=n.get_str("address"), destination_type=n.get_opt_str("destination-type"), destination_index=n.get_opt_int("destination-index"), dup_detect_time=n.get_opt_str("dup-detect-time"), hold_down_time_remaining=n.get_opt_value("hold-down-time-remaining"), destination=n.get_opt_str("destination"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry(address=yang.gdata.from_xml_str(n, "address"), destination_type=yang.gdata.from_xml_opt_str(n, "destination-type"), destination_index=yang.gdata.from_xml_opt_int(n, "destination-index"), dup_detect_time=yang.gdata.from_xml_opt_str(n, "dup-detect-time"), hold_down_time_remaining=yang.gdata.from_xml_opt_value(n, "hold-down-time-remaining"), destination=yang.gdata.from_xml_opt_str(n, "destination"))

class srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-duplication-entries"
        self._name = 'mac'
        self.elements = elements

    mut def create(self, address):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry(address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries(yang.adata.MNode):
    mac: srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac

    mut def __init__(self, mac: list[srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-duplication-entries"
        self.mac = srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac(elements=mac)
        self.mac._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mac = self.mac
        if _mac is not None:
            children['mac'] = _mac.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:l2-mac:bridge-table-mac-duplication-entries')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries(mac=srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac.from_gdata(n.get_opt_list("mac")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries(mac=srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries__mac.from_xml(yang.gdata.get_xml_children(n, "mac")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries()



class srl_nokia_network_instance__network_instance__bridge_table__mac_duplication(yang.adata.MNode):
    admin_state: str
    monitoring_window: int
    num_moves: int
    hold_down_time: value
    action_: str
    duplicate_entries: srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries

    mut def __init__(self, admin_state: ?str=None, monitoring_window: ?int=None, num_moves: ?int=None, hold_down_time: ?value=None, action_: ?str=None, duplicate_entries: ?srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if monitoring_window != None:
            self.monitoring_window = monitoring_window
        else:
            self.monitoring_window = 3
        if num_moves != None:
            self.num_moves = num_moves
        else:
            self.num_moves = 5
        if hold_down_time != None:
            self.hold_down_time = hold_down_time
        else:
            self.hold_down_time = 9
        if action_ != None:
            self.action_ = action_
        else:
            self.action_ = "stop-learning"
        if duplicate_entries is not None:
            self.duplicate_entries = duplicate_entries
        else:
            self.duplicate_entries = srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries()
        self_duplicate_entries = self.duplicate_entries
        if self_duplicate_entries is not None:
            self_duplicate_entries._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _monitoring_window = self.monitoring_window
        _num_moves = self.num_moves
        _hold_down_time = self.hold_down_time
        _action_ = self.action_
        _duplicate_entries = self.duplicate_entries
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _monitoring_window is not None:
            children['monitoring-window'] = yang.gdata.Leaf('uint32', _monitoring_window)
        if _num_moves is not None:
            children['num-moves'] = yang.gdata.Leaf('uint32', _num_moves)
        if _hold_down_time is not None:
            children['hold-down-time'] = yang.gdata.Leaf('union', _hold_down_time)
        if _action_ is not None:
            children['action'] = yang.gdata.Leaf('enumeration', _action_)
        if _duplicate_entries is not None:
            children['duplicate-entries'] = _duplicate_entries.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication(admin_state=n.get_opt_str("admin-state"), monitoring_window=n.get_opt_int("monitoring-window"), num_moves=n.get_opt_int("num-moves"), hold_down_time=n.get_opt_value("hold-down-time"), action_=n.get_opt_str("action"), duplicate_entries=srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries.from_gdata(n.get_opt_container("duplicate-entries")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), monitoring_window=yang.gdata.from_xml_opt_int(n, "monitoring-window"), num_moves=yang.gdata.from_xml_opt_int(n, "num-moves"), hold_down_time=yang.gdata.from_xml_opt_value(n, "hold-down-time"), action_=yang.gdata.from_xml_opt_str(n, "action"), duplicate_entries=srl_nokia_network_instance__network_instance__bridge_table__mac_duplication__duplicate_entries.from_xml(yang.gdata.get_xml_opt_child(n, "duplicate-entries", "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-duplication-entries")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_duplication()



mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_limit__maximum_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int32", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_limit__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int32", val)

class srl_nokia_network_instance__network_instance__bridge_table__mac_limit(yang.adata.MNode):
    maximum_entries: int
    warning_threshold_pct: int

    mut def __init__(self, maximum_entries: ?int=None, warning_threshold_pct: ?int=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if maximum_entries != None:
            self.maximum_entries = maximum_entries
        else:
            self.maximum_entries = 250
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 95

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_entries = self.maximum_entries
        _warning_threshold_pct = self.warning_threshold_pct
        if _maximum_entries is not None:
            children['maximum-entries'] = yang.gdata.Leaf('int32', _maximum_entries)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('int32', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_limit(maximum_entries=n.get_opt_int("maximum-entries"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_limit(maximum_entries=yang.gdata.from_xml_opt_int(n, "maximum-entries"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_limit()



mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry(name=yang.gdata.from_xml_str(n, "name"))

class srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'split-horizon-group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__destination_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__destination_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__last_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__not_programmed_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__failed_slots(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__destination(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac__is_protected(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry(yang.adata.MNode):
    address: str
    destination_type: ?str
    destination_index: ?int
    type: ?str
    last_update: ?str
    not_programmed_reason: ?str
    failed_slots: list[int]
    destination: ?str
    is_protected: ?bool

    mut def __init__(self, address: str, destination_type: ?str, destination_index: ?int, type: ?str, last_update: ?str, not_programmed_reason: ?str, failed_slots: ?list[int]=None, destination: ?str, is_protected: ?bool):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table"
        self.address = address
        self.destination_type = destination_type
        self.destination_index = destination_index
        self.type = type
        self.last_update = last_update
        self.not_programmed_reason = not_programmed_reason
        if failed_slots is not None:
            self.failed_slots = failed_slots
        else:
            self.failed_slots = []
        self.destination = destination
        self.is_protected = is_protected

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        _destination_type = self.destination_type
        _destination_index = self.destination_index
        _type = self.type
        _last_update = self.last_update
        _not_programmed_reason = self.not_programmed_reason
        _destination = self.destination
        _is_protected = self.is_protected
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        if _destination_type is not None:
            children['destination-type'] = yang.gdata.Leaf('enumeration', _destination_type)
        if _destination_index is not None:
            children['destination-index'] = yang.gdata.Leaf('uint64', _destination_index)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        if _last_update is not None:
            children['last-update'] = yang.gdata.Leaf('string', _last_update)
        if _not_programmed_reason is not None:
            children['not-programmed-reason'] = yang.gdata.Leaf('enumeration', _not_programmed_reason)
        children['failed-slots'] = yang.gdata.LeafList(self.failed_slots)
        if _destination is not None:
            children['destination'] = yang.gdata.Leaf('string', _destination)
        if _is_protected is not None:
            children['is-protected'] = yang.gdata.Leaf('boolean', _is_protected)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.address)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry(address=n.get_str("address"), destination_type=n.get_opt_str("destination-type"), destination_index=n.get_opt_int("destination-index"), type=n.get_opt_str("type"), last_update=n.get_opt_str("last-update"), not_programmed_reason=n.get_opt_str("not-programmed-reason"), failed_slots=n.get_opt_ints("failed-slots"), destination=n.get_opt_str("destination"), is_protected=n.get_opt_bool("is-protected"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry(address=yang.gdata.from_xml_str(n, "address"), destination_type=yang.gdata.from_xml_opt_str(n, "destination-type"), destination_index=yang.gdata.from_xml_opt_int(n, "destination-index"), type=yang.gdata.from_xml_opt_str(n, "type"), last_update=yang.gdata.from_xml_opt_str(n, "last-update"), not_programmed_reason=yang.gdata.from_xml_opt_str(n, "not-programmed-reason"), failed_slots=yang.gdata.from_xml_opt_ints(n, "failed-slots"), destination=yang.gdata.from_xml_opt_str(n, "destination"), is_protected=yang.gdata.from_xml_opt_bool(n, "is-protected"))

class srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table"
        self._name = 'mac'
        self.elements = elements

    mut def create(self, address):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry(address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__bridge_table__mac_table(yang.adata.MNode):
    mac: srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac

    mut def __init__(self, mac: list[srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table"
        self.mac = srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac(elements=mac)
        self.mac._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mac = self.mac
        if _mac is not None:
            children['mac'] = _mac.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_table(mac=srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac.from_gdata(n.get_opt_list("mac")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_table()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__mac_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__mac_table(mac=srl_nokia_network_instance__network_instance__bridge_table__mac_table__mac.from_xml(yang.gdata.get_xml_children(n, "mac")))
        return srl_nokia_network_instance__network_instance__bridge_table__mac_table()



mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__statistics__active_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__statistics__total_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__statistics__failed_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type__active_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type__total_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type__failed_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry(yang.adata.MNode):
    type: str
    active_entries: int
    total_entries: int
    failed_entries: int

    mut def __init__(self, type: str, active_entries: ?int=None, total_entries: ?int=None, failed_entries: ?int=None):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table"
        self.type = type
        if active_entries != None:
            self.active_entries = active_entries
        else:
            self.active_entries = 0
        if total_entries != None:
            self.total_entries = total_entries
        else:
            self.total_entries = 0
        if failed_entries != None:
            self.failed_entries = failed_entries
        else:
            self.failed_entries = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        _active_entries = self.active_entries
        _total_entries = self.total_entries
        _failed_entries = self.failed_entries
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        if _active_entries is not None:
            children['active-entries'] = yang.gdata.Leaf('uint64', _active_entries)
        if _total_entries is not None:
            children['total-entries'] = yang.gdata.Leaf('uint64', _total_entries)
        if _failed_entries is not None:
            children['failed-entries'] = yang.gdata.Leaf('uint64', _failed_entries)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.type)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry(type=n.get_str("type"), active_entries=n.get_opt_int("active-entries"), total_entries=n.get_opt_int("total-entries"), failed_entries=n.get_opt_int("failed-entries"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry:
        return srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry(type=yang.gdata.from_xml_str(n, "type"), active_entries=yang.gdata.from_xml_opt_int(n, "active-entries"), total_entries=yang.gdata.from_xml_opt_int(n, "total-entries"), failed_entries=yang.gdata.from_xml_opt_int(n, "failed-entries"))

class srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table"
        self._name = 'mac-type'
        self.elements = elements

    mut def create(self, type):
        for e in self.elements:
            match = True
            if e.type != type:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry(type)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['type'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__bridge_table__statistics(yang.adata.MNode):
    active_entries: int
    total_entries: int
    failed_entries: int
    mac_type: srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type

    mut def __init__(self, active_entries: ?int=None, total_entries: ?int=None, failed_entries: ?int=None, mac_type: list[srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table"
        if active_entries != None:
            self.active_entries = active_entries
        else:
            self.active_entries = 0
        if total_entries != None:
            self.total_entries = total_entries
        else:
            self.total_entries = 0
        if failed_entries != None:
            self.failed_entries = failed_entries
        else:
            self.failed_entries = 0
        self.mac_type = srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type(elements=mac_type)
        self.mac_type._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _active_entries = self.active_entries
        _total_entries = self.total_entries
        _failed_entries = self.failed_entries
        _mac_type = self.mac_type
        if _active_entries is not None:
            children['active-entries'] = yang.gdata.Leaf('uint64', _active_entries)
        if _total_entries is not None:
            children['total-entries'] = yang.gdata.Leaf('uint64', _total_entries)
        if _failed_entries is not None:
            children['failed-entries'] = yang.gdata.Leaf('uint64', _failed_entries)
        if _mac_type is not None:
            children['mac-type'] = _mac_type.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__bridge_table__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__statistics(active_entries=n.get_opt_int("active-entries"), total_entries=n.get_opt_int("total-entries"), failed_entries=n.get_opt_int("failed-entries"), mac_type=srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type.from_gdata(n.get_opt_list("mac-type")))
        return srl_nokia_network_instance__network_instance__bridge_table__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__bridge_table__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table__statistics(active_entries=yang.gdata.from_xml_opt_int(n, "active-entries"), total_entries=yang.gdata.from_xml_opt_int(n, "total-entries"), failed_entries=yang.gdata.from_xml_opt_int(n, "failed-entries"), mac_type=srl_nokia_network_instance__network_instance__bridge_table__statistics__mac_type.from_xml(yang.gdata.get_xml_children(n, "mac-type")))
        return srl_nokia_network_instance__network_instance__bridge_table__statistics()



class srl_nokia_network_instance__network_instance__bridge_table(yang.adata.MNode):
    discard_unknown_dest_mac: bool
    protect_anycast_gw_mac: bool
    tldp_mac_flush: srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush
    mac_learning: srl_nokia_network_instance__network_instance__bridge_table__mac_learning
    mac_duplication: srl_nokia_network_instance__network_instance__bridge_table__mac_duplication
    mac_limit: srl_nokia_network_instance__network_instance__bridge_table__mac_limit
    split_horizon_group: srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group
    mac_table: srl_nokia_network_instance__network_instance__bridge_table__mac_table
    statistics: srl_nokia_network_instance__network_instance__bridge_table__statistics

    mut def __init__(self, discard_unknown_dest_mac: ?bool=None, protect_anycast_gw_mac: ?bool=None, tldp_mac_flush: ?srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush=None, mac_learning: ?srl_nokia_network_instance__network_instance__bridge_table__mac_learning=None, mac_duplication: ?srl_nokia_network_instance__network_instance__bridge_table__mac_duplication=None, mac_limit: ?srl_nokia_network_instance__network_instance__bridge_table__mac_limit=None, split_horizon_group: list[srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group_entry]=[], mac_table: ?srl_nokia_network_instance__network_instance__bridge_table__mac_table=None, statistics: ?srl_nokia_network_instance__network_instance__bridge_table__statistics=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if discard_unknown_dest_mac != None:
            self.discard_unknown_dest_mac = discard_unknown_dest_mac
        else:
            self.discard_unknown_dest_mac = False
        if protect_anycast_gw_mac != None:
            self.protect_anycast_gw_mac = protect_anycast_gw_mac
        else:
            self.protect_anycast_gw_mac = False
        if tldp_mac_flush is not None:
            self.tldp_mac_flush = tldp_mac_flush
        else:
            self.tldp_mac_flush = srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush()
        self_tldp_mac_flush = self.tldp_mac_flush
        if self_tldp_mac_flush is not None:
            self_tldp_mac_flush._parent = self
        if mac_learning is not None:
            self.mac_learning = mac_learning
        else:
            self.mac_learning = srl_nokia_network_instance__network_instance__bridge_table__mac_learning()
        self_mac_learning = self.mac_learning
        if self_mac_learning is not None:
            self_mac_learning._parent = self
        if mac_duplication is not None:
            self.mac_duplication = mac_duplication
        else:
            self.mac_duplication = srl_nokia_network_instance__network_instance__bridge_table__mac_duplication()
        self_mac_duplication = self.mac_duplication
        if self_mac_duplication is not None:
            self_mac_duplication._parent = self
        if mac_limit is not None:
            self.mac_limit = mac_limit
        else:
            self.mac_limit = srl_nokia_network_instance__network_instance__bridge_table__mac_limit()
        self_mac_limit = self.mac_limit
        if self_mac_limit is not None:
            self_mac_limit._parent = self
        self.split_horizon_group = srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group(elements=split_horizon_group)
        self.split_horizon_group._parent = self
        if mac_table is not None:
            self.mac_table = mac_table
        else:
            self.mac_table = srl_nokia_network_instance__network_instance__bridge_table__mac_table()
        self_mac_table = self.mac_table
        if self_mac_table is not None:
            self_mac_table._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__bridge_table__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _discard_unknown_dest_mac = self.discard_unknown_dest_mac
        _protect_anycast_gw_mac = self.protect_anycast_gw_mac
        _tldp_mac_flush = self.tldp_mac_flush
        _mac_learning = self.mac_learning
        _mac_duplication = self.mac_duplication
        _mac_limit = self.mac_limit
        _split_horizon_group = self.split_horizon_group
        _mac_table = self.mac_table
        _statistics = self.statistics
        if _discard_unknown_dest_mac is not None:
            children['discard-unknown-dest-mac'] = yang.gdata.Leaf('boolean', _discard_unknown_dest_mac)
        if _protect_anycast_gw_mac is not None:
            children['protect-anycast-gw-mac'] = yang.gdata.Leaf('boolean', _protect_anycast_gw_mac)
        if _tldp_mac_flush is not None:
            children['tldp-mac-flush'] = _tldp_mac_flush.to_gdata()
        if _mac_learning is not None:
            children['mac-learning'] = _mac_learning.to_gdata()
        if _mac_duplication is not None:
            children['mac-duplication'] = _mac_duplication.to_gdata()
        if _mac_limit is not None:
            children['mac-limit'] = _mac_limit.to_gdata()
        if _split_horizon_group is not None:
            children['split-horizon-group'] = _split_horizon_group.to_gdata()
        if _mac_table is not None:
            children['mac-table'] = _mac_table.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table(discard_unknown_dest_mac=n.get_opt_bool("discard-unknown-dest-mac"), protect_anycast_gw_mac=n.get_opt_bool("protect-anycast-gw-mac"), tldp_mac_flush=srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush.from_gdata(n.get_opt_container("tldp-mac-flush")), mac_learning=srl_nokia_network_instance__network_instance__bridge_table__mac_learning.from_gdata(n.get_opt_container("mac-learning")), mac_duplication=srl_nokia_network_instance__network_instance__bridge_table__mac_duplication.from_gdata(n.get_opt_container("mac-duplication")), mac_limit=srl_nokia_network_instance__network_instance__bridge_table__mac_limit.from_gdata(n.get_opt_container("mac-limit")), split_horizon_group=srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group.from_gdata(n.get_opt_list("split-horizon-group")), mac_table=srl_nokia_network_instance__network_instance__bridge_table__mac_table.from_gdata(n.get_opt_container("mac-table")), statistics=srl_nokia_network_instance__network_instance__bridge_table__statistics.from_gdata(n.get_opt_container("statistics")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__bridge_table(discard_unknown_dest_mac=yang.gdata.from_xml_opt_bool(n, "discard-unknown-dest-mac"), protect_anycast_gw_mac=yang.gdata.from_xml_opt_bool(n, "protect-anycast-gw-mac"), tldp_mac_flush=srl_nokia_network_instance__network_instance__bridge_table__tldp_mac_flush.from_xml(yang.gdata.get_xml_opt_child(n, "tldp-mac-flush")), mac_learning=srl_nokia_network_instance__network_instance__bridge_table__mac_learning.from_xml(yang.gdata.get_xml_opt_child(n, "mac-learning")), mac_duplication=srl_nokia_network_instance__network_instance__bridge_table__mac_duplication.from_xml(yang.gdata.get_xml_opt_child(n, "mac-duplication")), mac_limit=srl_nokia_network_instance__network_instance__bridge_table__mac_limit.from_xml(yang.gdata.get_xml_opt_child(n, "mac-limit")), split_horizon_group=srl_nokia_network_instance__network_instance__bridge_table__split_horizon_group.from_xml(yang.gdata.get_xml_children(n, "split-horizon-group")), mac_table=srl_nokia_network_instance__network_instance__bridge_table__mac_table.from_xml(yang.gdata.get_xml_opt_child(n, "mac-table", "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table")), statistics=srl_nokia_network_instance__network_instance__bridge_table__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics", "urn:nokia.com:srlinux:l2-mac:bridge-table-mac-table")))
        return None



mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__ipv4_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__route_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__route_owner(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__origin_network_instance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__leakable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__target_network_instances(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__active(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__last_app_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__next_hop_group_network_instance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__gribi_metadata(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("binary", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__resilient_hash(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__internal_tags(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming__suppressed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming__last_successful_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming__last_successful_operation_timestamp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming__pending_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming__last_failed_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming__last_failed_complexes(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming(yang.adata.MNode):
    suppressed: ?bool
    last_successful_operation_type: ?str
    last_successful_operation_timestamp: ?str
    pending_operation_type: ?str
    last_failed_operation_type: ?str
    last_failed_complexes: list[str]

    mut def __init__(self, suppressed: ?bool, last_successful_operation_type: ?str, last_successful_operation_timestamp: ?str, pending_operation_type: ?str, last_failed_operation_type: ?str, last_failed_complexes: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.suppressed = suppressed
        self.last_successful_operation_type = last_successful_operation_type
        self.last_successful_operation_timestamp = last_successful_operation_timestamp
        self.pending_operation_type = pending_operation_type
        self.last_failed_operation_type = last_failed_operation_type
        if last_failed_complexes is not None:
            self.last_failed_complexes = last_failed_complexes
        else:
            self.last_failed_complexes = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _suppressed = self.suppressed
        _last_successful_operation_type = self.last_successful_operation_type
        _last_successful_operation_timestamp = self.last_successful_operation_timestamp
        _pending_operation_type = self.pending_operation_type
        _last_failed_operation_type = self.last_failed_operation_type
        if _suppressed is not None:
            children['suppressed'] = yang.gdata.Leaf('boolean', _suppressed)
        if _last_successful_operation_type is not None:
            children['last-successful-operation-type'] = yang.gdata.Leaf('enumeration', _last_successful_operation_type)
        if _last_successful_operation_timestamp is not None:
            children['last-successful-operation-timestamp'] = yang.gdata.Leaf('string', _last_successful_operation_timestamp)
        if _pending_operation_type is not None:
            children['pending-operation-type'] = yang.gdata.Leaf('enumeration', _pending_operation_type)
        if _last_failed_operation_type is not None:
            children['last-failed-operation-type'] = yang.gdata.Leaf('enumeration', _last_failed_operation_type)
        children['last-failed-complexes'] = yang.gdata.LeafList(self.last_failed_complexes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming(suppressed=n.get_opt_bool("suppressed"), last_successful_operation_type=n.get_opt_str("last-successful-operation-type"), last_successful_operation_timestamp=n.get_opt_str("last-successful-operation-timestamp"), pending_operation_type=n.get_opt_str("pending-operation-type"), last_failed_operation_type=n.get_opt_str("last-failed-operation-type"), last_failed_complexes=n.get_opt_strs("last-failed-complexes"))
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming(suppressed=yang.gdata.from_xml_opt_bool(n, "suppressed"), last_successful_operation_type=yang.gdata.from_xml_opt_str(n, "last-successful-operation-type"), last_successful_operation_timestamp=yang.gdata.from_xml_opt_str(n, "last-successful-operation-timestamp"), pending_operation_type=yang.gdata.from_xml_opt_str(n, "pending-operation-type"), last_failed_operation_type=yang.gdata.from_xml_opt_str(n, "last-failed-operation-type"), last_failed_complexes=yang.gdata.from_xml_opt_strs(n, "last-failed-complexes"))
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming()



class srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry(yang.adata.MNode):
    ipv4_prefix: str
    id: int
    route_type: str
    route_owner: str
    origin_network_instance: str
    leakable: ?bool
    target_network_instances: list[str]
    metric: ?int
    preference: ?int
    active: ?bool
    last_app_update: ?str
    next_hop_group: ?str
    next_hop_group_network_instance: ?str
    gribi_metadata: ?bytes
    resilient_hash: ?bool
    internal_tags: list[str]
    fib_programming: srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming

    mut def __init__(self, ipv4_prefix: str, id: int, route_type: str, route_owner: str, origin_network_instance: str, leakable: ?bool, target_network_instances: ?list[str]=None, metric: ?int, preference: ?int, active: ?bool, last_app_update: ?str, next_hop_group: ?str, next_hop_group_network_instance: ?str, gribi_metadata: ?bytes, resilient_hash: ?bool, internal_tags: ?list[str]=None, fib_programming: ?srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.ipv4_prefix = ipv4_prefix
        self.id = id
        self.route_type = route_type
        self.route_owner = route_owner
        self.origin_network_instance = origin_network_instance
        self.leakable = leakable
        if target_network_instances is not None:
            self.target_network_instances = target_network_instances
        else:
            self.target_network_instances = []
        self.metric = metric
        self.preference = preference
        self.active = active
        self.last_app_update = last_app_update
        self.next_hop_group = next_hop_group
        self.next_hop_group_network_instance = next_hop_group_network_instance
        self.gribi_metadata = gribi_metadata
        self.resilient_hash = resilient_hash
        if internal_tags is not None:
            self.internal_tags = internal_tags
        else:
            self.internal_tags = []
        if fib_programming is not None:
            self.fib_programming = fib_programming
        else:
            self.fib_programming = srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming()
        self_fib_programming = self.fib_programming
        if self_fib_programming is not None:
            self_fib_programming._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_prefix = self.ipv4_prefix
        _id = self.id
        _route_type = self.route_type
        _route_owner = self.route_owner
        _origin_network_instance = self.origin_network_instance
        _leakable = self.leakable
        _metric = self.metric
        _preference = self.preference
        _active = self.active
        _last_app_update = self.last_app_update
        _next_hop_group = self.next_hop_group
        _next_hop_group_network_instance = self.next_hop_group_network_instance
        _gribi_metadata = self.gribi_metadata
        _resilient_hash = self.resilient_hash
        _fib_programming = self.fib_programming
        if _ipv4_prefix is not None:
            children['ipv4-prefix'] = yang.gdata.Leaf('string', _ipv4_prefix)
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint32', _id)
        if _route_type is not None:
            children['route-type'] = yang.gdata.Leaf('identityref', _route_type)
        if _route_owner is not None:
            children['route-owner'] = yang.gdata.Leaf('string', _route_owner)
        if _origin_network_instance is not None:
            children['origin-network-instance'] = yang.gdata.Leaf('leafref', _origin_network_instance)
        if _leakable is not None:
            children['leakable'] = yang.gdata.Leaf('boolean', _leakable)
        children['target-network-instances'] = yang.gdata.LeafList(self.target_network_instances)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('uint8', _preference)
        if _active is not None:
            children['active'] = yang.gdata.Leaf('boolean', _active)
        if _last_app_update is not None:
            children['last-app-update'] = yang.gdata.Leaf('string', _last_app_update)
        if _next_hop_group is not None:
            children['next-hop-group'] = yang.gdata.Leaf('leafref', _next_hop_group)
        if _next_hop_group_network_instance is not None:
            children['next-hop-group-network-instance'] = yang.gdata.Leaf('leafref', _next_hop_group_network_instance)
        if _gribi_metadata is not None:
            children['gribi-metadata'] = yang.gdata.Leaf('binary', _gribi_metadata)
        if _resilient_hash is not None:
            children['resilient-hash'] = yang.gdata.Leaf('boolean', _resilient_hash)
        children['internal-tags'] = yang.gdata.LeafList(self.internal_tags)
        if _fib_programming is not None:
            children['fib-programming'] = _fib_programming.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ipv4_prefix), yang.gdata.yang_str(self.route_type), yang.gdata.yang_str(self.route_owner), yang.gdata.yang_str(self.id), yang.gdata.yang_str(self.origin_network_instance)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry:
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry(ipv4_prefix=n.get_str("ipv4-prefix"), id=n.get_int("id"), route_type=n.get_str("route-type"), route_owner=n.get_str("route-owner"), origin_network_instance=n.get_str("origin-network-instance"), leakable=n.get_opt_bool("leakable"), target_network_instances=n.get_opt_strs("target-network-instances"), metric=n.get_opt_int("metric"), preference=n.get_opt_int("preference"), active=n.get_opt_bool("active"), last_app_update=n.get_opt_str("last-app-update"), next_hop_group=n.get_opt_str("next-hop-group"), next_hop_group_network_instance=n.get_opt_str("next-hop-group-network-instance"), gribi_metadata=n.get_opt_bytes("gribi-metadata"), resilient_hash=n.get_opt_bool("resilient-hash"), internal_tags=n.get_opt_strs("internal-tags"), fib_programming=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming.from_gdata(n.get_opt_container("fib-programming")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry:
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry(ipv4_prefix=yang.gdata.from_xml_str(n, "ipv4-prefix"), id=yang.gdata.from_xml_int(n, "id"), route_type=yang.gdata.from_xml_str(n, "route-type"), route_owner=yang.gdata.from_xml_str(n, "route-owner"), origin_network_instance=yang.gdata.from_xml_str(n, "origin-network-instance"), leakable=yang.gdata.from_xml_opt_bool(n, "leakable"), target_network_instances=yang.gdata.from_xml_opt_strs(n, "target-network-instances"), metric=yang.gdata.from_xml_opt_int(n, "metric"), preference=yang.gdata.from_xml_opt_int(n, "preference"), active=yang.gdata.from_xml_opt_bool(n, "active"), last_app_update=yang.gdata.from_xml_opt_str(n, "last-app-update"), next_hop_group=yang.gdata.from_xml_opt_str(n, "next-hop-group"), next_hop_group_network_instance=yang.gdata.from_xml_opt_str(n, "next-hop-group-network-instance"), gribi_metadata=yang.gdata.from_xml_opt_bytes(n, "gribi-metadata"), resilient_hash=yang.gdata.from_xml_opt_bool(n, "resilient-hash"), internal_tags=yang.gdata.from_xml_opt_strs(n, "internal-tags"), fib_programming=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route__fib_programming.from_xml(yang.gdata.get_xml_opt_child(n, "fib-programming")))

class srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self._name = 'route'
        self.elements = elements

    mut def create(self, ipv4_prefix, route_type, route_owner, id, origin_network_instance):
        for e in self.elements:
            match = True
            if e.ipv4_prefix != ipv4_prefix:
                match = False
                continue
            if e.route_type != route_type:
                match = False
                continue
            if e.route_owner != route_owner:
                match = False
                continue
            if e.id != id:
                match = False
                continue
            if e.origin_network_instance != origin_network_instance:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry(ipv4_prefix, route_type, route_owner, id, origin_network_instance)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ipv4-prefix', 'route-type', 'route-owner', 'id', 'origin-network-instance'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics__active_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics__active_routes_with_ecmp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics__resilient_hash_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics__fib_failed_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics__total_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics(yang.adata.MNode):
    active_routes: ?int
    active_routes_with_ecmp: ?int
    resilient_hash_routes: ?int
    fib_failed_routes: ?int
    total_routes: int

    mut def __init__(self, active_routes: ?int, active_routes_with_ecmp: ?int, resilient_hash_routes: ?int, fib_failed_routes: ?int, total_routes: ?int=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.active_routes = active_routes
        self.active_routes_with_ecmp = active_routes_with_ecmp
        self.resilient_hash_routes = resilient_hash_routes
        self.fib_failed_routes = fib_failed_routes
        if total_routes != None:
            self.total_routes = total_routes
        else:
            self.total_routes = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _active_routes = self.active_routes
        _active_routes_with_ecmp = self.active_routes_with_ecmp
        _resilient_hash_routes = self.resilient_hash_routes
        _fib_failed_routes = self.fib_failed_routes
        _total_routes = self.total_routes
        if _active_routes is not None:
            children['active-routes'] = yang.gdata.Leaf('uint32', _active_routes)
        if _active_routes_with_ecmp is not None:
            children['active-routes-with-ecmp'] = yang.gdata.Leaf('uint32', _active_routes_with_ecmp)
        if _resilient_hash_routes is not None:
            children['resilient-hash-routes'] = yang.gdata.Leaf('uint32', _resilient_hash_routes)
        if _fib_failed_routes is not None:
            children['fib-failed-routes'] = yang.gdata.Leaf('uint32', _fib_failed_routes)
        if _total_routes is not None:
            children['total-routes'] = yang.gdata.Leaf('uint64', _total_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics(active_routes=n.get_opt_int("active-routes"), active_routes_with_ecmp=n.get_opt_int("active-routes-with-ecmp"), resilient_hash_routes=n.get_opt_int("resilient-hash-routes"), fib_failed_routes=n.get_opt_int("fib-failed-routes"), total_routes=n.get_opt_int("total-routes"))
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics(active_routes=yang.gdata.from_xml_opt_int(n, "active-routes"), active_routes_with_ecmp=yang.gdata.from_xml_opt_int(n, "active-routes-with-ecmp"), resilient_hash_routes=yang.gdata.from_xml_opt_int(n, "resilient-hash-routes"), fib_failed_routes=yang.gdata.from_xml_opt_int(n, "fib-failed-routes"), total_routes=yang.gdata.from_xml_opt_int(n, "total-routes"))
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type__ip_route_type_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type__active_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry(yang.adata.MNode):
    ip_route_type_name: str
    active_routes: ?int

    mut def __init__(self, ip_route_type_name: str, active_routes: ?int):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.ip_route_type_name = ip_route_type_name
        self.active_routes = active_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_route_type_name = self.ip_route_type_name
        _active_routes = self.active_routes
        if _ip_route_type_name is not None:
            children['ip-route-type-name'] = yang.gdata.Leaf('identityref', _ip_route_type_name)
        if _active_routes is not None:
            children['active-routes'] = yang.gdata.Leaf('uint32', _active_routes)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_route_type_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry:
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry(ip_route_type_name=n.get_str("ip-route-type-name"), active_routes=n.get_opt_int("active-routes"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry:
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry(ip_route_type_name=yang.gdata.from_xml_str(n, "ip-route-type-name"), active_routes=yang.gdata.from_xml_opt_int(n, "active-routes"))

class srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self._name = 'route-type'
        self.elements = elements

    mut def create(self, ip_route_type_name):
        for e in self.elements:
            match = True
            if e.ip_route_type_name != ip_route_type_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry(ip_route_type_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-route-type-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary(yang.adata.MNode):
    route_type: srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type

    mut def __init__(self, route_type: list[srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.route_type = srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type(elements=route_type)
        self.route_type._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_type = self.route_type
        if _route_type is not None:
            children['route-type'] = _route_type.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary(route_type=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type.from_gdata(n.get_opt_list("route-type")))
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary(route_type=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary__route_type.from_xml(yang.gdata.get_xml_children(n, "route-type")))
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary()



class srl_nokia_network_instance__network_instance__route_table__ipv4_unicast(yang.adata.MNode):
    route: srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route
    statistics: srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics
    route_summary: srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary

    mut def __init__(self, route: list[srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_entry]=[], statistics: ?srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics=None, route_summary: ?srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.route = srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route(elements=route)
        self.route._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        if route_summary is not None:
            self.route_summary = route_summary
        else:
            self.route_summary = srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary()
        self_route_summary = self.route_summary
        if self_route_summary is not None:
            self_route_summary._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route = self.route
        _statistics = self.statistics
        _route_summary = self.route_summary
        if _route is not None:
            children['route'] = _route.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _route_summary is not None:
            children['route-summary'] = _route_summary.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:fib:ip-route-tables')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast(route=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route.from_gdata(n.get_opt_list("route")), statistics=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics.from_gdata(n.get_opt_container("statistics")), route_summary=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary.from_gdata(n.get_opt_container("route-summary")))
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast(route=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route.from_xml(yang.gdata.get_xml_children(n, "route")), statistics=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), route_summary=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast__route_summary.from_xml(yang.gdata.get_xml_opt_child(n, "route-summary")))
        return srl_nokia_network_instance__network_instance__route_table__ipv4_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__ipv6_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__route_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__route_owner(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__origin_network_instance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__leakable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__target_network_instances(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__active(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__last_app_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__next_hop_group_network_instance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__gribi_metadata(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("binary", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__resilient_hash(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__internal_tags(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming__suppressed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming__last_successful_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming__last_successful_operation_timestamp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming__pending_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming__last_failed_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming__last_failed_complexes(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming(yang.adata.MNode):
    suppressed: ?bool
    last_successful_operation_type: ?str
    last_successful_operation_timestamp: ?str
    pending_operation_type: ?str
    last_failed_operation_type: ?str
    last_failed_complexes: list[str]

    mut def __init__(self, suppressed: ?bool, last_successful_operation_type: ?str, last_successful_operation_timestamp: ?str, pending_operation_type: ?str, last_failed_operation_type: ?str, last_failed_complexes: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.suppressed = suppressed
        self.last_successful_operation_type = last_successful_operation_type
        self.last_successful_operation_timestamp = last_successful_operation_timestamp
        self.pending_operation_type = pending_operation_type
        self.last_failed_operation_type = last_failed_operation_type
        if last_failed_complexes is not None:
            self.last_failed_complexes = last_failed_complexes
        else:
            self.last_failed_complexes = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _suppressed = self.suppressed
        _last_successful_operation_type = self.last_successful_operation_type
        _last_successful_operation_timestamp = self.last_successful_operation_timestamp
        _pending_operation_type = self.pending_operation_type
        _last_failed_operation_type = self.last_failed_operation_type
        if _suppressed is not None:
            children['suppressed'] = yang.gdata.Leaf('boolean', _suppressed)
        if _last_successful_operation_type is not None:
            children['last-successful-operation-type'] = yang.gdata.Leaf('enumeration', _last_successful_operation_type)
        if _last_successful_operation_timestamp is not None:
            children['last-successful-operation-timestamp'] = yang.gdata.Leaf('string', _last_successful_operation_timestamp)
        if _pending_operation_type is not None:
            children['pending-operation-type'] = yang.gdata.Leaf('enumeration', _pending_operation_type)
        if _last_failed_operation_type is not None:
            children['last-failed-operation-type'] = yang.gdata.Leaf('enumeration', _last_failed_operation_type)
        children['last-failed-complexes'] = yang.gdata.LeafList(self.last_failed_complexes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming(suppressed=n.get_opt_bool("suppressed"), last_successful_operation_type=n.get_opt_str("last-successful-operation-type"), last_successful_operation_timestamp=n.get_opt_str("last-successful-operation-timestamp"), pending_operation_type=n.get_opt_str("pending-operation-type"), last_failed_operation_type=n.get_opt_str("last-failed-operation-type"), last_failed_complexes=n.get_opt_strs("last-failed-complexes"))
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming(suppressed=yang.gdata.from_xml_opt_bool(n, "suppressed"), last_successful_operation_type=yang.gdata.from_xml_opt_str(n, "last-successful-operation-type"), last_successful_operation_timestamp=yang.gdata.from_xml_opt_str(n, "last-successful-operation-timestamp"), pending_operation_type=yang.gdata.from_xml_opt_str(n, "pending-operation-type"), last_failed_operation_type=yang.gdata.from_xml_opt_str(n, "last-failed-operation-type"), last_failed_complexes=yang.gdata.from_xml_opt_strs(n, "last-failed-complexes"))
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming()



class srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry(yang.adata.MNode):
    ipv6_prefix: str
    id: int
    route_type: str
    route_owner: str
    origin_network_instance: str
    leakable: ?bool
    target_network_instances: list[str]
    metric: ?int
    preference: ?int
    active: ?bool
    last_app_update: ?str
    next_hop_group: ?str
    next_hop_group_network_instance: ?str
    gribi_metadata: ?bytes
    resilient_hash: ?bool
    internal_tags: list[str]
    fib_programming: srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming

    mut def __init__(self, ipv6_prefix: str, id: int, route_type: str, route_owner: str, origin_network_instance: str, leakable: ?bool, target_network_instances: ?list[str]=None, metric: ?int, preference: ?int, active: ?bool, last_app_update: ?str, next_hop_group: ?str, next_hop_group_network_instance: ?str, gribi_metadata: ?bytes, resilient_hash: ?bool, internal_tags: ?list[str]=None, fib_programming: ?srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.ipv6_prefix = ipv6_prefix
        self.id = id
        self.route_type = route_type
        self.route_owner = route_owner
        self.origin_network_instance = origin_network_instance
        self.leakable = leakable
        if target_network_instances is not None:
            self.target_network_instances = target_network_instances
        else:
            self.target_network_instances = []
        self.metric = metric
        self.preference = preference
        self.active = active
        self.last_app_update = last_app_update
        self.next_hop_group = next_hop_group
        self.next_hop_group_network_instance = next_hop_group_network_instance
        self.gribi_metadata = gribi_metadata
        self.resilient_hash = resilient_hash
        if internal_tags is not None:
            self.internal_tags = internal_tags
        else:
            self.internal_tags = []
        if fib_programming is not None:
            self.fib_programming = fib_programming
        else:
            self.fib_programming = srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming()
        self_fib_programming = self.fib_programming
        if self_fib_programming is not None:
            self_fib_programming._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv6_prefix = self.ipv6_prefix
        _id = self.id
        _route_type = self.route_type
        _route_owner = self.route_owner
        _origin_network_instance = self.origin_network_instance
        _leakable = self.leakable
        _metric = self.metric
        _preference = self.preference
        _active = self.active
        _last_app_update = self.last_app_update
        _next_hop_group = self.next_hop_group
        _next_hop_group_network_instance = self.next_hop_group_network_instance
        _gribi_metadata = self.gribi_metadata
        _resilient_hash = self.resilient_hash
        _fib_programming = self.fib_programming
        if _ipv6_prefix is not None:
            children['ipv6-prefix'] = yang.gdata.Leaf('string', _ipv6_prefix)
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint32', _id)
        if _route_type is not None:
            children['route-type'] = yang.gdata.Leaf('identityref', _route_type)
        if _route_owner is not None:
            children['route-owner'] = yang.gdata.Leaf('string', _route_owner)
        if _origin_network_instance is not None:
            children['origin-network-instance'] = yang.gdata.Leaf('leafref', _origin_network_instance)
        if _leakable is not None:
            children['leakable'] = yang.gdata.Leaf('boolean', _leakable)
        children['target-network-instances'] = yang.gdata.LeafList(self.target_network_instances)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('uint8', _preference)
        if _active is not None:
            children['active'] = yang.gdata.Leaf('boolean', _active)
        if _last_app_update is not None:
            children['last-app-update'] = yang.gdata.Leaf('string', _last_app_update)
        if _next_hop_group is not None:
            children['next-hop-group'] = yang.gdata.Leaf('leafref', _next_hop_group)
        if _next_hop_group_network_instance is not None:
            children['next-hop-group-network-instance'] = yang.gdata.Leaf('leafref', _next_hop_group_network_instance)
        if _gribi_metadata is not None:
            children['gribi-metadata'] = yang.gdata.Leaf('binary', _gribi_metadata)
        if _resilient_hash is not None:
            children['resilient-hash'] = yang.gdata.Leaf('boolean', _resilient_hash)
        children['internal-tags'] = yang.gdata.LeafList(self.internal_tags)
        if _fib_programming is not None:
            children['fib-programming'] = _fib_programming.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ipv6_prefix), yang.gdata.yang_str(self.route_type), yang.gdata.yang_str(self.route_owner), yang.gdata.yang_str(self.id), yang.gdata.yang_str(self.origin_network_instance)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry:
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry(ipv6_prefix=n.get_str("ipv6-prefix"), id=n.get_int("id"), route_type=n.get_str("route-type"), route_owner=n.get_str("route-owner"), origin_network_instance=n.get_str("origin-network-instance"), leakable=n.get_opt_bool("leakable"), target_network_instances=n.get_opt_strs("target-network-instances"), metric=n.get_opt_int("metric"), preference=n.get_opt_int("preference"), active=n.get_opt_bool("active"), last_app_update=n.get_opt_str("last-app-update"), next_hop_group=n.get_opt_str("next-hop-group"), next_hop_group_network_instance=n.get_opt_str("next-hop-group-network-instance"), gribi_metadata=n.get_opt_bytes("gribi-metadata"), resilient_hash=n.get_opt_bool("resilient-hash"), internal_tags=n.get_opt_strs("internal-tags"), fib_programming=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming.from_gdata(n.get_opt_container("fib-programming")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry:
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry(ipv6_prefix=yang.gdata.from_xml_str(n, "ipv6-prefix"), id=yang.gdata.from_xml_int(n, "id"), route_type=yang.gdata.from_xml_str(n, "route-type"), route_owner=yang.gdata.from_xml_str(n, "route-owner"), origin_network_instance=yang.gdata.from_xml_str(n, "origin-network-instance"), leakable=yang.gdata.from_xml_opt_bool(n, "leakable"), target_network_instances=yang.gdata.from_xml_opt_strs(n, "target-network-instances"), metric=yang.gdata.from_xml_opt_int(n, "metric"), preference=yang.gdata.from_xml_opt_int(n, "preference"), active=yang.gdata.from_xml_opt_bool(n, "active"), last_app_update=yang.gdata.from_xml_opt_str(n, "last-app-update"), next_hop_group=yang.gdata.from_xml_opt_str(n, "next-hop-group"), next_hop_group_network_instance=yang.gdata.from_xml_opt_str(n, "next-hop-group-network-instance"), gribi_metadata=yang.gdata.from_xml_opt_bytes(n, "gribi-metadata"), resilient_hash=yang.gdata.from_xml_opt_bool(n, "resilient-hash"), internal_tags=yang.gdata.from_xml_opt_strs(n, "internal-tags"), fib_programming=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route__fib_programming.from_xml(yang.gdata.get_xml_opt_child(n, "fib-programming")))

class srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self._name = 'route'
        self.elements = elements

    mut def create(self, ipv6_prefix, route_type, route_owner, id, origin_network_instance):
        for e in self.elements:
            match = True
            if e.ipv6_prefix != ipv6_prefix:
                match = False
                continue
            if e.route_type != route_type:
                match = False
                continue
            if e.route_owner != route_owner:
                match = False
                continue
            if e.id != id:
                match = False
                continue
            if e.origin_network_instance != origin_network_instance:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry(ipv6_prefix, route_type, route_owner, id, origin_network_instance)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ipv6-prefix', 'route-type', 'route-owner', 'id', 'origin-network-instance'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics__active_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics__active_routes_with_ecmp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics__resilient_hash_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics__fib_failed_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics__total_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics(yang.adata.MNode):
    active_routes: ?int
    active_routes_with_ecmp: ?int
    resilient_hash_routes: ?int
    fib_failed_routes: ?int
    total_routes: int

    mut def __init__(self, active_routes: ?int, active_routes_with_ecmp: ?int, resilient_hash_routes: ?int, fib_failed_routes: ?int, total_routes: ?int=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.active_routes = active_routes
        self.active_routes_with_ecmp = active_routes_with_ecmp
        self.resilient_hash_routes = resilient_hash_routes
        self.fib_failed_routes = fib_failed_routes
        if total_routes != None:
            self.total_routes = total_routes
        else:
            self.total_routes = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _active_routes = self.active_routes
        _active_routes_with_ecmp = self.active_routes_with_ecmp
        _resilient_hash_routes = self.resilient_hash_routes
        _fib_failed_routes = self.fib_failed_routes
        _total_routes = self.total_routes
        if _active_routes is not None:
            children['active-routes'] = yang.gdata.Leaf('uint32', _active_routes)
        if _active_routes_with_ecmp is not None:
            children['active-routes-with-ecmp'] = yang.gdata.Leaf('uint32', _active_routes_with_ecmp)
        if _resilient_hash_routes is not None:
            children['resilient-hash-routes'] = yang.gdata.Leaf('uint32', _resilient_hash_routes)
        if _fib_failed_routes is not None:
            children['fib-failed-routes'] = yang.gdata.Leaf('uint32', _fib_failed_routes)
        if _total_routes is not None:
            children['total-routes'] = yang.gdata.Leaf('uint64', _total_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics(active_routes=n.get_opt_int("active-routes"), active_routes_with_ecmp=n.get_opt_int("active-routes-with-ecmp"), resilient_hash_routes=n.get_opt_int("resilient-hash-routes"), fib_failed_routes=n.get_opt_int("fib-failed-routes"), total_routes=n.get_opt_int("total-routes"))
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics(active_routes=yang.gdata.from_xml_opt_int(n, "active-routes"), active_routes_with_ecmp=yang.gdata.from_xml_opt_int(n, "active-routes-with-ecmp"), resilient_hash_routes=yang.gdata.from_xml_opt_int(n, "resilient-hash-routes"), fib_failed_routes=yang.gdata.from_xml_opt_int(n, "fib-failed-routes"), total_routes=yang.gdata.from_xml_opt_int(n, "total-routes"))
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type__ip_route_type_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type__active_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry(yang.adata.MNode):
    ip_route_type_name: str
    active_routes: ?int

    mut def __init__(self, ip_route_type_name: str, active_routes: ?int):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.ip_route_type_name = ip_route_type_name
        self.active_routes = active_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_route_type_name = self.ip_route_type_name
        _active_routes = self.active_routes
        if _ip_route_type_name is not None:
            children['ip-route-type-name'] = yang.gdata.Leaf('identityref', _ip_route_type_name)
        if _active_routes is not None:
            children['active-routes'] = yang.gdata.Leaf('uint32', _active_routes)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ip_route_type_name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry:
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry(ip_route_type_name=n.get_str("ip-route-type-name"), active_routes=n.get_opt_int("active-routes"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry:
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry(ip_route_type_name=yang.gdata.from_xml_str(n, "ip-route-type-name"), active_routes=yang.gdata.from_xml_opt_int(n, "active-routes"))

class srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self._name = 'route-type'
        self.elements = elements

    mut def create(self, ip_route_type_name):
        for e in self.elements:
            match = True
            if e.ip_route_type_name != ip_route_type_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry(ip_route_type_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-route-type-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary(yang.adata.MNode):
    route_type: srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type

    mut def __init__(self, route_type: list[srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.route_type = srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type(elements=route_type)
        self.route_type._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_type = self.route_type
        if _route_type is not None:
            children['route-type'] = _route_type.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary(route_type=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type.from_gdata(n.get_opt_list("route-type")))
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary(route_type=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary__route_type.from_xml(yang.gdata.get_xml_children(n, "route-type")))
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary()



class srl_nokia_network_instance__network_instance__route_table__ipv6_unicast(yang.adata.MNode):
    route: srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route
    statistics: srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics
    route_summary: srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary

    mut def __init__(self, route: list[srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_entry]=[], statistics: ?srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics=None, route_summary: ?srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.route = srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route(elements=route)
        self.route._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        if route_summary is not None:
            self.route_summary = route_summary
        else:
            self.route_summary = srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary()
        self_route_summary = self.route_summary
        if self_route_summary is not None:
            self_route_summary._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route = self.route
        _statistics = self.statistics
        _route_summary = self.route_summary
        if _route is not None:
            children['route'] = _route.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _route_summary is not None:
            children['route-summary'] = _route_summary.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:fib:ip-route-tables')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast(route=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route.from_gdata(n.get_opt_list("route")), statistics=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics.from_gdata(n.get_opt_container("statistics")), route_summary=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary.from_gdata(n.get_opt_container("route-summary")))
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast(route=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route.from_xml(yang.gdata.get_xml_children(n, "route")), statistics=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), route_summary=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast__route_summary.from_xml(yang.gdata.get_xml_opt_child(n, "route-summary")))
        return srl_nokia_network_instance__network_instance__route_table__ipv6_unicast()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__group_name_alias(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__programmed_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming__suppressed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming__last_successful_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming__last_successful_operation_timestamp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming__pending_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming__last_failed_operation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming__last_failed_complexes(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming(yang.adata.MNode):
    suppressed: ?bool
    last_successful_operation_type: ?str
    last_successful_operation_timestamp: ?str
    pending_operation_type: ?str
    last_failed_operation_type: ?str
    last_failed_complexes: list[str]

    mut def __init__(self, suppressed: ?bool, last_successful_operation_type: ?str, last_successful_operation_timestamp: ?str, pending_operation_type: ?str, last_failed_operation_type: ?str, last_failed_complexes: ?list[str]=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.suppressed = suppressed
        self.last_successful_operation_type = last_successful_operation_type
        self.last_successful_operation_timestamp = last_successful_operation_timestamp
        self.pending_operation_type = pending_operation_type
        self.last_failed_operation_type = last_failed_operation_type
        if last_failed_complexes is not None:
            self.last_failed_complexes = last_failed_complexes
        else:
            self.last_failed_complexes = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _suppressed = self.suppressed
        _last_successful_operation_type = self.last_successful_operation_type
        _last_successful_operation_timestamp = self.last_successful_operation_timestamp
        _pending_operation_type = self.pending_operation_type
        _last_failed_operation_type = self.last_failed_operation_type
        if _suppressed is not None:
            children['suppressed'] = yang.gdata.Leaf('boolean', _suppressed)
        if _last_successful_operation_type is not None:
            children['last-successful-operation-type'] = yang.gdata.Leaf('enumeration', _last_successful_operation_type)
        if _last_successful_operation_timestamp is not None:
            children['last-successful-operation-timestamp'] = yang.gdata.Leaf('string', _last_successful_operation_timestamp)
        if _pending_operation_type is not None:
            children['pending-operation-type'] = yang.gdata.Leaf('enumeration', _pending_operation_type)
        if _last_failed_operation_type is not None:
            children['last-failed-operation-type'] = yang.gdata.Leaf('enumeration', _last_failed_operation_type)
        children['last-failed-complexes'] = yang.gdata.LeafList(self.last_failed_complexes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming(suppressed=n.get_opt_bool("suppressed"), last_successful_operation_type=n.get_opt_str("last-successful-operation-type"), last_successful_operation_timestamp=n.get_opt_str("last-successful-operation-timestamp"), pending_operation_type=n.get_opt_str("pending-operation-type"), last_failed_operation_type=n.get_opt_str("last-failed-operation-type"), last_failed_complexes=n.get_opt_strs("last-failed-complexes"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming(suppressed=yang.gdata.from_xml_opt_bool(n, "suppressed"), last_successful_operation_type=yang.gdata.from_xml_opt_str(n, "last-successful-operation-type"), last_successful_operation_timestamp=yang.gdata.from_xml_opt_str(n, "last-successful-operation-timestamp"), pending_operation_type=yang.gdata.from_xml_opt_str(n, "pending-operation-type"), last_failed_operation_type=yang.gdata.from_xml_opt_str(n, "last-failed-operation-type"), last_failed_complexes=yang.gdata.from_xml_opt_strs(n, "last-failed-complexes"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop__next_hop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop__weight(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop__resolved(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry(yang.adata.MNode):
    id: int
    next_hop: ?str
    weight: ?int
    resolved: ?str

    mut def __init__(self, id: int, next_hop: ?str, weight: ?int, resolved: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.id = id
        self.next_hop = next_hop
        self.weight = weight
        self.resolved = resolved

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        _next_hop = self.next_hop
        _weight = self.weight
        _resolved = self.resolved
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint16', _id)
        if _next_hop is not None:
            children['next-hop'] = yang.gdata.Leaf('leafref', _next_hop)
        if _weight is not None:
            children['weight'] = yang.gdata.Leaf('uint64', _weight)
        if _resolved is not None:
            children['resolved'] = yang.gdata.Leaf('enumeration', _resolved)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry:
        return srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry(id=n.get_int("id"), next_hop=n.get_opt_str("next-hop"), weight=n.get_opt_int("weight"), resolved=n.get_opt_str("resolved"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry:
        return srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry(id=yang.gdata.from_xml_int(n, "id"), next_hop=yang.gdata.from_xml_opt_str(n, "next-hop"), weight=yang.gdata.from_xml_opt_int(n, "weight"), resolved=yang.gdata.from_xml_opt_str(n, "resolved"))

class srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self._name = 'next-hop'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop__next_hop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop__resolved(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry(yang.adata.MNode):
    id: int
    next_hop: ?str
    resolved: ?str

    mut def __init__(self, id: int, next_hop: ?str, resolved: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.id = id
        self.next_hop = next_hop
        self.resolved = resolved

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        _next_hop = self.next_hop
        _resolved = self.resolved
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint16', _id)
        if _next_hop is not None:
            children['next-hop'] = yang.gdata.Leaf('leafref', _next_hop)
        if _resolved is not None:
            children['resolved'] = yang.gdata.Leaf('enumeration', _resolved)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry:
        return srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry(id=n.get_int("id"), next_hop=n.get_opt_str("next-hop"), resolved=n.get_opt_str("resolved"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry:
        return srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry(id=yang.gdata.from_xml_int(n, "id"), next_hop=yang.gdata.from_xml_opt_str(n, "next-hop"), resolved=yang.gdata.from_xml_opt_str(n, "resolved"))

class srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self._name = 'backup-next-hop'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry(yang.adata.MNode):
    index: int
    group_name_alias: ?str
    programmed_index: ?int
    backup_next_hop_group: ?str
    fib_programming: srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming
    next_hop: srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop
    backup_next_hop: srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop

    mut def __init__(self, index: int, group_name_alias: ?str, programmed_index: ?int, backup_next_hop_group: ?str, fib_programming: ?srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming=None, next_hop: list[srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop_entry]=[], backup_next_hop: list[srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.index = index
        self.group_name_alias = group_name_alias
        self.programmed_index = programmed_index
        self.backup_next_hop_group = backup_next_hop_group
        if fib_programming is not None:
            self.fib_programming = fib_programming
        else:
            self.fib_programming = srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming()
        self_fib_programming = self.fib_programming
        if self_fib_programming is not None:
            self_fib_programming._parent = self
        self.next_hop = srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop(elements=next_hop)
        self.next_hop._parent = self
        self.backup_next_hop = srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop(elements=backup_next_hop)
        self.backup_next_hop._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _group_name_alias = self.group_name_alias
        _programmed_index = self.programmed_index
        _backup_next_hop_group = self.backup_next_hop_group
        _fib_programming = self.fib_programming
        _next_hop = self.next_hop
        _backup_next_hop = self.backup_next_hop
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint64', _index)
        if _group_name_alias is not None:
            children['group-name-alias'] = yang.gdata.Leaf('string', _group_name_alias)
        if _programmed_index is not None:
            children['programmed-index'] = yang.gdata.Leaf('uint64', _programmed_index)
        if _backup_next_hop_group is not None:
            children['backup-next-hop-group'] = yang.gdata.Leaf('leafref', _backup_next_hop_group)
        if _fib_programming is not None:
            children['fib-programming'] = _fib_programming.to_gdata()
        if _next_hop is not None:
            children['next-hop'] = _next_hop.to_gdata()
        if _backup_next_hop is not None:
            children['backup-next-hop'] = _backup_next_hop.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry:
        return srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry(index=n.get_int("index"), group_name_alias=n.get_opt_str("group-name-alias"), programmed_index=n.get_opt_int("programmed-index"), backup_next_hop_group=n.get_opt_str("backup-next-hop-group"), fib_programming=srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming.from_gdata(n.get_opt_container("fib-programming")), next_hop=srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop.from_gdata(n.get_opt_list("next-hop")), backup_next_hop=srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop.from_gdata(n.get_opt_list("backup-next-hop")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry:
        return srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry(index=yang.gdata.from_xml_int(n, "index"), group_name_alias=yang.gdata.from_xml_opt_str(n, "group-name-alias"), programmed_index=yang.gdata.from_xml_opt_int(n, "programmed-index"), backup_next_hop_group=yang.gdata.from_xml_opt_str(n, "backup-next-hop-group"), fib_programming=srl_nokia_network_instance__network_instance__route_table__next_hop_group__fib_programming.from_xml(yang.gdata.get_xml_opt_child(n, "fib-programming")), next_hop=srl_nokia_network_instance__network_instance__route_table__next_hop_group__next_hop.from_xml(yang.gdata.get_xml_children(n, "next-hop")), backup_next_hop=srl_nokia_network_instance__network_instance__route_table__next_hop_group__backup_next_hop.from_xml(yang.gdata.get_xml_children(n, "backup-next-hop")))

class srl_nokia_network_instance__network_instance__route_table__next_hop_group(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self._name = 'next-hop-group'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements, ns='urn:nokia.com:srlinux:fib:ip-route-tables')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__programmed_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__network_instance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__ip_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__mac_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__subinterface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route__route_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route__route_owner(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route__next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route(yang.adata.MNode):
    ip_prefix: ?str
    route_type: ?str
    route_owner: ?str
    next_hop_group: ?str

    mut def __init__(self, ip_prefix: ?str, route_type: ?str, route_owner: ?str, next_hop_group: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.ip_prefix = ip_prefix
        self.route_type = route_type
        self.route_owner = route_owner
        self.next_hop_group = next_hop_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        _route_type = self.route_type
        _route_owner = self.route_owner
        _next_hop_group = self.next_hop_group
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('union', _ip_prefix)
        if _route_type is not None:
            children['route-type'] = yang.gdata.Leaf('identityref', _route_type)
        if _route_owner is not None:
            children['route-owner'] = yang.gdata.Leaf('string', _route_owner)
        if _next_hop_group is not None:
            children['next-hop-group'] = yang.gdata.Leaf('leafref', _next_hop_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route(ip_prefix=n.get_opt_str("ip-prefix"), route_type=n.get_opt_str("route-type"), route_owner=n.get_opt_str("route-owner"), next_hop_group=n.get_opt_str("next-hop-group"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route(ip_prefix=yang.gdata.from_xml_opt_str(n, "ip-prefix"), route_type=yang.gdata.from_xml_opt_str(n, "route-type"), route_owner=yang.gdata.from_xml_opt_str(n, "route-owner"), next_hop_group=yang.gdata.from_xml_opt_str(n, "next-hop-group"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel__tunnel_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel__tunnel_owner(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel__tunnel_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel__next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

class srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel(yang.adata.MNode):
    ip_prefix: ?str
    tunnel_type: ?str
    tunnel_owner: ?str
    tunnel_id: ?int
    next_hop_group: ?str

    mut def __init__(self, ip_prefix: ?str, tunnel_type: ?str, tunnel_owner: ?str, tunnel_id: ?int, next_hop_group: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.ip_prefix = ip_prefix
        self.tunnel_type = tunnel_type
        self.tunnel_owner = tunnel_owner
        self.tunnel_id = tunnel_id
        self.next_hop_group = next_hop_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        _tunnel_type = self.tunnel_type
        _tunnel_owner = self.tunnel_owner
        _tunnel_id = self.tunnel_id
        _next_hop_group = self.next_hop_group
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('union', _ip_prefix)
        if _tunnel_type is not None:
            children['tunnel-type'] = yang.gdata.Leaf('identityref', _tunnel_type)
        if _tunnel_owner is not None:
            children['tunnel-owner'] = yang.gdata.Leaf('string', _tunnel_owner)
        if _tunnel_id is not None:
            children['tunnel-id'] = yang.gdata.Leaf('uint32', _tunnel_id)
        if _next_hop_group is not None:
            children['next-hop-group'] = yang.gdata.Leaf('leafref', _next_hop_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel(ip_prefix=n.get_opt_str("ip-prefix"), tunnel_type=n.get_opt_str("tunnel-type"), tunnel_owner=n.get_opt_str("tunnel-owner"), tunnel_id=n.get_opt_int("tunnel-id"), next_hop_group=n.get_opt_str("next-hop-group"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel(ip_prefix=yang.gdata.from_xml_opt_str(n, "ip-prefix"), tunnel_type=yang.gdata.from_xml_opt_str(n, "tunnel-type"), tunnel_owner=yang.gdata.from_xml_opt_str(n, "tunnel-owner"), tunnel_id=yang.gdata.from_xml_opt_int(n, "tunnel-id"), next_hop_group=yang.gdata.from_xml_opt_str(n, "next-hop-group"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__mpls__pushed_mpls_label_stack(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__mpls__entropy_label_transmit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__route_table__next_hop__mpls(yang.adata.MNode):
    pushed_mpls_label_stack: list[value]
    entropy_label_transmit: ?bool

    mut def __init__(self, pushed_mpls_label_stack: ?list[value]=None, entropy_label_transmit: ?bool):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        if pushed_mpls_label_stack is not None:
            self.pushed_mpls_label_stack = pushed_mpls_label_stack
        else:
            self.pushed_mpls_label_stack = []
        self.entropy_label_transmit = entropy_label_transmit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _entropy_label_transmit = self.entropy_label_transmit
        children['pushed-mpls-label-stack'] = yang.gdata.LeafList(self.pushed_mpls_label_stack)
        if _entropy_label_transmit is not None:
            children['entropy-label-transmit'] = yang.gdata.Leaf('boolean', _entropy_label_transmit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__mpls(pushed_mpls_label_stack=n.get_opt_values("pushed-mpls-label-stack"), entropy_label_transmit=n.get_opt_bool("entropy-label-transmit"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__mpls(pushed_mpls_label_stack=yang.gdata.from_xml_opt_values(n, "pushed-mpls-label-stack"), entropy_label_transmit=yang.gdata.from_xml_opt_bool(n, "entropy-label-transmit"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__mpls()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan__vni(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan__destination_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan(yang.adata.MNode):
    vni: ?int
    source_mac: ?str
    destination_mac: ?str

    mut def __init__(self, vni: ?int, source_mac: ?str, destination_mac: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.vni = vni
        self.source_mac = source_mac
        self.destination_mac = destination_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vni = self.vni
        _source_mac = self.source_mac
        _destination_mac = self.destination_mac
        if _vni is not None:
            children['vni'] = yang.gdata.Leaf('uint32', _vni)
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('string', _source_mac)
        if _destination_mac is not None:
            children['destination-mac'] = yang.gdata.Leaf('string', _destination_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan(vni=n.get_opt_int("vni"), source_mac=n.get_opt_str("source-mac"), destination_mac=n.get_opt_str("destination-mac"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan(vni=yang.gdata.from_xml_opt_int(n, "vni"), source_mac=yang.gdata.from_xml_opt_str(n, "source-mac"), destination_mac=yang.gdata.from_xml_opt_str(n, "destination-mac"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__decapsulate_header(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__encapsulate_header(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip__src_ip(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip__dst_ip(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip(yang.adata.MNode):
    src_ip: ?str
    dst_ip: ?str

    mut def __init__(self, src_ip: ?str, dst_ip: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.src_ip = src_ip
        self.dst_ip = dst_ip

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _src_ip = self.src_ip
        _dst_ip = self.dst_ip
        if _src_ip is not None:
            children['src-ip'] = yang.gdata.Leaf('union', _src_ip)
        if _dst_ip is not None:
            children['dst-ip'] = yang.gdata.Leaf('union', _dst_ip)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip(src_ip=n.get_opt_str("src-ip"), dst_ip=n.get_opt_str("dst-ip"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip(src_ip=yang.gdata.from_xml_opt_str(n, "src-ip"), dst_ip=yang.gdata.from_xml_opt_str(n, "dst-ip"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip()



mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__counters__resource_allocation_failed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__counters__packets_forwarded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__route_table__next_hop__counters__octets_forwarded(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__route_table__next_hop__counters(yang.adata.MNode):
    resource_allocation_failed: ?bool
    packets_forwarded: int
    octets_forwarded: int

    mut def __init__(self, resource_allocation_failed: ?bool, packets_forwarded: ?int=None, octets_forwarded: ?int=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.resource_allocation_failed = resource_allocation_failed
        if packets_forwarded != None:
            self.packets_forwarded = packets_forwarded
        else:
            self.packets_forwarded = 0
        if octets_forwarded != None:
            self.octets_forwarded = octets_forwarded
        else:
            self.octets_forwarded = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _resource_allocation_failed = self.resource_allocation_failed
        _packets_forwarded = self.packets_forwarded
        _octets_forwarded = self.octets_forwarded
        if _resource_allocation_failed is not None:
            children['resource-allocation-failed'] = yang.gdata.Leaf('boolean', _resource_allocation_failed)
        if _packets_forwarded is not None:
            children['packets-forwarded'] = yang.gdata.Leaf('uint64', _packets_forwarded)
        if _octets_forwarded is not None:
            children['octets-forwarded'] = yang.gdata.Leaf('uint64', _octets_forwarded)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__counters:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__counters(resource_allocation_failed=n.get_opt_bool("resource-allocation-failed"), packets_forwarded=n.get_opt_int("packets-forwarded"), octets_forwarded=n.get_opt_int("octets-forwarded"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__counters()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop__counters:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table__next_hop__counters(resource_allocation_failed=yang.gdata.from_xml_opt_bool(n, "resource-allocation-failed"), packets_forwarded=yang.gdata.from_xml_opt_int(n, "packets-forwarded"), octets_forwarded=yang.gdata.from_xml_opt_int(n, "octets-forwarded"))
        return srl_nokia_network_instance__network_instance__route_table__next_hop__counters()



class srl_nokia_network_instance__network_instance__route_table__next_hop_entry(yang.adata.MNode):
    index: int
    programmed_index: ?int
    type: ?str
    network_instance: ?str
    ip_address: ?str
    mac_address: ?str
    subinterface: ?str
    resolving_route: srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route
    resolving_tunnel: srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel
    mpls: srl_nokia_network_instance__network_instance__route_table__next_hop__mpls
    vxlan: srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan
    decapsulate_header: ?str
    encapsulate_header: ?str
    ip_in_ip: srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip
    counters: srl_nokia_network_instance__network_instance__route_table__next_hop__counters

    mut def __init__(self, index: int, programmed_index: ?int, type: ?str, network_instance: ?str, ip_address: ?str, mac_address: ?str, subinterface: ?str, resolving_route: ?srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route=None, resolving_tunnel: ?srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel=None, mpls: ?srl_nokia_network_instance__network_instance__route_table__next_hop__mpls=None, vxlan: ?srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan=None, decapsulate_header: ?str, encapsulate_header: ?str, ip_in_ip: ?srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip=None, counters: ?srl_nokia_network_instance__network_instance__route_table__next_hop__counters=None):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self.index = index
        self.programmed_index = programmed_index
        self.type = type
        self.network_instance = network_instance
        self.ip_address = ip_address
        self.mac_address = mac_address
        self.subinterface = subinterface
        if resolving_route is not None:
            self.resolving_route = resolving_route
        else:
            self.resolving_route = srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route()
        self_resolving_route = self.resolving_route
        if self_resolving_route is not None:
            self_resolving_route._parent = self
        if resolving_tunnel is not None:
            self.resolving_tunnel = resolving_tunnel
        else:
            self.resolving_tunnel = srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel()
        self_resolving_tunnel = self.resolving_tunnel
        if self_resolving_tunnel is not None:
            self_resolving_tunnel._parent = self
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = srl_nokia_network_instance__network_instance__route_table__next_hop__mpls()
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self
        if vxlan is not None:
            self.vxlan = vxlan
        else:
            self.vxlan = srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan()
        self_vxlan = self.vxlan
        if self_vxlan is not None:
            self_vxlan._parent = self
        self.decapsulate_header = decapsulate_header
        self.encapsulate_header = encapsulate_header
        if ip_in_ip is not None:
            self.ip_in_ip = ip_in_ip
        else:
            self.ip_in_ip = srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip()
        self_ip_in_ip = self.ip_in_ip
        if self_ip_in_ip is not None:
            self_ip_in_ip._parent = self
        if counters is not None:
            self.counters = counters
        else:
            self.counters = srl_nokia_network_instance__network_instance__route_table__next_hop__counters()
        self_counters = self.counters
        if self_counters is not None:
            self_counters._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _programmed_index = self.programmed_index
        _type = self.type
        _network_instance = self.network_instance
        _ip_address = self.ip_address
        _mac_address = self.mac_address
        _subinterface = self.subinterface
        _resolving_route = self.resolving_route
        _resolving_tunnel = self.resolving_tunnel
        _mpls = self.mpls
        _vxlan = self.vxlan
        _decapsulate_header = self.decapsulate_header
        _encapsulate_header = self.encapsulate_header
        _ip_in_ip = self.ip_in_ip
        _counters = self.counters
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint64', _index)
        if _programmed_index is not None:
            children['programmed-index'] = yang.gdata.Leaf('uint64', _programmed_index)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _network_instance is not None:
            children['network-instance'] = yang.gdata.Leaf('leafref', _network_instance)
        if _ip_address is not None:
            children['ip-address'] = yang.gdata.Leaf('union', _ip_address)
        if _mac_address is not None:
            children['mac-address'] = yang.gdata.Leaf('string', _mac_address)
        if _subinterface is not None:
            children['subinterface'] = yang.gdata.Leaf('leafref', _subinterface)
        if _resolving_route is not None:
            children['resolving-route'] = _resolving_route.to_gdata()
        if _resolving_tunnel is not None:
            children['resolving-tunnel'] = _resolving_tunnel.to_gdata()
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        if _vxlan is not None:
            children['vxlan'] = _vxlan.to_gdata()
        if _decapsulate_header is not None:
            children['decapsulate-header'] = yang.gdata.Leaf('enumeration', _decapsulate_header)
        if _encapsulate_header is not None:
            children['encapsulate-header'] = yang.gdata.Leaf('enumeration', _encapsulate_header)
        if _ip_in_ip is not None:
            children['ip-in-ip'] = _ip_in_ip.to_gdata()
        if _counters is not None:
            children['counters'] = _counters.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_entry:
        return srl_nokia_network_instance__network_instance__route_table__next_hop_entry(index=n.get_int("index"), programmed_index=n.get_opt_int("programmed-index"), type=n.get_opt_str("type"), network_instance=n.get_opt_str("network-instance"), ip_address=n.get_opt_str("ip-address"), mac_address=n.get_opt_str("mac-address"), subinterface=n.get_opt_str("subinterface"), resolving_route=srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route.from_gdata(n.get_opt_container("resolving-route")), resolving_tunnel=srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel.from_gdata(n.get_opt_container("resolving-tunnel")), mpls=srl_nokia_network_instance__network_instance__route_table__next_hop__mpls.from_gdata(n.get_opt_container("mpls")), vxlan=srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan.from_gdata(n.get_opt_container("vxlan")), decapsulate_header=n.get_opt_str("decapsulate-header"), encapsulate_header=n.get_opt_str("encapsulate-header"), ip_in_ip=srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip.from_gdata(n.get_opt_container("ip-in-ip")), counters=srl_nokia_network_instance__network_instance__route_table__next_hop__counters.from_gdata(n.get_opt_container("counters")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__route_table__next_hop_entry:
        return srl_nokia_network_instance__network_instance__route_table__next_hop_entry(index=yang.gdata.from_xml_int(n, "index"), programmed_index=yang.gdata.from_xml_opt_int(n, "programmed-index"), type=yang.gdata.from_xml_opt_str(n, "type"), network_instance=yang.gdata.from_xml_opt_str(n, "network-instance"), ip_address=yang.gdata.from_xml_opt_str(n, "ip-address"), mac_address=yang.gdata.from_xml_opt_str(n, "mac-address"), subinterface=yang.gdata.from_xml_opt_str(n, "subinterface"), resolving_route=srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_route.from_xml(yang.gdata.get_xml_opt_child(n, "resolving-route")), resolving_tunnel=srl_nokia_network_instance__network_instance__route_table__next_hop__resolving_tunnel.from_xml(yang.gdata.get_xml_opt_child(n, "resolving-tunnel")), mpls=srl_nokia_network_instance__network_instance__route_table__next_hop__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")), vxlan=srl_nokia_network_instance__network_instance__route_table__next_hop__vxlan.from_xml(yang.gdata.get_xml_opt_child(n, "vxlan")), decapsulate_header=yang.gdata.from_xml_opt_str(n, "decapsulate-header"), encapsulate_header=yang.gdata.from_xml_opt_str(n, "encapsulate-header"), ip_in_ip=srl_nokia_network_instance__network_instance__route_table__next_hop__ip_in_ip.from_xml(yang.gdata.get_xml_opt_child(n, "ip-in-ip")), counters=srl_nokia_network_instance__network_instance__route_table__next_hop__counters.from_xml(yang.gdata.get_xml_opt_child(n, "counters")))

class srl_nokia_network_instance__network_instance__route_table__next_hop(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__route_table__next_hop_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:ip-route-tables"
        self._name = 'next-hop'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__route_table__next_hop_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements, ns='urn:nokia.com:srlinux:fib:ip-route-tables')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__route_table__next_hop_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__route_table__next_hop_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__route_table__next_hop_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__route_table__next_hop_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__route_table(yang.adata.MNode):
    ipv4_unicast: srl_nokia_network_instance__network_instance__route_table__ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__route_table__ipv6_unicast
    next_hop_group: srl_nokia_network_instance__network_instance__route_table__next_hop_group
    next_hop: srl_nokia_network_instance__network_instance__route_table__next_hop

    mut def __init__(self, ipv4_unicast: ?srl_nokia_network_instance__network_instance__route_table__ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__route_table__ipv6_unicast=None, next_hop_group: list[srl_nokia_network_instance__network_instance__route_table__next_hop_group_entry]=[], next_hop: list[srl_nokia_network_instance__network_instance__route_table__next_hop_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if ipv4_unicast is not None:
            self.ipv4_unicast = ipv4_unicast
        else:
            self.ipv4_unicast = srl_nokia_network_instance__network_instance__route_table__ipv4_unicast()
        self_ipv4_unicast = self.ipv4_unicast
        if self_ipv4_unicast is not None:
            self_ipv4_unicast._parent = self
        if ipv6_unicast is not None:
            self.ipv6_unicast = ipv6_unicast
        else:
            self.ipv6_unicast = srl_nokia_network_instance__network_instance__route_table__ipv6_unicast()
        self_ipv6_unicast = self.ipv6_unicast
        if self_ipv6_unicast is not None:
            self_ipv6_unicast._parent = self
        self.next_hop_group = srl_nokia_network_instance__network_instance__route_table__next_hop_group(elements=next_hop_group)
        self.next_hop_group._parent = self
        self.next_hop = srl_nokia_network_instance__network_instance__route_table__next_hop(elements=next_hop)
        self.next_hop._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_unicast = self.ipv4_unicast
        _ipv6_unicast = self.ipv6_unicast
        _next_hop_group = self.next_hop_group
        _next_hop = self.next_hop
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        if _next_hop_group is not None:
            children['next-hop-group'] = _next_hop_group.to_gdata()
        if _next_hop is not None:
            children['next-hop'] = _next_hop.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__route_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table(ipv4_unicast=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast.from_gdata(n.get_opt_container("ipv4-unicast")), ipv6_unicast=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast.from_gdata(n.get_opt_container("ipv6-unicast")), next_hop_group=srl_nokia_network_instance__network_instance__route_table__next_hop_group.from_gdata(n.get_opt_list("next-hop-group")), next_hop=srl_nokia_network_instance__network_instance__route_table__next_hop.from_gdata(n.get_opt_list("next-hop")))
        return srl_nokia_network_instance__network_instance__route_table()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__route_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__route_table(ipv4_unicast=srl_nokia_network_instance__network_instance__route_table__ipv4_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4-unicast", "urn:nokia.com:srlinux:fib:ip-route-tables")), ipv6_unicast=srl_nokia_network_instance__network_instance__route_table__ipv6_unicast.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6-unicast", "urn:nokia.com:srlinux:fib:ip-route-tables")), next_hop_group=srl_nokia_network_instance__network_instance__route_table__next_hop_group.from_xml(yang.gdata.get_xml_children(n, "next-hop-group", "urn:nokia.com:srlinux:fib:ip-route-tables")), next_hop=srl_nokia_network_instance__network_instance__route_table__next_hop.from_xml(yang.gdata.get_xml_children(n, "next-hop", "urn:nokia.com:srlinux:fib:ip-route-tables")))
        return srl_nokia_network_instance__network_instance__route_table()



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ipv4_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__owner(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__encapsulation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__internal_tags(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__last_app_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming__status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming__not_programmed_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming(yang.adata.MNode):
    status: ?str
    not_programmed_reason: ?str

    mut def __init__(self, status: ?str, not_programmed_reason: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.status = status
        self.not_programmed_reason = not_programmed_reason

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _status = self.status
        _not_programmed_reason = self.not_programmed_reason
        if _status is not None:
            children['status'] = yang.gdata.Leaf('enumeration', _status)
        if _not_programmed_reason is not None:
            children['not-programmed-reason'] = yang.gdata.Leaf('enumeration', _not_programmed_reason)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming(status=n.get_opt_str("status"), not_programmed_reason=n.get_opt_str("not-programmed-reason"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming(status=yang.gdata.from_xml_opt_str(n, "status"), not_programmed_reason=yang.gdata.from_xml_opt_str(n, "not-programmed-reason"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming()



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan__destination_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan__source_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan__time_to_live(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan__destination_udp_port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan(yang.adata.MNode):
    destination_address: ?str
    source_address: ?str
    time_to_live: ?int
    destination_udp_port: ?int

    mut def __init__(self, destination_address: ?str, source_address: ?str, time_to_live: ?int, destination_udp_port: ?int):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.destination_address = destination_address
        self.source_address = source_address
        self.time_to_live = time_to_live
        self.destination_udp_port = destination_udp_port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _destination_address = self.destination_address
        _source_address = self.source_address
        _time_to_live = self.time_to_live
        _destination_udp_port = self.destination_udp_port
        if _destination_address is not None:
            children['destination-address'] = yang.gdata.Leaf('union', _destination_address)
        if _source_address is not None:
            children['source-address'] = yang.gdata.Leaf('union', _source_address)
        if _time_to_live is not None:
            children['time-to-live'] = yang.gdata.Leaf('uint8', _time_to_live)
        if _destination_udp_port is not None:
            children['destination-udp-port'] = yang.gdata.Leaf('uint16', _destination_udp_port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan(destination_address=n.get_opt_str("destination-address"), source_address=n.get_opt_str("source-address"), time_to_live=n.get_opt_int("time-to-live"), destination_udp_port=n.get_opt_int("destination-udp-port"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan(destination_address=yang.gdata.from_xml_opt_str(n, "destination-address"), source_address=yang.gdata.from_xml_opt_str(n, "source-address"), time_to_live=yang.gdata.from_xml_opt_int(n, "time-to-live"), destination_udp_port=yang.gdata.from_xml_opt_int(n, "destination-udp-port"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan()



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip__destination_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip__source_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip(yang.adata.MNode):
    destination_address: ?str
    source_address: ?str

    mut def __init__(self, destination_address: ?str, source_address: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.destination_address = destination_address
        self.source_address = source_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _destination_address = self.destination_address
        _source_address = self.source_address
        if _destination_address is not None:
            children['destination-address'] = yang.gdata.Leaf('union', _destination_address)
        if _source_address is not None:
            children['source-address'] = yang.gdata.Leaf('union', _source_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip(destination_address=n.get_opt_str("destination-address"), source_address=n.get_opt_str("source-address"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip(destination_address=yang.gdata.from_xml_opt_str(n, "destination-address"), source_address=yang.gdata.from_xml_opt_str(n, "source-address"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip()



class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry(yang.adata.MNode):
    ipv4_prefix: str
    type: str
    owner: str
    id: int
    encapsulation_type: ?str
    next_hop_group: ?str
    metric: ?int
    preference: ?int
    internal_tags: list[str]
    last_app_update: ?str
    fib_programming: srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming
    vxlan: srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan
    ip_in_ip: srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip

    mut def __init__(self, ipv4_prefix: str, type: str, owner: str, id: int, encapsulation_type: ?str, next_hop_group: ?str, metric: ?int, preference: ?int, internal_tags: ?list[str]=None, last_app_update: ?str, fib_programming: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming=None, vxlan: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan=None, ip_in_ip: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip=None):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.ipv4_prefix = ipv4_prefix
        self.type = type
        self.owner = owner
        self.id = id
        self.encapsulation_type = encapsulation_type
        self.next_hop_group = next_hop_group
        self.metric = metric
        self.preference = preference
        if internal_tags is not None:
            self.internal_tags = internal_tags
        else:
            self.internal_tags = []
        self.last_app_update = last_app_update
        if fib_programming is not None:
            self.fib_programming = fib_programming
        else:
            self.fib_programming = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming()
        self_fib_programming = self.fib_programming
        if self_fib_programming is not None:
            self_fib_programming._parent = self
        if vxlan is not None:
            self.vxlan = vxlan
        else:
            self.vxlan = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan()
        self_vxlan = self.vxlan
        if self_vxlan is not None:
            self_vxlan._parent = self
        if ip_in_ip is not None:
            self.ip_in_ip = ip_in_ip
        else:
            self.ip_in_ip = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip()
        self_ip_in_ip = self.ip_in_ip
        if self_ip_in_ip is not None:
            self_ip_in_ip._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_prefix = self.ipv4_prefix
        _type = self.type
        _owner = self.owner
        _id = self.id
        _encapsulation_type = self.encapsulation_type
        _next_hop_group = self.next_hop_group
        _metric = self.metric
        _preference = self.preference
        _last_app_update = self.last_app_update
        _fib_programming = self.fib_programming
        _vxlan = self.vxlan
        _ip_in_ip = self.ip_in_ip
        if _ipv4_prefix is not None:
            children['ipv4-prefix'] = yang.gdata.Leaf('string', _ipv4_prefix)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _owner is not None:
            children['owner'] = yang.gdata.Leaf('string', _owner)
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint32', _id)
        if _encapsulation_type is not None:
            children['encapsulation-type'] = yang.gdata.Leaf('enumeration', _encapsulation_type)
        if _next_hop_group is not None:
            children['next-hop-group'] = yang.gdata.Leaf('leafref', _next_hop_group)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('uint8', _preference)
        children['internal-tags'] = yang.gdata.LeafList(self.internal_tags)
        if _last_app_update is not None:
            children['last-app-update'] = yang.gdata.Leaf('string', _last_app_update)
        if _fib_programming is not None:
            children['fib-programming'] = _fib_programming.to_gdata()
        if _vxlan is not None:
            children['vxlan'] = _vxlan.to_gdata()
        if _ip_in_ip is not None:
            children['ip-in-ip'] = _ip_in_ip.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ipv4_prefix), yang.gdata.yang_str(self.type), yang.gdata.yang_str(self.owner), yang.gdata.yang_str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry:
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry(ipv4_prefix=n.get_str("ipv4-prefix"), type=n.get_str("type"), owner=n.get_str("owner"), id=n.get_int("id"), encapsulation_type=n.get_opt_str("encapsulation-type"), next_hop_group=n.get_opt_str("next-hop-group"), metric=n.get_opt_int("metric"), preference=n.get_opt_int("preference"), internal_tags=n.get_opt_strs("internal-tags"), last_app_update=n.get_opt_str("last-app-update"), fib_programming=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming.from_gdata(n.get_opt_container("fib-programming")), vxlan=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan.from_gdata(n.get_opt_container("vxlan")), ip_in_ip=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip.from_gdata(n.get_opt_container("ip-in-ip")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry:
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry(ipv4_prefix=yang.gdata.from_xml_str(n, "ipv4-prefix"), type=yang.gdata.from_xml_str(n, "type"), owner=yang.gdata.from_xml_str(n, "owner"), id=yang.gdata.from_xml_int(n, "id"), encapsulation_type=yang.gdata.from_xml_opt_str(n, "encapsulation-type"), next_hop_group=yang.gdata.from_xml_opt_str(n, "next-hop-group"), metric=yang.gdata.from_xml_opt_int(n, "metric"), preference=yang.gdata.from_xml_opt_int(n, "preference"), internal_tags=yang.gdata.from_xml_opt_strs(n, "internal-tags"), last_app_update=yang.gdata.from_xml_opt_str(n, "last-app-update"), fib_programming=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__fib_programming.from_xml(yang.gdata.get_xml_opt_child(n, "fib-programming")), vxlan=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__vxlan.from_xml(yang.gdata.get_xml_opt_child(n, "vxlan")), ip_in_ip=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel__ip_in_ip.from_xml(yang.gdata.get_xml_opt_child(n, "ip-in-ip")))

class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self._name = 'tunnel'
        self.elements = elements

    mut def create(self, ipv4_prefix, type, owner, id):
        for e in self.elements:
            match = True
            if e.ipv4_prefix != ipv4_prefix:
                match = False
                continue
            if e.type != type:
                match = False
                continue
            if e.owner != owner:
                match = False
                continue
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry(ipv4_prefix, type, owner, id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ipv4-prefix', 'type', 'owner', 'id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics__active_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics__inactive_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics__total_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics(yang.adata.MNode):
    active_tunnels: ?int
    inactive_tunnels: ?int
    total_tunnels: int

    mut def __init__(self, active_tunnels: ?int, inactive_tunnels: ?int, total_tunnels: ?int=None):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.active_tunnels = active_tunnels
        self.inactive_tunnels = inactive_tunnels
        if total_tunnels != None:
            self.total_tunnels = total_tunnels
        else:
            self.total_tunnels = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _active_tunnels = self.active_tunnels
        _inactive_tunnels = self.inactive_tunnels
        _total_tunnels = self.total_tunnels
        if _active_tunnels is not None:
            children['active-tunnels'] = yang.gdata.Leaf('uint32', _active_tunnels)
        if _inactive_tunnels is not None:
            children['inactive-tunnels'] = yang.gdata.Leaf('uint32', _inactive_tunnels)
        if _total_tunnels is not None:
            children['total-tunnels'] = yang.gdata.Leaf('uint64', _total_tunnels)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics(active_tunnels=n.get_opt_int("active-tunnels"), inactive_tunnels=n.get_opt_int("inactive-tunnels"), total_tunnels=n.get_opt_int("total-tunnels"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics(active_tunnels=yang.gdata.from_xml_opt_int(n, "active-tunnels"), inactive_tunnels=yang.gdata.from_xml_opt_int(n, "inactive-tunnels"), total_tunnels=yang.gdata.from_xml_opt_int(n, "total-tunnels"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics()



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type__active_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type__inactive_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type__total_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry(yang.adata.MNode):
    type: str
    active_tunnels: ?int
    inactive_tunnels: ?int
    total_tunnels: int

    mut def __init__(self, type: str, active_tunnels: ?int, inactive_tunnels: ?int, total_tunnels: ?int=None):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.type = type
        self.active_tunnels = active_tunnels
        self.inactive_tunnels = inactive_tunnels
        if total_tunnels != None:
            self.total_tunnels = total_tunnels
        else:
            self.total_tunnels = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        _active_tunnels = self.active_tunnels
        _inactive_tunnels = self.inactive_tunnels
        _total_tunnels = self.total_tunnels
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _active_tunnels is not None:
            children['active-tunnels'] = yang.gdata.Leaf('uint32', _active_tunnels)
        if _inactive_tunnels is not None:
            children['inactive-tunnels'] = yang.gdata.Leaf('uint32', _inactive_tunnels)
        if _total_tunnels is not None:
            children['total-tunnels'] = yang.gdata.Leaf('uint64', _total_tunnels)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.type)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry:
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry(type=n.get_str("type"), active_tunnels=n.get_opt_int("active-tunnels"), inactive_tunnels=n.get_opt_int("inactive-tunnels"), total_tunnels=n.get_opt_int("total-tunnels"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry:
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry(type=yang.gdata.from_xml_str(n, "type"), active_tunnels=yang.gdata.from_xml_opt_int(n, "active-tunnels"), inactive_tunnels=yang.gdata.from_xml_opt_int(n, "inactive-tunnels"), total_tunnels=yang.gdata.from_xml_opt_int(n, "total-tunnels"))

class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self._name = 'tunnel-type'
        self.elements = elements

    mut def create(self, type):
        for e in self.elements:
            match = True
            if e.type != type:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry(type)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['type'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary(yang.adata.MNode):
    tunnel_type: srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type

    mut def __init__(self, tunnel_type: list[srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.tunnel_type = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type(elements=tunnel_type)
        self.tunnel_type._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_type = self.tunnel_type
        if _tunnel_type is not None:
            children['tunnel-type'] = _tunnel_type.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary(tunnel_type=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type.from_gdata(n.get_opt_list("tunnel-type")))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary(tunnel_type=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary__tunnel_type.from_xml(yang.gdata.get_xml_children(n, "tunnel-type")))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary()



class srl_nokia_network_instance__network_instance__tunnel_table__ipv4(yang.adata.MNode):
    tunnel: srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel
    statistics: srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics
    tunnel_summary: srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary

    mut def __init__(self, tunnel: list[srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_entry]=[], statistics: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics=None, tunnel_summary: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary=None):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.tunnel = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel(elements=tunnel)
        self.tunnel._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        if tunnel_summary is not None:
            self.tunnel_summary = tunnel_summary
        else:
            self.tunnel_summary = srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary()
        self_tunnel_summary = self.tunnel_summary
        if self_tunnel_summary is not None:
            self_tunnel_summary._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel = self.tunnel
        _statistics = self.statistics
        _tunnel_summary = self.tunnel_summary
        if _tunnel is not None:
            children['tunnel'] = _tunnel.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _tunnel_summary is not None:
            children['tunnel-summary'] = _tunnel_summary.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:fib:tunnel-tables')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4(tunnel=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel.from_gdata(n.get_opt_list("tunnel")), statistics=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics.from_gdata(n.get_opt_container("statistics")), tunnel_summary=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary.from_gdata(n.get_opt_container("tunnel-summary")))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv4:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv4(tunnel=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel.from_xml(yang.gdata.get_xml_children(n, "tunnel")), statistics=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), tunnel_summary=srl_nokia_network_instance__network_instance__tunnel_table__ipv4__tunnel_summary.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-summary")))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv4()



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ipv6_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__owner(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__encapsulation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__internal_tags(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__last_app_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming__status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming__not_programmed_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming(yang.adata.MNode):
    status: ?str
    not_programmed_reason: ?str

    mut def __init__(self, status: ?str, not_programmed_reason: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.status = status
        self.not_programmed_reason = not_programmed_reason

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _status = self.status
        _not_programmed_reason = self.not_programmed_reason
        if _status is not None:
            children['status'] = yang.gdata.Leaf('enumeration', _status)
        if _not_programmed_reason is not None:
            children['not-programmed-reason'] = yang.gdata.Leaf('enumeration', _not_programmed_reason)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming(status=n.get_opt_str("status"), not_programmed_reason=n.get_opt_str("not-programmed-reason"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming(status=yang.gdata.from_xml_opt_str(n, "status"), not_programmed_reason=yang.gdata.from_xml_opt_str(n, "not-programmed-reason"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming()



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan__destination_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan__source_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan__time_to_live(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan__destination_udp_port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan(yang.adata.MNode):
    destination_address: ?str
    source_address: ?str
    time_to_live: ?int
    destination_udp_port: ?int

    mut def __init__(self, destination_address: ?str, source_address: ?str, time_to_live: ?int, destination_udp_port: ?int):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.destination_address = destination_address
        self.source_address = source_address
        self.time_to_live = time_to_live
        self.destination_udp_port = destination_udp_port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _destination_address = self.destination_address
        _source_address = self.source_address
        _time_to_live = self.time_to_live
        _destination_udp_port = self.destination_udp_port
        if _destination_address is not None:
            children['destination-address'] = yang.gdata.Leaf('union', _destination_address)
        if _source_address is not None:
            children['source-address'] = yang.gdata.Leaf('union', _source_address)
        if _time_to_live is not None:
            children['time-to-live'] = yang.gdata.Leaf('uint8', _time_to_live)
        if _destination_udp_port is not None:
            children['destination-udp-port'] = yang.gdata.Leaf('uint16', _destination_udp_port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan(destination_address=n.get_opt_str("destination-address"), source_address=n.get_opt_str("source-address"), time_to_live=n.get_opt_int("time-to-live"), destination_udp_port=n.get_opt_int("destination-udp-port"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan(destination_address=yang.gdata.from_xml_opt_str(n, "destination-address"), source_address=yang.gdata.from_xml_opt_str(n, "source-address"), time_to_live=yang.gdata.from_xml_opt_int(n, "time-to-live"), destination_udp_port=yang.gdata.from_xml_opt_int(n, "destination-udp-port"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan()



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip__destination_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip__source_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip(yang.adata.MNode):
    destination_address: ?str
    source_address: ?str

    mut def __init__(self, destination_address: ?str, source_address: ?str):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.destination_address = destination_address
        self.source_address = source_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _destination_address = self.destination_address
        _source_address = self.source_address
        if _destination_address is not None:
            children['destination-address'] = yang.gdata.Leaf('union', _destination_address)
        if _source_address is not None:
            children['source-address'] = yang.gdata.Leaf('union', _source_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip(destination_address=n.get_opt_str("destination-address"), source_address=n.get_opt_str("source-address"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip(destination_address=yang.gdata.from_xml_opt_str(n, "destination-address"), source_address=yang.gdata.from_xml_opt_str(n, "source-address"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip()



class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry(yang.adata.MNode):
    ipv6_prefix: str
    type: str
    owner: str
    id: int
    encapsulation_type: ?str
    next_hop_group: ?str
    metric: ?int
    preference: ?int
    internal_tags: list[str]
    last_app_update: ?str
    fib_programming: srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming
    vxlan: srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan
    ip_in_ip: srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip

    mut def __init__(self, ipv6_prefix: str, type: str, owner: str, id: int, encapsulation_type: ?str, next_hop_group: ?str, metric: ?int, preference: ?int, internal_tags: ?list[str]=None, last_app_update: ?str, fib_programming: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming=None, vxlan: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan=None, ip_in_ip: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip=None):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.ipv6_prefix = ipv6_prefix
        self.type = type
        self.owner = owner
        self.id = id
        self.encapsulation_type = encapsulation_type
        self.next_hop_group = next_hop_group
        self.metric = metric
        self.preference = preference
        if internal_tags is not None:
            self.internal_tags = internal_tags
        else:
            self.internal_tags = []
        self.last_app_update = last_app_update
        if fib_programming is not None:
            self.fib_programming = fib_programming
        else:
            self.fib_programming = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming()
        self_fib_programming = self.fib_programming
        if self_fib_programming is not None:
            self_fib_programming._parent = self
        if vxlan is not None:
            self.vxlan = vxlan
        else:
            self.vxlan = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan()
        self_vxlan = self.vxlan
        if self_vxlan is not None:
            self_vxlan._parent = self
        if ip_in_ip is not None:
            self.ip_in_ip = ip_in_ip
        else:
            self.ip_in_ip = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip()
        self_ip_in_ip = self.ip_in_ip
        if self_ip_in_ip is not None:
            self_ip_in_ip._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv6_prefix = self.ipv6_prefix
        _type = self.type
        _owner = self.owner
        _id = self.id
        _encapsulation_type = self.encapsulation_type
        _next_hop_group = self.next_hop_group
        _metric = self.metric
        _preference = self.preference
        _last_app_update = self.last_app_update
        _fib_programming = self.fib_programming
        _vxlan = self.vxlan
        _ip_in_ip = self.ip_in_ip
        if _ipv6_prefix is not None:
            children['ipv6-prefix'] = yang.gdata.Leaf('string', _ipv6_prefix)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _owner is not None:
            children['owner'] = yang.gdata.Leaf('string', _owner)
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint32', _id)
        if _encapsulation_type is not None:
            children['encapsulation-type'] = yang.gdata.Leaf('enumeration', _encapsulation_type)
        if _next_hop_group is not None:
            children['next-hop-group'] = yang.gdata.Leaf('leafref', _next_hop_group)
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('uint8', _preference)
        children['internal-tags'] = yang.gdata.LeafList(self.internal_tags)
        if _last_app_update is not None:
            children['last-app-update'] = yang.gdata.Leaf('string', _last_app_update)
        if _fib_programming is not None:
            children['fib-programming'] = _fib_programming.to_gdata()
        if _vxlan is not None:
            children['vxlan'] = _vxlan.to_gdata()
        if _ip_in_ip is not None:
            children['ip-in-ip'] = _ip_in_ip.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.ipv6_prefix), yang.gdata.yang_str(self.type), yang.gdata.yang_str(self.owner), yang.gdata.yang_str(self.id)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry:
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry(ipv6_prefix=n.get_str("ipv6-prefix"), type=n.get_str("type"), owner=n.get_str("owner"), id=n.get_int("id"), encapsulation_type=n.get_opt_str("encapsulation-type"), next_hop_group=n.get_opt_str("next-hop-group"), metric=n.get_opt_int("metric"), preference=n.get_opt_int("preference"), internal_tags=n.get_opt_strs("internal-tags"), last_app_update=n.get_opt_str("last-app-update"), fib_programming=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming.from_gdata(n.get_opt_container("fib-programming")), vxlan=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan.from_gdata(n.get_opt_container("vxlan")), ip_in_ip=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip.from_gdata(n.get_opt_container("ip-in-ip")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry:
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry(ipv6_prefix=yang.gdata.from_xml_str(n, "ipv6-prefix"), type=yang.gdata.from_xml_str(n, "type"), owner=yang.gdata.from_xml_str(n, "owner"), id=yang.gdata.from_xml_int(n, "id"), encapsulation_type=yang.gdata.from_xml_opt_str(n, "encapsulation-type"), next_hop_group=yang.gdata.from_xml_opt_str(n, "next-hop-group"), metric=yang.gdata.from_xml_opt_int(n, "metric"), preference=yang.gdata.from_xml_opt_int(n, "preference"), internal_tags=yang.gdata.from_xml_opt_strs(n, "internal-tags"), last_app_update=yang.gdata.from_xml_opt_str(n, "last-app-update"), fib_programming=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__fib_programming.from_xml(yang.gdata.get_xml_opt_child(n, "fib-programming")), vxlan=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__vxlan.from_xml(yang.gdata.get_xml_opt_child(n, "vxlan")), ip_in_ip=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel__ip_in_ip.from_xml(yang.gdata.get_xml_opt_child(n, "ip-in-ip")))

class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self._name = 'tunnel'
        self.elements = elements

    mut def create(self, ipv6_prefix, type, owner, id):
        for e in self.elements:
            match = True
            if e.ipv6_prefix != ipv6_prefix:
                match = False
                continue
            if e.type != type:
                match = False
                continue
            if e.owner != owner:
                match = False
                continue
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry(ipv6_prefix, type, owner, id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['ipv6-prefix', 'type', 'owner', 'id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics__active_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics__inactive_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics__total_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics(yang.adata.MNode):
    active_tunnels: ?int
    inactive_tunnels: ?int
    total_tunnels: int

    mut def __init__(self, active_tunnels: ?int, inactive_tunnels: ?int, total_tunnels: ?int=None):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.active_tunnels = active_tunnels
        self.inactive_tunnels = inactive_tunnels
        if total_tunnels != None:
            self.total_tunnels = total_tunnels
        else:
            self.total_tunnels = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _active_tunnels = self.active_tunnels
        _inactive_tunnels = self.inactive_tunnels
        _total_tunnels = self.total_tunnels
        if _active_tunnels is not None:
            children['active-tunnels'] = yang.gdata.Leaf('uint32', _active_tunnels)
        if _inactive_tunnels is not None:
            children['inactive-tunnels'] = yang.gdata.Leaf('uint32', _inactive_tunnels)
        if _total_tunnels is not None:
            children['total-tunnels'] = yang.gdata.Leaf('uint64', _total_tunnels)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics(active_tunnels=n.get_opt_int("active-tunnels"), inactive_tunnels=n.get_opt_int("inactive-tunnels"), total_tunnels=n.get_opt_int("total-tunnels"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics(active_tunnels=yang.gdata.from_xml_opt_int(n, "active-tunnels"), inactive_tunnels=yang.gdata.from_xml_opt_int(n, "inactive-tunnels"), total_tunnels=yang.gdata.from_xml_opt_int(n, "total-tunnels"))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics()



mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type__active_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type__inactive_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type__total_tunnels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry(yang.adata.MNode):
    type: str
    active_tunnels: ?int
    inactive_tunnels: ?int
    total_tunnels: int

    mut def __init__(self, type: str, active_tunnels: ?int, inactive_tunnels: ?int, total_tunnels: ?int=None):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.type = type
        self.active_tunnels = active_tunnels
        self.inactive_tunnels = inactive_tunnels
        if total_tunnels != None:
            self.total_tunnels = total_tunnels
        else:
            self.total_tunnels = 0

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _type = self.type
        _active_tunnels = self.active_tunnels
        _inactive_tunnels = self.inactive_tunnels
        _total_tunnels = self.total_tunnels
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _active_tunnels is not None:
            children['active-tunnels'] = yang.gdata.Leaf('uint32', _active_tunnels)
        if _inactive_tunnels is not None:
            children['inactive-tunnels'] = yang.gdata.Leaf('uint32', _inactive_tunnels)
        if _total_tunnels is not None:
            children['total-tunnels'] = yang.gdata.Leaf('uint64', _total_tunnels)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.type)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry:
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry(type=n.get_str("type"), active_tunnels=n.get_opt_int("active-tunnels"), inactive_tunnels=n.get_opt_int("inactive-tunnels"), total_tunnels=n.get_opt_int("total-tunnels"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry:
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry(type=yang.gdata.from_xml_str(n, "type"), active_tunnels=yang.gdata.from_xml_opt_int(n, "active-tunnels"), inactive_tunnels=yang.gdata.from_xml_opt_int(n, "inactive-tunnels"), total_tunnels=yang.gdata.from_xml_opt_int(n, "total-tunnels"))

class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self._name = 'tunnel-type'
        self.elements = elements

    mut def create(self, type):
        for e in self.elements:
            match = True
            if e.type != type:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry(type)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['type'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary(yang.adata.MNode):
    tunnel_type: srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type

    mut def __init__(self, tunnel_type: list[srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.tunnel_type = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type(elements=tunnel_type)
        self.tunnel_type._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_type = self.tunnel_type
        if _tunnel_type is not None:
            children['tunnel-type'] = _tunnel_type.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary(tunnel_type=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type.from_gdata(n.get_opt_list("tunnel-type")))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary(tunnel_type=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary__tunnel_type.from_xml(yang.gdata.get_xml_children(n, "tunnel-type")))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary()



class srl_nokia_network_instance__network_instance__tunnel_table__ipv6(yang.adata.MNode):
    tunnel: srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel
    statistics: srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics
    tunnel_summary: srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary

    mut def __init__(self, tunnel: list[srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_entry]=[], statistics: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics=None, tunnel_summary: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary=None):
        self._ns = "urn:nokia.com:srlinux:fib:tunnel-tables"
        self.tunnel = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel(elements=tunnel)
        self.tunnel._parent = self
        if statistics is not None:
            self.statistics = statistics
        else:
            self.statistics = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics()
        self_statistics = self.statistics
        if self_statistics is not None:
            self_statistics._parent = self
        if tunnel_summary is not None:
            self.tunnel_summary = tunnel_summary
        else:
            self.tunnel_summary = srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary()
        self_tunnel_summary = self.tunnel_summary
        if self_tunnel_summary is not None:
            self_tunnel_summary._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel = self.tunnel
        _statistics = self.statistics
        _tunnel_summary = self.tunnel_summary
        if _tunnel is not None:
            children['tunnel'] = _tunnel.to_gdata()
        if _statistics is not None:
            children['statistics'] = _statistics.to_gdata()
        if _tunnel_summary is not None:
            children['tunnel-summary'] = _tunnel_summary.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:fib:tunnel-tables')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6(tunnel=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel.from_gdata(n.get_opt_list("tunnel")), statistics=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics.from_gdata(n.get_opt_container("statistics")), tunnel_summary=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary.from_gdata(n.get_opt_container("tunnel-summary")))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table__ipv6:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table__ipv6(tunnel=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel.from_xml(yang.gdata.get_xml_children(n, "tunnel")), statistics=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__statistics.from_xml(yang.gdata.get_xml_opt_child(n, "statistics")), tunnel_summary=srl_nokia_network_instance__network_instance__tunnel_table__ipv6__tunnel_summary.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-summary")))
        return srl_nokia_network_instance__network_instance__tunnel_table__ipv6()



class srl_nokia_network_instance__network_instance__tunnel_table(yang.adata.MNode):
    ipv4: srl_nokia_network_instance__network_instance__tunnel_table__ipv4
    ipv6: srl_nokia_network_instance__network_instance__tunnel_table__ipv6

    mut def __init__(self, ipv4: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv4=None, ipv6: ?srl_nokia_network_instance__network_instance__tunnel_table__ipv6=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = srl_nokia_network_instance__network_instance__tunnel_table__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = srl_nokia_network_instance__network_instance__tunnel_table__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__tunnel_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table(ipv4=srl_nokia_network_instance__network_instance__tunnel_table__ipv4.from_gdata(n.get_opt_container("ipv4")), ipv6=srl_nokia_network_instance__network_instance__tunnel_table__ipv6.from_gdata(n.get_opt_container("ipv6")))
        return srl_nokia_network_instance__network_instance__tunnel_table()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__tunnel_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__tunnel_table(ipv4=srl_nokia_network_instance__network_instance__tunnel_table__ipv4.from_xml(yang.gdata.get_xml_opt_child(n, "ipv4", "urn:nokia.com:srlinux:fib:tunnel-tables")), ipv6=srl_nokia_network_instance__network_instance__tunnel_table__ipv6.from_xml(yang.gdata.get_xml_opt_child(n, "ipv6", "urn:nokia.com:srlinux:fib:tunnel-tables")))
        return srl_nokia_network_instance__network_instance__tunnel_table()



class srl_nokia_network_instance__network_instance__multicast_forwarding_information_base(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__multicast_forwarding_information_base:
        if n != None:
            return srl_nokia_network_instance__network_instance__multicast_forwarding_information_base()
        return srl_nokia_network_instance__network_instance__multicast_forwarding_information_base()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__multicast_forwarding_information_base:
        if n != None:
            return srl_nokia_network_instance__network_instance__multicast_forwarding_information_base()
        return srl_nokia_network_instance__network_instance__multicast_forwarding_information_base()



mut def from_json_srl_nokia_network_instance__network_instance__connection_point__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__bridge_table__discard_unknown_src_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__bridge_table__split_horizon_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__maximum_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int32", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("int32", val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(yang.adata.MNode):
    maximum_entries: int
    warning_threshold_pct: int

    mut def __init__(self, maximum_entries: ?int=None, warning_threshold_pct: ?int=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if maximum_entries != None:
            self.maximum_entries = maximum_entries
        else:
            self.maximum_entries = 250
        if warning_threshold_pct != None:
            self.warning_threshold_pct = warning_threshold_pct
        else:
            self.warning_threshold_pct = 95

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_entries = self.maximum_entries
        _warning_threshold_pct = self.warning_threshold_pct
        if _maximum_entries is not None:
            children['maximum-entries'] = yang.gdata.Leaf('int32', _maximum_entries)
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('int32', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(maximum_entries=n.get_opt_int("maximum-entries"), warning_threshold_pct=n.get_opt_int("warning-threshold-pct"))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(maximum_entries=yang.gdata.from_xml_opt_int(n, "maximum-entries"), warning_threshold_pct=yang.gdata.from_xml_opt_int(n, "warning-threshold-pct"))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()



mut def from_json_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(yang.adata.MNode):
    admin_state: str

    mut def __init__(self, admin_state: ?str=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(admin_state=n.get_opt_str("admin-state"))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()



class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(yang.adata.MNode):
    admin_state: str
    aging: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging

    mut def __init__(self, admin_state: ?str=None, aging: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        if aging is not None:
            self.aging = aging
        else:
            self.aging = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()
        self_aging = self.aging
        if self_aging is not None:
            self_aging._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _aging = self.aging
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _aging is not None:
            children['aging'] = _aging.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(admin_state=n.get_opt_str("admin-state"), aging=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging.from_gdata(n.get_opt_container("aging")))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), aging=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging.from_xml(yang.gdata.get_xml_opt_child(n, "aging")))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()



mut def from_json_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication__action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(yang.adata.MNode):
    action_: str

    mut def __init__(self, action_: ?str=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if action_ != None:
            self.action_ = action_
        else:
            self.action_ = "use-net-instance-action"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _action_ = self.action_
        if _action_ is not None:
            children['action'] = yang.gdata.Leaf('enumeration', _action_)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(action_=n.get_opt_str("action"))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(action_=yang.gdata.from_xml_opt_str(n, "action"))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()



class srl_nokia_network_instance__network_instance__connection_point__bridge_table(yang.adata.MNode):
    discard_unknown_src_mac: bool
    split_horizon_group: ?str
    mac_limit: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit
    mac_learning: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning
    mac_duplication: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication

    mut def __init__(self, discard_unknown_src_mac: ?bool=None, split_horizon_group: ?str, mac_limit: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit=None, mac_learning: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning=None, mac_duplication: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if discard_unknown_src_mac != None:
            self.discard_unknown_src_mac = discard_unknown_src_mac
        else:
            self.discard_unknown_src_mac = False
        self.split_horizon_group = split_horizon_group
        if mac_limit is not None:
            self.mac_limit = mac_limit
        else:
            self.mac_limit = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()
        self_mac_limit = self.mac_limit
        if self_mac_limit is not None:
            self_mac_limit._parent = self
        if mac_learning is not None:
            self.mac_learning = mac_learning
        else:
            self.mac_learning = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()
        self_mac_learning = self.mac_learning
        if self_mac_learning is not None:
            self_mac_learning._parent = self
        if mac_duplication is not None:
            self.mac_duplication = mac_duplication
        else:
            self.mac_duplication = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()
        self_mac_duplication = self.mac_duplication
        if self_mac_duplication is not None:
            self_mac_duplication._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        _split_horizon_group = self.split_horizon_group
        _mac_limit = self.mac_limit
        _mac_learning = self.mac_learning
        _mac_duplication = self.mac_duplication
        if _discard_unknown_src_mac is not None:
            children['discard-unknown-src-mac'] = yang.gdata.Leaf('boolean', _discard_unknown_src_mac)
        if _split_horizon_group is not None:
            children['split-horizon-group'] = yang.gdata.Leaf('leafref', _split_horizon_group)
        if _mac_limit is not None:
            children['mac-limit'] = _mac_limit.to_gdata()
        if _mac_learning is not None:
            children['mac-learning'] = _mac_learning.to_gdata()
        if _mac_duplication is not None:
            children['mac-duplication'] = _mac_duplication.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__connection_point__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table(discard_unknown_src_mac=n.get_opt_bool("discard-unknown-src-mac"), split_horizon_group=n.get_opt_str("split-horizon-group"), mac_limit=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit.from_gdata(n.get_opt_container("mac-limit")), mac_learning=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning.from_gdata(n.get_opt_container("mac-learning")), mac_duplication=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication.from_gdata(n.get_opt_container("mac-duplication")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__connection_point__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table(discard_unknown_src_mac=yang.gdata.from_xml_opt_bool(n, "discard-unknown-src-mac"), split_horizon_group=yang.gdata.from_xml_opt_str(n, "split-horizon-group"), mac_limit=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit.from_xml(yang.gdata.get_xml_opt_child(n, "mac-limit")), mac_learning=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning.from_xml(yang.gdata.get_xml_opt_child(n, "mac-learning")), mac_duplication=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication.from_xml(yang.gdata.get_xml_opt_child(n, "mac-duplication")))
        return None



mut def from_json_srl_nokia_network_instance__network_instance__connection_point__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__oper_down_reason(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__oper_down_reason(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__destination_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__last_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__pw_tunnel(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__control_word(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__flow_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__flow_label_oper_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__virtual_circuit_identifier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static__ingress_vc_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static__egress_vc_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static(yang.adata.MNode):
    ingress_vc_label: ?int
    egress_vc_label: ?int

    mut def __init__(self, ingress_vc_label: ?int, egress_vc_label: ?int):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.ingress_vc_label = ingress_vc_label
        self.egress_vc_label = egress_vc_label

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress_vc_label = self.ingress_vc_label
        _egress_vc_label = self.egress_vc_label
        if _ingress_vc_label is not None:
            children['ingress-vc-label'] = yang.gdata.Leaf('uint32', _ingress_vc_label)
        if _egress_vc_label is not None:
            children['egress-vc-label'] = yang.gdata.Leaf('uint32', _egress_vc_label)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static(ingress_vc_label=n.get_opt_int("ingress-vc-label"), egress_vc_label=n.get_opt_int("egress-vc-label"))
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static(ingress_vc_label=yang.gdata.from_xml_opt_int(n, "ingress-vc-label"), egress_vc_label=yang.gdata.from_xml_opt_int(n, "egress-vc-label"))
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static()



mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp__virtual_circuit_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp__advertise_l2_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp__ignore_mtu_mismatch(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp(yang.adata.MNode):
    virtual_circuit_type: str
    advertise_l2_mtu: ?int
    ignore_mtu_mismatch: bool

    mut def __init__(self, virtual_circuit_type: ?str=None, advertise_l2_mtu: ?int, ignore_mtu_mismatch: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if virtual_circuit_type != None:
            self.virtual_circuit_type = virtual_circuit_type
        else:
            self.virtual_circuit_type = "ethernet"
        self.advertise_l2_mtu = advertise_l2_mtu
        if ignore_mtu_mismatch != None:
            self.ignore_mtu_mismatch = ignore_mtu_mismatch
        else:
            self.ignore_mtu_mismatch = False

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _virtual_circuit_type = self.virtual_circuit_type
        _advertise_l2_mtu = self.advertise_l2_mtu
        _ignore_mtu_mismatch = self.ignore_mtu_mismatch
        if _virtual_circuit_type is not None:
            children['virtual-circuit-type'] = yang.gdata.Leaf('enumeration', _virtual_circuit_type)
        if _advertise_l2_mtu is not None:
            children['advertise-l2-mtu'] = yang.gdata.Leaf('uint16', _advertise_l2_mtu)
        if _ignore_mtu_mismatch is not None:
            children['ignore-mtu-mismatch'] = yang.gdata.Leaf('boolean', _ignore_mtu_mismatch)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp(virtual_circuit_type=n.get_opt_str("virtual-circuit-type"), advertise_l2_mtu=n.get_opt_int("advertise-l2-mtu"), ignore_mtu_mismatch=n.get_opt_bool("ignore-mtu-mismatch"))
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp(virtual_circuit_type=yang.gdata.from_xml_opt_str(n, "virtual-circuit-type"), advertise_l2_mtu=yang.gdata.from_xml_opt_int(n, "advertise-l2-mtu"), ignore_mtu_mismatch=yang.gdata.from_xml_opt_bool(n, "ignore-mtu-mismatch"))
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp()



class srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling(yang.adata.MNode):
    virtual_circuit_identifier: int
    static: srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static
    tldp: srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp

    mut def __init__(self, virtual_circuit_identifier: int, static: ?srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static=None, tldp: ?srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.virtual_circuit_identifier = virtual_circuit_identifier
        if static is not None:
            self.static = static
        else:
            self.static = srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static()
        self_static = self.static
        if self_static is not None:
            self_static._parent = self
        if tldp is not None:
            self.tldp = tldp
        else:
            self.tldp = srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp()
        self_tldp = self.tldp
        if self_tldp is not None:
            self_tldp._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _virtual_circuit_identifier = self.virtual_circuit_identifier
        _static = self.static
        _tldp = self.tldp
        if _virtual_circuit_identifier is not None:
            children['virtual-circuit-identifier'] = yang.gdata.Leaf('uint32', _virtual_circuit_identifier)
        if _static is not None:
            children['static'] = _static.to_gdata()
        if _tldp is not None:
            children['tldp'] = _tldp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling(virtual_circuit_identifier=n.get_int("virtual-circuit-identifier"), static=srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static.from_gdata(n.get_opt_container("static")), tldp=srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp.from_gdata(n.get_opt_container("tldp")))
        raise ValueError("Missing required subtree srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling(virtual_circuit_identifier=yang.gdata.from_xml_int(n, "virtual-circuit-identifier"), static=srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__static.from_xml(yang.gdata.get_xml_opt_child(n, "static")), tldp=srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling__tldp.from_xml(yang.gdata.get_xml_opt_child(n, "tldp")))
        raise ValueError("Missing required subtree srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling")



mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__local__pseudowire_status(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__local__operational_ingress_vc_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_network_instance__network_instance__connection_point__pseudowire__local(yang.adata.MNode):
    pseudowire_status: list[str]
    operational_ingress_vc_label: ?int

    mut def __init__(self, pseudowire_status: ?list[str]=None, operational_ingress_vc_label: ?int):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if pseudowire_status is not None:
            self.pseudowire_status = pseudowire_status
        else:
            self.pseudowire_status = []
        self.operational_ingress_vc_label = operational_ingress_vc_label

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _operational_ingress_vc_label = self.operational_ingress_vc_label
        children['pseudowire-status'] = yang.gdata.LeafList(self.pseudowire_status)
        if _operational_ingress_vc_label is not None:
            children['operational-ingress-vc-label'] = yang.gdata.Leaf('uint32', _operational_ingress_vc_label)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__local:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__local(pseudowire_status=n.get_opt_strs("pseudowire-status"), operational_ingress_vc_label=n.get_opt_int("operational-ingress-vc-label"))
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire__local()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__local:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__local(pseudowire_status=yang.gdata.from_xml_opt_strs(n, "pseudowire-status"), operational_ingress_vc_label=yang.gdata.from_xml_opt_int(n, "operational-ingress-vc-label"))
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire__local()



mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote__pseudowire_status(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote__operational_egress_vc_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

class srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote(yang.adata.MNode):
    pseudowire_status: list[str]
    operational_egress_vc_label: ?int

    mut def __init__(self, pseudowire_status: ?list[str]=None, operational_egress_vc_label: ?int):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        if pseudowire_status is not None:
            self.pseudowire_status = pseudowire_status
        else:
            self.pseudowire_status = []
        self.operational_egress_vc_label = operational_egress_vc_label

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _operational_egress_vc_label = self.operational_egress_vc_label
        children['pseudowire-status'] = yang.gdata.LeafList(self.pseudowire_status)
        if _operational_egress_vc_label is not None:
            children['operational-egress-vc-label'] = yang.gdata.Leaf('uint32', _operational_egress_vc_label)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote(pseudowire_status=n.get_opt_strs("pseudowire-status"), operational_egress_vc_label=n.get_opt_int("operational-egress-vc-label"))
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote(pseudowire_status=yang.gdata.from_xml_opt_strs(n, "pseudowire-status"), operational_egress_vc_label=yang.gdata.from_xml_opt_int(n, "operational-egress-vc-label"))
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote()



class srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry(yang.adata.MNode):
    name: str
    admin_state: str
    oper_state: ?str
    oper_down_reason: list[str]
    index: int
    destination_index: ?int
    last_change: ?str
    pw_tunnel: str
    control_word: bool
    flow_label: bool
    flow_label_oper_state: ?str
    signaling: srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling
    local: srl_nokia_network_instance__network_instance__connection_point__pseudowire__local
    remote: srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote

    mut def __init__(self, name: str, pw_tunnel: str, signaling: srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling, admin_state: ?str=None, oper_state: ?str, oper_down_reason: ?list[str]=None, index: ?int=None, destination_index: ?int, last_change: ?str, control_word: ?bool=None, flow_label: ?bool=None, flow_label_oper_state: ?str, local: ?srl_nokia_network_instance__network_instance__connection_point__pseudowire__local=None, remote: ?srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.name = name
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.oper_state = oper_state
        if oper_down_reason is not None:
            self.oper_down_reason = oper_down_reason
        else:
            self.oper_down_reason = []
        if index != None:
            self.index = index
        else:
            self.index = 0
        self.destination_index = destination_index
        self.last_change = last_change
        self.pw_tunnel = pw_tunnel
        if control_word != None:
            self.control_word = control_word
        else:
            self.control_word = False
        if flow_label != None:
            self.flow_label = flow_label
        else:
            self.flow_label = False
        self.flow_label_oper_state = flow_label_oper_state
        self.signaling = signaling
        self.signaling._parent = self
        if local is not None:
            self.local = local
        else:
            self.local = srl_nokia_network_instance__network_instance__connection_point__pseudowire__local()
        self_local = self.local
        if self_local is not None:
            self_local._parent = self
        if remote is not None:
            self.remote = remote
        else:
            self.remote = srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote()
        self_remote = self.remote
        if self_remote is not None:
            self_remote._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _admin_state = self.admin_state
        _oper_state = self.oper_state
        _index = self.index
        _destination_index = self.destination_index
        _last_change = self.last_change
        _pw_tunnel = self.pw_tunnel
        _control_word = self.control_word
        _flow_label = self.flow_label
        _flow_label_oper_state = self.flow_label_oper_state
        _signaling = self.signaling
        _local = self.local
        _remote = self.remote
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        children['oper-down-reason'] = yang.gdata.LeafList(self.oper_down_reason)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint64', _index)
        if _destination_index is not None:
            children['destination-index'] = yang.gdata.Leaf('uint64', _destination_index)
        if _last_change is not None:
            children['last-change'] = yang.gdata.Leaf('string', _last_change)
        if _pw_tunnel is not None:
            children['pw-tunnel'] = yang.gdata.Leaf('leafref', _pw_tunnel)
        if _control_word is not None:
            children['control-word'] = yang.gdata.Leaf('boolean', _control_word)
        if _flow_label is not None:
            children['flow-label'] = yang.gdata.Leaf('boolean', _flow_label)
        if _flow_label_oper_state is not None:
            children['flow-label-oper-state'] = yang.gdata.Leaf('enumeration', _flow_label_oper_state)
        if _signaling is not None:
            children['signaling'] = _signaling.to_gdata()
        if _local is not None:
            children['local'] = _local.to_gdata()
        if _remote is not None:
            children['remote'] = _remote.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry:
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry(name=n.get_str("name"), admin_state=n.get_opt_str("admin-state"), oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_strs("oper-down-reason"), index=n.get_opt_int("index"), destination_index=n.get_opt_int("destination-index"), last_change=n.get_opt_str("last-change"), pw_tunnel=n.get_str("pw-tunnel"), control_word=n.get_opt_bool("control-word"), flow_label=n.get_opt_bool("flow-label"), flow_label_oper_state=n.get_opt_str("flow-label-oper-state"), signaling=srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling.from_gdata(n.get_container("signaling")), local=srl_nokia_network_instance__network_instance__connection_point__pseudowire__local.from_gdata(n.get_opt_container("local")), remote=srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote.from_gdata(n.get_opt_container("remote")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry:
        return srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry(name=yang.gdata.from_xml_str(n, "name"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_strs(n, "oper-down-reason"), index=yang.gdata.from_xml_opt_int(n, "index"), destination_index=yang.gdata.from_xml_opt_int(n, "destination-index"), last_change=yang.gdata.from_xml_opt_str(n, "last-change"), pw_tunnel=yang.gdata.from_xml_str(n, "pw-tunnel"), control_word=yang.gdata.from_xml_opt_bool(n, "control-word"), flow_label=yang.gdata.from_xml_opt_bool(n, "flow-label"), flow_label_oper_state=yang.gdata.from_xml_opt_str(n, "flow-label-oper-state"), signaling=srl_nokia_network_instance__network_instance__connection_point__pseudowire__signaling.from_xml(yang.gdata.get_xml_child(n, "signaling")), local=srl_nokia_network_instance__network_instance__connection_point__pseudowire__local.from_xml(yang.gdata.get_xml_opt_child(n, "local")), remote=srl_nokia_network_instance__network_instance__connection_point__pseudowire__remote.from_xml(yang.gdata.get_xml_opt_child(n, "remote")))

class srl_nokia_network_instance__network_instance__connection_point__pseudowire(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'pseudowire'
        self.elements = elements

    mut def create(self, name, pw_tunnel, signaling):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry(name, pw_tunnel, signaling)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__connection_point_entry(yang.adata.MNode):
    name: str
    bridge_table: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table
    oper_state: ?str
    oper_down_reason: ?str
    index: int
    pseudowire: srl_nokia_network_instance__network_instance__connection_point__pseudowire

    mut def __init__(self, name: str, bridge_table: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table=None, oper_state: ?str, oper_down_reason: ?str, index: ?int=None, pseudowire: list[srl_nokia_network_instance__network_instance__connection_point__pseudowire_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.name = name
        self.bridge_table = bridge_table
        self_bridge_table = self.bridge_table
        if self_bridge_table is not None:
            self_bridge_table._parent = self
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason
        if index != None:
            self.index = index
        else:
            self.index = 0
        self.pseudowire = srl_nokia_network_instance__network_instance__connection_point__pseudowire(elements=pseudowire)
        self.pseudowire._parent = self

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__connection_point__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _bridge_table = self.bridge_table
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        _index = self.index
        _pseudowire = self.pseudowire
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint64', _index)
        if _pseudowire is not None:
            children['pseudowire'] = _pseudowire.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point_entry:
        return srl_nokia_network_instance__network_instance__connection_point_entry(name=n.get_str("name"), bridge_table=srl_nokia_network_instance__network_instance__connection_point__bridge_table.from_gdata(n.get_opt_container("bridge-table")), oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"), index=n.get_opt_int("index"), pseudowire=srl_nokia_network_instance__network_instance__connection_point__pseudowire.from_gdata(n.get_opt_list("pseudowire")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__connection_point_entry:
        return srl_nokia_network_instance__network_instance__connection_point_entry(name=yang.gdata.from_xml_str(n, "name"), bridge_table=srl_nokia_network_instance__network_instance__connection_point__bridge_table.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-table")), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"), index=yang.gdata.from_xml_opt_int(n, "index"), pseudowire=srl_nokia_network_instance__network_instance__connection_point__pseudowire.from_xml(yang.gdata.get_xml_children(n, "pseudowire")))

class srl_nokia_network_instance__network_instance__connection_point(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__connection_point_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'connection-point'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__connection_point_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__connection_point_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__connection_point_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__connection_point_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__connection_point_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__table_connections__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__table_connections__table_connection__source_protocol(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__table_connections__table_connection__address_family(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__table_connections__table_connection__destination_protocol(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_network_instance__network_instance__table_connections__table_connection__disable_metric_propagation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__table_connections__table_connection__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_network_instance__network_instance__table_connections__table_connection__default_import_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__table_connections__table_connection_entry(yang.adata.MNode):
    source_protocol: str
    address_family: str
    destination_protocol: str
    disable_metric_propagation: bool
    import_policy: list[str]
    default_import_policy: str

    mut def __init__(self, source_protocol: str, address_family: str, destination_protocol: str, disable_metric_propagation: ?bool=None, import_policy: ?list[str]=None, default_import_policy: ?str=None):
        self._ns = "urn:nokia.com:srlinux:plcy:table-connections"
        self.source_protocol = source_protocol
        self.address_family = address_family
        self.destination_protocol = destination_protocol
        if disable_metric_propagation != None:
            self.disable_metric_propagation = disable_metric_propagation
        else:
            self.disable_metric_propagation = False
        if import_policy is not None:
            self.import_policy = import_policy
        else:
            self.import_policy = []
        if default_import_policy != None:
            self.default_import_policy = default_import_policy
        else:
            self.default_import_policy = "reject"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_protocol = self.source_protocol
        _address_family = self.address_family
        _destination_protocol = self.destination_protocol
        _disable_metric_propagation = self.disable_metric_propagation
        _default_import_policy = self.default_import_policy
        if _source_protocol is not None:
            children['source-protocol'] = yang.gdata.Leaf('identityref', _source_protocol)
        if _address_family is not None:
            children['address-family'] = yang.gdata.Leaf('enumeration', _address_family)
        if _destination_protocol is not None:
            children['destination-protocol'] = yang.gdata.Leaf('identityref', _destination_protocol)
        if _disable_metric_propagation is not None:
            children['disable-metric-propagation'] = yang.gdata.Leaf('boolean', _disable_metric_propagation)
        children['import-policy'] = yang.gdata.LeafList(self.import_policy)
        if _default_import_policy is not None:
            children['default-import-policy'] = yang.gdata.Leaf('enumeration', _default_import_policy)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.source_protocol), yang.gdata.yang_str(self.destination_protocol), yang.gdata.yang_str(self.address_family)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__table_connections__table_connection_entry:
        return srl_nokia_network_instance__network_instance__table_connections__table_connection_entry(source_protocol=n.get_str("source-protocol"), address_family=n.get_str("address-family"), destination_protocol=n.get_str("destination-protocol"), disable_metric_propagation=n.get_opt_bool("disable-metric-propagation"), import_policy=n.get_opt_strs("import-policy"), default_import_policy=n.get_opt_str("default-import-policy"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__table_connections__table_connection_entry:
        return srl_nokia_network_instance__network_instance__table_connections__table_connection_entry(source_protocol=yang.gdata.from_xml_str(n, "source-protocol"), address_family=yang.gdata.from_xml_str(n, "address-family"), destination_protocol=yang.gdata.from_xml_str(n, "destination-protocol"), disable_metric_propagation=yang.gdata.from_xml_opt_bool(n, "disable-metric-propagation"), import_policy=yang.gdata.from_xml_opt_strs(n, "import-policy"), default_import_policy=yang.gdata.from_xml_opt_str(n, "default-import-policy"))

class srl_nokia_network_instance__network_instance__table_connections__table_connection(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__table_connections__table_connection_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:table-connections"
        self._name = 'table-connection'
        self.elements = elements

    mut def create(self, source_protocol, destination_protocol, address_family):
        for e in self.elements:
            match = True
            if e.source_protocol != source_protocol:
                match = False
                continue
            if e.destination_protocol != destination_protocol:
                match = False
                continue
            if e.address_family != address_family:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__table_connections__table_connection_entry(source_protocol, destination_protocol, address_family)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['source-protocol', 'destination-protocol', 'address-family'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__table_connections__table_connection_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__table_connections__table_connection_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__table_connections__table_connection_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__table_connections__table_connection_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__table_connections(yang.adata.MNode):
    admin_state: str
    table_connection: srl_nokia_network_instance__network_instance__table_connections__table_connection

    mut def __init__(self, admin_state: ?str=None, table_connection: list[srl_nokia_network_instance__network_instance__table_connections__table_connection_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:plcy:table-connections"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        self.table_connection = srl_nokia_network_instance__network_instance__table_connections__table_connection(elements=table_connection)
        self.table_connection._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        _table_connection = self.table_connection
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _table_connection is not None:
            children['table-connection'] = _table_connection.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:plcy:table-connections')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__table_connections:
        if n != None:
            return srl_nokia_network_instance__network_instance__table_connections(admin_state=n.get_opt_str("admin-state"), table_connection=srl_nokia_network_instance__network_instance__table_connections__table_connection.from_gdata(n.get_opt_list("table-connection")))
        return srl_nokia_network_instance__network_instance__table_connections()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__table_connections:
        if n != None:
            return srl_nokia_network_instance__network_instance__table_connections(admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), table_connection=srl_nokia_network_instance__network_instance__table_connections__table_connection.from_xml(yang.gdata.get_xml_children(n, "table-connection")))
        return srl_nokia_network_instance__network_instance__table_connections()



mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block__label_range(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("leafref", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block__label_range_status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block(yang.adata.MNode):
    label_range: str
    label_range_status: ?str

    mut def __init__(self, label_range: str, label_range_status: ?str):
        self._ns = "urn:nokia.com:srlinux:segrt:segment-routing"
        self.label_range = label_range
        self.label_range_status = label_range_status

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _label_range = self.label_range
        _label_range_status = self.label_range_status
        if _label_range is not None:
            children['label-range'] = yang.gdata.Leaf('leafref', _label_range)
        if _label_range_status is not None:
            children['label-range-status'] = yang.gdata.Leaf('enumeration', _label_range_status)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block:
        if n != None:
            return srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block(label_range=n.get_str("label-range"), label_range_status=n.get_opt_str("label-range-status"))
        raise ValueError("Missing required subtree srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block")

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block:
        if n != None:
            return srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block(label_range=yang.gdata.from_xml_str(n, "label-range"), label_range_status=yang.gdata.from_xml_opt_str(n, "label-range-status"))
        raise ValueError("Missing required subtree srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block")



mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid__prefix_sid_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid__ipv4_label_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid__ipv6_label_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid__node_sid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry(yang.adata.MNode):
    prefix_sid_index: int
    interface: str
    ipv4_label_index: ?int
    ipv6_label_index: ?int
    node_sid: bool

    mut def __init__(self, prefix_sid_index: int, interface: str, ipv4_label_index: ?int, ipv6_label_index: ?int, node_sid: ?bool=None):
        self._ns = "urn:nokia.com:srlinux:segrt:segment-routing"
        self.prefix_sid_index = prefix_sid_index
        self.interface = interface
        self.ipv4_label_index = ipv4_label_index
        self.ipv6_label_index = ipv6_label_index
        if node_sid != None:
            self.node_sid = node_sid
        else:
            self.node_sid = True

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_sid_index = self.prefix_sid_index
        _interface = self.interface
        _ipv4_label_index = self.ipv4_label_index
        _ipv6_label_index = self.ipv6_label_index
        _node_sid = self.node_sid
        if _prefix_sid_index is not None:
            children['prefix-sid-index'] = yang.gdata.Leaf('uint8', _prefix_sid_index)
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        if _ipv4_label_index is not None:
            children['ipv4-label-index'] = yang.gdata.Leaf('uint32', _ipv4_label_index)
        if _ipv6_label_index is not None:
            children['ipv6-label-index'] = yang.gdata.Leaf('uint32', _ipv6_label_index)
        if _node_sid is not None:
            children['node-sid'] = yang.gdata.Leaf('boolean', _node_sid)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.prefix_sid_index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry:
        return srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry(prefix_sid_index=n.get_int("prefix-sid-index"), interface=n.get_str("interface"), ipv4_label_index=n.get_opt_int("ipv4-label-index"), ipv6_label_index=n.get_opt_int("ipv6-label-index"), node_sid=n.get_opt_bool("node-sid"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry:
        return srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry(prefix_sid_index=yang.gdata.from_xml_int(n, "prefix-sid-index"), interface=yang.gdata.from_xml_str(n, "interface"), ipv4_label_index=yang.gdata.from_xml_opt_int(n, "ipv4-label-index"), ipv6_label_index=yang.gdata.from_xml_opt_int(n, "ipv6-label-index"), node_sid=yang.gdata.from_xml_opt_bool(n, "node-sid"))

class srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:segrt:segment-routing"
        self._name = 'local-prefix-sid'
        self.elements = elements

    mut def create(self, prefix_sid_index, interface):
        for e in self.elements:
            match = True
            if e.prefix_sid_index != prefix_sid_index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry(prefix_sid_index, interface)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['prefix-sid-index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__sid_label_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__protocol(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__protocol_instance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__protocol_multi_topology(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__active(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__prefix_conflict(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid__sid_conflict(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry(yang.adata.MNode):
    prefix: str
    sid_label_value: int
    protocol_: str
    protocol_instance: int
    protocol_multi_topology: int
    algorithm: int
    active: ?bool
    prefix_conflict: ?bool
    sid_conflict: ?bool

    mut def __init__(self, prefix: str, sid_label_value: int, protocol_: str, protocol_instance: int, protocol_multi_topology: int, algorithm: int, active: ?bool, prefix_conflict: ?bool, sid_conflict: ?bool):
        self._ns = "urn:nokia.com:srlinux:segrt:segment-routing"
        self.prefix = prefix
        self.sid_label_value = sid_label_value
        self.protocol_ = protocol_
        self.protocol_instance = protocol_instance
        self.protocol_multi_topology = protocol_multi_topology
        self.algorithm = algorithm
        self.active = active
        self.prefix_conflict = prefix_conflict
        self.sid_conflict = sid_conflict

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix = self.prefix
        _sid_label_value = self.sid_label_value
        _protocol_ = self.protocol_
        _protocol_instance = self.protocol_instance
        _protocol_multi_topology = self.protocol_multi_topology
        _algorithm = self.algorithm
        _active = self.active
        _prefix_conflict = self.prefix_conflict
        _sid_conflict = self.sid_conflict
        if _prefix is not None:
            children['prefix'] = yang.gdata.Leaf('union', _prefix)
        if _sid_label_value is not None:
            children['sid-label-value'] = yang.gdata.Leaf('uint32', _sid_label_value)
        if _protocol_ is not None:
            children['protocol'] = yang.gdata.Leaf('enumeration', _protocol_)
        if _protocol_instance is not None:
            children['protocol-instance'] = yang.gdata.Leaf('uint8', _protocol_instance)
        if _protocol_multi_topology is not None:
            children['protocol-multi-topology'] = yang.gdata.Leaf('uint16', _protocol_multi_topology)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint8', _algorithm)
        if _active is not None:
            children['active'] = yang.gdata.Leaf('boolean', _active)
        if _prefix_conflict is not None:
            children['prefix-conflict'] = yang.gdata.Leaf('boolean', _prefix_conflict)
        if _sid_conflict is not None:
            children['sid-conflict'] = yang.gdata.Leaf('boolean', _sid_conflict)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.prefix), yang.gdata.yang_str(self.sid_label_value), yang.gdata.yang_str(self.protocol_), yang.gdata.yang_str(self.protocol_instance), yang.gdata.yang_str(self.protocol_multi_topology), yang.gdata.yang_str(self.algorithm)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry:
        return srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry(prefix=n.get_str("prefix"), sid_label_value=n.get_int("sid-label-value"), protocol_=n.get_str("protocol"), protocol_instance=n.get_int("protocol-instance"), protocol_multi_topology=n.get_int("protocol-multi-topology"), algorithm=n.get_int("algorithm"), active=n.get_opt_bool("active"), prefix_conflict=n.get_opt_bool("prefix-conflict"), sid_conflict=n.get_opt_bool("sid-conflict"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry:
        return srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry(prefix=yang.gdata.from_xml_str(n, "prefix"), sid_label_value=yang.gdata.from_xml_int(n, "sid-label-value"), protocol_=yang.gdata.from_xml_str(n, "protocol"), protocol_instance=yang.gdata.from_xml_int(n, "protocol-instance"), protocol_multi_topology=yang.gdata.from_xml_int(n, "protocol-multi-topology"), algorithm=yang.gdata.from_xml_int(n, "algorithm"), active=yang.gdata.from_xml_opt_bool(n, "active"), prefix_conflict=yang.gdata.from_xml_opt_bool(n, "prefix-conflict"), sid_conflict=yang.gdata.from_xml_opt_bool(n, "sid-conflict"))

class srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:segrt:segment-routing"
        self._name = 'prefix-sid'
        self.elements = elements

    mut def create(self, prefix, sid_label_value, protocol_, protocol_instance, protocol_multi_topology, algorithm):
        for e in self.elements:
            match = True
            if e.prefix != prefix:
                match = False
                continue
            if e.sid_label_value != sid_label_value:
                match = False
                continue
            if e.protocol_ != protocol_:
                match = False
                continue
            if e.protocol_instance != protocol_instance:
                match = False
                continue
            if e.protocol_multi_topology != protocol_multi_topology:
                match = False
                continue
            if e.algorithm != algorithm:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry(prefix, sid_label_value, protocol_, protocol_instance, protocol_multi_topology, algorithm)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['prefix', 'sid-label-value', 'protocol', 'protocol-instance', 'protocol-multi-topology', 'algorithm'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry.from_xml(node))
        return res



class srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database(yang.adata.MNode):
    prefix_sid: srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid

    mut def __init__(self, prefix_sid: list[srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:segrt:segment-routing"
        self.prefix_sid = srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid(elements=prefix_sid)
        self.prefix_sid._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_sid = self.prefix_sid
        if _prefix_sid is not None:
            children['prefix-sid'] = _prefix_sid.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database:
        if n != None:
            return srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database(prefix_sid=srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid.from_gdata(n.get_opt_list("prefix-sid")))
        return srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database:
        if n != None:
            return srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database(prefix_sid=srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database__prefix_sid.from_xml(yang.gdata.get_xml_children(n, "prefix-sid")))
        return srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database()



class srl_nokia_network_instance__network_instance__segment_routing__mpls(yang.adata.MNode):
    global_block: srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block
    local_prefix_sid: srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid
    sid_database: srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database

    mut def __init__(self, global_block: srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block, local_prefix_sid: list[srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid_entry]=[], sid_database: ?srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database=None):
        self._ns = "urn:nokia.com:srlinux:segrt:segment-routing"
        self.global_block = global_block
        self.global_block._parent = self
        self.local_prefix_sid = srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid(elements=local_prefix_sid)
        self.local_prefix_sid._parent = self
        if sid_database is not None:
            self.sid_database = sid_database
        else:
            self.sid_database = srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database()
        self_sid_database = self.sid_database
        if self_sid_database is not None:
            self_sid_database._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _global_block = self.global_block
        _local_prefix_sid = self.local_prefix_sid
        _sid_database = self.sid_database
        if _global_block is not None:
            children['global-block'] = _global_block.to_gdata()
        if _local_prefix_sid is not None:
            children['local-prefix-sid'] = _local_prefix_sid.to_gdata()
        if _sid_database is not None:
            children['sid-database'] = _sid_database.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__segment_routing__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__segment_routing__mpls(global_block=srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block.from_gdata(n.get_container("global-block")), local_prefix_sid=srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid.from_gdata(n.get_opt_list("local-prefix-sid")), sid_database=srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database.from_gdata(n.get_opt_container("sid-database")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_network_instance__network_instance__segment_routing__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__segment_routing__mpls(global_block=srl_nokia_network_instance__network_instance__segment_routing__mpls__global_block.from_xml(yang.gdata.get_xml_child(n, "global-block")), local_prefix_sid=srl_nokia_network_instance__network_instance__segment_routing__mpls__local_prefix_sid.from_xml(yang.gdata.get_xml_children(n, "local-prefix-sid")), sid_database=srl_nokia_network_instance__network_instance__segment_routing__mpls__sid_database.from_xml(yang.gdata.get_xml_opt_child(n, "sid-database")))
        return None



class srl_nokia_network_instance__network_instance__segment_routing(yang.adata.MNode):
    mpls: ?srl_nokia_network_instance__network_instance__segment_routing__mpls

    mut def __init__(self, mpls: ?srl_nokia_network_instance__network_instance__segment_routing__mpls=None):
        self._ns = "urn:nokia.com:srlinux:segrt:segment-routing"
        self.mpls = mpls
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self

    mut def create_mpls(self, global_block):
        res = srl_nokia_network_instance__network_instance__segment_routing__mpls(global_block)
        self.mpls = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:segrt:segment-routing')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__segment_routing:
        if n != None:
            return srl_nokia_network_instance__network_instance__segment_routing(mpls=srl_nokia_network_instance__network_instance__segment_routing__mpls.from_gdata(n.get_opt_container("mpls")))
        return srl_nokia_network_instance__network_instance__segment_routing()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_network_instance__network_instance__segment_routing:
        if n != None:
            return srl_nokia_network_instance__network_instance__segment_routing(mpls=srl_nokia_network_instance__network_instance__segment_routing__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls")))
        return srl_nokia_network_instance__network_instance__segment_routing()



class srl_nokia_network_instance__network_instance_entry(yang.adata.MNode):
    name: str
    type: str
    admin_state: str
    oper_state: ?str
    oper_down_reason: ?str
    oper_mac_vrf_mtu: ?int
    oper_vpws_mtu: ?int
    description: ?str
    router_id: ?str
    mpls_forwarding: srl_nokia_network_instance__network_instance__mpls_forwarding
    ip_forwarding: ?srl_nokia_network_instance__network_instance__ip_forwarding
    ip_load_balancing: srl_nokia_network_instance__network_instance__ip_load_balancing
    inter_instance_policies: srl_nokia_network_instance__network_instance__inter_instance_policies
    interface: srl_nokia_network_instance__network_instance__interface
    system_ipv4_address: srl_nokia_network_instance__network_instance__system_ipv4_address
    system_ipv6_address: srl_nokia_network_instance__network_instance__system_ipv6_address
    vxlan_interface: srl_nokia_network_instance__network_instance__vxlan_interface
    icmp: srl_nokia_network_instance__network_instance__icmp
    icmp6: srl_nokia_network_instance__network_instance__icmp6
    protocols: srl_nokia_network_instance__network_instance__protocols
    bridge_table: ?srl_nokia_network_instance__network_instance__bridge_table
    route_table: srl_nokia_network_instance__network_instance__route_table
    tunnel_table: srl_nokia_network_instance__network_instance__tunnel_table
    multicast_forwarding_information_base: srl_nokia_network_instance__network_instance__multicast_forwarding_information_base
    connection_point: srl_nokia_network_instance__network_instance__connection_point
    table_connections: srl_nokia_network_instance__network_instance__table_connections
    segment_routing: srl_nokia_network_instance__network_instance__segment_routing

    mut def __init__(self, name: str, type: ?str=None, admin_state: ?str=None, oper_state: ?str, oper_down_reason: ?str, oper_mac_vrf_mtu: ?int, oper_vpws_mtu: ?int, description: ?str, router_id: ?str, mpls_forwarding: ?srl_nokia_network_instance__network_instance__mpls_forwarding=None, ip_forwarding: ?srl_nokia_network_instance__network_instance__ip_forwarding=None, ip_load_balancing: ?srl_nokia_network_instance__network_instance__ip_load_balancing=None, inter_instance_policies: ?srl_nokia_network_instance__network_instance__inter_instance_policies=None, interface: list[srl_nokia_network_instance__network_instance__interface_entry]=[], system_ipv4_address: ?srl_nokia_network_instance__network_instance__system_ipv4_address=None, system_ipv6_address: ?srl_nokia_network_instance__network_instance__system_ipv6_address=None, vxlan_interface: list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]=[], icmp: ?srl_nokia_network_instance__network_instance__icmp=None, icmp6: ?srl_nokia_network_instance__network_instance__icmp6=None, protocols: ?srl_nokia_network_instance__network_instance__protocols=None, bridge_table: ?srl_nokia_network_instance__network_instance__bridge_table=None, route_table: ?srl_nokia_network_instance__network_instance__route_table=None, tunnel_table: ?srl_nokia_network_instance__network_instance__tunnel_table=None, multicast_forwarding_information_base: ?srl_nokia_network_instance__network_instance__multicast_forwarding_information_base=None, connection_point: list[srl_nokia_network_instance__network_instance__connection_point_entry]=[], table_connections: ?srl_nokia_network_instance__network_instance__table_connections=None, segment_routing: ?srl_nokia_network_instance__network_instance__segment_routing=None):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self.name = name
        if type != None:
            self.type = type
        else:
            self.type = "default"
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "enable"
        self.oper_state = oper_state
        self.oper_down_reason = oper_down_reason
        self.oper_mac_vrf_mtu = oper_mac_vrf_mtu
        self.oper_vpws_mtu = oper_vpws_mtu
        self.description = description
        self.router_id = router_id
        if mpls_forwarding is not None:
            self.mpls_forwarding = mpls_forwarding
        else:
            self.mpls_forwarding = srl_nokia_network_instance__network_instance__mpls_forwarding()
        self_mpls_forwarding = self.mpls_forwarding
        if self_mpls_forwarding is not None:
            self_mpls_forwarding._parent = self
        self.ip_forwarding = ip_forwarding
        self_ip_forwarding = self.ip_forwarding
        if self_ip_forwarding is not None:
            self_ip_forwarding._parent = self
        if ip_load_balancing is not None:
            self.ip_load_balancing = ip_load_balancing
        else:
            self.ip_load_balancing = srl_nokia_network_instance__network_instance__ip_load_balancing()
        self_ip_load_balancing = self.ip_load_balancing
        if self_ip_load_balancing is not None:
            self_ip_load_balancing._parent = self
        if inter_instance_policies is not None:
            self.inter_instance_policies = inter_instance_policies
        else:
            self.inter_instance_policies = srl_nokia_network_instance__network_instance__inter_instance_policies()
        self_inter_instance_policies = self.inter_instance_policies
        if self_inter_instance_policies is not None:
            self_inter_instance_policies._parent = self
        self.interface = srl_nokia_network_instance__network_instance__interface(elements=interface)
        self.interface._parent = self
        if system_ipv4_address is not None:
            self.system_ipv4_address = system_ipv4_address
        else:
            self.system_ipv4_address = srl_nokia_network_instance__network_instance__system_ipv4_address()
        self_system_ipv4_address = self.system_ipv4_address
        if self_system_ipv4_address is not None:
            self_system_ipv4_address._parent = self
        if system_ipv6_address is not None:
            self.system_ipv6_address = system_ipv6_address
        else:
            self.system_ipv6_address = srl_nokia_network_instance__network_instance__system_ipv6_address()
        self_system_ipv6_address = self.system_ipv6_address
        if self_system_ipv6_address is not None:
            self_system_ipv6_address._parent = self
        self.vxlan_interface = srl_nokia_network_instance__network_instance__vxlan_interface(elements=vxlan_interface)
        self.vxlan_interface._parent = self
        if icmp is not None:
            self.icmp = icmp
        else:
            self.icmp = srl_nokia_network_instance__network_instance__icmp()
        self_icmp = self.icmp
        if self_icmp is not None:
            self_icmp._parent = self
        if icmp6 is not None:
            self.icmp6 = icmp6
        else:
            self.icmp6 = srl_nokia_network_instance__network_instance__icmp6()
        self_icmp6 = self.icmp6
        if self_icmp6 is not None:
            self_icmp6._parent = self
        if protocols is not None:
            self.protocols = protocols
        else:
            self.protocols = srl_nokia_network_instance__network_instance__protocols()
        self_protocols = self.protocols
        if self_protocols is not None:
            self_protocols._parent = self
        self.bridge_table = bridge_table
        self_bridge_table = self.bridge_table
        if self_bridge_table is not None:
            self_bridge_table._parent = self
        if route_table is not None:
            self.route_table = route_table
        else:
            self.route_table = srl_nokia_network_instance__network_instance__route_table()
        self_route_table = self.route_table
        if self_route_table is not None:
            self_route_table._parent = self
        if tunnel_table is not None:
            self.tunnel_table = tunnel_table
        else:
            self.tunnel_table = srl_nokia_network_instance__network_instance__tunnel_table()
        self_tunnel_table = self.tunnel_table
        if self_tunnel_table is not None:
            self_tunnel_table._parent = self
        if multicast_forwarding_information_base is not None:
            self.multicast_forwarding_information_base = multicast_forwarding_information_base
        else:
            self.multicast_forwarding_information_base = srl_nokia_network_instance__network_instance__multicast_forwarding_information_base()
        self_multicast_forwarding_information_base = self.multicast_forwarding_information_base
        if self_multicast_forwarding_information_base is not None:
            self_multicast_forwarding_information_base._parent = self
        self.connection_point = srl_nokia_network_instance__network_instance__connection_point(elements=connection_point)
        self.connection_point._parent = self
        if table_connections is not None:
            self.table_connections = table_connections
        else:
            self.table_connections = srl_nokia_network_instance__network_instance__table_connections()
        self_table_connections = self.table_connections
        if self_table_connections is not None:
            self_table_connections._parent = self
        if segment_routing is not None:
            self.segment_routing = segment_routing
        else:
            self.segment_routing = srl_nokia_network_instance__network_instance__segment_routing()
        self_segment_routing = self.segment_routing
        if self_segment_routing is not None:
            self_segment_routing._parent = self

    mut def create_ip_forwarding(self):
        res = srl_nokia_network_instance__network_instance__ip_forwarding()
        self.ip_forwarding = res
        return res

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _type = self.type
        _admin_state = self.admin_state
        _oper_state = self.oper_state
        _oper_down_reason = self.oper_down_reason
        _oper_mac_vrf_mtu = self.oper_mac_vrf_mtu
        _oper_vpws_mtu = self.oper_vpws_mtu
        _description = self.description
        _router_id = self.router_id
        _mpls_forwarding = self.mpls_forwarding
        _ip_forwarding = self.ip_forwarding
        _ip_load_balancing = self.ip_load_balancing
        _inter_instance_policies = self.inter_instance_policies
        _interface = self.interface
        _system_ipv4_address = self.system_ipv4_address
        _system_ipv6_address = self.system_ipv6_address
        _vxlan_interface = self.vxlan_interface
        _icmp = self.icmp
        _icmp6 = self.icmp6
        _protocols = self.protocols
        _bridge_table = self.bridge_table
        _route_table = self.route_table
        _tunnel_table = self.tunnel_table
        _multicast_forwarding_information_base = self.multicast_forwarding_information_base
        _connection_point = self.connection_point
        _table_connections = self.table_connections
        _segment_routing = self.segment_routing
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _oper_state is not None:
            children['oper-state'] = yang.gdata.Leaf('enumeration', _oper_state)
        if _oper_down_reason is not None:
            children['oper-down-reason'] = yang.gdata.Leaf('enumeration', _oper_down_reason)
        if _oper_mac_vrf_mtu is not None:
            children['oper-mac-vrf-mtu'] = yang.gdata.Leaf('uint16', _oper_mac_vrf_mtu)
        if _oper_vpws_mtu is not None:
            children['oper-vpws-mtu'] = yang.gdata.Leaf('uint16', _oper_vpws_mtu)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('string', _router_id)
        if _mpls_forwarding is not None:
            children['mpls-forwarding'] = _mpls_forwarding.to_gdata()
        if _ip_forwarding is not None:
            children['ip-forwarding'] = _ip_forwarding.to_gdata()
        if _ip_load_balancing is not None:
            children['ip-load-balancing'] = _ip_load_balancing.to_gdata()
        if _inter_instance_policies is not None:
            children['inter-instance-policies'] = _inter_instance_policies.to_gdata()
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        if _system_ipv4_address is not None:
            children['system-ipv4-address'] = _system_ipv4_address.to_gdata()
        if _system_ipv6_address is not None:
            children['system-ipv6-address'] = _system_ipv6_address.to_gdata()
        if _vxlan_interface is not None:
            children['vxlan-interface'] = _vxlan_interface.to_gdata()
        if _icmp is not None:
            children['icmp'] = _icmp.to_gdata()
        if _icmp6 is not None:
            children['icmp6'] = _icmp6.to_gdata()
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        if _route_table is not None:
            children['route-table'] = _route_table.to_gdata()
        if _tunnel_table is not None:
            children['tunnel-table'] = _tunnel_table.to_gdata()
        if _multicast_forwarding_information_base is not None:
            children['multicast-forwarding-information-base'] = _multicast_forwarding_information_base.to_gdata()
        if _connection_point is not None:
            children['connection-point'] = _connection_point.to_gdata()
        if _table_connections is not None:
            children['table-connections'] = _table_connections.to_gdata()
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance_entry:
        return srl_nokia_network_instance__network_instance_entry(name=n.get_str("name"), type=n.get_opt_str("type"), admin_state=n.get_opt_str("admin-state"), oper_state=n.get_opt_str("oper-state"), oper_down_reason=n.get_opt_str("oper-down-reason"), oper_mac_vrf_mtu=n.get_opt_int("oper-mac-vrf-mtu"), oper_vpws_mtu=n.get_opt_int("oper-vpws-mtu"), description=n.get_opt_str("description"), router_id=n.get_opt_str("router-id"), mpls_forwarding=srl_nokia_network_instance__network_instance__mpls_forwarding.from_gdata(n.get_opt_container("mpls-forwarding")), ip_forwarding=srl_nokia_network_instance__network_instance__ip_forwarding.from_gdata(n.get_opt_container("ip-forwarding")), ip_load_balancing=srl_nokia_network_instance__network_instance__ip_load_balancing.from_gdata(n.get_opt_container("ip-load-balancing")), inter_instance_policies=srl_nokia_network_instance__network_instance__inter_instance_policies.from_gdata(n.get_opt_container("inter-instance-policies")), interface=srl_nokia_network_instance__network_instance__interface.from_gdata(n.get_opt_list("interface")), system_ipv4_address=srl_nokia_network_instance__network_instance__system_ipv4_address.from_gdata(n.get_opt_container("system-ipv4-address")), system_ipv6_address=srl_nokia_network_instance__network_instance__system_ipv6_address.from_gdata(n.get_opt_container("system-ipv6-address")), vxlan_interface=srl_nokia_network_instance__network_instance__vxlan_interface.from_gdata(n.get_opt_list("vxlan-interface")), icmp=srl_nokia_network_instance__network_instance__icmp.from_gdata(n.get_opt_container("icmp")), icmp6=srl_nokia_network_instance__network_instance__icmp6.from_gdata(n.get_opt_container("icmp6")), protocols=srl_nokia_network_instance__network_instance__protocols.from_gdata(n.get_opt_container("protocols")), bridge_table=srl_nokia_network_instance__network_instance__bridge_table.from_gdata(n.get_opt_container("bridge-table")), route_table=srl_nokia_network_instance__network_instance__route_table.from_gdata(n.get_opt_container("route-table")), tunnel_table=srl_nokia_network_instance__network_instance__tunnel_table.from_gdata(n.get_opt_container("tunnel-table")), multicast_forwarding_information_base=srl_nokia_network_instance__network_instance__multicast_forwarding_information_base.from_gdata(n.get_opt_container("multicast-forwarding-information-base")), connection_point=srl_nokia_network_instance__network_instance__connection_point.from_gdata(n.get_opt_list("connection-point")), table_connections=srl_nokia_network_instance__network_instance__table_connections.from_gdata(n.get_opt_container("table-connections")), segment_routing=srl_nokia_network_instance__network_instance__segment_routing.from_gdata(n.get_opt_container("segment-routing")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_network_instance__network_instance_entry:
        return srl_nokia_network_instance__network_instance_entry(name=yang.gdata.from_xml_str(n, "name"), type=yang.gdata.from_xml_opt_str(n, "type"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), oper_state=yang.gdata.from_xml_opt_str(n, "oper-state"), oper_down_reason=yang.gdata.from_xml_opt_str(n, "oper-down-reason"), oper_mac_vrf_mtu=yang.gdata.from_xml_opt_int(n, "oper-mac-vrf-mtu"), oper_vpws_mtu=yang.gdata.from_xml_opt_int(n, "oper-vpws-mtu"), description=yang.gdata.from_xml_opt_str(n, "description"), router_id=yang.gdata.from_xml_opt_str(n, "router-id"), mpls_forwarding=srl_nokia_network_instance__network_instance__mpls_forwarding.from_xml(yang.gdata.get_xml_opt_child(n, "mpls-forwarding")), ip_forwarding=srl_nokia_network_instance__network_instance__ip_forwarding.from_xml(yang.gdata.get_xml_opt_child(n, "ip-forwarding")), ip_load_balancing=srl_nokia_network_instance__network_instance__ip_load_balancing.from_xml(yang.gdata.get_xml_opt_child(n, "ip-load-balancing")), inter_instance_policies=srl_nokia_network_instance__network_instance__inter_instance_policies.from_xml(yang.gdata.get_xml_opt_child(n, "inter-instance-policies")), interface=srl_nokia_network_instance__network_instance__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), system_ipv4_address=srl_nokia_network_instance__network_instance__system_ipv4_address.from_xml(yang.gdata.get_xml_opt_child(n, "system-ipv4-address")), system_ipv6_address=srl_nokia_network_instance__network_instance__system_ipv6_address.from_xml(yang.gdata.get_xml_opt_child(n, "system-ipv6-address")), vxlan_interface=srl_nokia_network_instance__network_instance__vxlan_interface.from_xml(yang.gdata.get_xml_children(n, "vxlan-interface")), icmp=srl_nokia_network_instance__network_instance__icmp.from_xml(yang.gdata.get_xml_opt_child(n, "icmp")), icmp6=srl_nokia_network_instance__network_instance__icmp6.from_xml(yang.gdata.get_xml_opt_child(n, "icmp6")), protocols=srl_nokia_network_instance__network_instance__protocols.from_xml(yang.gdata.get_xml_opt_child(n, "protocols")), bridge_table=srl_nokia_network_instance__network_instance__bridge_table.from_xml(yang.gdata.get_xml_opt_child(n, "bridge-table")), route_table=srl_nokia_network_instance__network_instance__route_table.from_xml(yang.gdata.get_xml_opt_child(n, "route-table")), tunnel_table=srl_nokia_network_instance__network_instance__tunnel_table.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel-table")), multicast_forwarding_information_base=srl_nokia_network_instance__network_instance__multicast_forwarding_information_base.from_xml(yang.gdata.get_xml_opt_child(n, "multicast-forwarding-information-base")), connection_point=srl_nokia_network_instance__network_instance__connection_point.from_xml(yang.gdata.get_xml_children(n, "connection-point")), table_connections=srl_nokia_network_instance__network_instance__table_connections.from_xml(yang.gdata.get_xml_opt_child(n, "table-connections", "urn:nokia.com:srlinux:plcy:table-connections")), segment_routing=srl_nokia_network_instance__network_instance__segment_routing.from_xml(yang.gdata.get_xml_opt_child(n, "segment-routing", "urn:nokia.com:srlinux:segrt:segment-routing")))

class srl_nokia_network_instance__network_instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:net-inst:network-instance"
        self._name = 'network-instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:net-inst:network-instance')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_network_instance__network_instance_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_network_instance__network_instance_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_network_instance__network_instance_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_system__system__features(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

mut def from_json_srl_nokia_system__system__trace_options(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class srl_nokia_system__system__management(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:general:system"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__management:
        if n != None:
            return srl_nokia_system__system__management()
        return srl_nokia_system__system__management()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__management:
        if n != None:
            return srl_nokia_system__system__management()
        return srl_nokia_system__system__management()



class srl_nokia_system__system__control_plane_traffic__output(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:general:system"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__output:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__output()
        return srl_nokia_system__system__control_plane_traffic__output()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__control_plane_traffic__output:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__output()
        return srl_nokia_system__system__control_plane_traffic__output()



class srl_nokia_system__system__control_plane_traffic__input(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:general:system"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__input:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__input()
        return srl_nokia_system__system__control_plane_traffic__input()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__control_plane_traffic__input:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__input()
        return srl_nokia_system__system__control_plane_traffic__input()



class srl_nokia_system__system__control_plane_traffic(yang.adata.MNode):
    output: srl_nokia_system__system__control_plane_traffic__output
    input: srl_nokia_system__system__control_plane_traffic__input

    mut def __init__(self, output: ?srl_nokia_system__system__control_plane_traffic__output=None, input: ?srl_nokia_system__system__control_plane_traffic__input=None):
        self._ns = "urn:nokia.com:srlinux:general:system"
        if output is not None:
            self.output = output
        else:
            self.output = srl_nokia_system__system__control_plane_traffic__output()
        self_output = self.output
        if self_output is not None:
            self_output._parent = self
        if input is not None:
            self.input = input
        else:
            self.input = srl_nokia_system__system__control_plane_traffic__input()
        self_input = self.input
        if self_input is not None:
            self_input._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _output = self.output
        _input = self.input
        if _output is not None:
            children['output'] = _output.to_gdata()
        if _input is not None:
            children['input'] = _input.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic(output=srl_nokia_system__system__control_plane_traffic__output.from_gdata(n.get_opt_container("output")), input=srl_nokia_system__system__control_plane_traffic__input.from_gdata(n.get_opt_container("input")))
        return srl_nokia_system__system__control_plane_traffic()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__control_plane_traffic:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic(output=srl_nokia_system__system__control_plane_traffic__output.from_xml(yang.gdata.get_xml_opt_child(n, "output")), input=srl_nokia_system__system__control_plane_traffic__input.from_xml(yang.gdata.get_xml_opt_child(n, "input")))
        return srl_nokia_system__system__control_plane_traffic()



mut def from_json_srl_nokia_system__system__protocols__bgp__restart_max_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint16", val)

class srl_nokia_system__system__protocols__bgp(yang.adata.MNode):
    restart_max_wait: int

    mut def __init__(self, restart_max_wait: ?int=None):
        self._ns = "urn:nokia.com:srlinux:bgp:bgp"
        if restart_max_wait != None:
            self.restart_max_wait = restart_max_wait
        else:
            self.restart_max_wait = 600

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restart_max_wait = self.restart_max_wait
        if _restart_max_wait is not None:
            children['restart-max-wait'] = yang.gdata.Leaf('uint16', _restart_max_wait)
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_system__system__protocols__bgp:
        if n != None:
            return srl_nokia_system__system__protocols__bgp(restart_max_wait=n.get_opt_int("restart-max-wait"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_system__system__protocols__bgp:
        if n != None:
            return srl_nokia_system__system__protocols__bgp(restart_max_wait=yang.gdata.from_xml_opt_int(n, "restart-max-wait"))
        return None



class srl_nokia_system__system__protocols(yang.adata.MNode):
    bgp: ?srl_nokia_system__system__protocols__bgp

    mut def __init__(self, bgp: ?srl_nokia_system__system__protocols__bgp=None):
        self._ns = "urn:nokia.com:srlinux:general:system-protocols"
        self.bgp = bgp
        self_bgp = self.bgp
        if self_bgp is not None:
            self_bgp._parent = self

    mut def create_bgp(self):
        res = srl_nokia_system__system__protocols__bgp()
        self.bgp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system-protocols')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__protocols:
        if n != None:
            return srl_nokia_system__system__protocols(bgp=srl_nokia_system__system__protocols__bgp.from_gdata(n.get_opt_container("bgp")))
        return srl_nokia_system__system__protocols()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__protocols:
        if n != None:
            return srl_nokia_system__system__protocols(bgp=srl_nokia_system__system__protocols__bgp.from_xml(yang.gdata.get_xml_opt_child(n, "bgp", "urn:nokia.com:srlinux:bgp:bgp")))
        return srl_nokia_system__system__protocols()



mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__shared(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__start_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__end_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__allocated_labels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__free_labels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__user__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__user__protocol(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__static__user__owner(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

class srl_nokia_system__system__mpls__label_ranges__static__user_entry(yang.adata.MNode):
    index: int
    protocol_: ?str
    owner: ?str

    mut def __init__(self, index: int, protocol_: ?str, owner: ?str):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self.index = index
        self.protocol_ = protocol_
        self.owner = owner

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _protocol_ = self.protocol_
        _owner = self.owner
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint8', _index)
        if _protocol_ is not None:
            children['protocol'] = yang.gdata.Leaf('identityref', _protocol_)
        if _owner is not None:
            children['owner'] = yang.gdata.Leaf('identityref', _owner)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_system__system__mpls__label_ranges__static__user_entry:
        return srl_nokia_system__system__mpls__label_ranges__static__user_entry(index=n.get_int("index"), protocol_=n.get_opt_str("protocol"), owner=n.get_opt_str("owner"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_system__system__mpls__label_ranges__static__user_entry:
        return srl_nokia_system__system__mpls__label_ranges__static__user_entry(index=yang.gdata.from_xml_int(n, "index"), protocol_=yang.gdata.from_xml_opt_str(n, "protocol"), owner=yang.gdata.from_xml_opt_str(n, "owner"))

class srl_nokia_system__system__mpls__label_ranges__static__user(yang.adata.MNode):
    elements: list[srl_nokia_system__system__mpls__label_ranges__static__user_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self._name = 'user'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_system__system__mpls__label_ranges__static__user_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_system__system__mpls__label_ranges__static__user_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_system__system__mpls__label_ranges__static__user_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_system__system__mpls__label_ranges__static__user_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_system__system__mpls__label_ranges__static__user_entry.from_xml(node))
        return res



class srl_nokia_system__system__mpls__label_ranges__static_entry(yang.adata.MNode):
    name: str
    shared: bool
    start_label: int
    end_label: int
    allocated_labels: ?int
    free_labels: ?int
    status: ?str
    user: srl_nokia_system__system__mpls__label_ranges__static__user

    mut def __init__(self, name: str, start_label: int, end_label: int, shared: ?bool=None, allocated_labels: ?int, free_labels: ?int, status: ?str, user: list[srl_nokia_system__system__mpls__label_ranges__static__user_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self.name = name
        if shared != None:
            self.shared = shared
        else:
            self.shared = True
        self.start_label = start_label
        self.end_label = end_label
        self.allocated_labels = allocated_labels
        self.free_labels = free_labels
        self.status = status
        self.user = srl_nokia_system__system__mpls__label_ranges__static__user(elements=user)
        self.user._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _shared = self.shared
        _start_label = self.start_label
        _end_label = self.end_label
        _allocated_labels = self.allocated_labels
        _free_labels = self.free_labels
        _status = self.status
        _user = self.user
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _shared is not None:
            children['shared'] = yang.gdata.Leaf('boolean', _shared)
        if _start_label is not None:
            children['start-label'] = yang.gdata.Leaf('uint32', _start_label)
        if _end_label is not None:
            children['end-label'] = yang.gdata.Leaf('uint32', _end_label)
        if _allocated_labels is not None:
            children['allocated-labels'] = yang.gdata.Leaf('uint32', _allocated_labels)
        if _free_labels is not None:
            children['free-labels'] = yang.gdata.Leaf('uint32', _free_labels)
        if _status is not None:
            children['status'] = yang.gdata.Leaf('enumeration', _status)
        if _user is not None:
            children['user'] = _user.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_system__system__mpls__label_ranges__static_entry:
        return srl_nokia_system__system__mpls__label_ranges__static_entry(name=n.get_str("name"), shared=n.get_opt_bool("shared"), start_label=n.get_int("start-label"), end_label=n.get_int("end-label"), allocated_labels=n.get_opt_int("allocated-labels"), free_labels=n.get_opt_int("free-labels"), status=n.get_opt_str("status"), user=srl_nokia_system__system__mpls__label_ranges__static__user.from_gdata(n.get_opt_list("user")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_system__system__mpls__label_ranges__static_entry:
        return srl_nokia_system__system__mpls__label_ranges__static_entry(name=yang.gdata.from_xml_str(n, "name"), shared=yang.gdata.from_xml_opt_bool(n, "shared"), start_label=yang.gdata.from_xml_int(n, "start-label"), end_label=yang.gdata.from_xml_int(n, "end-label"), allocated_labels=yang.gdata.from_xml_opt_int(n, "allocated-labels"), free_labels=yang.gdata.from_xml_opt_int(n, "free-labels"), status=yang.gdata.from_xml_opt_str(n, "status"), user=srl_nokia_system__system__mpls__label_ranges__static__user.from_xml(yang.gdata.get_xml_children(n, "user")))

class srl_nokia_system__system__mpls__label_ranges__static(yang.adata.MNode):
    elements: list[srl_nokia_system__system__mpls__label_ranges__static_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self._name = 'static'
        self.elements = elements

    mut def create(self, name, start_label, end_label):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_system__system__mpls__label_ranges__static_entry(name, start_label, end_label)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_system__system__mpls__label_ranges__static_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_system__system__mpls__label_ranges__static_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_system__system__mpls__label_ranges__static_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_system__system__mpls__label_ranges__static_entry.from_xml(node))
        return res



mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__start_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__end_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__allocated_labels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__free_labels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__status(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__user__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__user__protocol(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

mut def from_json_srl_nokia_system__system__mpls__label_ranges__dynamic__user__owner(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("identityref", val)

class srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry(yang.adata.MNode):
    index: int
    protocol_: ?str
    owner: ?str

    mut def __init__(self, index: int, protocol_: ?str, owner: ?str):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self.index = index
        self.protocol_ = protocol_
        self.owner = owner

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _protocol_ = self.protocol_
        _owner = self.owner
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint8', _index)
        if _protocol_ is not None:
            children['protocol'] = yang.gdata.Leaf('identityref', _protocol_)
        if _owner is not None:
            children['owner'] = yang.gdata.Leaf('identityref', _owner)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry:
        return srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry(index=n.get_int("index"), protocol_=n.get_opt_str("protocol"), owner=n.get_opt_str("owner"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry:
        return srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry(index=yang.gdata.from_xml_int(n, "index"), protocol_=yang.gdata.from_xml_opt_str(n, "protocol"), owner=yang.gdata.from_xml_opt_str(n, "owner"))

class srl_nokia_system__system__mpls__label_ranges__dynamic__user(yang.adata.MNode):
    elements: list[srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self._name = 'user'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry.from_xml(node))
        return res



class srl_nokia_system__system__mpls__label_ranges__dynamic_entry(yang.adata.MNode):
    name: str
    start_label: int
    end_label: int
    allocated_labels: ?int
    free_labels: ?int
    status: ?str
    user: srl_nokia_system__system__mpls__label_ranges__dynamic__user

    mut def __init__(self, name: str, start_label: int, end_label: int, allocated_labels: ?int, free_labels: ?int, status: ?str, user: list[srl_nokia_system__system__mpls__label_ranges__dynamic__user_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self.name = name
        self.start_label = start_label
        self.end_label = end_label
        self.allocated_labels = allocated_labels
        self.free_labels = free_labels
        self.status = status
        self.user = srl_nokia_system__system__mpls__label_ranges__dynamic__user(elements=user)
        self.user._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _start_label = self.start_label
        _end_label = self.end_label
        _allocated_labels = self.allocated_labels
        _free_labels = self.free_labels
        _status = self.status
        _user = self.user
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _start_label is not None:
            children['start-label'] = yang.gdata.Leaf('uint32', _start_label)
        if _end_label is not None:
            children['end-label'] = yang.gdata.Leaf('uint32', _end_label)
        if _allocated_labels is not None:
            children['allocated-labels'] = yang.gdata.Leaf('uint32', _allocated_labels)
        if _free_labels is not None:
            children['free-labels'] = yang.gdata.Leaf('uint32', _free_labels)
        if _status is not None:
            children['status'] = yang.gdata.Leaf('enumeration', _status)
        if _user is not None:
            children['user'] = _user.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_system__system__mpls__label_ranges__dynamic_entry:
        return srl_nokia_system__system__mpls__label_ranges__dynamic_entry(name=n.get_str("name"), start_label=n.get_int("start-label"), end_label=n.get_int("end-label"), allocated_labels=n.get_opt_int("allocated-labels"), free_labels=n.get_opt_int("free-labels"), status=n.get_opt_str("status"), user=srl_nokia_system__system__mpls__label_ranges__dynamic__user.from_gdata(n.get_opt_list("user")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_system__system__mpls__label_ranges__dynamic_entry:
        return srl_nokia_system__system__mpls__label_ranges__dynamic_entry(name=yang.gdata.from_xml_str(n, "name"), start_label=yang.gdata.from_xml_int(n, "start-label"), end_label=yang.gdata.from_xml_int(n, "end-label"), allocated_labels=yang.gdata.from_xml_opt_int(n, "allocated-labels"), free_labels=yang.gdata.from_xml_opt_int(n, "free-labels"), status=yang.gdata.from_xml_opt_str(n, "status"), user=srl_nokia_system__system__mpls__label_ranges__dynamic__user.from_xml(yang.gdata.get_xml_children(n, "user")))

class srl_nokia_system__system__mpls__label_ranges__dynamic(yang.adata.MNode):
    elements: list[srl_nokia_system__system__mpls__label_ranges__dynamic_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self._name = 'dynamic'
        self.elements = elements

    mut def create(self, name, start_label, end_label):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_system__system__mpls__label_ranges__dynamic_entry(name, start_label, end_label)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_system__system__mpls__label_ranges__dynamic_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_system__system__mpls__label_ranges__dynamic_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_system__system__mpls__label_ranges__dynamic_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_system__system__mpls__label_ranges__dynamic_entry.from_xml(node))
        return res



class srl_nokia_system__system__mpls__label_ranges(yang.adata.MNode):
    static: srl_nokia_system__system__mpls__label_ranges__static
    dynamic: srl_nokia_system__system__mpls__label_ranges__dynamic

    mut def __init__(self, static: list[srl_nokia_system__system__mpls__label_ranges__static_entry]=[], dynamic: list[srl_nokia_system__system__mpls__label_ranges__dynamic_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        self.static = srl_nokia_system__system__mpls__label_ranges__static(elements=static)
        self.static._parent = self
        self.dynamic = srl_nokia_system__system__mpls__label_ranges__dynamic(elements=dynamic)
        self.dynamic._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _static = self.static
        _dynamic = self.dynamic
        if _static is not None:
            children['static'] = _static.to_gdata()
        if _dynamic is not None:
            children['dynamic'] = _dynamic.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__mpls__label_ranges:
        if n != None:
            return srl_nokia_system__system__mpls__label_ranges(static=srl_nokia_system__system__mpls__label_ranges__static.from_gdata(n.get_opt_list("static")), dynamic=srl_nokia_system__system__mpls__label_ranges__dynamic.from_gdata(n.get_opt_list("dynamic")))
        return srl_nokia_system__system__mpls__label_ranges()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__mpls__label_ranges:
        if n != None:
            return srl_nokia_system__system__mpls__label_ranges(static=srl_nokia_system__system__mpls__label_ranges__static.from_xml(yang.gdata.get_xml_children(n, "static")), dynamic=srl_nokia_system__system__mpls__label_ranges__dynamic.from_xml(yang.gdata.get_xml_children(n, "dynamic")))
        return srl_nokia_system__system__mpls__label_ranges()



class srl_nokia_system__system__mpls__services(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__mpls__services:
        if n != None:
            return srl_nokia_system__system__mpls__services()
        return srl_nokia_system__system__mpls__services()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__mpls__services:
        if n != None:
            return srl_nokia_system__system__mpls__services()
        return srl_nokia_system__system__mpls__services()



class srl_nokia_system__system__mpls(yang.adata.MNode):
    label_ranges: srl_nokia_system__system__mpls__label_ranges
    services: srl_nokia_system__system__mpls__services

    mut def __init__(self, label_ranges: ?srl_nokia_system__system__mpls__label_ranges=None, services: ?srl_nokia_system__system__mpls__services=None):
        self._ns = "urn:nokia.com:srlinux:label:mpls-label-management"
        if label_ranges is not None:
            self.label_ranges = label_ranges
        else:
            self.label_ranges = srl_nokia_system__system__mpls__label_ranges()
        self_label_ranges = self.label_ranges
        if self_label_ranges is not None:
            self_label_ranges._parent = self
        if services is not None:
            self.services = services
        else:
            self.services = srl_nokia_system__system__mpls__services()
        self_services = self.services
        if self_services is not None:
            self_services._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _label_ranges = self.label_ranges
        _services = self.services
        if _label_ranges is not None:
            children['label-ranges'] = _label_ranges.to_gdata()
        if _services is not None:
            children['services'] = _services.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:label:mpls-label-management')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__mpls:
        if n != None:
            return srl_nokia_system__system__mpls(label_ranges=srl_nokia_system__system__mpls__label_ranges.from_gdata(n.get_opt_container("label-ranges")), services=srl_nokia_system__system__mpls__services.from_gdata(n.get_opt_container("services")))
        return srl_nokia_system__system__mpls()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__mpls:
        if n != None:
            return srl_nokia_system__system__mpls(label_ranges=srl_nokia_system__system__mpls__label_ranges.from_xml(yang.gdata.get_xml_opt_child(n, "label-ranges")), services=srl_nokia_system__system__mpls__services.from_xml(yang.gdata.get_xml_opt_child(n, "services")))
        return srl_nokia_system__system__mpls()



mut def from_json_srl_nokia_system__system__authentication__keychain__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__tolerance(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint32", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__usable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__expired(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__active_key_for_send(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__key__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint8", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__key__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__key__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__key__macsec__cak(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__key__macsec__key_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__key__macsec__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("enumeration", val)

class srl_nokia_system__system__authentication__keychain__key__macsec(yang.adata.MNode):
    cak: ?str
    key_name: ?str
    admin_state: str

    mut def __init__(self, cak: ?str, key_name: ?str, admin_state: ?str=None):
        self._ns = "urn:nokia.com:srlinux:linux:keychains"
        self.cak = cak
        self.key_name = key_name
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cak = self.cak
        _key_name = self.key_name
        _admin_state = self.admin_state
        if _cak is not None:
            children['cak'] = yang.gdata.Leaf('string', _cak)
        if _key_name is not None:
            children['key-name'] = yang.gdata.Leaf('string', _key_name)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_system__system__authentication__keychain__key__macsec:
        if n != None:
            return srl_nokia_system__system__authentication__keychain__key__macsec(cak=n.get_opt_str("cak"), key_name=n.get_opt_str("key-name"), admin_state=n.get_opt_str("admin-state"))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?srl_nokia_system__system__authentication__keychain__key__macsec:
        if n != None:
            return srl_nokia_system__system__authentication__keychain__key__macsec(cak=yang.gdata.from_xml_opt_str(n, "cak"), key_name=yang.gdata.from_xml_opt_str(n, "key-name"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"))
        return None



mut def from_json_srl_nokia_system__system__authentication__keychain__key__send_lifetime__start_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__key__send_lifetime__send_and_receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("boolean", val)

class srl_nokia_system__system__authentication__keychain__key__send_lifetime(yang.adata.MNode):
    start_time: ?str
    send_and_receive: ?bool

    mut def __init__(self, start_time: ?str, send_and_receive: ?bool):
        self._ns = "urn:nokia.com:srlinux:linux:keychains"
        self.start_time = start_time
        self.send_and_receive = send_and_receive

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _start_time = self.start_time
        _send_and_receive = self.send_and_receive
        if _start_time is not None:
            children['start-time'] = yang.gdata.Leaf('string', _start_time)
        if _send_and_receive is not None:
            children['send-and-receive'] = yang.gdata.Leaf('boolean', _send_and_receive)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__authentication__keychain__key__send_lifetime:
        if n != None:
            return srl_nokia_system__system__authentication__keychain__key__send_lifetime(start_time=n.get_opt_str("start-time"), send_and_receive=n.get_opt_bool("send-and-receive"))
        return srl_nokia_system__system__authentication__keychain__key__send_lifetime()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__authentication__keychain__key__send_lifetime:
        if n != None:
            return srl_nokia_system__system__authentication__keychain__key__send_lifetime(start_time=yang.gdata.from_xml_opt_str(n, "start-time"), send_and_receive=yang.gdata.from_xml_opt_bool(n, "send-and-receive"))
        return srl_nokia_system__system__authentication__keychain__key__send_lifetime()



mut def from_json_srl_nokia_system__system__authentication__keychain__key__receive_lifetime__start_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_srl_nokia_system__system__authentication__keychain__key__receive_lifetime__end_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("union", val)

class srl_nokia_system__system__authentication__keychain__key__receive_lifetime(yang.adata.MNode):
    start_time: ?str
    end_time: ?value

    mut def __init__(self, start_time: ?str, end_time: ?value):
        self._ns = "urn:nokia.com:srlinux:linux:keychains"
        self.start_time = start_time
        self.end_time = end_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _start_time = self.start_time
        _end_time = self.end_time
        if _start_time is not None:
            children['start-time'] = yang.gdata.Leaf('string', _start_time)
        if _end_time is not None:
            children['end-time'] = yang.gdata.Leaf('union', _end_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__authentication__keychain__key__receive_lifetime:
        if n != None:
            return srl_nokia_system__system__authentication__keychain__key__receive_lifetime(start_time=n.get_opt_str("start-time"), end_time=n.get_opt_value("end-time"))
        return srl_nokia_system__system__authentication__keychain__key__receive_lifetime()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__authentication__keychain__key__receive_lifetime:
        if n != None:
            return srl_nokia_system__system__authentication__keychain__key__receive_lifetime(start_time=yang.gdata.from_xml_opt_str(n, "start-time"), end_time=yang.gdata.from_xml_opt_value(n, "end-time"))
        return srl_nokia_system__system__authentication__keychain__key__receive_lifetime()



class srl_nokia_system__system__authentication__keychain__key_entry(yang.adata.MNode):
    index: int
    algorithm: ?str
    authentication_key: ?str
    macsec: ?srl_nokia_system__system__authentication__keychain__key__macsec
    send_lifetime: srl_nokia_system__system__authentication__keychain__key__send_lifetime
    receive_lifetime: srl_nokia_system__system__authentication__keychain__key__receive_lifetime

    mut def __init__(self, index: int, algorithm: ?str, authentication_key: ?str, macsec: ?srl_nokia_system__system__authentication__keychain__key__macsec=None, send_lifetime: ?srl_nokia_system__system__authentication__keychain__key__send_lifetime=None, receive_lifetime: ?srl_nokia_system__system__authentication__keychain__key__receive_lifetime=None):
        self._ns = "urn:nokia.com:srlinux:linux:keychains"
        self.index = index
        self.algorithm = algorithm
        self.authentication_key = authentication_key
        self.macsec = macsec
        self_macsec = self.macsec
        if self_macsec is not None:
            self_macsec._parent = self
        if send_lifetime is not None:
            self.send_lifetime = send_lifetime
        else:
            self.send_lifetime = srl_nokia_system__system__authentication__keychain__key__send_lifetime()
        self_send_lifetime = self.send_lifetime
        if self_send_lifetime is not None:
            self_send_lifetime._parent = self
        if receive_lifetime is not None:
            self.receive_lifetime = receive_lifetime
        else:
            self.receive_lifetime = srl_nokia_system__system__authentication__keychain__key__receive_lifetime()
        self_receive_lifetime = self.receive_lifetime
        if self_receive_lifetime is not None:
            self_receive_lifetime._parent = self

    mut def create_macsec(self):
        res = srl_nokia_system__system__authentication__keychain__key__macsec()
        self.macsec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        _algorithm = self.algorithm
        _authentication_key = self.authentication_key
        _macsec = self.macsec
        _send_lifetime = self.send_lifetime
        _receive_lifetime = self.receive_lifetime
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint8', _index)
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('enumeration', _algorithm)
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        if _macsec is not None:
            children['macsec'] = _macsec.to_gdata()
        if _send_lifetime is not None:
            children['send-lifetime'] = _send_lifetime.to_gdata()
        if _receive_lifetime is not None:
            children['receive-lifetime'] = _receive_lifetime.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.index)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_system__system__authentication__keychain__key_entry:
        return srl_nokia_system__system__authentication__keychain__key_entry(index=n.get_int("index"), algorithm=n.get_opt_str("algorithm"), authentication_key=n.get_opt_str("authentication-key"), macsec=srl_nokia_system__system__authentication__keychain__key__macsec.from_gdata(n.get_opt_container("macsec")), send_lifetime=srl_nokia_system__system__authentication__keychain__key__send_lifetime.from_gdata(n.get_opt_container("send-lifetime")), receive_lifetime=srl_nokia_system__system__authentication__keychain__key__receive_lifetime.from_gdata(n.get_opt_container("receive-lifetime")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_system__system__authentication__keychain__key_entry:
        return srl_nokia_system__system__authentication__keychain__key_entry(index=yang.gdata.from_xml_int(n, "index"), algorithm=yang.gdata.from_xml_opt_str(n, "algorithm"), authentication_key=yang.gdata.from_xml_opt_str(n, "authentication-key"), macsec=srl_nokia_system__system__authentication__keychain__key__macsec.from_xml(yang.gdata.get_xml_opt_child(n, "macsec")), send_lifetime=srl_nokia_system__system__authentication__keychain__key__send_lifetime.from_xml(yang.gdata.get_xml_opt_child(n, "send-lifetime")), receive_lifetime=srl_nokia_system__system__authentication__keychain__key__receive_lifetime.from_xml(yang.gdata.get_xml_opt_child(n, "receive-lifetime")))

class srl_nokia_system__system__authentication__keychain__key(yang.adata.MNode):
    elements: list[srl_nokia_system__system__authentication__keychain__key_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:linux:keychains"
        self._name = 'key'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_system__system__authentication__keychain__key_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_system__system__authentication__keychain__key_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_system__system__authentication__keychain__key_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_system__system__authentication__keychain__key_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_system__system__authentication__keychain__key_entry.from_xml(node))
        return res



class srl_nokia_system__system__authentication__keychain_entry(yang.adata.MNode):
    name: str
    admin_state: str
    description: ?str
    tolerance: int
    type: ?str
    usable: ?bool
    expired: ?bool
    active_key_for_send: ?value
    key: srl_nokia_system__system__authentication__keychain__key

    mut def __init__(self, name: str, admin_state: ?str=None, description: ?str, tolerance: ?int=None, type: ?str, usable: ?bool, expired: ?bool, active_key_for_send: ?value, key: list[srl_nokia_system__system__authentication__keychain__key_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:linux:keychains"
        self.name = name
        if admin_state != None:
            self.admin_state = admin_state
        else:
            self.admin_state = "disable"
        self.description = description
        if tolerance != None:
            self.tolerance = tolerance
        else:
            self.tolerance = 0
        self.type = type
        self.usable = usable
        self.expired = expired
        self.active_key_for_send = active_key_for_send
        self.key = srl_nokia_system__system__authentication__keychain__key(elements=key)
        self.key._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _admin_state = self.admin_state
        _description = self.description
        _tolerance = self.tolerance
        _type = self.type
        _usable = self.usable
        _expired = self.expired
        _active_key_for_send = self.active_key_for_send
        _key = self.key
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        if _tolerance is not None:
            children['tolerance'] = yang.gdata.Leaf('uint32', _tolerance)
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        if _usable is not None:
            children['usable'] = yang.gdata.Leaf('boolean', _usable)
        if _expired is not None:
            children['expired'] = yang.gdata.Leaf('boolean', _expired)
        if _active_key_for_send is not None:
            children['active-key-for-send'] = yang.gdata.Leaf('union', _active_key_for_send)
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_system__system__authentication__keychain_entry:
        return srl_nokia_system__system__authentication__keychain_entry(name=n.get_str("name"), admin_state=n.get_opt_str("admin-state"), description=n.get_opt_str("description"), tolerance=n.get_opt_int("tolerance"), type=n.get_opt_str("type"), usable=n.get_opt_bool("usable"), expired=n.get_opt_bool("expired"), active_key_for_send=n.get_opt_value("active-key-for-send"), key=srl_nokia_system__system__authentication__keychain__key.from_gdata(n.get_opt_list("key")))

    @staticmethod
    mut def from_xml(n: xml.Node) -> srl_nokia_system__system__authentication__keychain_entry:
        return srl_nokia_system__system__authentication__keychain_entry(name=yang.gdata.from_xml_str(n, "name"), admin_state=yang.gdata.from_xml_opt_str(n, "admin-state"), description=yang.gdata.from_xml_opt_str(n, "description"), tolerance=yang.gdata.from_xml_opt_int(n, "tolerance"), type=yang.gdata.from_xml_opt_str(n, "type"), usable=yang.gdata.from_xml_opt_bool(n, "usable"), expired=yang.gdata.from_xml_opt_bool(n, "expired"), active_key_for_send=yang.gdata.from_xml_opt_value(n, "active-key-for-send"), key=srl_nokia_system__system__authentication__keychain__key.from_xml(yang.gdata.get_xml_children(n, "key")))

class srl_nokia_system__system__authentication__keychain(yang.adata.MNode):
    elements: list[srl_nokia_system__system__authentication__keychain_entry]
    mut def __init__(self, elements=[]):
        self._ns = "urn:nokia.com:srlinux:linux:keychains"
        self._name = 'keychain'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_system__system__authentication__keychain_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_system__system__authentication__keychain_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(srl_nokia_system__system__authentication__keychain_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[srl_nokia_system__system__authentication__keychain_entry]:
        res = []
        for node in nodes:
            res.append(srl_nokia_system__system__authentication__keychain_entry.from_xml(node))
        return res



class srl_nokia_system__system__authentication(yang.adata.MNode):
    keychain: srl_nokia_system__system__authentication__keychain

    mut def __init__(self, keychain: list[srl_nokia_system__system__authentication__keychain_entry]=[]):
        self._ns = "urn:nokia.com:srlinux:linux:keychains"
        self.keychain = srl_nokia_system__system__authentication__keychain(elements=keychain)
        self.keychain._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = _keychain.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:linux:keychains')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__authentication:
        if n != None:
            return srl_nokia_system__system__authentication(keychain=srl_nokia_system__system__authentication__keychain.from_gdata(n.get_opt_list("keychain")))
        return srl_nokia_system__system__authentication()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system__authentication:
        if n != None:
            return srl_nokia_system__system__authentication(keychain=srl_nokia_system__system__authentication__keychain.from_xml(yang.gdata.get_xml_children(n, "keychain")))
        return srl_nokia_system__system__authentication()



class srl_nokia_system__system(yang.adata.MNode):
    features: list[str]
    trace_options: list[str]
    management: srl_nokia_system__system__management
    control_plane_traffic: srl_nokia_system__system__control_plane_traffic
    protocols: srl_nokia_system__system__protocols
    mpls: srl_nokia_system__system__mpls
    authentication: srl_nokia_system__system__authentication

    mut def __init__(self, features: ?list[str]=None, trace_options: ?list[str]=None, management: ?srl_nokia_system__system__management=None, control_plane_traffic: ?srl_nokia_system__system__control_plane_traffic=None, protocols: ?srl_nokia_system__system__protocols=None, mpls: ?srl_nokia_system__system__mpls=None, authentication: ?srl_nokia_system__system__authentication=None):
        self._ns = "urn:nokia.com:srlinux:general:system"
        if features is not None:
            self.features = features
        else:
            self.features = []
        if trace_options is not None:
            self.trace_options = trace_options
        else:
            self.trace_options = []
        if management is not None:
            self.management = management
        else:
            self.management = srl_nokia_system__system__management()
        self_management = self.management
        if self_management is not None:
            self_management._parent = self
        if control_plane_traffic is not None:
            self.control_plane_traffic = control_plane_traffic
        else:
            self.control_plane_traffic = srl_nokia_system__system__control_plane_traffic()
        self_control_plane_traffic = self.control_plane_traffic
        if self_control_plane_traffic is not None:
            self_control_plane_traffic._parent = self
        if protocols is not None:
            self.protocols = protocols
        else:
            self.protocols = srl_nokia_system__system__protocols()
        self_protocols = self.protocols
        if self_protocols is not None:
            self_protocols._parent = self
        if mpls is not None:
            self.mpls = mpls
        else:
            self.mpls = srl_nokia_system__system__mpls()
        self_mpls = self.mpls
        if self_mpls is not None:
            self_mpls._parent = self
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = srl_nokia_system__system__authentication()
        self_authentication = self.authentication
        if self_authentication is not None:
            self_authentication._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _management = self.management
        _control_plane_traffic = self.control_plane_traffic
        _protocols = self.protocols
        _mpls = self.mpls
        _authentication = self.authentication
        children['features'] = yang.gdata.LeafList(self.features)
        children['trace-options'] = yang.gdata.LeafList(self.trace_options)
        if _management is not None:
            children['management'] = _management.to_gdata()
        if _control_plane_traffic is not None:
            children['control-plane-traffic'] = _control_plane_traffic.to_gdata()
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system:
        if n != None:
            return srl_nokia_system__system(features=n.get_opt_strs("features"), trace_options=n.get_opt_strs("trace-options"), management=srl_nokia_system__system__management.from_gdata(n.get_opt_container("management")), control_plane_traffic=srl_nokia_system__system__control_plane_traffic.from_gdata(n.get_opt_container("control-plane-traffic")), protocols=srl_nokia_system__system__protocols.from_gdata(n.get_opt_container("protocols")), mpls=srl_nokia_system__system__mpls.from_gdata(n.get_opt_container("mpls")), authentication=srl_nokia_system__system__authentication.from_gdata(n.get_opt_container("authentication")))
        return srl_nokia_system__system()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> srl_nokia_system__system:
        if n != None:
            return srl_nokia_system__system(features=yang.gdata.from_xml_opt_strs(n, "features"), trace_options=yang.gdata.from_xml_opt_strs(n, "trace-options"), management=srl_nokia_system__system__management.from_xml(yang.gdata.get_xml_opt_child(n, "management")), control_plane_traffic=srl_nokia_system__system__control_plane_traffic.from_xml(yang.gdata.get_xml_opt_child(n, "control-plane-traffic")), protocols=srl_nokia_system__system__protocols.from_xml(yang.gdata.get_xml_opt_child(n, "protocols", "urn:nokia.com:srlinux:general:system-protocols")), mpls=srl_nokia_system__system__mpls.from_xml(yang.gdata.get_xml_opt_child(n, "mpls", "urn:nokia.com:srlinux:label:mpls-label-management")), authentication=srl_nokia_system__system__authentication.from_xml(yang.gdata.get_xml_opt_child(n, "authentication", "urn:nokia.com:srlinux:linux:keychains")))
        return srl_nokia_system__system()



class root(yang.adata.MNode):
    tunnel: srl_nokia_tunnel__tunnel
    platform: srl_nokia_platform__platform
    interface: srl_nokia_interfaces__interface
    routing_policy: srl_nokia_routing_policy__routing_policy
    network_instance: srl_nokia_network_instance__network_instance
    system: srl_nokia_system__system

    mut def __init__(self, tunnel: ?srl_nokia_tunnel__tunnel=None, platform: ?srl_nokia_platform__platform=None, interface: list[srl_nokia_interfaces__interface_entry]=[], routing_policy: ?srl_nokia_routing_policy__routing_policy=None, network_instance: list[srl_nokia_network_instance__network_instance_entry]=[], system: ?srl_nokia_system__system=None):
        self._ns = ""
        if tunnel is not None:
            self.tunnel = tunnel
        else:
            self.tunnel = srl_nokia_tunnel__tunnel()
        self_tunnel = self.tunnel
        if self_tunnel is not None:
            self_tunnel._parent = self
        if platform is not None:
            self.platform = platform
        else:
            self.platform = srl_nokia_platform__platform()
        self_platform = self.platform
        if self_platform is not None:
            self_platform._parent = self
        self.interface = srl_nokia_interfaces__interface(elements=interface)
        self.interface._parent = self
        if routing_policy is not None:
            self.routing_policy = routing_policy
        else:
            self.routing_policy = srl_nokia_routing_policy__routing_policy()
        self_routing_policy = self.routing_policy
        if self_routing_policy is not None:
            self_routing_policy._parent = self
        self.network_instance = srl_nokia_network_instance__network_instance(elements=network_instance)
        self.network_instance._parent = self
        if system is not None:
            self.system = system
        else:
            self.system = srl_nokia_system__system()
        self_system = self.system
        if self_system is not None:
            self_system._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel = self.tunnel
        _platform = self.platform
        _interface = self.interface
        _routing_policy = self.routing_policy
        _network_instance = self.network_instance
        _system = self.system
        if _tunnel is not None:
            children['tunnel'] = _tunnel.to_gdata()
        if _platform is not None:
            children['platform'] = _platform.to_gdata()
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        if _routing_policy is not None:
            children['routing-policy'] = _routing_policy.to_gdata()
        if _network_instance is not None:
            children['network-instance'] = _network_instance.to_gdata()
        if _system is not None:
            children['system'] = _system.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(tunnel=srl_nokia_tunnel__tunnel.from_gdata(n.get_opt_container("tunnel")), platform=srl_nokia_platform__platform.from_gdata(n.get_opt_container("platform")), interface=srl_nokia_interfaces__interface.from_gdata(n.get_opt_list("interface")), routing_policy=srl_nokia_routing_policy__routing_policy.from_gdata(n.get_opt_container("routing-policy")), network_instance=srl_nokia_network_instance__network_instance.from_gdata(n.get_opt_list("network-instance")), system=srl_nokia_system__system.from_gdata(n.get_opt_container("system")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(tunnel=srl_nokia_tunnel__tunnel.from_xml(yang.gdata.get_xml_opt_child(n, "tunnel", "urn:nokia.com:srlinux:vxlan:tunnel")), platform=srl_nokia_platform__platform.from_xml(yang.gdata.get_xml_opt_child(n, "platform", "urn:nokia.com:srlinux:chassis:platform")), interface=srl_nokia_interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface", "urn:nokia.com:srlinux:chassis:interfaces")), routing_policy=srl_nokia_routing_policy__routing_policy.from_xml(yang.gdata.get_xml_opt_child(n, "routing-policy", "urn:nokia.com:srlinux:plcy:routing-policy")), network_instance=srl_nokia_network_instance__network_instance.from_xml(yang.gdata.get_xml_children(n, "network-instance", "urn:nokia.com:srlinux:net-inst:network-instance")), system=srl_nokia_system__system.from_xml(yang.gdata.get_xml_opt_child(n, "system", "urn:nokia.com:srlinux:general:system")))
        return root()


