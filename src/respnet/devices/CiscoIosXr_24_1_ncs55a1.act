import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    mut def __init__(self, topology_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.topology_name = topology_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology_name = self.topology_name
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.topology_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name=n.get_str('topology-name'))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'topology'
        self.elements = elements

    mut def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_topology_name = yang.gdata.from_xml_str(node, 'topology-name')
    yang.gdata.maybe_add(children, 'topology-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology__topology_name, child_topology_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_topology_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_element(e))
    return yang.gdata.List(keys=['topology-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology

    mut def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology(elements=topology)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology = self.topology
        if _topology is not None:
            children['topology'] = _topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology.from_gdata(n.get_opt_list('topology')))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_topology = yang.gdata.from_xml_opt_list(node, 'topology')
    yang.gdata.maybe_add(children, 'topology', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies__topology, child_topology)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies

    mut def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.topologies = topologies if topologies is not None else Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topologies = self.topologies
        if _topologies is not None:
            children['topologies'] = _topologies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies.from_gdata(n.get_opt_container('topologies')))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_topologies = yang.gdata.from_xml_opt_cnt(node, 'topologies')
    yang.gdata.maybe_add(children, 'topologies', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast__topologies, child_topologies)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.unicast = unicast
        self.multicast = multicast if multicast is not None else Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast()

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        _multicast = self.multicast
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast.from_gdata(n.get_opt_container('unicast')), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast.from_gdata(n.get_opt_container('multicast')))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_unicast = yang.gdata.from_xml_opt_cnt(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__unicast, child_unicast)
    child_multicast = yang.gdata.from_xml_opt_cnt(node, 'multicast')
    yang.gdata.maybe_add(children, 'multicast', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4__multicast, child_multicast)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology__topology_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(yang.adata.MNode):
    topology_name: str

    mut def __init__(self, topology_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.topology_name = topology_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology_name = self.topology_name
        if _topology_name is not None:
            children['topology-name'] = yang.gdata.Leaf('string', _topology_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.topology_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry:
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name=n.get_str('topology-name'))

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'topology'
        self.elements = elements

    mut def create(self, topology_name):
        for e in self.elements:
            match = True
            if e.topology_name != topology_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry(topology_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['topology-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_topology_name = yang.gdata.from_xml_str(node, 'topology-name')
    yang.gdata.maybe_add(children, 'topology-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology__topology_name, child_topology_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_topology_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_element(e))
    return yang.gdata.List(keys=['topology-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(yang.adata.MNode):
    topology: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology

    mut def __init__(self, topology: list[Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.topology = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology(elements=topology)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topology = self.topology
        if _topology is not None:
            children['topology'] = _topology.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(topology=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology.from_gdata(n.get_opt_list('topology')))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_topology = yang.gdata.from_xml_opt_list(node, 'topology')
    yang.gdata.maybe_add(children, 'topology', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies__topology, child_topology)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(yang.adata.MNode):
    topologies: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies

    mut def __init__(self, topologies: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.topologies = topologies if topologies is not None else Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _topologies = self.topologies
        if _topologies is not None:
            children['topologies'] = _topologies.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(topologies=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies.from_gdata(n.get_opt_container('topologies')))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_topologies = yang.gdata.from_xml_opt_cnt(node, 'topologies')
    yang.gdata.maybe_add(children, 'topologies', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast__topologies, child_topologies)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast
    multicast: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.unicast = unicast
        self.multicast = multicast if multicast is not None else Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast()

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        _multicast = self.multicast
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast.from_gdata(n.get_opt_container('unicast')), multicast=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast.from_gdata(n.get_opt_container('multicast')))
        return Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_unicast = yang.gdata.from_xml_opt_cnt(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__unicast, child_unicast)
    child_multicast = yang.gdata.from_xml_opt_cnt(node, 'multicast')
    yang.gdata.maybe_add(children, 'multicast', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6__multicast, child_multicast)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.ipv4 = ipv4 if ipv4 is not None else Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4()
        self.ipv6 = ipv6 if ipv6 is not None else Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4.from_gdata(n.get_opt_container('ipv4')), ipv6=Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6.from_gdata(n.get_opt_container('ipv6')))
        return Cisco_IOS_XR_um_vrf_cfg__address_family()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'ipv4')
    yang.gdata.maybe_add(children, 'ipv4', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv4, child_ipv4)
    child_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'ipv6')
    yang.gdata.maybe_add(children, 'ipv6', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family__ipv6, child_ipv6)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _stitching = self.stitching
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int('as-number'), index=n.get_int('index'), stitching=n.get_bool('stitching'))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_as_number = yang.gdata.from_xml_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number, child_as_number)
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index, child_index)
    child_stitching = yang.gdata.from_xml_bool(node, 'stitching')
    yang.gdata.maybe_add(children, 'stitching', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching, child_stitching)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_as_number), yang.gdata.yang_str(child_index), yang.gdata.yang_str(child_stitching)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_element(e))
    return yang.gdata.List(keys=['as-number', 'index', 'stitching'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list('two-byte-as-rt')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as_rt = yang.gdata.from_xml_opt_list(node, 'two-byte-as-rt')
    yang.gdata.maybe_add(children, 'two-byte-as-rt', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt, child_two_byte_as_rt)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as_rts = two_byte_as_rts if two_byte_as_rts is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container('two-byte-as-rts')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as_rts = yang.gdata.from_xml_opt_cnt(node, 'two-byte-as-rts')
    yang.gdata.maybe_add(children, 'two-byte-as-rts', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target__two_byte_as_rts, child_two_byte_as_rts)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.route_target = route_target if route_target is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target.from_gdata(n.get_opt_container('route-target')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import__route_target, child_route_target)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _stitching = self.stitching
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int('as-number'), index=n.get_int('index'), stitching=n.get_bool('stitching'))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_as_number = yang.gdata.from_xml_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number, child_as_number)
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index, child_index)
    child_stitching = yang.gdata.from_xml_bool(node, 'stitching')
    yang.gdata.maybe_add(children, 'stitching', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching, child_stitching)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_as_number), yang.gdata.yang_str(child_index), yang.gdata.yang_str(child_stitching)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_element(e))
    return yang.gdata.List(keys=['as-number', 'index', 'stitching'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list('two-byte-as-rt')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as_rt = yang.gdata.from_xml_opt_list(node, 'two-byte-as-rt')
    yang.gdata.maybe_add(children, 'two-byte-as-rt', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt, child_two_byte_as_rt)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as_rts = two_byte_as_rts if two_byte_as_rts is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container('two-byte-as-rts')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as_rts = yang.gdata.from_xml_opt_cnt(node, 'two-byte-as-rts')
    yang.gdata.maybe_add(children, 'two-byte-as-rts', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target__two_byte_as_rts, child_two_byte_as_rts)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.route_target = route_target if route_target is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target.from_gdata(n.get_opt_container('route-target')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export__route_target, child_route_target)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.import_ = import_ if import_ is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import()
        self.export = export if export is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        _export = self.export
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import.from_gdata(n.get_opt_container('import')), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export.from_gdata(n.get_opt_container('export')))
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_import_ = yang.gdata.from_xml_opt_cnt(node, 'import', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')
    yang.gdata.maybe_add(children, 'import', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__import, child_import_)
    child_export = yang.gdata.from_xml_opt_cnt(node, 'export', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')
    yang.gdata.maybe_add(children, 'export', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast__export, child_export)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.unicast = unicast
        self.multicast = multicast
        self.flowspec = flowspec

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast()
        self.unicast = res
        return res

    mut def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast()
        self.multicast = res
        return res

    mut def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec()
        self.flowspec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        _multicast = self.multicast
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        _flowspec = self.flowspec
        if _flowspec is not None:
            children['flowspec'] = _flowspec.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast.from_gdata(n.get_opt_container('unicast')), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast.from_gdata(n.get_opt_container('multicast')), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec.from_gdata(n.get_opt_container('flowspec')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_unicast = yang.gdata.from_xml_opt_cnt(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__unicast, child_unicast)
    child_multicast = yang.gdata.from_xml_opt_cnt(node, 'multicast')
    yang.gdata.maybe_add(children, 'multicast', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__multicast, child_multicast)
    child_flowspec = yang.gdata.from_xml_opt_cnt(node, 'flowspec')
    yang.gdata.maybe_add(children, 'flowspec', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4__flowspec, child_flowspec)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _stitching = self.stitching
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int('as-number'), index=n.get_int('index'), stitching=n.get_bool('stitching'))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_as_number = yang.gdata.from_xml_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__as_number, child_as_number)
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__index, child_index)
    child_stitching = yang.gdata.from_xml_bool(node, 'stitching')
    yang.gdata.maybe_add(children, 'stitching', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt__stitching, child_stitching)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_as_number), yang.gdata.yang_str(child_index), yang.gdata.yang_str(child_stitching)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_element(e))
    return yang.gdata.List(keys=['as-number', 'index', 'stitching'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list('two-byte-as-rt')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as_rt = yang.gdata.from_xml_opt_list(node, 'two-byte-as-rt')
    yang.gdata.maybe_add(children, 'two-byte-as-rt', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts__two_byte_as_rt, child_two_byte_as_rt)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as_rts = two_byte_as_rts if two_byte_as_rts is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts.from_gdata(n.get_opt_container('two-byte-as-rts')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as_rts = yang.gdata.from_xml_opt_cnt(node, 'two-byte-as-rts')
    yang.gdata.maybe_add(children, 'two-byte-as-rts', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target__two_byte_as_rts, child_two_byte_as_rts)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.route_target = route_target if route_target is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target.from_gdata(n.get_opt_container('route-target')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import__route_target, child_route_target)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(yang.adata.MNode):
    as_number: int
    index: int
    stitching: bool

    mut def __init__(self, as_number: int, index: int, stitching: bool):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.index = index
        self.stitching = stitching

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _stitching = self.stitching
        if _stitching is not None:
            children['stitching'] = yang.gdata.Leaf('boolean', _stitching)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.as_number), yang.gdata.yang_str(self.index), yang.gdata.yang_str(self.stitching)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number=n.get_int('as-number'), index=n.get_int('index'), stitching=n.get_bool('stitching'))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'two-byte-as-rt'
        self.elements = elements

    mut def create(self, as_number, index, stitching):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if e.index != index:
                match = False
                continue
            if e.stitching != stitching:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry(as_number, index, stitching)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number', 'index', 'stitching'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_as_number = yang.gdata.from_xml_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__as_number, child_as_number)
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__index, child_index)
    child_stitching = yang.gdata.from_xml_bool(node, 'stitching')
    yang.gdata.maybe_add(children, 'stitching', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt__stitching, child_stitching)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_as_number), yang.gdata.yang_str(child_index), yang.gdata.yang_str(child_stitching)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_element(e))
    return yang.gdata.List(keys=['as-number', 'index', 'stitching'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(yang.adata.MNode):
    two_byte_as_rt: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt

    mut def __init__(self, two_byte_as_rt: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as_rt = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt(elements=two_byte_as_rt)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rt = self.two_byte_as_rt
        if _two_byte_as_rt is not None:
            children['two-byte-as-rt'] = _two_byte_as_rt.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(two_byte_as_rt=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt.from_gdata(n.get_opt_list('two-byte-as-rt')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as_rt = yang.gdata.from_xml_opt_list(node, 'two-byte-as-rt')
    yang.gdata.maybe_add(children, 'two-byte-as-rt', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts__two_byte_as_rt, child_two_byte_as_rt)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(yang.adata.MNode):
    two_byte_as_rts: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts

    mut def __init__(self, two_byte_as_rts: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as_rts = two_byte_as_rts if two_byte_as_rts is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as_rts = self.two_byte_as_rts
        if _two_byte_as_rts is not None:
            children['two-byte-as-rts'] = _two_byte_as_rts.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(two_byte_as_rts=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts.from_gdata(n.get_opt_container('two-byte-as-rts')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as_rts = yang.gdata.from_xml_opt_cnt(node, 'two-byte-as-rts')
    yang.gdata.maybe_add(children, 'two-byte-as-rts', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target__two_byte_as_rts, child_two_byte_as_rts)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(yang.adata.MNode):
    route_target: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target

    mut def __init__(self, route_target: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.route_target = route_target if route_target is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(route_target=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target.from_gdata(n.get_opt_container('route-target')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export__route_target, child_route_target)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(yang.adata.MNode):
    import_: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import
    export: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export

    mut def __init__(self, import_: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import=None, export: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.import_ = import_ if import_ is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import()
        self.export = export if export is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = _import_.to_gdata()
        _export = self.export
        if _export is not None:
            children['export'] = _export.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(import_=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import.from_gdata(n.get_opt_container('import')), export=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export.from_gdata(n.get_opt_container('export')))
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_import_ = yang.gdata.from_xml_opt_cnt(node, 'import', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')
    yang.gdata.maybe_add(children, 'import', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__import, child_import_)
    child_export = yang.gdata.from_xml_opt_cnt(node, 'export', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')
    yang.gdata.maybe_add(children, 'export', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast__export, child_export)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(yang.adata.MNode):
    unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast
    multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast
    flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec

    mut def __init__(self, unicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast=None, multicast: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast=None, flowspec: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.unicast = unicast
        self.multicast = multicast
        self.flowspec = flowspec

    mut def create_unicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast()
        self.unicast = res
        return res

    mut def create_multicast(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast()
        self.multicast = res
        return res

    mut def create_flowspec(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec()
        self.flowspec = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        _multicast = self.multicast
        if _multicast is not None:
            children['multicast'] = _multicast.to_gdata()
        _flowspec = self.flowspec
        if _flowspec is not None:
            children['flowspec'] = _flowspec.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(unicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast.from_gdata(n.get_opt_container('unicast')), multicast=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast.from_gdata(n.get_opt_container('multicast')), flowspec=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec.from_gdata(n.get_opt_container('flowspec')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_unicast = yang.gdata.from_xml_opt_cnt(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__unicast, child_unicast)
    child_multicast = yang.gdata.from_xml_opt_cnt(node, 'multicast')
    yang.gdata.maybe_add(children, 'multicast', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__multicast, child_multicast)
    child_flowspec = yang.gdata.from_xml_opt_cnt(node, 'flowspec')
    yang.gdata.maybe_add(children, 'flowspec', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6__flowspec, child_flowspec)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(yang.adata.MNode):
    ipv4: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4
    ipv6: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4=None, ipv6: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.ipv4 = ipv4 if ipv4 is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4()
        self.ipv6 = ipv6 if ipv6 is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(ipv4=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4.from_gdata(n.get_opt_container('ipv4')), ipv6=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6.from_gdata(n.get_opt_container('ipv6')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'ipv4')
    yang.gdata.maybe_add(children, 'ipv4', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv4, child_ipv4)
    child_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'ipv6')
    yang.gdata.maybe_add(children, 'ipv6', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family__ipv6, child_ipv6)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(yang.adata.MNode):
    big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big

    mut def __init__(self, big: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.big = big

    mut def create_big(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big()
        self.big = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _big = self.big
        if _big is not None:
            children['big'] = _big.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(big=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big.from_gdata(n.get_opt_container('big')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_big = yang.gdata.from_xml_opt_cnt(node, 'big')
    yang.gdata.maybe_add(children, 'big', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode__big, child_big)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(yang.adata.MNode):
    id: ?str

    mut def __init__(self, id: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(id=n.get_opt_str('id'))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_id = yang.gdata.from_xml_opt_str(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn__id, child_id)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.disable = disable

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(disable=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable.from_gdata(n.get_opt_container('disable')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_cnt(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering__disable, child_disable)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__fallback_vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(yang.adata.MNode):
    as_number: ?str
    index: ?int

    mut def __init__(self, as_number: ?str, index: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number=n.get_opt_str('as-number'), index=n.get_opt_int('index'))
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_str(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__as_number, child_as_number)
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as__index, child_index)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(yang.adata.MNode):
    as_number: ?str
    index: ?int

    mut def __init__(self, as_number: ?str, index: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number=n.get_opt_str('as-number'), index=n.get_opt_int('index'))
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_str(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__as_number, child_as_number)
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as__index, child_index)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(yang.adata.MNode):
    ipv4_address: ?str
    index: ?int

    mut def __init__(self, ipv4_address: ?str, index: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.ipv4_address = ipv4_address
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address=n.get_opt_str('ipv4-address'), index=n.get_opt_int('index'))
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_address = yang.gdata.from_xml_opt_str(node, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__ipv4_address, child_ipv4_address)
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address__index, child_index)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(yang.adata.MNode):
    two_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as
    four_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as
    ip_address: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address

    mut def __init__(self, two_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as=None, four_byte_as: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as=None, ip_address: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.two_byte_as = two_byte_as
        self.four_byte_as = four_byte_as
        self.ip_address = ip_address

    mut def create_two_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as(as_number, index)
        self.two_byte_as = res
        return res

    mut def create_four_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as(as_number, index)
        self.four_byte_as = res
        return res

    mut def create_ip_address(self, ipv4_address, index):
        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address(ipv4_address, index)
        self.ip_address = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _two_byte_as = self.two_byte_as
        if _two_byte_as is not None:
            children['two-byte-as'] = _two_byte_as.to_gdata()
        _four_byte_as = self.four_byte_as
        if _four_byte_as is not None:
            children['four-byte-as'] = _four_byte_as.to_gdata()
        _ip_address = self.ip_address
        if _ip_address is not None:
            children['ip-address'] = _ip_address.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(two_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as.from_gdata(n.get_opt_container('two-byte-as')), four_byte_as=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as.from_gdata(n.get_opt_container('four-byte-as')), ip_address=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address.from_gdata(n.get_opt_container('ip-address')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_two_byte_as = yang.gdata.from_xml_opt_cnt(node, 'two-byte-as')
    yang.gdata.maybe_add(children, 'two-byte-as', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__two_byte_as, child_two_byte_as)
    child_four_byte_as = yang.gdata.from_xml_opt_cnt(node, 'four-byte-as')
    yang.gdata.maybe_add(children, 'four-byte-as', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__four_byte_as, child_four_byte_as)
    child_ip_address = yang.gdata.from_xml_opt_cnt(node, 'ip-address')
    yang.gdata.maybe_add(children, 'ip-address', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd__ip_address, child_ip_address)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_family: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family
    mode: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode
    vpn: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn
    description: ?str
    remote_route_filtering: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering
    fallback_vrf: ?str
    rd: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd

    mut def __init__(self, vrf_name: str, address_family: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family=None, mode: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode=None, vpn: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn=None, description: ?str, remote_route_filtering: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering=None, fallback_vrf: ?str, rd: ?Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.vrf_name = vrf_name
        self.address_family = address_family if address_family is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family()
        self.mode = mode if mode is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode()
        self.vpn = vpn if vpn is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn()
        self.description = description
        self.remote_route_filtering = remote_route_filtering if remote_route_filtering is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering()
        self.fallback_vrf = fallback_vrf
        self.rd = rd if rd is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        _mode = self.mode
        if _mode is not None:
            children['mode'] = _mode.to_gdata()
        _vpn = self.vpn
        if _vpn is not None:
            children['vpn'] = _vpn.to_gdata()
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _remote_route_filtering = self.remote_route_filtering
        if _remote_route_filtering is not None:
            children['remote-route-filtering'] = _remote_route_filtering.to_gdata()
        _fallback_vrf = self.fallback_vrf
        if _fallback_vrf is not None:
            children['fallback-vrf'] = yang.gdata.Leaf('string', _fallback_vrf)
        _rd = self.rd
        if _rd is not None:
            children['rd'] = _rd.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.vrf_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name=n.get_str('vrf-name'), address_family=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family.from_gdata(n.get_opt_container('address-family')), mode=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode.from_gdata(n.get_opt_container('mode')), vpn=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn.from_gdata(n.get_opt_container('vpn')), description=n.get_opt_str('description'), remote_route_filtering=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering.from_gdata(n.get_opt_container('remote-route-filtering')), fallback_vrf=n.get_opt_str('fallback-vrf'), rd=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd.from_gdata(n.get_opt_container('rd')))

class Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_vrf_name = yang.gdata.from_xml_str(node, 'vrf-name')
    yang.gdata.maybe_add(children, 'vrf-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vrf_name, child_vrf_name)
    child_address_family = yang.gdata.from_xml_opt_cnt(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__address_family, child_address_family)
    child_mode = yang.gdata.from_xml_opt_cnt(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__mode, child_mode)
    child_vpn = yang.gdata.from_xml_opt_cnt(node, 'vpn')
    yang.gdata.maybe_add(children, 'vpn', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__vpn, child_vpn)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__description, child_description)
    child_remote_route_filtering = yang.gdata.from_xml_opt_cnt(node, 'remote-route-filtering')
    yang.gdata.maybe_add(children, 'remote-route-filtering', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__remote_route_filtering, child_remote_route_filtering)
    child_fallback_vrf = yang.gdata.from_xml_opt_str(node, 'fallback-vrf')
    yang.gdata.maybe_add(children, 'fallback-vrf', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__fallback_vrf, child_fallback_vrf)
    child_rd = yang.gdata.from_xml_opt_cnt(node, 'rd', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')
    yang.gdata.maybe_add(children, 'rd', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf__rd, child_rd)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_vrf_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_element(e))
    return yang.gdata.List(keys=['vrf-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf(elements=vrf)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf.from_gdata(n.get_opt_list('vrf')))
        return Cisco_IOS_XR_um_vrf_cfg__vrfs()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_vrf = yang.gdata.from_xml_opt_list(node, 'vrf')
    yang.gdata.maybe_add(children, 'vrf', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs__vrf, child_vrf)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable

    mut def __init__(self, disable: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.disable = disable

    mut def create_disable(self):
        res = Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable()
        self.disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = _disable.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(disable=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable.from_gdata(n.get_opt_container('disable')))
        return Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_cnt(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download__disable, child_disable)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__srlg_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(yang.adata.MNode):
    srlg_name: str
    value: ?int
    description: ?str

    mut def __init__(self, srlg_name: str, value: ?int, description: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.srlg_name = srlg_name
        self.value = value
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg_name = self.srlg_name
        if _srlg_name is not None:
            children['srlg-name'] = yang.gdata.Leaf('string', _srlg_name)
        _value = self.value
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.srlg_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name=n.get_str('srlg-name'), value=n.get_opt_int('value'), description=n.get_opt_str('description'))

class Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'name'
        self.elements = elements

    mut def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['srlg-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_srlg_name = yang.gdata.from_xml_str(node, 'srlg-name')
    yang.gdata.maybe_add(children, 'srlg-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__srlg_name, child_srlg_name)
    child_value = yang.gdata.from_xml_opt_int(node, 'value')
    yang.gdata.maybe_add(children, 'value', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__value, child_value)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name__description, child_description)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_srlg_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_element(e))
    return yang.gdata.List(keys=['srlg-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__names__name

    mut def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__names__name_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__names__name(elements=name)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__names__name.from_gdata(n.get_opt_list('name')))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__names()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_name = yang.gdata.from_xml_opt_list(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(yang.adata.MNode):
    priority: ?str

    mut def __init__(self, priority: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(priority=n.get_opt_str('priority'))
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_priority = yang.gdata.from_xml_opt_str(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical__priority, child_priority)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: ?int
    priority: ?str

    mut def __init__(self, index_number: int, value: ?int, priority: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        _value = self.value
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.index_number)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number=n.get_int('index-number'), value=n.get_opt_int('value'), priority=n.get_opt_str('priority'))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index_number = yang.gdata.from_xml_int(node, 'index-number')
    yang.gdata.maybe_add(children, 'index-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__index_number, child_index_number)
    child_value = yang.gdata.from_xml_opt_int(node, 'value')
    yang.gdata.maybe_add(children, 'value', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__value, child_value)
    child_priority = yang.gdata.from_xml_opt_str(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index__priority, child_priority)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_index_number)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_element(e))
    return yang.gdata.List(keys=['index-number'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index(elements=index)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index.from_gdata(n.get_opt_list('index')))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_index = yang.gdata.from_xml_opt_list(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes__index, child_index)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name__srlg_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(yang.adata.MNode):
    srlg_name: str

    mut def __init__(self, srlg_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.srlg_name = srlg_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _srlg_name = self.srlg_name
        if _srlg_name is not None:
            children['srlg-name'] = yang.gdata.Leaf('string', _srlg_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.srlg_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name=n.get_str('srlg-name'))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'name'
        self.elements = elements

    mut def create(self, srlg_name):
        for e in self.elements:
            match = True
            if e.srlg_name != srlg_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry(srlg_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['srlg-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_srlg_name = yang.gdata.from_xml_str(node, 'srlg-name')
    yang.gdata.maybe_add(children, 'srlg-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name__srlg_name, child_srlg_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_srlg_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_element(e))
    return yang.gdata.List(keys=['srlg-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(yang.adata.MNode):
    name: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name

    mut def __init__(self, name: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.name = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name(elements=name)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(name=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name.from_gdata(n.get_opt_list('name')))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_name = yang.gdata.from_xml_opt_list(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(yang.adata.MNode):
    index_number: int
    group_name: ?str

    mut def __init__(self, index_number: int, group_name: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.index_number = index_number
        self.group_name = group_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        _group_name = self.group_name
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.index_number)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number=n.get_int('index-number'), group_name=n.get_opt_str('group-name'))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'group'
        self.elements = elements

    mut def create(self, index_number, group_name):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry(index_number, group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index_number = yang.gdata.from_xml_int(node, 'index-number')
    yang.gdata.maybe_add(children, 'index-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__index_number, child_index_number)
    child_group_name = yang.gdata.from_xml_opt_str(node, 'group-name')
    yang.gdata.maybe_add(children, 'group-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group__group_name, child_group_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_index_number)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_element(e))
    return yang.gdata.List(keys=['index-number'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group

    mut def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group(elements=group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group.from_gdata(n.get_opt_list('group')))
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups__group, child_group)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names
    groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups

    mut def __init__(self, interface_name: str, include_optical: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical=None, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes=None, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.interface_name = interface_name
        self.include_optical = include_optical
        self.indexes = indexes if indexes is not None else Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes()
        self.names = names if names is not None else Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names()
        self.groups = groups

    mut def create_include_optical(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical()
        self.include_optical = res
        return res

    mut def create_groups(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups()
        self.groups = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        _include_optical = self.include_optical
        if _include_optical is not None:
            children['include-optical'] = _include_optical.to_gdata()
        _indexes = self.indexes
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        _names = self.names
        if _names is not None:
            children['names'] = _names.to_gdata()
        _groups = self.groups
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.interface_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name=n.get_str('interface-name'), include_optical=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical.from_gdata(n.get_opt_container('include-optical')), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes.from_gdata(n.get_opt_container('indexes')), names=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names.from_gdata(n.get_opt_container('names')), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups.from_gdata(n.get_opt_container('groups')))

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_interface_name = yang.gdata.from_xml_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__interface_name, child_interface_name)
    child_include_optical = yang.gdata.from_xml_opt_cnt(node, 'include-optical')
    yang.gdata.maybe_add(children, 'include-optical', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__include_optical, child_include_optical)
    child_indexes = yang.gdata.from_xml_opt_cnt(node, 'indexes')
    yang.gdata.maybe_add(children, 'indexes', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__indexes, child_indexes)
    child_names = yang.gdata.from_xml_opt_cnt(node, 'names')
    yang.gdata.maybe_add(children, 'names', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__names, child_names)
    child_groups = yang.gdata.from_xml_opt_cnt(node, 'groups')
    yang.gdata.maybe_add(children, 'groups', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface__groups, child_groups)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_interface_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_element(e))
    return yang.gdata.List(keys=['interface-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.interface = Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(interface=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface.from_gdata(n.get_opt_list('interface')))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: ?int
    priority: ?str

    mut def __init__(self, index_number: int, value: ?int, priority: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        _value = self.value
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.index_number)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number=n.get_int('index-number'), value=n.get_opt_int('value'), priority=n.get_opt_str('priority'))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index_number = yang.gdata.from_xml_int(node, 'index-number')
    yang.gdata.maybe_add(children, 'index-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__index_number, child_index_number)
    child_value = yang.gdata.from_xml_opt_int(node, 'value')
    yang.gdata.maybe_add(children, 'value', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__value, child_value)
    child_priority = yang.gdata.from_xml_opt_str(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index__priority, child_priority)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_index_number)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_element(e))
    return yang.gdata.List(keys=['index-number'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index(elements=index)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index.from_gdata(n.get_opt_list('index')))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_index = yang.gdata.from_xml_opt_list(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes__index, child_index)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(yang.adata.MNode):
    group_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes

    mut def __init__(self, group_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.group_name = group_name
        self.indexes = indexes if indexes is not None else Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        _indexes = self.indexes
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.group_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name=n.get_str('group-name'), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes.from_gdata(n.get_opt_container('indexes')))

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_group_name = yang.gdata.from_xml_str(node, 'group-name')
    yang.gdata.maybe_add(children, 'group-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__group_name, child_group_name)
    child_indexes = yang.gdata.from_xml_opt_cnt(node, 'indexes')
    yang.gdata.maybe_add(children, 'indexes', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group__indexes, child_indexes)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_group_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_element(e))
    return yang.gdata.List(keys=['group-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__groups(yang.adata.MNode):
    group: Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group

    mut def __init__(self, group: list[Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.group = Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group(elements=group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__groups(group=Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group.from_gdata(n.get_opt_list('group')))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__groups()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups__group, child_group)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__location_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__index_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(yang.adata.MNode):
    index_number: int
    value: ?int
    priority: ?str

    mut def __init__(self, index_number: int, value: ?int, priority: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.index_number = index_number
        self.value = value
        self.priority = priority

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index_number = self.index_number
        if _index_number is not None:
            children['index-number'] = yang.gdata.Leaf('uint32', _index_number)
        _value = self.value
        if _value is not None:
            children['value'] = yang.gdata.Leaf('uint32', _value)
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('enumeration', _priority)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.index_number)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number=n.get_int('index-number'), value=n.get_opt_int('value'), priority=n.get_opt_str('priority'))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'index'
        self.elements = elements

    mut def create(self, index_number, value, priority):
        for e in self.elements:
            match = True
            if e.index_number != index_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry(index_number, value, priority)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index_number = yang.gdata.from_xml_int(node, 'index-number')
    yang.gdata.maybe_add(children, 'index-number', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__index_number, child_index_number)
    child_value = yang.gdata.from_xml_opt_int(node, 'value')
    yang.gdata.maybe_add(children, 'value', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__value, child_value)
    child_priority = yang.gdata.from_xml_opt_str(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index__priority, child_priority)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_index_number)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_element(e))
    return yang.gdata.List(keys=['index-number'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(yang.adata.MNode):
    index: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index

    mut def __init__(self, index: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.index = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index(elements=index)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(index=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index.from_gdata(n.get_opt_list('index')))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_index = yang.gdata.from_xml_opt_list(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes__index, child_index)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(yang.adata.MNode):
    location_name: str
    indexes: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes

    mut def __init__(self, location_name: str, indexes: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.location_name = location_name
        self.indexes = indexes if indexes is not None else Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _location_name = self.location_name
        if _location_name is not None:
            children['location-name'] = yang.gdata.Leaf('string', _location_name)
        _indexes = self.indexes
        if _indexes is not None:
            children['indexes'] = _indexes.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.location_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry:
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name=n.get_str('location-name'), indexes=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes.from_gdata(n.get_opt_container('indexes')))

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'inherit-location'
        self.elements = elements

    mut def create(self, location_name):
        for e in self.elements:
            match = True
            if e.location_name != location_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry(location_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['location-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_location_name = yang.gdata.from_xml_str(node, 'location-name')
    yang.gdata.maybe_add(children, 'location-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__location_name, child_location_name)
    child_indexes = yang.gdata.from_xml_opt_cnt(node, 'indexes')
    yang.gdata.maybe_add(children, 'indexes', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location__indexes, child_indexes)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_location_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_element(e))
    return yang.gdata.List(keys=['location-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(yang.adata.MNode):
    inherit_location: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location

    mut def __init__(self, inherit_location: list[Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.inherit_location = Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location(elements=inherit_location)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inherit_location = self.inherit_location
        if _inherit_location is not None:
            children['inherit-location'] = _inherit_location.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(inherit_location=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location.from_gdata(n.get_opt_list('inherit-location')))
        return Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_inherit_location = yang.gdata.from_xml_opt_list(node, 'inherit-location')
    yang.gdata.maybe_add(children, 'inherit-location', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations__inherit_location, child_inherit_location)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__srlg(yang.adata.MNode):
    names: Cisco_IOS_XR_um_vrf_cfg__srlg__names
    interfaces: Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces
    groups: Cisco_IOS_XR_um_vrf_cfg__srlg__groups
    inherit_locations: Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations

    mut def __init__(self, names: ?Cisco_IOS_XR_um_vrf_cfg__srlg__names=None, interfaces: ?Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces=None, groups: ?Cisco_IOS_XR_um_vrf_cfg__srlg__groups=None, inherit_locations: ?Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.names = names if names is not None else Cisco_IOS_XR_um_vrf_cfg__srlg__names()
        self.interfaces = interfaces if interfaces is not None else Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces()
        self.groups = groups if groups is not None else Cisco_IOS_XR_um_vrf_cfg__srlg__groups()
        self.inherit_locations = inherit_locations if inherit_locations is not None else Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _names = self.names
        if _names is not None:
            children['names'] = _names.to_gdata()
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        _groups = self.groups
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        _inherit_locations = self.inherit_locations
        if _inherit_locations is not None:
            children['inherit-locations'] = _inherit_locations.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_vrf_cfg__srlg:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__srlg(names=Cisco_IOS_XR_um_vrf_cfg__srlg__names.from_gdata(n.get_opt_container('names')), interfaces=Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces.from_gdata(n.get_opt_container('interfaces')), groups=Cisco_IOS_XR_um_vrf_cfg__srlg__groups.from_gdata(n.get_opt_container('groups')), inherit_locations=Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations.from_gdata(n.get_opt_container('inherit-locations')))
        return None


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_names = yang.gdata.from_xml_opt_cnt(node, 'names')
    yang.gdata.maybe_add(children, 'names', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__names, child_names)
    child_interfaces = yang.gdata.from_xml_opt_cnt(node, 'interfaces')
    yang.gdata.maybe_add(children, 'interfaces', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__interfaces, child_interfaces)
    child_groups = yang.gdata.from_xml_opt_cnt(node, 'groups')
    yang.gdata.maybe_add(children, 'groups', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__groups, child_groups)
    child_inherit_locations = yang.gdata.from_xml_opt_cnt(node, 'inherit-locations')
    yang.gdata.maybe_add(children, 'inherit-locations', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg__inherit_locations, child_inherit_locations)
    return yang.gdata.Container(children, presence=True, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str

    mut def __init__(self, vrf_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.vrf_name = vrf_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.vrf_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name=n.get_str('vrf-name'))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_vrf_name = yang.gdata.from_xml_str(node, 'vrf-name')
    yang.gdata.maybe_add(children, 'vrf-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf__vrf_name, child_vrf_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_vrf_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_element(e))
    return yang.gdata.List(keys=['vrf-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.vrf = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf(elements=vrf)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(vrf=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf.from_gdata(n.get_opt_list('vrf')))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_vrf = yang.gdata.from_xml_opt_list(node, 'vrf')
    yang.gdata.maybe_add(children, 'vrf', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs__vrf, child_vrf)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(yang.adata.MNode):
    group_name: str
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs

    mut def __init__(self, group_name: str, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.group_name = group_name
        self.vrfs = vrfs if vrfs is not None else Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        _vrfs = self.vrfs
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.group_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry:
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name=n.get_str('group-name'), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs.from_gdata(n.get_opt_container('vrfs')))

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self._name = 'vrf-group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_group_name = yang.gdata.from_xml_str(node, 'group-name')
    yang.gdata.maybe_add(children, 'group-name', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__group_name, child_group_name)
    child_vrfs = yang.gdata.from_xml_opt_cnt(node, 'vrfs')
    yang.gdata.maybe_add(children, 'vrfs', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group__vrfs, child_vrfs)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_group_name)])

mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_element(e))
    return yang.gdata.List(keys=['group-name'], elements=elements)

class Cisco_IOS_XR_um_vrf_cfg__vrf_groups(yang.adata.MNode):
    vrf_group: Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group

    mut def __init__(self, vrf_group: list[Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg'
        self.vrf_group = Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group(elements=vrf_group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_group = self.vrf_group
        if _vrf_group is not None:
            children['vrf-group'] = _vrf_group.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_vrf_cfg__vrf_groups:
        if n != None:
            return Cisco_IOS_XR_um_vrf_cfg__vrf_groups(vrf_group=Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group.from_gdata(n.get_opt_list('vrf-group')))
        return Cisco_IOS_XR_um_vrf_cfg__vrf_groups()


mut def from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_vrf_group = yang.gdata.from_xml_opt_list(node, 'vrf-group')
    yang.gdata.maybe_add(children, 'vrf-group', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups__vrf_group, child_vrf_group)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg', module='Cisco-IOS-XR-um-vrf-cfg')

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__process_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__is_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net__net_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(yang.adata.MNode):
    net_id: str

    mut def __init__(self, net_id: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.net_id = net_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _net_id = self.net_id
        if _net_id is not None:
            children['net-id'] = yang.gdata.Leaf('string', _net_id)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.net_id)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(net_id=n.get_str('net-id'))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self._name = 'net'
        self.elements = elements

    mut def create(self, net_id):
        for e in self.elements:
            match = True
            if e.net_id != net_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry(net_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['net-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_net_id = yang.gdata.from_xml_str(node, 'net-id')
    yang.gdata.maybe_add(children, 'net-id', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net__net_id, child_net_id)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_net_id)])

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_element(e))
    return yang.gdata.List(keys=['net-id'], elements=elements)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(yang.adata.MNode):
    net: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net

    mut def __init__(self, net: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.net = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net(elements=net)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _net = self.net
        if _net is not None:
            children['net'] = _net.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(net=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net.from_gdata(n.get_opt_list('net')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_net = yang.gdata.from_xml_opt_list(node, 'net')
    yang.gdata.maybe_add(children, 'net', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets__net, child_net)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__saf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__sr_prefer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(yang.adata.MNode):
    sr_prefer: ?bool

    mut def __init__(self, sr_prefer: ?bool):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.sr_prefer = sr_prefer

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sr_prefer = self.sr_prefer
        if _sr_prefer is not None:
            children['sr-prefer'] = yang.gdata.Leaf('boolean', _sr_prefer)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(sr_prefer=n.get_opt_bool('sr-prefer'))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_sr_prefer = yang.gdata.from_xml_opt_bool(node, 'sr-prefer')
    yang.gdata.maybe_add(children, 'sr-prefer', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls__sr_prefer, child_sr_prefer)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(yang.adata.MNode):
    mpls: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls

    mut def __init__(self, mpls: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.mpls = mpls if mpls is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(mpls=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls.from_gdata(n.get_opt_container('mpls')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls')
    yang.gdata.maybe_add(children, 'mpls', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing__mpls, child_mpls)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(yang.adata.MNode):
    level_id: int
    narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow
    wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide
    transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition

    mut def __init__(self, level_id: int, narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow=None, wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide=None, transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.level_id = level_id
        self.narrow = narrow
        self.wide = wide
        self.transition = transition

    mut def create_narrow(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow()
        self.narrow = res
        return res

    mut def create_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide()
        self.wide = res
        return res

    mut def create_transition(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition()
        self.transition = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        _narrow = self.narrow
        if _narrow is not None:
            children['narrow'] = _narrow.to_gdata()
        _wide = self.wide
        if _wide is not None:
            children['wide'] = _wide.to_gdata()
        _transition = self.transition
        if _transition is not None:
            children['transition'] = _transition.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.level_id)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(level_id=n.get_int('level-id'), narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow.from_gdata(n.get_opt_container('narrow')), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide.from_gdata(n.get_opt_container('wide')), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition.from_gdata(n.get_opt_container('transition')))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_level_id = yang.gdata.from_xml_int(node, 'level-id')
    yang.gdata.maybe_add(children, 'level-id', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__level_id, child_level_id)
    child_narrow = yang.gdata.from_xml_opt_cnt(node, 'narrow')
    yang.gdata.maybe_add(children, 'narrow', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__narrow, child_narrow)
    child_wide = yang.gdata.from_xml_opt_cnt(node, 'wide')
    yang.gdata.maybe_add(children, 'wide', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__wide, child_wide)
    child_transition = yang.gdata.from_xml_opt_cnt(node, 'transition')
    yang.gdata.maybe_add(children, 'transition', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level__transition, child_transition)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_level_id)])

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_element(e))
    return yang.gdata.List(keys=['level-id'], elements=elements)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level(elements=level)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level.from_gdata(n.get_opt_list('level')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels__level, child_level)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(yang.adata.MNode):
    narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow
    wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide
    transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels

    mut def __init__(self, narrow: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow=None, wide: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide=None, transition: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.narrow = narrow
        self.wide = wide
        self.transition = transition
        self.levels = levels if levels is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels()

    mut def create_narrow(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow()
        self.narrow = res
        return res

    mut def create_wide(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide()
        self.wide = res
        return res

    mut def create_transition(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition()
        self.transition = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _narrow = self.narrow
        if _narrow is not None:
            children['narrow'] = _narrow.to_gdata()
        _wide = self.wide
        if _wide is not None:
            children['wide'] = _wide.to_gdata()
        _transition = self.transition
        if _transition is not None:
            children['transition'] = _transition.to_gdata()
        _levels = self.levels
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(narrow=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow.from_gdata(n.get_opt_container('narrow')), wide=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide.from_gdata(n.get_opt_container('wide')), transition=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition.from_gdata(n.get_opt_container('transition')), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels.from_gdata(n.get_opt_container('levels')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_narrow = yang.gdata.from_xml_opt_cnt(node, 'narrow')
    yang.gdata.maybe_add(children, 'narrow', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__narrow, child_narrow)
    child_wide = yang.gdata.from_xml_opt_cnt(node, 'wide')
    yang.gdata.maybe_add(children, 'wide', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__wide, child_wide)
    child_transition = yang.gdata.from_xml_opt_cnt(node, 'transition')
    yang.gdata.maybe_add(children, 'transition', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__transition, child_transition)
    child_levels = yang.gdata.from_xml_opt_cnt(node, 'levels')
    yang.gdata.maybe_add(children, 'levels', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style__levels, child_levels)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(yang.adata.MNode):
    af_name: str
    saf_name: str
    segment_routing: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing
    metric_style: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style

    mut def __init__(self, af_name: str, saf_name: str, segment_routing: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing=None, metric_style: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.af_name = af_name
        self.saf_name = saf_name
        self.segment_routing = segment_routing if segment_routing is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing()
        self.metric_style = metric_style if metric_style is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        _saf_name = self.saf_name
        if _saf_name is not None:
            children['saf-name'] = yang.gdata.Leaf('enumeration', _saf_name)
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        _metric_style = self.metric_style
        if _metric_style is not None:
            children['metric-style'] = _metric_style.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.af_name), yang.gdata.yang_str(self.saf_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(af_name=n.get_str('af-name'), saf_name=n.get_str('saf-name'), segment_routing=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing.from_gdata(n.get_opt_container('segment-routing')), metric_style=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style.from_gdata(n.get_opt_container('metric-style')))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name, saf_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if e.saf_name != saf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry(af_name, saf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name', 'saf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_af_name = yang.gdata.from_xml_str(node, 'af-name')
    yang.gdata.maybe_add(children, 'af-name', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__af_name, child_af_name)
    child_saf_name = yang.gdata.from_xml_str(node, 'saf-name')
    yang.gdata.maybe_add(children, 'saf-name', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__saf_name, child_saf_name)
    child_segment_routing = yang.gdata.from_xml_opt_cnt(node, 'segment-routing')
    yang.gdata.maybe_add(children, 'segment-routing', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__segment_routing, child_segment_routing)
    child_metric_style = yang.gdata.from_xml_opt_cnt(node, 'metric-style')
    yang.gdata.maybe_add(children, 'metric-style', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family__metric_style, child_metric_style)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_af_name), yang.gdata.yang_str(child_saf_name)])

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_element(e))
    return yang.gdata.List(keys=['af-name', 'saf-name'], elements=elements)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.address_family = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family(elements=address_family)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family.from_gdata(n.get_opt_list('address-family')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_family = yang.gdata.from_xml_opt_list(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families__address_family, child_address_family)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__circuit_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(yang.adata.MNode):
    ipv4: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4
    ipv6: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6

    mut def __init__(self, ipv4: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4=None, ipv6: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.ipv4 = ipv4
        self.ipv6 = ipv6

    mut def create_ipv4(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4()
        self.ipv4 = res
        return res

    mut def create_ipv6(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6()
        self.ipv6 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(ipv4=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4.from_gdata(n.get_opt_container('ipv4')), ipv6=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6.from_gdata(n.get_opt_container('ipv6')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'ipv4')
    yang.gdata.maybe_add(children, 'ipv4', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv4, child_ipv4)
    child_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'ipv6')
    yang.gdata.maybe_add(children, 'ipv6', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect__ipv6, child_ipv6)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(yang.adata.MNode):
    fast_detect: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect
    minimum_interval: ?int
    multiplier: ?int

    mut def __init__(self, fast_detect: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect=None, minimum_interval: ?int, multiplier: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.fast_detect = fast_detect if fast_detect is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect()
        self.minimum_interval = minimum_interval
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fast_detect = self.fast_detect
        if _fast_detect is not None:
            children['fast-detect'] = _fast_detect.to_gdata()
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('uint32', _minimum_interval)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(fast_detect=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect.from_gdata(n.get_opt_container('fast-detect')), minimum_interval=n.get_opt_int('minimum-interval'), multiplier=n.get_opt_int('multiplier'))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_fast_detect = yang.gdata.from_xml_opt_cnt(node, 'fast-detect')
    yang.gdata.maybe_add(children, 'fast-detect', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__fast_detect, child_fast_detect)
    child_minimum_interval = yang.gdata.from_xml_opt_int(node, 'minimum-interval')
    yang.gdata.maybe_add(children, 'minimum-interval', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__minimum_interval, child_minimum_interval)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd__multiplier, child_multiplier)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__saf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__level_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__default_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(yang.adata.MNode):
    level_id: int
    default_metric: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum

    mut def __init__(self, level_id: int, default_metric: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.level_id = level_id
        self.default_metric = default_metric
        self.maximum = maximum

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_id = self.level_id
        if _level_id is not None:
            children['level-id'] = yang.gdata.Leaf('uint32', _level_id)
        _default_metric = self.default_metric
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        _maximum = self.maximum
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.level_id)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(level_id=n.get_int('level-id'), default_metric=n.get_opt_int('default-metric'), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum.from_gdata(n.get_opt_container('maximum')))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_id):
        for e in self.elements:
            match = True
            if e.level_id != level_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry(level_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['level-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_level_id = yang.gdata.from_xml_int(node, 'level-id')
    yang.gdata.maybe_add(children, 'level-id', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__level_id, child_level_id)
    child_default_metric = yang.gdata.from_xml_opt_int(node, 'default-metric')
    yang.gdata.maybe_add(children, 'default-metric', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__default_metric, child_default_metric)
    child_maximum = yang.gdata.from_xml_opt_cnt(node, 'maximum')
    yang.gdata.maybe_add(children, 'maximum', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level__maximum, child_maximum)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_level_id)])

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_element(e))
    return yang.gdata.List(keys=['level-id'], elements=elements)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(yang.adata.MNode):
    level: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level

    mut def __init__(self, level: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.level = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level(elements=level)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(level=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level.from_gdata(n.get_opt_list('level')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels__level, child_level)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(yang.adata.MNode):
    default_metric: ?int
    maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum
    levels: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels

    mut def __init__(self, default_metric: ?int, maximum: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum=None, levels: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.default_metric = default_metric
        self.maximum = maximum
        self.levels = levels if levels is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels()

    mut def create_maximum(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum()
        self.maximum = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _default_metric = self.default_metric
        if _default_metric is not None:
            children['default-metric'] = yang.gdata.Leaf('uint32', _default_metric)
        _maximum = self.maximum
        if _maximum is not None:
            children['maximum'] = _maximum.to_gdata()
        _levels = self.levels
        if _levels is not None:
            children['levels'] = _levels.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(default_metric=n.get_opt_int('default-metric'), maximum=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum.from_gdata(n.get_opt_container('maximum')), levels=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels.from_gdata(n.get_opt_container('levels')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_default_metric = yang.gdata.from_xml_opt_int(node, 'default-metric')
    yang.gdata.maybe_add(children, 'default-metric', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__default_metric, child_default_metric)
    child_maximum = yang.gdata.from_xml_opt_cnt(node, 'maximum')
    yang.gdata.maybe_add(children, 'maximum', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__maximum, child_maximum)
    child_levels = yang.gdata.from_xml_opt_cnt(node, 'levels')
    yang.gdata.maybe_add(children, 'levels', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric__levels, child_levels)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index__sid_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(yang.adata.MNode):
    sid_index: ?int

    mut def __init__(self, sid_index: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.sid_index = sid_index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid_index = self.sid_index
        if _sid_index is not None:
            children['sid-index'] = yang.gdata.Leaf('uint32', _sid_index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(sid_index=n.get_opt_int('sid-index'))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_sid_index = yang.gdata.from_xml_opt_int(node, 'sid-index')
    yang.gdata.maybe_add(children, 'sid-index', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index__sid_index, child_sid_index)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(yang.adata.MNode):
    index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index

    mut def __init__(self, index: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.index = index

    mut def create_index(self, sid_index):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index(sid_index)
        self.index = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = _index.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(index=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index.from_gdata(n.get_opt_container('index')))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_index = yang.gdata.from_xml_opt_cnt(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid__index, child_index)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(yang.adata.MNode):
    sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid

    mut def __init__(self, sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.sid = sid

    mut def create_sid(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid()
        self.sid = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sid = self.sid
        if _sid is not None:
            children['sid'] = _sid.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid.from_gdata(n.get_opt_container('sid')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_sid = yang.gdata.from_xml_opt_cnt(node, 'sid')
    yang.gdata.maybe_add(children, 'sid', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid__sid, child_sid)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(yang.adata.MNode):
    af_name: str
    saf_name: str
    metric: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric
    prefix_sid: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid

    mut def __init__(self, af_name: str, saf_name: str, metric: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric=None, prefix_sid: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.af_name = af_name
        self.saf_name = saf_name
        self.metric = metric if metric is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric()
        self.prefix_sid = prefix_sid if prefix_sid is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        _saf_name = self.saf_name
        if _saf_name is not None:
            children['saf-name'] = yang.gdata.Leaf('enumeration', _saf_name)
        _metric = self.metric
        if _metric is not None:
            children['metric'] = _metric.to_gdata()
        _prefix_sid = self.prefix_sid
        if _prefix_sid is not None:
            children['prefix-sid'] = _prefix_sid.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.af_name), yang.gdata.yang_str(self.saf_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(af_name=n.get_str('af-name'), saf_name=n.get_str('saf-name'), metric=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric.from_gdata(n.get_opt_container('metric')), prefix_sid=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid.from_gdata(n.get_opt_container('prefix-sid')))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name, saf_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if e.saf_name != saf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry(af_name, saf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name', 'saf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_af_name = yang.gdata.from_xml_str(node, 'af-name')
    yang.gdata.maybe_add(children, 'af-name', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__af_name, child_af_name)
    child_saf_name = yang.gdata.from_xml_str(node, 'saf-name')
    yang.gdata.maybe_add(children, 'saf-name', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__saf_name, child_saf_name)
    child_metric = yang.gdata.from_xml_opt_cnt(node, 'metric')
    yang.gdata.maybe_add(children, 'metric', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__metric, child_metric)
    child_prefix_sid = yang.gdata.from_xml_opt_cnt(node, 'prefix-sid')
    yang.gdata.maybe_add(children, 'prefix-sid', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family__prefix_sid, child_prefix_sid)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_af_name), yang.gdata.yang_str(child_saf_name)])

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_element(e))
    return yang.gdata.List(keys=['af-name', 'saf-name'], elements=elements)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.address_family = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family(elements=address_family)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(address_family=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family.from_gdata(n.get_opt_list('address-family')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_family = yang.gdata.from_xml_opt_list(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families__address_family, child_address_family)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    circuit_type: ?str
    point_to_point: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point
    bfd: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd
    passive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive
    address_families: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families

    mut def __init__(self, interface_name: str, circuit_type: ?str, point_to_point: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point=None, bfd: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd=None, passive: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive=None, address_families: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.interface_name = interface_name
        self.circuit_type = circuit_type
        self.point_to_point = point_to_point
        self.bfd = bfd if bfd is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd()
        self.passive = passive
        self.address_families = address_families if address_families is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families()

    mut def create_point_to_point(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point()
        self.point_to_point = res
        return res

    mut def create_passive(self):
        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive()
        self.passive = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        _circuit_type = self.circuit_type
        if _circuit_type is not None:
            children['circuit-type'] = yang.gdata.Leaf('enumeration', _circuit_type)
        _point_to_point = self.point_to_point
        if _point_to_point is not None:
            children['point-to-point'] = _point_to_point.to_gdata()
        _bfd = self.bfd
        if _bfd is not None:
            children['bfd'] = _bfd.to_gdata()
        _passive = self.passive
        if _passive is not None:
            children['passive'] = _passive.to_gdata()
        _address_families = self.address_families
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.interface_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(interface_name=n.get_str('interface-name'), circuit_type=n.get_opt_str('circuit-type'), point_to_point=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point.from_gdata(n.get_opt_container('point-to-point')), bfd=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd.from_gdata(n.get_opt_container('bfd')), passive=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive.from_gdata(n.get_opt_container('passive')), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families.from_gdata(n.get_opt_container('address-families')))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_interface_name = yang.gdata.from_xml_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__interface_name, child_interface_name)
    child_circuit_type = yang.gdata.from_xml_opt_str(node, 'circuit-type')
    yang.gdata.maybe_add(children, 'circuit-type', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__circuit_type, child_circuit_type)
    child_point_to_point = yang.gdata.from_xml_opt_cnt(node, 'point-to-point')
    yang.gdata.maybe_add(children, 'point-to-point', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__point_to_point, child_point_to_point)
    child_bfd = yang.gdata.from_xml_opt_cnt(node, 'bfd')
    yang.gdata.maybe_add(children, 'bfd', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__bfd, child_bfd)
    child_passive = yang.gdata.from_xml_opt_cnt(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__passive, child_passive)
    child_address_families = yang.gdata.from_xml_opt_cnt(node, 'address-families')
    yang.gdata.maybe_add(children, 'address-families', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface__address_families, child_address_families)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_interface_name)])

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_element(e))
    return yang.gdata.List(keys=['interface-name'], elements=elements)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.interface = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(interface=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface.from_gdata(n.get_opt_list('interface')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces__interface, child_interface)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(yang.adata.MNode):
    process_id: str
    is_type: ?str
    nets: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets
    address_families: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families
    interfaces: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces

    mut def __init__(self, process_id: str, is_type: ?str, nets: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets=None, address_families: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families=None, interfaces: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.process_id = process_id
        self.is_type = is_type
        self.nets = nets if nets is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets()
        self.address_families = address_families if address_families is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families()
        self.interfaces = interfaces if interfaces is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process_id = self.process_id
        if _process_id is not None:
            children['process-id'] = yang.gdata.Leaf('string', _process_id)
        _is_type = self.is_type
        if _is_type is not None:
            children['is-type'] = yang.gdata.Leaf('enumeration', _is_type)
        _nets = self.nets
        if _nets is not None:
            children['nets'] = _nets.to_gdata()
        _address_families = self.address_families
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.process_id)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry:
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(process_id=n.get_str('process-id'), is_type=n.get_opt_str('is-type'), nets=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets.from_gdata(n.get_opt_container('nets')), address_families=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families.from_gdata(n.get_opt_container('address-families')), interfaces=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces.from_gdata(n.get_opt_container('interfaces')))

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self._name = 'process'
        self.elements = elements

    mut def create(self, process_id):
        for e in self.elements:
            match = True
            if e.process_id != process_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry(process_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['process-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_process_id = yang.gdata.from_xml_str(node, 'process-id')
    yang.gdata.maybe_add(children, 'process-id', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__process_id, child_process_id)
    child_is_type = yang.gdata.from_xml_opt_str(node, 'is-type')
    yang.gdata.maybe_add(children, 'is-type', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__is_type, child_is_type)
    child_nets = yang.gdata.from_xml_opt_cnt(node, 'nets')
    yang.gdata.maybe_add(children, 'nets', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__nets, child_nets)
    child_address_families = yang.gdata.from_xml_opt_cnt(node, 'address-families')
    yang.gdata.maybe_add(children, 'address-families', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__address_families, child_address_families)
    child_interfaces = yang.gdata.from_xml_opt_cnt(node, 'interfaces')
    yang.gdata.maybe_add(children, 'interfaces', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process__interfaces, child_interfaces)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_process_id)])

mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_element(e))
    return yang.gdata.List(keys=['process-id'], elements=elements)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(yang.adata.MNode):
    process: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process

    mut def __init__(self, process: list[Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.process = Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process(elements=process)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _process = self.process
        if _process is not None:
            children['process'] = _process.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(process=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process.from_gdata(n.get_opt_list('process')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_process = yang.gdata.from_xml_opt_list(node, 'process')
    yang.gdata.maybe_add(children, 'process', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes__process, child_process)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router__isis(yang.adata.MNode):
    processes: Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes

    mut def __init__(self, processes: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.processes = processes if processes is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _processes = self.processes
        if _processes is not None:
            children['processes'] = _processes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router__isis:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router__isis(processes=Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes.from_gdata(n.get_opt_container('processes')))
        return Cisco_IOS_XR_um_router_isis_cfg__router__isis()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_processes = yang.gdata.from_xml_opt_cnt(node, 'processes')
    yang.gdata.maybe_add(children, 'processes', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis__processes, child_processes)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_isis_cfg__router(yang.adata.MNode):
    isis: Cisco_IOS_XR_um_router_isis_cfg__router__isis

    mut def __init__(self, isis: ?Cisco_IOS_XR_um_router_isis_cfg__router__isis=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg'
        self.isis = isis if isis is not None else Cisco_IOS_XR_um_router_isis_cfg__router__isis()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _isis = self.isis
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg', module='Cisco-IOS-XR-um-router-isis-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_isis_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_isis_cfg__router(isis=Cisco_IOS_XR_um_router_isis_cfg__router__isis.from_gdata(n.get_opt_container('isis')))
        return Cisco_IOS_XR_um_router_isis_cfg__router()


mut def from_xml_Cisco_IOS_XR_um_router_isis_cfg__router(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_isis = yang.gdata.from_xml_opt_cnt(node, 'isis')
    yang.gdata.maybe_add(children, 'isis', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router__isis, child_isis)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg', module='Cisco-IOS-XR-um-router-isis-cfg')

class Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__as_format(yang.adata.MNode):
    asdot: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot
    asplain: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain

    mut def __init__(self, asdot: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot=None, asplain: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.asdot = asdot
        self.asplain = asplain

    mut def create_asdot(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot()
        self.asdot = res
        return res

    mut def create_asplain(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain()
        self.asplain = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _asdot = self.asdot
        if _asdot is not None:
            children['asdot'] = _asdot.to_gdata()
        _asplain = self.asplain
        if _asplain is not None:
            children['asplain'] = _asplain.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__as_format:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__as_format(asdot=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot.from_gdata(n.get_opt_container('asdot')), asplain=Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain.from_gdata(n.get_opt_container('asplain')))
        return Cisco_IOS_XR_um_router_bgp_cfg__as_format()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__as_format(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_asdot = yang.gdata.from_xml_opt_cnt(node, 'asdot')
    yang.gdata.maybe_add(children, 'asdot', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__as_format__asdot, child_asdot)
    child_asplain = yang.gdata.from_xml_opt_cnt(node, 'asplain')
    yang.gdata.maybe_add(children, 'asplain', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__as_format__asplain, child_asplain)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__bmp_server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(yang.adata.MNode):
    host_name: ?str
    port: ?int

    mut def __init__(self, host_name: ?str, port: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.host_name = host_name
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name=n.get_opt_str('host-name'), port=n.get_opt_int('port'))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_host_name = yang.gdata.from_xml_opt_str(node, 'host-name')
    yang.gdata.maybe_add(children, 'host-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__host_name, child_host_name)
    child_port = yang.gdata.from_xml_opt_int(node, 'port')
    yang.gdata.maybe_add(children, 'port', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host__port, child_port)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__flapping_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__max_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__initial_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__spread(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(yang.adata.MNode):
    initial_delay: ?int
    spread: ?int

    mut def __init__(self, initial_delay: ?int, spread: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.initial_delay = initial_delay
        self.spread = spread

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_delay = self.initial_delay
        if _initial_delay is not None:
            children['initial-delay'] = yang.gdata.Leaf('uint32', _initial_delay)
        _spread = self.spread
        if _spread is not None:
            children['spread'] = yang.gdata.Leaf('uint32', _spread)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay=n.get_opt_int('initial-delay'), spread=n.get_opt_int('spread'))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_initial_delay = yang.gdata.from_xml_opt_int(node, 'initial-delay')
    yang.gdata.maybe_add(children, 'initial-delay', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__initial_delay, child_initial_delay)
    child_spread = yang.gdata.from_xml_opt_int(node, 'spread')
    yang.gdata.maybe_add(children, 'spread', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay__spread, child_spread)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(yang.adata.MNode):
    delay: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay
    skip: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip

    mut def __init__(self, delay: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay=None, skip: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.delay = delay
        self.skip = skip

    mut def create_delay(self, initial_delay):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay(initial_delay)
        self.delay = res
        return res

    mut def create_skip(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip()
        self.skip = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay = self.delay
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        _skip = self.skip
        if _skip is not None:
            children['skip'] = _skip.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(delay=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay.from_gdata(n.get_opt_container('delay')), skip=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip.from_gdata(n.get_opt_container('skip')))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_delay = yang.gdata.from_xml_opt_cnt(node, 'delay')
    yang.gdata.maybe_add(children, 'delay', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__delay, child_delay)
    child_skip = yang.gdata.from_xml_opt_cnt(node, 'skip')
    yang.gdata.maybe_add(children, 'skip', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh__skip, child_skip)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__stats_reporting_period(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__dscp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__precedence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__keep_alive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(yang.adata.MNode):
    keep_alive: ?int
    mss: ?int

    mut def __init__(self, keep_alive: ?int, mss: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.keep_alive = keep_alive
        self.mss = mss

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keep_alive = self.keep_alive
        if _keep_alive is not None:
            children['keep-alive'] = yang.gdata.Leaf('uint32', _keep_alive)
        _mss = self.mss
        if _mss is not None:
            children['mss'] = yang.gdata.Leaf('uint32', _mss)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(keep_alive=n.get_opt_int('keep-alive'), mss=n.get_opt_int('mss'))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_keep_alive = yang.gdata.from_xml_opt_int(node, 'keep-alive')
    yang.gdata.maybe_add(children, 'keep-alive', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__keep_alive, child_keep_alive)
    child_mss = yang.gdata.from_xml_opt_int(node, 'mss')
    yang.gdata.maybe_add(children, 'mss', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp__mss, child_mss)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(yang.adata.MNode):
    bmp_server_id: int
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown
    host: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host
    initial_delay: ?int
    flapping_delay: ?int
    max_buffer_size: ?int
    initial_refresh: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh
    stats_reporting_period: ?int
    description: ?str
    dscp: ?str
    precedence: ?str
    update_source: ?str
    vrf: ?str
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp

    mut def __init__(self, bmp_server_id: int, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown=None, host: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host=None, initial_delay: ?int, flapping_delay: ?int, max_buffer_size: ?int, initial_refresh: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh=None, stats_reporting_period: ?int, description: ?str, dscp: ?str, precedence: ?str, update_source: ?str, vrf: ?str, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.bmp_server_id = bmp_server_id
        self.shutdown = shutdown
        self.host = host
        self.initial_delay = initial_delay
        self.flapping_delay = flapping_delay
        self.max_buffer_size = max_buffer_size
        self.initial_refresh = initial_refresh if initial_refresh is not None else Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh()
        self.stats_reporting_period = stats_reporting_period
        self.description = description
        self.dscp = dscp
        self.precedence = precedence
        self.update_source = update_source
        self.vrf = vrf
        self.tcp = tcp if tcp is not None else Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp()

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown()
        self.shutdown = res
        return res

    mut def create_host(self, host_name):
        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host(host_name)
        self.host = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_server_id = self.bmp_server_id
        if _bmp_server_id is not None:
            children['bmp-server-id'] = yang.gdata.Leaf('uint32', _bmp_server_id)
        _shutdown = self.shutdown
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        _host = self.host
        if _host is not None:
            children['host'] = _host.to_gdata()
        _initial_delay = self.initial_delay
        if _initial_delay is not None:
            children['initial-delay'] = yang.gdata.Leaf('uint32', _initial_delay)
        _flapping_delay = self.flapping_delay
        if _flapping_delay is not None:
            children['flapping-delay'] = yang.gdata.Leaf('uint32', _flapping_delay)
        _max_buffer_size = self.max_buffer_size
        if _max_buffer_size is not None:
            children['max-buffer-size'] = yang.gdata.Leaf('uint32', _max_buffer_size)
        _initial_refresh = self.initial_refresh
        if _initial_refresh is not None:
            children['initial-refresh'] = _initial_refresh.to_gdata()
        _stats_reporting_period = self.stats_reporting_period
        if _stats_reporting_period is not None:
            children['stats-reporting-period'] = yang.gdata.Leaf('uint32', _stats_reporting_period)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _dscp = self.dscp
        if _dscp is not None:
            children['dscp'] = yang.gdata.Leaf('enumeration', _dscp)
        _precedence = self.precedence
        if _precedence is not None:
            children['precedence'] = yang.gdata.Leaf('enumeration', _precedence)
        _update_source = self.update_source
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf)
        _tcp = self.tcp
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.bmp_server_id)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id=n.get_int('bmp-server-id'), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown.from_gdata(n.get_opt_container('shutdown')), host=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host.from_gdata(n.get_opt_container('host')), initial_delay=n.get_opt_int('initial-delay'), flapping_delay=n.get_opt_int('flapping-delay'), max_buffer_size=n.get_opt_int('max-buffer-size'), initial_refresh=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh.from_gdata(n.get_opt_container('initial-refresh')), stats_reporting_period=n.get_opt_int('stats-reporting-period'), description=n.get_opt_str('description'), dscp=n.get_opt_str('dscp'), precedence=n.get_opt_str('precedence'), update_source=n.get_opt_str('update-source'), vrf=n.get_opt_str('vrf'), tcp=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp.from_gdata(n.get_opt_container('tcp')))

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'server'
        self.elements = elements

    mut def create(self, bmp_server_id):
        for e in self.elements:
            match = True
            if e.bmp_server_id != bmp_server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry(bmp_server_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['bmp-server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_bmp_server_id = yang.gdata.from_xml_int(node, 'bmp-server-id')
    yang.gdata.maybe_add(children, 'bmp-server-id', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__bmp_server_id, child_bmp_server_id)
    child_shutdown = yang.gdata.from_xml_opt_cnt(node, 'shutdown')
    yang.gdata.maybe_add(children, 'shutdown', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__shutdown, child_shutdown)
    child_host = yang.gdata.from_xml_opt_cnt(node, 'host')
    yang.gdata.maybe_add(children, 'host', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__host, child_host)
    child_initial_delay = yang.gdata.from_xml_opt_int(node, 'initial-delay')
    yang.gdata.maybe_add(children, 'initial-delay', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_delay, child_initial_delay)
    child_flapping_delay = yang.gdata.from_xml_opt_int(node, 'flapping-delay')
    yang.gdata.maybe_add(children, 'flapping-delay', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__flapping_delay, child_flapping_delay)
    child_max_buffer_size = yang.gdata.from_xml_opt_int(node, 'max-buffer-size')
    yang.gdata.maybe_add(children, 'max-buffer-size', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__max_buffer_size, child_max_buffer_size)
    child_initial_refresh = yang.gdata.from_xml_opt_cnt(node, 'initial-refresh')
    yang.gdata.maybe_add(children, 'initial-refresh', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__initial_refresh, child_initial_refresh)
    child_stats_reporting_period = yang.gdata.from_xml_opt_int(node, 'stats-reporting-period')
    yang.gdata.maybe_add(children, 'stats-reporting-period', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__stats_reporting_period, child_stats_reporting_period)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__description, child_description)
    child_dscp = yang.gdata.from_xml_opt_str(node, 'dscp')
    yang.gdata.maybe_add(children, 'dscp', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__dscp, child_dscp)
    child_precedence = yang.gdata.from_xml_opt_str(node, 'precedence')
    yang.gdata.maybe_add(children, 'precedence', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__precedence, child_precedence)
    child_update_source = yang.gdata.from_xml_opt_str(node, 'update-source')
    yang.gdata.maybe_add(children, 'update-source', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__update_source, child_update_source)
    child_vrf = yang.gdata.from_xml_opt_str(node, 'vrf')
    yang.gdata.maybe_add(children, 'vrf', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__vrf, child_vrf)
    child_tcp = yang.gdata.from_xml_opt_cnt(node, 'tcp')
    yang.gdata.maybe_add(children, 'tcp', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server__tcp, child_tcp)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_bmp_server_id)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_element(e))
    return yang.gdata.List(keys=['bmp-server-id'], elements=elements)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__max_buffer_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__mode_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__scan_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(yang.adata.MNode):
    mode_name: str
    advertisement_interval: ?int
    scan_time: ?int

    mut def __init__(self, mode_name: str, advertisement_interval: ?int, scan_time: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.mode_name = mode_name
        self.advertisement_interval = advertisement_interval
        self.scan_time = scan_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode_name = self.mode_name
        if _mode_name is not None:
            children['mode-name'] = yang.gdata.Leaf('enumeration', _mode_name)
        _advertisement_interval = self.advertisement_interval
        if _advertisement_interval is not None:
            children['advertisement-interval'] = yang.gdata.Leaf('uint32', _advertisement_interval)
        _scan_time = self.scan_time
        if _scan_time is not None:
            children['scan-time'] = yang.gdata.Leaf('uint32', _scan_time)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.mode_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name=n.get_str('mode-name'), advertisement_interval=n.get_opt_int('advertisement-interval'), scan_time=n.get_opt_int('scan-time'))

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'bmp-mode'
        self.elements = elements

    mut def create(self, mode_name):
        for e in self.elements:
            match = True
            if e.mode_name != mode_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry(mode_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['mode-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_mode_name = yang.gdata.from_xml_str(node, 'mode-name')
    yang.gdata.maybe_add(children, 'mode-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__mode_name, child_mode_name)
    child_advertisement_interval = yang.gdata.from_xml_opt_int(node, 'advertisement-interval')
    yang.gdata.maybe_add(children, 'advertisement-interval', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__advertisement_interval, child_advertisement_interval)
    child_scan_time = yang.gdata.from_xml_opt_int(node, 'scan-time')
    yang.gdata.maybe_add(children, 'scan-time', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode__scan_time, child_scan_time)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_mode_name)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_element(e))
    return yang.gdata.List(keys=['mode-name'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(yang.adata.MNode):
    bmp_mode: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode

    mut def __init__(self, bmp_mode: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.bmp_mode = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode(elements=bmp_mode)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_mode = self.bmp_mode
        if _bmp_mode is not None:
            children['bmp-mode'] = _bmp_mode.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(bmp_mode=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode.from_gdata(n.get_opt_list('bmp-mode')))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bmp_mode = yang.gdata.from_xml_opt_list(node, 'bmp-mode')
    yang.gdata.maybe_add(children, 'bmp-mode', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes__bmp_mode, child_bmp_mode)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(yang.adata.MNode):
    bmp_modes: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes

    mut def __init__(self, bmp_modes: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.bmp_modes = bmp_modes if bmp_modes is not None else Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bmp_modes = self.bmp_modes
        if _bmp_modes is not None:
            children['bmp-modes'] = _bmp_modes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(bmp_modes=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes.from_gdata(n.get_opt_container('bmp-modes')))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bmp_modes = yang.gdata.from_xml_opt_cnt(node, 'bmp-modes')
    yang.gdata.maybe_add(children, 'bmp-modes', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring__bmp_modes, child_bmp_modes)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(yang.adata.MNode):
    max_buffer_size: ?int
    route_monitoring: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring

    mut def __init__(self, max_buffer_size: ?int, route_monitoring: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.max_buffer_size = max_buffer_size
        self.route_monitoring = route_monitoring if route_monitoring is not None else Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_buffer_size = self.max_buffer_size
        if _max_buffer_size is not None:
            children['max-buffer-size'] = yang.gdata.Leaf('uint32', _max_buffer_size)
        _route_monitoring = self.route_monitoring
        if _route_monitoring is not None:
            children['route-monitoring'] = _route_monitoring.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(max_buffer_size=n.get_opt_int('max-buffer-size'), route_monitoring=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring.from_gdata(n.get_opt_container('route-monitoring')))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_buffer_size = yang.gdata.from_xml_opt_int(node, 'max-buffer-size')
    yang.gdata.maybe_add(children, 'max-buffer-size', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__max_buffer_size, child_max_buffer_size)
    child_route_monitoring = yang.gdata.from_xml_opt_cnt(node, 'route-monitoring')
    yang.gdata.maybe_add(children, 'route-monitoring', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all__route_monitoring, child_route_monitoring)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server
    all: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server_entry]=[], all: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server(elements=server)
        self.all = all if all is not None else Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        if _server is not None:
            children['server'] = _server.to_gdata()
        _all = self.all
        if _all is not None:
            children['all'] = _all.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server.from_gdata(n.get_opt_list('server')), all=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all.from_gdata(n.get_opt_container('all')))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_server = yang.gdata.from_xml_opt_list(node, 'server')
    yang.gdata.maybe_add(children, 'server', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__server, child_server)
    child_all = yang.gdata.from_xml_opt_cnt(node, 'all')
    yang.gdata.maybe_add(children, 'all', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers__all, child_all)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__bmp(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.servers = servers if servers is not None else Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__bmp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__bmp(servers=Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers.from_gdata(n.get_opt_container('servers')))
        return Cisco_IOS_XR_um_router_bgp_cfg__bmp()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_servers = yang.gdata.from_xml_opt_cnt(node, 'servers')
    yang.gdata.maybe_add(children, 'servers', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp__servers, child_servers)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__server_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(yang.adata.MNode):
    interface_name: ?str

    mut def __init__(self, interface_name: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.interface_name = interface_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(interface_name=n.get_opt_str('interface-name'))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface_name = yang.gdata.from_xml_opt_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface__interface_name, child_interface_name)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface

    mut def __init__(self, interface: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.interface = interface if interface is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(interface=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface.from_gdata(n.get_opt_container('interface')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_cnt(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__refresh_time_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(yang.adata.MNode):
    refresh_time_value: ?int
    off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off

    mut def __init__(self, refresh_time_value: ?int, off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.refresh_time_value = refresh_time_value
        self.off = off

    mut def create_off(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off()
        self.off = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _refresh_time_value = self.refresh_time_value
        if _refresh_time_value is not None:
            children['refresh-time-value'] = yang.gdata.Leaf('uint32', _refresh_time_value)
        _off = self.off
        if _off is not None:
            children['off'] = _off.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(refresh_time_value=n.get_opt_int('refresh-time-value'), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off.from_gdata(n.get_opt_container('off')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_refresh_time_value = yang.gdata.from_xml_opt_int(node, 'refresh-time-value')
    yang.gdata.maybe_add(children, 'refresh-time-value', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__refresh_time_value, child_refresh_time_value)
    child_off = yang.gdata.from_xml_opt_cnt(node, 'off')
    yang.gdata.maybe_add(children, 'off', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time__off, child_off)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__response_time_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(yang.adata.MNode):
    response_time_value: ?int
    off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off

    mut def __init__(self, response_time_value: ?int, off: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.response_time_value = response_time_value
        self.off = off

    mut def create_off(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off()
        self.off = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _response_time_value = self.response_time_value
        if _response_time_value is not None:
            children['response-time-value'] = yang.gdata.Leaf('uint32', _response_time_value)
        _off = self.off
        if _off is not None:
            children['off'] = _off.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(response_time_value=n.get_opt_int('response-time-value'), off=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off.from_gdata(n.get_opt_container('off')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_response_time_value = yang.gdata.from_xml_opt_int(node, 'response-time-value')
    yang.gdata.maybe_add(children, 'response-time-value', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__response_time_value, child_response_time_value)
    child_off = yang.gdata.from_xml_opt_cnt(node, 'off')
    yang.gdata.maybe_add(children, 'off', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time__off, child_off)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__purge_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(yang.adata.MNode):
    port: ?int

    mut def __init__(self, port: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(port=n.get_opt_int('port'))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_port = yang.gdata.from_xml_opt_int(node, 'port')
    yang.gdata.maybe_add(children, 'port', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp__port, child_port)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(yang.adata.MNode):
    port: ?int

    mut def __init__(self, port: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.port = port

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('uint32', _port)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(port=n.get_opt_int('port'))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_port = yang.gdata.from_xml_opt_int(node, 'port')
    yang.gdata.maybe_add(children, 'port', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh__port, child_port)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(yang.adata.MNode):
    tcp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp
    ssh: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh

    mut def __init__(self, tcp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp=None, ssh: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.tcp = tcp if tcp is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp()
        self.ssh = ssh if ssh is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tcp = self.tcp
        if _tcp is not None:
            children['tcp'] = _tcp.to_gdata()
        _ssh = self.ssh
        if _ssh is not None:
            children['ssh'] = _ssh.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(tcp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp.from_gdata(n.get_opt_container('tcp')), ssh=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh.from_gdata(n.get_opt_container('ssh')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tcp = yang.gdata.from_xml_opt_cnt(node, 'tcp')
    yang.gdata.maybe_add(children, 'tcp', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__tcp, child_tcp)
    child_ssh = yang.gdata.from_xml_opt_cnt(node, 'ssh')
    yang.gdata.maybe_add(children, 'ssh', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport__ssh, child_ssh)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(yang.adata.MNode):
    server_id: str
    bind_source: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source
    preference: ?int
    refresh_time: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time
    response_time: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time
    purge_time: ?int
    username: ?str
    password: ?str
    transport: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport
    shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown

    mut def __init__(self, server_id: str, bind_source: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source=None, preference: ?int, refresh_time: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time=None, response_time: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time=None, purge_time: ?int, username: ?str, password: ?str, transport: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport=None, shutdown: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.server_id = server_id
        self.bind_source = bind_source if bind_source is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source()
        self.preference = preference
        self.refresh_time = refresh_time if refresh_time is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time()
        self.response_time = response_time if response_time is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time()
        self.purge_time = purge_time
        self.username = username
        self.password = password
        self.transport = transport if transport is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport()
        self.shutdown = shutdown

    mut def create_shutdown(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown()
        self.shutdown = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server_id = self.server_id
        if _server_id is not None:
            children['server-id'] = yang.gdata.Leaf('string', _server_id)
        _bind_source = self.bind_source
        if _bind_source is not None:
            children['bind-source'] = _bind_source.to_gdata()
        _preference = self.preference
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('uint32', _preference)
        _refresh_time = self.refresh_time
        if _refresh_time is not None:
            children['refresh-time'] = _refresh_time.to_gdata()
        _response_time = self.response_time
        if _response_time is not None:
            children['response-time'] = _response_time.to_gdata()
        _purge_time = self.purge_time
        if _purge_time is not None:
            children['purge-time'] = yang.gdata.Leaf('uint32', _purge_time)
        _username = self.username
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        _shutdown = self.shutdown
        if _shutdown is not None:
            children['shutdown'] = _shutdown.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.server_id)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id=n.get_str('server-id'), bind_source=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source.from_gdata(n.get_opt_container('bind-source')), preference=n.get_opt_int('preference'), refresh_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time.from_gdata(n.get_opt_container('refresh-time')), response_time=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time.from_gdata(n.get_opt_container('response-time')), purge_time=n.get_opt_int('purge-time'), username=n.get_opt_str('username'), password=n.get_opt_str('password'), transport=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport.from_gdata(n.get_opt_container('transport')), shutdown=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown.from_gdata(n.get_opt_container('shutdown')))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'server'
        self.elements = elements

    mut def create(self, server_id):
        for e in self.elements:
            match = True
            if e.server_id != server_id:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry(server_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['server-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_server_id = yang.gdata.from_xml_str(node, 'server-id')
    yang.gdata.maybe_add(children, 'server-id', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__server_id, child_server_id)
    child_bind_source = yang.gdata.from_xml_opt_cnt(node, 'bind-source')
    yang.gdata.maybe_add(children, 'bind-source', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__bind_source, child_bind_source)
    child_preference = yang.gdata.from_xml_opt_int(node, 'preference')
    yang.gdata.maybe_add(children, 'preference', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__preference, child_preference)
    child_refresh_time = yang.gdata.from_xml_opt_cnt(node, 'refresh-time')
    yang.gdata.maybe_add(children, 'refresh-time', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__refresh_time, child_refresh_time)
    child_response_time = yang.gdata.from_xml_opt_cnt(node, 'response-time')
    yang.gdata.maybe_add(children, 'response-time', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__response_time, child_response_time)
    child_purge_time = yang.gdata.from_xml_opt_int(node, 'purge-time')
    yang.gdata.maybe_add(children, 'purge-time', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__purge_time, child_purge_time)
    child_username = yang.gdata.from_xml_opt_str(node, 'username')
    yang.gdata.maybe_add(children, 'username', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__username, child_username)
    child_password = yang.gdata.from_xml_opt_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__password, child_password)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__transport, child_transport)
    child_shutdown = yang.gdata.from_xml_opt_cnt(node, 'shutdown')
    yang.gdata.maybe_add(children, 'shutdown', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server__shutdown, child_shutdown)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_server_id)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_element(e))
    return yang.gdata.List(keys=['server-id'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(yang.adata.MNode):
    server: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server

    mut def __init__(self, server: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.server = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server(elements=server)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _server = self.server
        if _server is not None:
            children['server'] = _server.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(server=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server.from_gdata(n.get_opt_list('server')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_server = yang.gdata.from_xml_opt_list(node, 'server')
    yang.gdata.maybe_add(children, 'server', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers__server, child_server)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__minimum_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__maximum_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__origin_as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(yang.adata.MNode):
    address: str
    minimum_prefix_length: int
    maximum_prefix_length: int
    origin_as_number: int

    mut def __init__(self, address: str, minimum_prefix_length: int, maximum_prefix_length: int, origin_as_number: int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.address = address
        self.minimum_prefix_length = minimum_prefix_length
        self.maximum_prefix_length = maximum_prefix_length
        self.origin_as_number = origin_as_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        _minimum_prefix_length = self.minimum_prefix_length
        if _minimum_prefix_length is not None:
            children['minimum-prefix-length'] = yang.gdata.Leaf('union', _minimum_prefix_length)
        _maximum_prefix_length = self.maximum_prefix_length
        if _maximum_prefix_length is not None:
            children['maximum-prefix-length'] = yang.gdata.Leaf('union', _maximum_prefix_length)
        _origin_as_number = self.origin_as_number
        if _origin_as_number is not None:
            children['origin-as-number'] = yang.gdata.Leaf('uint32', _origin_as_number)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.address), yang.gdata.yang_str(self.minimum_prefix_length), yang.gdata.yang_str(self.maximum_prefix_length), yang.gdata.yang_str(self.origin_as_number)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address=n.get_str('address'), minimum_prefix_length=n.get_int('minimum-prefix-length'), maximum_prefix_length=n.get_int('maximum-prefix-length'), origin_as_number=n.get_int('origin-as-number'))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'route'
        self.elements = elements

    mut def create(self, address, minimum_prefix_length, maximum_prefix_length, origin_as_number):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if e.minimum_prefix_length != minimum_prefix_length:
                match = False
                continue
            if e.maximum_prefix_length != maximum_prefix_length:
                match = False
                continue
            if e.origin_as_number != origin_as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry(address, minimum_prefix_length, maximum_prefix_length, origin_as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['address', 'minimum-prefix-length', 'maximum-prefix-length', 'origin-as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_address = yang.gdata.from_xml_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__address, child_address)
    child_minimum_prefix_length = yang.gdata.from_xml_int(node, 'minimum-prefix-length')
    yang.gdata.maybe_add(children, 'minimum-prefix-length', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__minimum_prefix_length, child_minimum_prefix_length)
    child_maximum_prefix_length = yang.gdata.from_xml_int(node, 'maximum-prefix-length')
    yang.gdata.maybe_add(children, 'maximum-prefix-length', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__maximum_prefix_length, child_maximum_prefix_length)
    child_origin_as_number = yang.gdata.from_xml_int(node, 'origin-as-number')
    yang.gdata.maybe_add(children, 'origin-as-number', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route__origin_as_number, child_origin_as_number)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_address), yang.gdata.yang_str(child_minimum_prefix_length), yang.gdata.yang_str(child_maximum_prefix_length), yang.gdata.yang_str(child_origin_as_number)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_element(e))
    return yang.gdata.List(keys=['address', 'minimum-prefix-length', 'maximum-prefix-length', 'origin-as-number'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(yang.adata.MNode):
    route: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route

    mut def __init__(self, route: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.route = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route(elements=route)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route = self.route
        if _route is not None:
            children['route'] = _route.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(route=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route.from_gdata(n.get_opt_list('route')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route = yang.gdata.from_xml_opt_list(node, 'route')
    yang.gdata.maybe_add(children, 'route', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes__route, child_route)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__datafile(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(yang.adata.MNode):
    servers: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers
    routes: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes
    datafile: ?str

    mut def __init__(self, servers: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers=None, routes: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes=None, datafile: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.servers = servers if servers is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers()
        self.routes = routes if routes is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes()
        self.datafile = datafile

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _servers = self.servers
        if _servers is not None:
            children['servers'] = _servers.to_gdata()
        _routes = self.routes
        if _routes is not None:
            children['routes'] = _routes.to_gdata()
        _datafile = self.datafile
        if _datafile is not None:
            children['datafile'] = yang.gdata.Leaf('string', _datafile)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(servers=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers.from_gdata(n.get_opt_container('servers')), routes=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes.from_gdata(n.get_opt_container('routes')), datafile=n.get_opt_str('datafile'))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_servers = yang.gdata.from_xml_opt_cnt(node, 'servers')
    yang.gdata.maybe_add(children, 'servers', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__servers, child_servers)
    child_routes = yang.gdata.from_xml_opt_cnt(node, 'routes')
    yang.gdata.maybe_add(children, 'routes', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__routes, child_routes)
    child_datafile = yang.gdata.from_xml_opt_str(node, 'datafile')
    yang.gdata.maybe_add(children, 'datafile', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki__datafile, child_datafile)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.af_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name=n.get_str('af-name'))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_af_name = yang.gdata.from_xml_str(node, 'af-name')
    yang.gdata.maybe_add(children, 'af-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family__af_name, child_af_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_af_name)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_element(e))
    return yang.gdata.List(keys=['af-name'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family(elements=address_family)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family.from_gdata(n.get_opt_list('address-family')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_family = yang.gdata.from_xml_opt_list(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families__address_family, child_address_family)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__neighbor_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__session_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__neighbor_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(yang.adata.MNode):
    session_group: ?str
    neighbor_group: ?str

    mut def __init__(self, session_group: ?str, neighbor_group: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.session_group = session_group
        self.neighbor_group = neighbor_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _session_group = self.session_group
        if _session_group is not None:
            children['session-group'] = yang.gdata.Leaf('string', _session_group)
        _neighbor_group = self.neighbor_group
        if _neighbor_group is not None:
            children['neighbor-group'] = yang.gdata.Leaf('string', _neighbor_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(session_group=n.get_opt_str('session-group'), neighbor_group=n.get_opt_str('neighbor-group'))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_session_group = yang.gdata.from_xml_opt_str(node, 'session-group')
    yang.gdata.maybe_add(children, 'session-group', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__session_group, child_session_group)
    child_neighbor_group = yang.gdata.from_xml_opt_str(node, 'neighbor-group')
    yang.gdata.maybe_add(children, 'neighbor-group', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use__neighbor_group, child_neighbor_group)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(yang.adata.MNode):
    neighbor_address: str
    use: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use
    description: ?str

    mut def __init__(self, neighbor_address: str, use: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use=None, description: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.neighbor_address = neighbor_address
        self.use = use if use is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use()
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_address = self.neighbor_address
        if _neighbor_address is not None:
            children['neighbor-address'] = yang.gdata.Leaf('union', _neighbor_address)
        _use = self.use
        if _use is not None:
            children['use'] = _use.to_gdata()
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.neighbor_address)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address=n.get_str('neighbor-address'), use=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use.from_gdata(n.get_opt_container('use')), description=n.get_opt_str('description'))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, neighbor_address):
        for e in self.elements:
            match = True
            if e.neighbor_address != neighbor_address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry(neighbor_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_neighbor_address = yang.gdata.from_xml_str(node, 'neighbor-address')
    yang.gdata.maybe_add(children, 'neighbor-address', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__neighbor_address, child_neighbor_address)
    child_use = yang.gdata.from_xml_opt_cnt(node, 'use')
    yang.gdata.maybe_add(children, 'use', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__use, child_use)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor__description, child_description)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_neighbor_address)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_element(e))
    return yang.gdata.List(keys=['neighbor-address'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(yang.adata.MNode):
    neighbor: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor

    mut def __init__(self, neighbor: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.neighbor = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor.from_gdata(n.get_opt_list('neighbor')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors__neighbor, child_neighbor)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__neighbor_group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.af_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name=n.get_str('af-name'))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_af_name = yang.gdata.from_xml_str(node, 'af-name')
    yang.gdata.maybe_add(children, 'af-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family__af_name, child_af_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_af_name)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_element(e))
    return yang.gdata.List(keys=['af-name'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family(elements=address_family)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family.from_gdata(n.get_opt_list('address-family')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_family = yang.gdata.from_xml_opt_list(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families__address_family, child_address_family)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__remote_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(yang.adata.MNode):
    encrypted: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable

    mut def __init__(self, encrypted: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.encrypted = encrypted
        self.inheritance_disable = inheritance_disable

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(encrypted=n.get_opt_str('encrypted'), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable.from_gdata(n.get_opt_container('inheritance-disable')))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_encrypted = yang.gdata.from_xml_opt_str(node, 'encrypted')
    yang.gdata.maybe_add(children, 'encrypted', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__encrypted, child_encrypted)
    child_inheritance_disable = yang.gdata.from_xml_opt_cnt(node, 'inheritance-disable')
    yang.gdata.maybe_add(children, 'inheritance-disable', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password__inheritance_disable, child_inheritance_disable)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update_source(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(yang.adata.MNode):
    neighbor_group_name: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families
    remote_as: ?str
    description: ?str
    password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password
    update_source: ?str

    mut def __init__(self, neighbor_group_name: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families=None, remote_as: ?str, description: ?str, password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password=None, update_source: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.neighbor_group_name = neighbor_group_name
        self.address_families = address_families if address_families is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families()
        self.remote_as = remote_as
        self.description = description
        self.password = password
        self.update_source = update_source

    mut def create_password(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password()
        self.password = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_group_name = self.neighbor_group_name
        if _neighbor_group_name is not None:
            children['neighbor-group-name'] = yang.gdata.Leaf('string', _neighbor_group_name)
        _address_families = self.address_families
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        _remote_as = self.remote_as
        if _remote_as is not None:
            children['remote-as'] = yang.gdata.Leaf('string', _remote_as)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _password = self.password
        if _password is not None:
            children['password'] = _password.to_gdata()
        _update_source = self.update_source
        if _update_source is not None:
            children['update-source'] = yang.gdata.Leaf('string', _update_source)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.neighbor_group_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name=n.get_str('neighbor-group-name'), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families.from_gdata(n.get_opt_container('address-families')), remote_as=n.get_opt_str('remote-as'), description=n.get_opt_str('description'), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password.from_gdata(n.get_opt_container('password')), update_source=n.get_opt_str('update-source'))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'neighbor-group'
        self.elements = elements

    mut def create(self, neighbor_group_name):
        for e in self.elements:
            match = True
            if e.neighbor_group_name != neighbor_group_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry(neighbor_group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_neighbor_group_name = yang.gdata.from_xml_str(node, 'neighbor-group-name')
    yang.gdata.maybe_add(children, 'neighbor-group-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__neighbor_group_name, child_neighbor_group_name)
    child_address_families = yang.gdata.from_xml_opt_cnt(node, 'address-families')
    yang.gdata.maybe_add(children, 'address-families', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__address_families, child_address_families)
    child_remote_as = yang.gdata.from_xml_opt_str(node, 'remote-as')
    yang.gdata.maybe_add(children, 'remote-as', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__remote_as, child_remote_as)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__description, child_description)
    child_password = yang.gdata.from_xml_opt_cnt(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__password, child_password)
    child_update_source = yang.gdata.from_xml_opt_str(node, 'update-source')
    yang.gdata.maybe_add(children, 'update-source', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group__update_source, child_update_source)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_neighbor_group_name)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_element(e))
    return yang.gdata.List(keys=['neighbor-group-name'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(yang.adata.MNode):
    neighbor_group: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group

    mut def __init__(self, neighbor_group: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.neighbor_group = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group(elements=neighbor_group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_group = self.neighbor_group
        if _neighbor_group is not None:
            children['neighbor-group'] = _neighbor_group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(neighbor_group=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group.from_gdata(n.get_opt_list('neighbor-group')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_neighbor_group = yang.gdata.from_xml_opt_list(node, 'neighbor-group')
    yang.gdata.maybe_add(children, 'neighbor-group', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups__neighbor_group, child_neighbor_group)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(yang.adata.MNode):
    router_id: ?str

    mut def __init__(self, router_id: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.router_id = router_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('string', _router_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(router_id=n.get_opt_str('router-id'))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_router_id = yang.gdata.from_xml_opt_str(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp__router_id, child_router_id)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__vrf_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.af_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name=n.get_str('af-name'))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_af_name = yang.gdata.from_xml_str(node, 'af-name')
    yang.gdata.maybe_add(children, 'af-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family__af_name, child_af_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_af_name)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_element(e))
    return yang.gdata.List(keys=['af-name'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family(elements=address_family)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family.from_gdata(n.get_opt_list('address-family')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_family = yang.gdata.from_xml_opt_list(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families__address_family, child_address_family)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__neighbor_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__in(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__out(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention__route_policy_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention__retention_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention(yang.adata.MNode):
    route_policy_name: ?str
    retention_time: ?int

    mut def __init__(self, route_policy_name: ?str, retention_time: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.route_policy_name = route_policy_name
        self.retention_time = retention_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy_name = self.route_policy_name
        if _route_policy_name is not None:
            children['route-policy-name'] = yang.gdata.Leaf('string', _route_policy_name)
        _retention_time = self.retention_time
        if _retention_time is not None:
            children['retention-time'] = yang.gdata.Leaf('uint32', _retention_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention(route_policy_name=n.get_opt_str('route-policy-name'), retention_time=n.get_opt_int('retention-time'))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_policy_name = yang.gdata.from_xml_opt_str(node, 'route-policy-name')
    yang.gdata.maybe_add(children, 'route-policy-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention__route_policy_name, child_route_policy_name)
    child_retention_time = yang.gdata.from_xml_opt_int(node, 'retention-time')
    yang.gdata.maybe_add(children, 'retention-time', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention__retention_time, child_retention_time)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy(yang.adata.MNode):
    in_: ?str
    out: ?str
    retention: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention

    mut def __init__(self, in_: ?str, out: ?str, retention: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.in_ = in_
        self.out = out
        self.retention = retention if retention is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _in_ = self.in_
        if _in_ is not None:
            children['in'] = yang.gdata.Leaf('string', _in_)
        _out = self.out
        if _out is not None:
            children['out'] = yang.gdata.Leaf('string', _out)
        _retention = self.retention
        if _retention is not None:
            children['retention'] = _retention.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy(in_=n.get_opt_str('in'), out=n.get_opt_str('out'), retention=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention.from_gdata(n.get_opt_container('retention')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_in_ = yang.gdata.from_xml_opt_str(node, 'in')
    yang.gdata.maybe_add(children, 'in', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__in, child_in_)
    child_out = yang.gdata.from_xml_opt_str(node, 'out')
    yang.gdata.maybe_add(children, 'out', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__out, child_out)
    child_retention = yang.gdata.from_xml_opt_cnt(node, 'retention')
    yang.gdata.maybe_add(children, 'retention', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy__retention, child_retention)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override(yang.adata.MNode):
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable

    mut def __init__(self, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.inheritance_disable = inheritance_disable

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override(inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable.from_gdata(n.get_opt_container('inheritance-disable')))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_inheritance_disable = yang.gdata.from_xml_opt_cnt(node, 'inheritance-disable')
    yang.gdata.maybe_add(children, 'inheritance-disable', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override__inheritance_disable, child_inheritance_disable)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry(yang.adata.MNode):
    af_name: str
    route_policy: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy
    as_override: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override

    mut def __init__(self, af_name: str, route_policy: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy=None, as_override: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.af_name = af_name
        self.route_policy = route_policy if route_policy is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy()
        self.as_override = as_override

    mut def create_as_override(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override()
        self.as_override = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        _route_policy = self.route_policy
        if _route_policy is not None:
            children['route-policy'] = _route_policy.to_gdata()
        _as_override = self.as_override
        if _as_override is not None:
            children['as-override'] = _as_override.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.af_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry(af_name=n.get_str('af-name'), route_policy=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy.from_gdata(n.get_opt_container('route-policy')), as_override=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override.from_gdata(n.get_opt_container('as-override')))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_af_name = yang.gdata.from_xml_str(node, 'af-name')
    yang.gdata.maybe_add(children, 'af-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__af_name, child_af_name)
    child_route_policy = yang.gdata.from_xml_opt_cnt(node, 'route-policy')
    yang.gdata.maybe_add(children, 'route-policy', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__route_policy, child_route_policy)
    child_as_override = yang.gdata.from_xml_opt_cnt(node, 'as-override')
    yang.gdata.maybe_add(children, 'as-override', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family__as_override, child_as_override)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_af_name)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_element(e))
    return yang.gdata.List(keys=['af-name'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.address_family = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family(elements=address_family)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families(address_family=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family.from_gdata(n.get_opt_list('address-family')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_family = yang.gdata.from_xml_opt_list(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families__address_family, child_address_family)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__remote_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__encrypted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password(yang.adata.MNode):
    encrypted: ?str
    inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable

    mut def __init__(self, encrypted: ?str, inheritance_disable: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.encrypted = encrypted
        self.inheritance_disable = inheritance_disable

    mut def create_inheritance_disable(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable()
        self.inheritance_disable = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encrypted = self.encrypted
        if _encrypted is not None:
            children['encrypted'] = yang.gdata.Leaf('string', _encrypted)
        _inheritance_disable = self.inheritance_disable
        if _inheritance_disable is not None:
            children['inheritance-disable'] = _inheritance_disable.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password(encrypted=n.get_opt_str('encrypted'), inheritance_disable=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable.from_gdata(n.get_opt_container('inheritance-disable')))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_encrypted = yang.gdata.from_xml_opt_str(node, 'encrypted')
    yang.gdata.maybe_add(children, 'encrypted', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__encrypted, child_encrypted)
    child_inheritance_disable = yang.gdata.from_xml_opt_cnt(node, 'inheritance-disable')
    yang.gdata.maybe_add(children, 'inheritance-disable', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password__inheritance_disable, child_inheritance_disable)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry(yang.adata.MNode):
    neighbor_address: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families
    remote_as: ?str
    description: ?str
    password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password

    mut def __init__(self, neighbor_address: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families=None, remote_as: ?str, description: ?str, password: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.neighbor_address = neighbor_address
        self.address_families = address_families if address_families is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families()
        self.remote_as = remote_as
        self.description = description
        self.password = password

    mut def create_password(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password()
        self.password = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor_address = self.neighbor_address
        if _neighbor_address is not None:
            children['neighbor-address'] = yang.gdata.Leaf('union', _neighbor_address)
        _address_families = self.address_families
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        _remote_as = self.remote_as
        if _remote_as is not None:
            children['remote-as'] = yang.gdata.Leaf('string', _remote_as)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _password = self.password
        if _password is not None:
            children['password'] = _password.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.neighbor_address)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry(neighbor_address=n.get_str('neighbor-address'), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families.from_gdata(n.get_opt_container('address-families')), remote_as=n.get_opt_str('remote-as'), description=n.get_opt_str('description'), password=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password.from_gdata(n.get_opt_container('password')))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, neighbor_address):
        for e in self.elements:
            match = True
            if e.neighbor_address != neighbor_address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry(neighbor_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['neighbor-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_neighbor_address = yang.gdata.from_xml_str(node, 'neighbor-address')
    yang.gdata.maybe_add(children, 'neighbor-address', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__neighbor_address, child_neighbor_address)
    child_address_families = yang.gdata.from_xml_opt_cnt(node, 'address-families')
    yang.gdata.maybe_add(children, 'address-families', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__address_families, child_address_families)
    child_remote_as = yang.gdata.from_xml_opt_str(node, 'remote-as')
    yang.gdata.maybe_add(children, 'remote-as', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__remote_as, child_remote_as)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__description, child_description)
    child_password = yang.gdata.from_xml_opt_cnt(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor__password, child_password)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_neighbor_address)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_element(e))
    return yang.gdata.List(keys=['neighbor-address'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors(yang.adata.MNode):
    neighbor: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor

    mut def __init__(self, neighbor: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.neighbor = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors(neighbor=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor.from_gdata(n.get_opt_list('neighbor')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors__neighbor, child_neighbor)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto()
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as(yang.adata.MNode):
    as_number: ?str
    index: ?int

    mut def __init__(self, as_number: ?str, index: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as(as_number=n.get_opt_str('as-number'), index=n.get_opt_int('index'))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_str(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as__as_number, child_as_number)
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as__index, child_index)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as(yang.adata.MNode):
    as_number: ?str
    index: ?int

    mut def __init__(self, as_number: ?str, index: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as(as_number=n.get_opt_str('as-number'), index=n.get_opt_int('index'))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_str(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as__as_number, child_as_number)
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as__index, child_index)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address(yang.adata.MNode):
    ipv4_address: ?str
    index: ?int

    mut def __init__(self, ipv4_address: ?str, index: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.ipv4_address = ipv4_address
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address(ipv4_address=n.get_opt_str('ipv4-address'), index=n.get_opt_int('index'))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_address = yang.gdata.from_xml_opt_str(node, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address__ipv4_address, child_ipv4_address)
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address__index, child_index)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd(yang.adata.MNode):
    auto: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto
    two_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as
    four_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as
    ip_address: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address

    mut def __init__(self, auto: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto=None, two_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as=None, four_byte_as: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as=None, ip_address: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.auto = auto
        self.two_byte_as = two_byte_as
        self.four_byte_as = four_byte_as
        self.ip_address = ip_address

    mut def create_auto(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto()
        self.auto = res
        return res

    mut def create_two_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as(as_number, index)
        self.two_byte_as = res
        return res

    mut def create_four_byte_as(self, as_number, index):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as(as_number, index)
        self.four_byte_as = res
        return res

    mut def create_ip_address(self, ipv4_address, index):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address(ipv4_address, index)
        self.ip_address = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _auto = self.auto
        if _auto is not None:
            children['auto'] = _auto.to_gdata()
        _two_byte_as = self.two_byte_as
        if _two_byte_as is not None:
            children['two-byte-as'] = _two_byte_as.to_gdata()
        _four_byte_as = self.four_byte_as
        if _four_byte_as is not None:
            children['four-byte-as'] = _four_byte_as.to_gdata()
        _ip_address = self.ip_address
        if _ip_address is not None:
            children['ip-address'] = _ip_address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd(auto=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto.from_gdata(n.get_opt_container('auto')), two_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as.from_gdata(n.get_opt_container('two-byte-as')), four_byte_as=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as.from_gdata(n.get_opt_container('four-byte-as')), ip_address=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address.from_gdata(n.get_opt_container('ip-address')))
        return None


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_auto = yang.gdata.from_xml_opt_cnt(node, 'auto')
    yang.gdata.maybe_add(children, 'auto', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__auto, child_auto)
    child_two_byte_as = yang.gdata.from_xml_opt_cnt(node, 'two-byte-as')
    yang.gdata.maybe_add(children, 'two-byte-as', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__two_byte_as, child_two_byte_as)
    child_four_byte_as = yang.gdata.from_xml_opt_cnt(node, 'four-byte-as')
    yang.gdata.maybe_add(children, 'four-byte-as', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__four_byte_as, child_four_byte_as)
    child_ip_address = yang.gdata.from_xml_opt_cnt(node, 'ip-address')
    yang.gdata.maybe_add(children, 'ip-address', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd__ip_address, child_ip_address)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(yang.adata.MNode):
    vrf_name: str
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families
    neighbors: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors
    rd: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd

    mut def __init__(self, vrf_name: str, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families=None, neighbors: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors=None, rd: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.vrf_name = vrf_name
        self.address_families = address_families if address_families is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families()
        self.neighbors = neighbors if neighbors is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors()
        self.rd = rd

    mut def create_rd(self):
        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd()
        self.rd = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf_name = self.vrf_name
        if _vrf_name is not None:
            children['vrf-name'] = yang.gdata.Leaf('string', _vrf_name)
        _address_families = self.address_families
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        _neighbors = self.neighbors
        if _neighbors is not None:
            children['neighbors'] = _neighbors.to_gdata()
        _rd = self.rd
        if _rd is not None:
            children['rd'] = _rd.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.vrf_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name=n.get_str('vrf-name'), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families.from_gdata(n.get_opt_container('address-families')), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors.from_gdata(n.get_opt_container('neighbors')), rd=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd.from_gdata(n.get_opt_container('rd')))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, vrf_name):
        for e in self.elements:
            match = True
            if e.vrf_name != vrf_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry(vrf_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_vrf_name = yang.gdata.from_xml_str(node, 'vrf-name')
    yang.gdata.maybe_add(children, 'vrf-name', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__vrf_name, child_vrf_name)
    child_address_families = yang.gdata.from_xml_opt_cnt(node, 'address-families')
    yang.gdata.maybe_add(children, 'address-families', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__address_families, child_address_families)
    child_neighbors = yang.gdata.from_xml_opt_cnt(node, 'neighbors')
    yang.gdata.maybe_add(children, 'neighbors', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__neighbors, child_neighbors)
    child_rd = yang.gdata.from_xml_opt_cnt(node, 'rd')
    yang.gdata.maybe_add(children, 'rd', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf__rd, child_rd)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_vrf_name)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_element(e))
    return yang.gdata.List(keys=['vrf-name'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(yang.adata.MNode):
    vrf: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf

    mut def __init__(self, vrf: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.vrf = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf(elements=vrf)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(vrf=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf.from_gdata(n.get_opt_list('vrf')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_vrf = yang.gdata.from_xml_opt_list(node, 'vrf')
    yang.gdata.maybe_add(children, 'vrf', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs__vrf, child_vrf)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(yang.adata.MNode):
    as_number: str
    rpki: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki
    address_families: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families
    neighbors: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors
    neighbor_groups: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups
    bgp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp
    vrfs: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs

    mut def __init__(self, as_number: str, rpki: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki=None, address_families: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families=None, neighbors: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors=None, neighbor_groups: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups=None, bgp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp=None, vrfs: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_number = as_number
        self.rpki = rpki if rpki is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki()
        self.address_families = address_families if address_families is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families()
        self.neighbors = neighbors if neighbors is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors()
        self.neighbor_groups = neighbor_groups if neighbor_groups is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups()
        self.bgp = bgp if bgp is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp()
        self.vrfs = vrfs if vrfs is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        _rpki = self.rpki
        if _rpki is not None:
            children['rpki'] = _rpki.to_gdata()
        _address_families = self.address_families
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        _neighbors = self.neighbors
        if _neighbors is not None:
            children['neighbors'] = _neighbors.to_gdata()
        _neighbor_groups = self.neighbor_groups
        if _neighbor_groups is not None:
            children['neighbor-groups'] = _neighbor_groups.to_gdata()
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        _vrfs = self.vrfs
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.as_number)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry:
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number=n.get_str('as-number'), rpki=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki.from_gdata(n.get_opt_container('rpki')), address_families=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families.from_gdata(n.get_opt_container('address-families')), neighbors=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors.from_gdata(n.get_opt_container('neighbors')), neighbor_groups=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups.from_gdata(n.get_opt_container('neighbor-groups')), bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp.from_gdata(n.get_opt_container('bgp')), vrfs=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs.from_gdata(n.get_opt_container('vrfs')))

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self._name = 'as'
        self.elements = elements

    mut def create(self, as_number):
        for e in self.elements:
            match = True
            if e.as_number != as_number:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry(as_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['as-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_as_number = yang.gdata.from_xml_str(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__as_number, child_as_number)
    child_rpki = yang.gdata.from_xml_opt_cnt(node, 'rpki')
    yang.gdata.maybe_add(children, 'rpki', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__rpki, child_rpki)
    child_address_families = yang.gdata.from_xml_opt_cnt(node, 'address-families')
    yang.gdata.maybe_add(children, 'address-families', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__address_families, child_address_families)
    child_neighbors = yang.gdata.from_xml_opt_cnt(node, 'neighbors')
    yang.gdata.maybe_add(children, 'neighbors', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbors, child_neighbors)
    child_neighbor_groups = yang.gdata.from_xml_opt_cnt(node, 'neighbor-groups')
    yang.gdata.maybe_add(children, 'neighbor-groups', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__neighbor_groups, child_neighbor_groups)
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__bgp, child_bgp)
    child_vrfs = yang.gdata.from_xml_opt_cnt(node, 'vrfs')
    yang.gdata.maybe_add(children, 'vrfs', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as__vrfs, child_vrfs)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_as_number)])

mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_element(e))
    return yang.gdata.List(keys=['as-number'], elements=elements)

class Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(yang.adata.MNode):
    as_: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as

    mut def __init__(self, as_: list[Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.as_ = Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as(elements=as_)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_ = self.as_
        if _as_ is not None:
            children['as'] = _as_.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router__bgp:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(as_=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as.from_gdata(n.get_opt_list('as')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_ = yang.gdata.from_xml_opt_list(node, 'as')
    yang.gdata.maybe_add(children, 'as', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp__as, child_as_)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_router_bgp_cfg__router(yang.adata.MNode):
    bgp: Cisco_IOS_XR_um_router_bgp_cfg__router__bgp

    mut def __init__(self, bgp: ?Cisco_IOS_XR_um_router_bgp_cfg__router__bgp=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg'
        self.bgp = bgp if bgp is not None else Cisco_IOS_XR_um_router_bgp_cfg__router__bgp()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_router_bgp_cfg__router:
        if n != None:
            return Cisco_IOS_XR_um_router_bgp_cfg__router(bgp=Cisco_IOS_XR_um_router_bgp_cfg__router__bgp.from_gdata(n.get_opt_container('bgp')))
        return Cisco_IOS_XR_um_router_bgp_cfg__router()


mut def from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router__bgp, child_bgp)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg', module='Cisco-IOS-XR-um-router-bgp-cfg')

mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family__af_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_entry(yang.adata.MNode):
    af_name: str

    mut def __init__(self, af_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg'
        self.af_name = af_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _af_name = self.af_name
        if _af_name is not None:
            children['af-name'] = yang.gdata.Leaf('enumeration', _af_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.af_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_entry:
        return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_entry(af_name=n.get_str('af-name'))

class Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg'
        self._name = 'address-family'
        self.elements = elements

    mut def create(self, af_name):
        for e in self.elements:
            match = True
            if e.af_name != af_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_entry(af_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['af-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_af_name = yang.gdata.from_xml_str(node, 'af-name')
    yang.gdata.maybe_add(children, 'af-name', from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family__af_name, child_af_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_af_name)])

mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_element(e))
    return yang.gdata.List(keys=['af-name'], elements=elements)

class Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family

    mut def __init__(self, address_family: list[Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg'
        self.address_family = Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family(elements=address_family)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families:
        if n != None:
            return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families(address_family=Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family.from_gdata(n.get_opt_list('address-family')))
        return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families()


mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_family = yang.gdata.from_xml_opt_list(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families__address_family, child_address_family)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str

    mut def __init__(self, interface_name: str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg'
        self.interface_name = interface_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.interface_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_entry:
        return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_entry(interface_name=n.get_str('interface-name'))

class Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_interface_name = yang.gdata.from_xml_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface__interface_name, child_interface_name)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_interface_name)])

mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_element(e))
    return yang.gdata.List(keys=['interface-name'], elements=elements)

class Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg'
        self.interface = Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces(interface=Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface.from_gdata(n.get_opt_list('interface')))
        return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces()


mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces__interface, child_interface)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp(yang.adata.MNode):
    address_families: Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families
    interfaces: Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces

    mut def __init__(self, address_families: ?Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families=None, interfaces: ?Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg'
        self.address_families = address_families if address_families is not None else Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families()
        self.interfaces = interfaces if interfaces is not None else Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_families = self.address_families
        if _address_families is not None:
            children['address-families'] = _address_families.to_gdata()
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp:
        if n != None:
            return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp(address_families=Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families.from_gdata(n.get_opt_container('address-families')), interfaces=Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces.from_gdata(n.get_opt_container('interfaces')))
        return None


mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_families = yang.gdata.from_xml_opt_cnt(node, 'address-families')
    yang.gdata.maybe_add(children, 'address-families', from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__address_families, child_address_families)
    child_interfaces = yang.gdata.from_xml_opt_cnt(node, 'interfaces')
    yang.gdata.maybe_add(children, 'interfaces', from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp__interfaces, child_interfaces)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_mpls_ldp_cfg__mpls(yang.adata.MNode):
    ldp: ?Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp

    mut def __init__(self, ldp: ?Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg'
        self.ldp = ldp

    mut def create_ldp(self):
        res = Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp()
        self.ldp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ldp = self.ldp
        if _ldp is not None:
            children['ldp'] = _ldp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg', module='Cisco-IOS-XR-um-mpls-ldp-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_mpls_ldp_cfg__mpls:
        if n != None:
            return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls(ldp=Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp.from_gdata(n.get_opt_container('ldp')))
        return Cisco_IOS_XR_um_mpls_ldp_cfg__mpls()


mut def from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ldp = yang.gdata.from_xml_opt_cnt(node, 'ldp')
    yang.gdata.maybe_add(children, 'ldp', from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls__ldp, child_ldp)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg', module='Cisco-IOS-XR-um-mpls-ldp-cfg')

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(yang.adata.MNode):
    l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport
    point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point
    multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint

    mut def __init__(self, l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport=None, point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point=None, multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        self.l2transport = l2transport
        self.point_to_point = point_to_point
        self.multipoint = multipoint

    mut def create_l2transport(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        self.l2transport = res
        return res

    mut def create_point_to_point(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        self.point_to_point = res
        return res

    mut def create_multipoint(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        self.multipoint = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l2transport = self.l2transport
        if _l2transport is not None:
            children['l2transport'] = _l2transport.to_gdata()
        _point_to_point = self.point_to_point
        if _point_to_point is not None:
            children['point-to-point'] = _point_to_point.to_gdata()
        _multipoint = self.multipoint
        if _multipoint is not None:
            children['multipoint'] = _multipoint.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_gdata(n.get_opt_container('l2transport')), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_gdata(n.get_opt_container('point-to-point')), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_gdata(n.get_opt_container('multipoint')))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_l2transport = yang.gdata.from_xml_opt_cnt(node, 'l2transport')
    yang.gdata.maybe_add(children, 'l2transport', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport, child_l2transport)
    child_point_to_point = yang.gdata.from_xml_opt_cnt(node, 'point-to-point')
    yang.gdata.maybe_add(children, 'point-to-point', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point, child_point_to_point)
    child_multipoint = yang.gdata.from_xml_opt_cnt(node, 'multipoint')
    yang.gdata.maybe_add(children, 'multipoint', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint, child_multipoint)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__netmask(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(yang.adata.MNode):
    address: ?str
    netmask: ?str
    route_tag: ?int
    algorithm: ?int

    mut def __init__(self, address: ?str, netmask: ?str, route_tag: ?int, algorithm: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg'
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        _netmask = self.netmask
        if _netmask is not None:
            children['netmask'] = yang.gdata.Leaf('string', _netmask)
        _route_tag = self.route_tag
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        _algorithm = self.algorithm
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=n.get_opt_str('address'), netmask=n.get_opt_str('netmask'), route_tag=n.get_opt_int('route-tag'), algorithm=n.get_opt_int('algorithm'))
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__address, child_address)
    child_netmask = yang.gdata.from_xml_opt_str(node, 'netmask')
    yang.gdata.maybe_add(children, 'netmask', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__netmask, child_netmask)
    child_route_tag = yang.gdata.from_xml_opt_int(node, 'route-tag')
    yang.gdata.maybe_add(children, 'route-tag', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__route_tag, child_route_tag)
    child_algorithm = yang.gdata.from_xml_opt_int(node, 'algorithm')
    yang.gdata.maybe_add(children, 'algorithm', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address__algorithm, child_algorithm)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__netmask(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(yang.adata.MNode):
    address: str
    netmask: ?str
    route_tag: ?int
    algorithm: ?int

    mut def __init__(self, address: str, netmask: ?str, route_tag: ?int, algorithm: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg'
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        _netmask = self.netmask
        if _netmask is not None:
            children['netmask'] = yang.gdata.Leaf('string', _netmask)
        _route_tag = self.route_tag
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        _algorithm = self.algorithm
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('uint32', _algorithm)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.address)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=n.get_str('address'), netmask=n.get_opt_str('netmask'), route_tag=n.get_opt_int('route-tag'), algorithm=n.get_opt_int('algorithm'))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg'
        self._name = 'secondary'
        self.elements = elements

    mut def create(self, address, netmask):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address, netmask)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_address = yang.gdata.from_xml_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__address, child_address)
    child_netmask = yang.gdata.from_xml_opt_str(node, 'netmask')
    yang.gdata.maybe_add(children, 'netmask', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__netmask, child_netmask)
    child_route_tag = yang.gdata.from_xml_opt_int(node, 'route-tag')
    yang.gdata.maybe_add(children, 'route-tag', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__route_tag, child_route_tag)
    child_algorithm = yang.gdata.from_xml_opt_int(node, 'algorithm')
    yang.gdata.maybe_add(children, 'algorithm', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary__algorithm, child_algorithm)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_address)])

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_element(e))
    return yang.gdata.List(keys=['address'], elements=elements)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(yang.adata.MNode):
    secondary: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary

    mut def __init__(self, secondary: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg'
        self.secondary = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(elements=secondary)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _secondary = self.secondary
        if _secondary is not None:
            children['secondary'] = _secondary.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_gdata(n.get_opt_list('secondary')))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_secondary = yang.gdata.from_xml_opt_list(node, 'secondary')
    yang.gdata.maybe_add(children, 'secondary', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary, child_secondary)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__unnumbered(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address
    secondaries: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries
    unnumbered: ?str
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp

    mut def __init__(self, address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address=None, secondaries: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries=None, unnumbered: ?str, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg'
        self.address = address
        self.secondaries = secondaries if secondaries is not None else Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()
        self.unnumbered = unnumbered
        self.dhcp = dhcp

    mut def create_address(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address, netmask)
        self.address = res
        return res

    mut def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        self.dhcp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        _secondaries = self.secondaries
        if _secondaries is not None:
            children['secondaries'] = _secondaries.to_gdata()
        _unnumbered = self.unnumbered
        if _unnumbered is not None:
            children['unnumbered'] = yang.gdata.Leaf('string', _unnumbered)
        _dhcp = self.dhcp
        if _dhcp is not None:
            children['dhcp'] = _dhcp.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg', module='Cisco-IOS-XR-um-if-ip-address-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_gdata(n.get_opt_container('address')), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_gdata(n.get_opt_container('secondaries')), unnumbered=n.get_opt_str('unnumbered'), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_gdata(n.get_opt_container('dhcp')))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_cnt(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address, child_address)
    child_secondaries = yang.gdata.from_xml_opt_cnt(node, 'secondaries')
    yang.gdata.maybe_add(children, 'secondaries', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries, child_secondaries)
    child_unnumbered = yang.gdata.from_xml_opt_str(node, 'unnumbered')
    yang.gdata.maybe_add(children, 'unnumbered', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__unnumbered, child_unnumbered)
    child_dhcp = yang.gdata.from_xml_opt_cnt(node, 'dhcp')
    yang.gdata.maybe_add(children, 'dhcp', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp, child_dhcp)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg', module='Cisco-IOS-XR-um-if-ip-address-cfg')

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses

    mut def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        self.addresses = addresses if addresses is not None else Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _addresses = self.addresses
        if _addresses is not None:
            children['addresses'] = _addresses.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_gdata(n.get_opt_container('addresses')))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_addresses = yang.gdata.from_xml_opt_cnt(node, 'addresses', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg')
    yang.gdata.maybe_add(children, 'addresses', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses, child_addresses)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp()
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc()
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr()
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF()
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay(yang.adata.MNode):
    IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF

    mut def __init__(self, IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        self.IETF = IETF

    mut def create_IETF(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF()
        self.IETF = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _IETF = self.IETF
        if _IETF is not None:
            children['IETF'] = _IETF.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF.from_gdata(n.get_opt_container('IETF')))
        return None


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_IETF = yang.gdata.from_xml_opt_cnt(node, 'IETF')
    yang.gdata.maybe_add(children, 'IETF', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay__IETF, child_IETF)
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation(yang.adata.MNode):
    ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp
    hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc
    mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr
    frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay

    mut def __init__(self, ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp=None, hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc=None, mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr=None, frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        self.ppp = ppp
        self.hdlc = hdlc
        self.mfr = mfr
        self.frame_relay = frame_relay

    mut def create_ppp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp()
        self.ppp = res
        return res

    mut def create_hdlc(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc()
        self.hdlc = res
        return res

    mut def create_mfr(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr()
        self.mfr = res
        return res

    mut def create_frame_relay(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay()
        self.frame_relay = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ppp = self.ppp
        if _ppp is not None:
            children['ppp'] = _ppp.to_gdata()
        _hdlc = self.hdlc
        if _hdlc is not None:
            children['hdlc'] = _hdlc.to_gdata()
        _mfr = self.mfr
        if _mfr is not None:
            children['mfr'] = _mfr.to_gdata()
        _frame_relay = self.frame_relay
        if _frame_relay is not None:
            children['frame-relay'] = _frame_relay.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp.from_gdata(n.get_opt_container('ppp')), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc.from_gdata(n.get_opt_container('hdlc')), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr.from_gdata(n.get_opt_container('mfr')), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay.from_gdata(n.get_opt_container('frame-relay')))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ppp = yang.gdata.from_xml_opt_cnt(node, 'ppp')
    yang.gdata.maybe_add(children, 'ppp', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__ppp, child_ppp)
    child_hdlc = yang.gdata.from_xml_opt_cnt(node, 'hdlc')
    yang.gdata.maybe_add(children, 'hdlc', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__hdlc, child_hdlc)
    child_mfr = yang.gdata.from_xml_opt_cnt(node, 'mfr')
    yang.gdata.maybe_add(children, 'mfr', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__mfr, child_mfr)
    child_frame_relay = yang.gdata.from_xml_opt_cnt(node, 'frame-relay')
    yang.gdata.maybe_add(children, 'frame-relay', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation__frame_relay, child_frame_relay)
    return yang.gdata.Container(children)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg', module='Cisco-IOS-XR-um-if-vrf-cfg')

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q__second_dot1q(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q(yang.adata.MNode):
    vlan_id: ?int
    second_dot1q: ?int

    mut def __init__(self, vlan_id: ?int, second_dot1q: ?int):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg'
        self.vlan_id = vlan_id
        self.second_dot1q = second_dot1q

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('uint32', _vlan_id)
        _second_dot1q = self.second_dot1q
        if _second_dot1q is not None:
            children['second-dot1q'] = yang.gdata.Leaf('uint32', _second_dot1q)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q(vlan_id=n.get_opt_int('vlan-id'), second_dot1q=n.get_opt_int('second-dot1q'))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_vlan_id = yang.gdata.from_xml_opt_int(node, 'vlan-id')
    yang.gdata.maybe_add(children, 'vlan-id', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q__vlan_id, child_vlan_id)
    child_second_dot1q = yang.gdata.from_xml_opt_int(node, 'second-dot1q')
    yang.gdata.maybe_add(children, 'second-dot1q', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q__second_dot1q, child_second_dot1q)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation(yang.adata.MNode):
    dot1q: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q

    mut def __init__(self, dot1q: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg'
        self.dot1q = dot1q if dot1q is not None else Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dot1q = self.dot1q
        if _dot1q is not None:
            children['dot1q'] = _dot1q.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg', module='Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation(dot1q=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q.from_gdata(n.get_opt_container('dot1q')))
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_dot1q = yang.gdata.from_xml_opt_cnt(node, 'dot1q')
    yang.gdata.maybe_add(children, 'dot1q', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation__dot1q, child_dot1q)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg', module='Cisco-IOS-XR-um-l2-ethernet-cfg')

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    sub_interface_type: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6
    um_interface_cfg_encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation
    shutdown: ?bool
    mtu: ?int
    description: ?str
    vrf: ?str
    um_l2_ethernet_cfg_encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation

    mut def __init__(self, interface_name: str, sub_interface_type: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type=None, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6=None, um_interface_cfg_encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation=None, shutdown: ?bool, mtu: ?int, description: ?str, vrf: ?str, um_l2_ethernet_cfg_encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        self.interface_name = interface_name
        self.sub_interface_type = sub_interface_type if sub_interface_type is not None else Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()
        self.ipv4 = ipv4 if ipv4 is not None else Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()
        self.ipv6 = ipv6 if ipv6 is not None else Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        self.um_interface_cfg_encapsulation = um_interface_cfg_encapsulation if um_interface_cfg_encapsulation is not None else Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation()
        self.shutdown = shutdown
        self.mtu = mtu
        self.description = description
        self.vrf = vrf
        self.um_l2_ethernet_cfg_encapsulation = um_l2_ethernet_cfg_encapsulation if um_l2_ethernet_cfg_encapsulation is not None else Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        _sub_interface_type = self.sub_interface_type
        if _sub_interface_type is not None:
            children['sub-interface-type'] = _sub_interface_type.to_gdata()
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        _um_interface_cfg_encapsulation = self.um_interface_cfg_encapsulation
        if _um_interface_cfg_encapsulation is not None:
            children['um-interface-cfg:encapsulation'] = _um_interface_cfg_encapsulation.to_gdata()
        _shutdown = self.shutdown
        if _shutdown is not None:
            children['shutdown'] = yang.gdata.Leaf('empty', _shutdown)
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('uint32', _mtu)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg', module='Cisco-IOS-XR-um-if-vrf-cfg')
        _um_l2_ethernet_cfg_encapsulation = self.um_l2_ethernet_cfg_encapsulation
        if _um_l2_ethernet_cfg_encapsulation is not None:
            children['um-l2-ethernet-cfg:encapsulation'] = _um_l2_ethernet_cfg_encapsulation.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.interface_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=n.get_str('interface-name'), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_gdata(n.get_opt_container('sub-interface-type')), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_gdata(n.get_opt_container('ipv4')), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_gdata(n.get_opt_container('ipv6')), um_interface_cfg_encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation.from_gdata(n.get_opt_container('um-interface-cfg:encapsulation')), shutdown=n.get_opt_bool('shutdown'), mtu=n.get_opt_int('mtu'), description=n.get_opt_str('description'), vrf=n.get_opt_str('vrf'), um_l2_ethernet_cfg_encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation.from_gdata(n.get_opt_container('um-l2-ethernet-cfg:encapsulation')))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_interface_name = yang.gdata.from_xml_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__interface_name, child_interface_name)
    child_sub_interface_type = yang.gdata.from_xml_opt_cnt(node, 'sub-interface-type')
    yang.gdata.maybe_add(children, 'sub-interface-type', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type, child_sub_interface_type)
    child_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'ipv4')
    yang.gdata.maybe_add(children, 'ipv4', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4, child_ipv4)
    child_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'ipv6')
    yang.gdata.maybe_add(children, 'ipv6', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6, child_ipv6)
    child_um_interface_cfg_encapsulation = yang.gdata.from_xml_opt_cnt(node, 'encapsulation')
    yang.gdata.maybe_add(children, 'um-interface-cfg:encapsulation', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_interface_cfg_encapsulation, child_um_interface_cfg_encapsulation)
    child_shutdown = yang.gdata.from_xml_opt_empty(node, 'shutdown')
    yang.gdata.maybe_add(children, 'shutdown', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown, child_shutdown)
    child_mtu = yang.gdata.from_xml_opt_int(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__mtu, child_mtu)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__description, child_description)
    child_vrf = yang.gdata.from_xml_opt_str(node, 'vrf', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg')
    yang.gdata.maybe_add(children, 'vrf', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__vrf, child_vrf)
    child_um_l2_ethernet_cfg_encapsulation = yang.gdata.from_xml_opt_cnt(node, 'encapsulation', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')
    yang.gdata.maybe_add(children, 'um-l2-ethernet-cfg:encapsulation', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface__um_l2_ethernet_cfg_encapsulation, child_um_l2_ethernet_cfg_encapsulation)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_interface_name)])

mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface_element(e))
    return yang.gdata.List(keys=['interface-name'], elements=elements)

class Cisco_IOS_XR_um_interface_cfg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_interface_cfg__interfaces__interface

    mut def __init__(self, interface: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg'
        self.interface = Cisco_IOS_XR_um_interface_cfg__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg', module='Cisco-IOS-XR-um-interface-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        if n != None:
            return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_gdata(n.get_opt_list('interface')))
        return Cisco_IOS_XR_um_interface_cfg__interfaces()


mut def from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces__interface, child_interface)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg', module='Cisco-IOS-XR-um-interface-cfg')

class Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict()
        return None


mut def from_xml_Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter(yang.adata.MNode):
    strict: ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict

    mut def __init__(self, strict: ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg'
        self.strict = strict

    mut def create_strict(self):
        res = Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict()
        self.strict = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _strict = self.strict
        if _strict is not None:
            children['strict'] = _strict.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter(strict=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict.from_gdata(n.get_opt_container('strict')))
        return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter()


mut def from_xml_Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_strict = yang.gdata.from_xml_opt_cnt(node, 'strict')
    yang.gdata.maybe_add(children, 'strict', from_xml_Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter__strict, child_strict)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet(yang.adata.MNode):
    egress_filter: Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter

    mut def __init__(self, egress_filter: ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg'
        self.egress_filter = egress_filter if egress_filter is not None else Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _egress_filter = self.egress_filter
        if _egress_filter is not None:
            children['egress-filter'] = _egress_filter.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg', module='Cisco-IOS-XR-um-l2-ethernet-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet:
        if n != None:
            return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet(egress_filter=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter.from_gdata(n.get_opt_container('egress-filter')))
        return Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet()


mut def from_xml_Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_egress_filter = yang.gdata.from_xml_opt_cnt(node, 'egress-filter')
    yang.gdata.maybe_add(children, 'egress-filter', from_xml_Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet__egress_filter, child_egress_filter)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg', module='Cisco-IOS-XR-um-l2-ethernet-cfg')

mut def from_xml_Cisco_IOS_XR_um_hostname_cfg__hostname__system_network_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_um_hostname_cfg__hostname(yang.adata.MNode):
    system_network_name: ?str

    mut def __init__(self, system_network_name: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg'
        self.system_network_name = system_network_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _system_network_name = self.system_network_name
        if _system_network_name is not None:
            children['system-network-name'] = yang.gdata.Leaf('string', _system_network_name)
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg', module='Cisco-IOS-XR-um-hostname-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        if n != None:
            return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=n.get_opt_str('system-network-name'))
        return Cisco_IOS_XR_um_hostname_cfg__hostname()


mut def from_xml_Cisco_IOS_XR_um_hostname_cfg__hostname(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_system_network_name = yang.gdata.from_xml_opt_str(node, 'system-network-name')
    yang.gdata.maybe_add(children, 'system-network-name', from_xml_Cisco_IOS_XR_um_hostname_cfg__hostname__system_network_name, child_system_network_name)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg', module='Cisco-IOS-XR-um-hostname-cfg')

mut def from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy__route_policy_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy__rpl_route_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_entry(yang.adata.MNode):
    route_policy_name: str
    rpl_route_policy: ?str

    mut def __init__(self, route_policy_name: str, rpl_route_policy: ?str):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg'
        self.route_policy_name = route_policy_name
        self.rpl_route_policy = rpl_route_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy_name = self.route_policy_name
        if _route_policy_name is not None:
            children['route-policy-name'] = yang.gdata.Leaf('string', _route_policy_name)
        _rpl_route_policy = self.rpl_route_policy
        if _rpl_route_policy is not None:
            children['rpl-route-policy'] = yang.gdata.Leaf('string', _rpl_route_policy)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.route_policy_name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_entry:
        return Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_entry(route_policy_name=n.get_str('route-policy-name'), rpl_route_policy=n.get_opt_str('rpl-route-policy'))

class Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg'
        self._name = 'route-policy'
        self.elements = elements

    mut def create(self, route_policy_name, rpl_route_policy):
        for e in self.elements:
            match = True
            if e.route_policy_name != route_policy_name:
                match = False
                continue
            if match:
                return e

        res = Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_entry(route_policy_name, rpl_route_policy)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['route-policy-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_entry.from_gdata(e))
        return res


mut def from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_route_policy_name = yang.gdata.from_xml_str(node, 'route-policy-name')
    yang.gdata.maybe_add(children, 'route-policy-name', from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy__route_policy_name, child_route_policy_name)
    child_rpl_route_policy = yang.gdata.from_xml_opt_str(node, 'rpl-route-policy')
    yang.gdata.maybe_add(children, 'rpl-route-policy', from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy__rpl_route_policy, child_rpl_route_policy)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_route_policy_name)])

mut def from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_element(e))
    return yang.gdata.List(keys=['route-policy-name'], elements=elements)

class Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies(yang.adata.MNode):
    route_policy: Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy

    mut def __init__(self, route_policy: list[Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy_entry]=[]):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg'
        self.route_policy = Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy(elements=route_policy)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policy = self.route_policy
        if _route_policy is not None:
            children['route-policy'] = _route_policy.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies:
        if n != None:
            return Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies(route_policy=Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy.from_gdata(n.get_opt_list('route-policy')))
        return Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies()


mut def from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_policy = yang.gdata.from_xml_opt_list(node, 'route-policy')
    yang.gdata.maybe_add(children, 'route-policy', from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies__route_policy, child_route_policy)
    return yang.gdata.Container(children)

class Cisco_IOS_XR_policy_repository_cfg__routing_policy(yang.adata.MNode):
    route_policies: Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies

    mut def __init__(self, route_policies: ?Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies=None):
        self._ns = 'http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg'
        self.route_policies = route_policies if route_policies is not None else Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_policies = self.route_policies
        if _route_policies is not None:
            children['route-policies'] = _route_policies.to_gdata()
        return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg', module='Cisco-IOS-XR-policy-repository-cfg')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> Cisco_IOS_XR_policy_repository_cfg__routing_policy:
        if n != None:
            return Cisco_IOS_XR_policy_repository_cfg__routing_policy(route_policies=Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies.from_gdata(n.get_opt_container('route-policies')))
        return Cisco_IOS_XR_policy_repository_cfg__routing_policy()


mut def from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_policies = yang.gdata.from_xml_opt_cnt(node, 'route-policies')
    yang.gdata.maybe_add(children, 'route-policies', from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy__route_policies, child_route_policies)
    return yang.gdata.Container(children, ns='http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg', module='Cisco-IOS-XR-policy-repository-cfg')

class root(yang.adata.MNode):
    address_family: Cisco_IOS_XR_um_vrf_cfg__address_family
    vrfs: Cisco_IOS_XR_um_vrf_cfg__vrfs
    selective_vrf_download: Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download
    srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg
    vrf_groups: Cisco_IOS_XR_um_vrf_cfg__vrf_groups
    um_router_isis_cfg_router: Cisco_IOS_XR_um_router_isis_cfg__router
    as_format: Cisco_IOS_XR_um_router_bgp_cfg__as_format
    bmp: Cisco_IOS_XR_um_router_bgp_cfg__bmp
    um_router_bgp_cfg_router: Cisco_IOS_XR_um_router_bgp_cfg__router
    mpls: Cisco_IOS_XR_um_mpls_ldp_cfg__mpls
    interfaces: Cisco_IOS_XR_um_interface_cfg__interfaces
    ethernet: Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet
    hostname: Cisco_IOS_XR_um_hostname_cfg__hostname
    routing_policy: Cisco_IOS_XR_policy_repository_cfg__routing_policy

    mut def __init__(self, address_family: ?Cisco_IOS_XR_um_vrf_cfg__address_family=None, vrfs: ?Cisco_IOS_XR_um_vrf_cfg__vrfs=None, selective_vrf_download: ?Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download=None, srlg: ?Cisco_IOS_XR_um_vrf_cfg__srlg=None, vrf_groups: ?Cisco_IOS_XR_um_vrf_cfg__vrf_groups=None, um_router_isis_cfg_router: ?Cisco_IOS_XR_um_router_isis_cfg__router=None, as_format: ?Cisco_IOS_XR_um_router_bgp_cfg__as_format=None, bmp: ?Cisco_IOS_XR_um_router_bgp_cfg__bmp=None, um_router_bgp_cfg_router: ?Cisco_IOS_XR_um_router_bgp_cfg__router=None, mpls: ?Cisco_IOS_XR_um_mpls_ldp_cfg__mpls=None, interfaces: ?Cisco_IOS_XR_um_interface_cfg__interfaces=None, ethernet: ?Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet=None, hostname: ?Cisco_IOS_XR_um_hostname_cfg__hostname=None, routing_policy: ?Cisco_IOS_XR_policy_repository_cfg__routing_policy=None):
        self._ns = ''
        self.address_family = address_family if address_family is not None else Cisco_IOS_XR_um_vrf_cfg__address_family()
        self.vrfs = vrfs if vrfs is not None else Cisco_IOS_XR_um_vrf_cfg__vrfs()
        self.selective_vrf_download = selective_vrf_download if selective_vrf_download is not None else Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download()
        self.srlg = srlg
        self.vrf_groups = vrf_groups if vrf_groups is not None else Cisco_IOS_XR_um_vrf_cfg__vrf_groups()
        self.um_router_isis_cfg_router = um_router_isis_cfg_router if um_router_isis_cfg_router is not None else Cisco_IOS_XR_um_router_isis_cfg__router()
        self.as_format = as_format if as_format is not None else Cisco_IOS_XR_um_router_bgp_cfg__as_format()
        self.bmp = bmp if bmp is not None else Cisco_IOS_XR_um_router_bgp_cfg__bmp()
        self.um_router_bgp_cfg_router = um_router_bgp_cfg_router if um_router_bgp_cfg_router is not None else Cisco_IOS_XR_um_router_bgp_cfg__router()
        self.mpls = mpls if mpls is not None else Cisco_IOS_XR_um_mpls_ldp_cfg__mpls()
        self.interfaces = interfaces if interfaces is not None else Cisco_IOS_XR_um_interface_cfg__interfaces()
        self.ethernet = ethernet if ethernet is not None else Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet()
        self.hostname = hostname if hostname is not None else Cisco_IOS_XR_um_hostname_cfg__hostname()
        self.routing_policy = routing_policy if routing_policy is not None else Cisco_IOS_XR_policy_repository_cfg__routing_policy()

    mut def create_srlg(self):
        res = Cisco_IOS_XR_um_vrf_cfg__srlg()
        self.srlg = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = _address_family.to_gdata()
        _vrfs = self.vrfs
        if _vrfs is not None:
            children['vrfs'] = _vrfs.to_gdata()
        _selective_vrf_download = self.selective_vrf_download
        if _selective_vrf_download is not None:
            children['selective-vrf-download'] = _selective_vrf_download.to_gdata()
        _srlg = self.srlg
        if _srlg is not None:
            children['srlg'] = _srlg.to_gdata()
        _vrf_groups = self.vrf_groups
        if _vrf_groups is not None:
            children['vrf-groups'] = _vrf_groups.to_gdata()
        _um_router_isis_cfg_router = self.um_router_isis_cfg_router
        if _um_router_isis_cfg_router is not None:
            children['um-router-isis-cfg:router'] = _um_router_isis_cfg_router.to_gdata()
        _as_format = self.as_format
        if _as_format is not None:
            children['as-format'] = _as_format.to_gdata()
        _bmp = self.bmp
        if _bmp is not None:
            children['bmp'] = _bmp.to_gdata()
        _um_router_bgp_cfg_router = self.um_router_bgp_cfg_router
        if _um_router_bgp_cfg_router is not None:
            children['um-router-bgp-cfg:router'] = _um_router_bgp_cfg_router.to_gdata()
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        _ethernet = self.ethernet
        if _ethernet is not None:
            children['ethernet'] = _ethernet.to_gdata()
        _hostname = self.hostname
        if _hostname is not None:
            children['hostname'] = _hostname.to_gdata()
        _routing_policy = self.routing_policy
        if _routing_policy is not None:
            children['routing-policy'] = _routing_policy.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(address_family=Cisco_IOS_XR_um_vrf_cfg__address_family.from_gdata(n.get_opt_container('address-family')), vrfs=Cisco_IOS_XR_um_vrf_cfg__vrfs.from_gdata(n.get_opt_container('vrfs')), selective_vrf_download=Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download.from_gdata(n.get_opt_container('selective-vrf-download')), srlg=Cisco_IOS_XR_um_vrf_cfg__srlg.from_gdata(n.get_opt_container('srlg')), vrf_groups=Cisco_IOS_XR_um_vrf_cfg__vrf_groups.from_gdata(n.get_opt_container('vrf-groups')), um_router_isis_cfg_router=Cisco_IOS_XR_um_router_isis_cfg__router.from_gdata(n.get_opt_container('um-router-isis-cfg:router')), as_format=Cisco_IOS_XR_um_router_bgp_cfg__as_format.from_gdata(n.get_opt_container('as-format')), bmp=Cisco_IOS_XR_um_router_bgp_cfg__bmp.from_gdata(n.get_opt_container('bmp')), um_router_bgp_cfg_router=Cisco_IOS_XR_um_router_bgp_cfg__router.from_gdata(n.get_opt_container('um-router-bgp-cfg:router')), mpls=Cisco_IOS_XR_um_mpls_ldp_cfg__mpls.from_gdata(n.get_opt_container('mpls')), interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_gdata(n.get_opt_container('interfaces')), ethernet=Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet.from_gdata(n.get_opt_container('ethernet')), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_gdata(n.get_opt_container('hostname')), routing_policy=Cisco_IOS_XR_policy_repository_cfg__routing_policy.from_gdata(n.get_opt_container('routing-policy')))
        return root()


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address_family = yang.gdata.from_xml_opt_cnt(node, 'address-family', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
    yang.gdata.maybe_add(children, 'address-family', from_xml_Cisco_IOS_XR_um_vrf_cfg__address_family, child_address_family)
    child_vrfs = yang.gdata.from_xml_opt_cnt(node, 'vrfs', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
    yang.gdata.maybe_add(children, 'vrfs', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrfs, child_vrfs)
    child_selective_vrf_download = yang.gdata.from_xml_opt_cnt(node, 'selective-vrf-download', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
    yang.gdata.maybe_add(children, 'selective-vrf-download', from_xml_Cisco_IOS_XR_um_vrf_cfg__selective_vrf_download, child_selective_vrf_download)
    child_srlg = yang.gdata.from_xml_opt_cnt(node, 'srlg', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
    yang.gdata.maybe_add(children, 'srlg', from_xml_Cisco_IOS_XR_um_vrf_cfg__srlg, child_srlg)
    child_vrf_groups = yang.gdata.from_xml_opt_cnt(node, 'vrf-groups', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg')
    yang.gdata.maybe_add(children, 'vrf-groups', from_xml_Cisco_IOS_XR_um_vrf_cfg__vrf_groups, child_vrf_groups)
    child_um_router_isis_cfg_router = yang.gdata.from_xml_opt_cnt(node, 'router', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg')
    yang.gdata.maybe_add(children, 'um-router-isis-cfg:router', from_xml_Cisco_IOS_XR_um_router_isis_cfg__router, child_um_router_isis_cfg_router)
    child_as_format = yang.gdata.from_xml_opt_cnt(node, 'as-format', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')
    yang.gdata.maybe_add(children, 'as-format', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__as_format, child_as_format)
    child_bmp = yang.gdata.from_xml_opt_cnt(node, 'bmp', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')
    yang.gdata.maybe_add(children, 'bmp', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__bmp, child_bmp)
    child_um_router_bgp_cfg_router = yang.gdata.from_xml_opt_cnt(node, 'router', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg')
    yang.gdata.maybe_add(children, 'um-router-bgp-cfg:router', from_xml_Cisco_IOS_XR_um_router_bgp_cfg__router, child_um_router_bgp_cfg_router)
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg')
    yang.gdata.maybe_add(children, 'mpls', from_xml_Cisco_IOS_XR_um_mpls_ldp_cfg__mpls, child_mpls)
    child_interfaces = yang.gdata.from_xml_opt_cnt(node, 'interfaces', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg')
    yang.gdata.maybe_add(children, 'interfaces', from_xml_Cisco_IOS_XR_um_interface_cfg__interfaces, child_interfaces)
    child_ethernet = yang.gdata.from_xml_opt_cnt(node, 'ethernet', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg')
    yang.gdata.maybe_add(children, 'ethernet', from_xml_Cisco_IOS_XR_um_l2_ethernet_cfg__ethernet, child_ethernet)
    child_hostname = yang.gdata.from_xml_opt_cnt(node, 'hostname', 'http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg')
    yang.gdata.maybe_add(children, 'hostname', from_xml_Cisco_IOS_XR_um_hostname_cfg__hostname, child_hostname)
    child_routing_policy = yang.gdata.from_xml_opt_cnt(node, 'routing-policy', 'http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg')
    yang.gdata.maybe_add(children, 'routing-policy', from_xml_Cisco_IOS_XR_policy_repository_cfg__routing_policy, child_routing_policy)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-vrf-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-bgp-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-router-isis-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ip-address-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-mpls-ldp-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-vrf-cfg',
    'http://cisco.com/ns/yang/Cisco-IOS-XR-um-l2-ethernet-cfg',
}
