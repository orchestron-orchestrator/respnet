# WARNING WARNING WARNING WARNING WARNING
# DO NOT MODIFY THIS FILE!! This file is generated!
# WARNING WARNING WARNING WARNING WARNING

import logging

import orchestron.device as odev
import orchestron.ttt as ttt
import yang.adata
import yang.gdata

from respnet.layers.y_2 import orchestron_rfs__rfs__base_config_entry
from respnet.layers.y_2 import orchestron_rfs__rfs__backbone_interface_entry
from respnet.layers.y_2 import orchestron_rfs__rfs__ibgp_neighbor_entry
from respnet.layers.y_2 import orchestron_rfs__rfs__vrf_entry
from respnet.layers.y_2 import orchestron_rfs__rfs__vrf_interface_entry
from respnet.layers.y_2 import orchestron_rfs__rfs__ebgp_customer_entry

import respnet.rfs

def get_ttt(dev_mgr: odev.DeviceManager, log_handler: ?logging.Handler=None) -> proc(list[str])->ttt.Node:
    r = ttt.Container({"device": ttt.List(ttt.Device(dev_mgr, log_handler)), "rfs": ttt.List(ttt.Container({"base-config": ttt.List(ttt.RFSTransform(respnet.rfs.BaseConfig, dev_mgr, log_handler)), "backbone-interface": ttt.List(ttt.RFSTransform(respnet.rfs.BBInterface, dev_mgr, log_handler)), "ibgp-neighbor": ttt.List(ttt.RFSTransform(respnet.rfs.IbgpNeighbor, dev_mgr, log_handler)), "vrf": ttt.List(ttt.RFSTransform(respnet.rfs.Vrf, dev_mgr, log_handler)), "vrf-interface": ttt.List(ttt.RFSTransform(respnet.rfs.VrfInterface, dev_mgr, log_handler)), "ebgp-customer": ttt.List(ttt.RFSTransform(respnet.rfs.EbgpCustomer, dev_mgr, log_handler))}, ns='http://orchestron.org/yang/orchestron-rfs.yang'))}, ns='')
    return r
