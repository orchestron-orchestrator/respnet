import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_orchestron_device__devices__device__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_orchestron_device__devices__device__modset_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class orchestron_device__devices__device_entry(yang.adata.MNode):
    name: str
    modset_id: ?str

    mut def __init__(self, name: str, modset_id: ?str):
        self._ns = "http://orchestron.org/yang/orchestron-device.yang"
        self.name = name
        self.modset_id = modset_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _modset_id = self.modset_id
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _modset_id is not None:
            children['modset_id'] = yang.gdata.Leaf('string', _modset_id)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_device__devices__device_entry:
        return orchestron_device__devices__device_entry(name=n.get_str("name"), modset_id=n.get_opt_str("modset_id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> orchestron_device__devices__device_entry:
        return orchestron_device__devices__device_entry(name=yang.gdata.from_xml_str(n, "name"), modset_id=yang.gdata.from_xml_opt_str(n, "modset_id"))

class orchestron_device__devices__device(yang.adata.MNode):
    elements: list[orchestron_device__devices__device_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://orchestron.org/yang/orchestron-device.yang"
        self._name = 'device'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_device__devices__device_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_device__devices__device_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(orchestron_device__devices__device_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[orchestron_device__devices__device_entry]:
        res = []
        for node in nodes:
            res.append(orchestron_device__devices__device_entry.from_xml(node))
        return res


mut def from_json_path_orchestron_device__devices__device_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_device__devices__device_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['name']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        if point == 'modset_id':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children, keys)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_device__devices__device(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_device__devices__device_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_device__devices__device_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_device__devices__device_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name_full = jd.get('odev:name')
    child_name = child_name_full if child_name_full is not None else jd.get('name')
    if child_name is not None:
        children['name'] = from_json_orchestron_device__devices__device__name(child_name)
    child_modset_id_full = jd.get('odev:modset_id')
    child_modset_id = child_modset_id_full if child_modset_id_full is not None else jd.get('modset_id')
    if child_modset_id is not None:
        children['modset_id'] = from_json_orchestron_device__devices__device__modset_id(child_modset_id)
    return yang.gdata.Container(children, [str(child_name if child_name is not None else "")])

mut def from_json_orchestron_device__devices__device(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_orchestron_device__devices__device_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_orchestron_device__devices__device_element(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_name = n.children.get('name')
    if child_name is not None:
        if isinstance(child_name, yang.gdata.Leaf):
            children['name'] = child_name.val
    child_modset_id = n.children.get('modset_id')
    if child_modset_id is not None:
        if isinstance(child_modset_id, yang.gdata.Leaf):
            children['modset_id'] = child_modset_id.val
    return children

mut def to_json_orchestron_device__devices__device(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_orchestron_device__devices__device_element(e))
    return elements

class orchestron_device__devices(yang.adata.MNode):
    device: orchestron_device__devices__device

    mut def __init__(self, device: list[orchestron_device__devices__device_entry]=[]):
        self._ns = "http://orchestron.org/yang/orchestron-device.yang"
        self.device = orchestron_device__devices__device(elements=device)
        self.device._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device = self.device
        if _device is not None:
            children['device'] = _device.to_gdata()
        return yang.gdata.Container(children, ns='http://orchestron.org/yang/orchestron-device.yang')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_device__devices:
        if n != None:
            return orchestron_device__devices(device=orchestron_device__devices__device.from_gdata(n.get_opt_list("device")))
        return orchestron_device__devices()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> orchestron_device__devices:
        if n != None:
            return orchestron_device__devices(device=orchestron_device__devices__device.from_xml(yang.gdata.get_xml_children(n, "device")))
        return orchestron_device__devices()


mut def from_json_path_orchestron_device__devices(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'odev:device' or point == 'device':
            child = {'device': from_json_path_orchestron_device__devices__device(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_orchestron_device__devices(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_orchestron_device__devices(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_device_full = jd.get('odev:device')
    child_device = child_device_full if child_device_full is not None else jd.get('device')
    if child_device is not None and isinstance(child_device, list):
        children['device'] = from_json_orchestron_device__devices__device(child_device)
    return yang.gdata.Container(children)

mut def to_json_orchestron_device__devices(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_device = n.children.get('device')
    if child_device is not None:
        if isinstance(child_device, yang.gdata.List):
            children['device'] = to_json_orchestron_device__devices__device(child_device)
    return children

class root(yang.adata.MNode):
    devices: orchestron_device__devices

    mut def __init__(self, devices: ?orchestron_device__devices=None):
        self._ns = ""
        if devices is not None:
            self.devices = devices
        else:
            self.devices = orchestron_device__devices()
        self_devices = self.devices
        if self_devices is not None:
            self_devices._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _devices = self.devices
        if _devices is not None:
            children['devices'] = _devices.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(devices=orchestron_device__devices.from_gdata(n.get_opt_container("devices")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(devices=orchestron_device__devices.from_xml(yang.gdata.get_xml_opt_child(n, "devices", "http://orchestron.org/yang/orchestron-device.yang")))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'odev:devices':
            child = {'devices': from_json_path_orchestron_device__devices(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_devices = jd.get('odev:devices')
    if child_devices is not None and isinstance(child_devices, dict):
        children['devices'] = from_json_orchestron_device__devices(child_devices)
    return yang.gdata.Container(children)

mut def to_json(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_devices = n.children.get('devices')
    if child_devices is not None:
        if isinstance(child_devices, yang.gdata.Container):
            children['odev:devices'] = to_json_orchestron_device__devices(child_devices)
    return children

schema_namespaces: set[str] = {
    "http://orchestron.org/yang/orchestron-device.yang",
}
