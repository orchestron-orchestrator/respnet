import argparse
import file
import json
import logging
import http
import net
import xml

import orchestron.device as odev
import orchestron.ttt as ttt
import yang.adata
import yang.gdata

import tmf.tmf641
import respnet.tmf

import respnet.layers
from respnet.layers.y_0 import root as cfs_root
import respnet.layers.y_0
import respnet.layers.y_1
import respnet.layers.y_2
import respnet.layers.y_3

import testing

def optional_str[T](v: ?T, default: str = "None") -> str:
    return str(v) if v is not None else default

def merge_confpsrc(confpsrc: dict[str, yang.gdata.Node]):
    chunks = list(confpsrc.values())
    if len(chunks) > 0:
        merged = chunks[0]
        if len(chunks) > 1:
            for chunk in chunks[1:]:
                merged = yang.gdata.merge(merged, chunk)
        return merged
    return yang.gdata.Root()


actor main(env):
    rfcap = file.ReadFileCap(file.FileCap(env.cap))

    logh = logging.Handler("Otron")
    logh.add_sink(logging.StdoutSink())
    logh.set_output_level(logging.TRACE)

    logh_http = logging.Handler("HTTP")
    logh_http.set_handler(logh)
    logh_http.set_output_level(logging.DEBUG)

    logh_ttt = logging.Handler("TTT")
    logh_ttt.set_handler(logh)
    logh_ttt.set_output_level(logging.INFO)

    logh_dev = logging.Handler("Dev")
    logh_dev.set_handler(logh)
    dev_mgr = odev.DeviceManager(env.cap, logh_dev)
    layers = respnet.layers.get_layers(dev_mgr, logh_ttt)
    layer_configs = {}

    log = logging.Logger(logh)

    def conf_xml(xml_in: xml.Node):
        try:
            input_config = cfs_root.from_xml(xml_in).to_gdata()
            conf(input_config)
        except Exception as e:
            log.error("Error applying config: %s" % str(e))

    action def conf(in_conf: ?yang.gdata.Node=None):
        # Bootstrap first layer config input
        if in_conf != None:
            current_config = layer_configs.get(0)
            new_config = None
            if current_config != None:
                new_config = yang.gdata.patch(current_config, in_conf)
            else:
                new_config = in_conf

            if new_config != None:
                layer_configs[0] = new_config
            else:
                log.error("No new config (empty patch) to apply")
                return

        if 0 not in layer_configs:
            return
        config_in = {"source1": layer_configs[0]}

        config_out = {}
        for idx, layer in enumerate(layers):
            print("Computing layer %d" % idx)
            config_out = {}
            layer.configure(config_in, config_out)
            mc = merge_confpsrc(config_out)
#            print("=== Layer %d config === START ===" % idx)
#            print(mc.to_xmlstr())
#            print("=== Layer %d config === END =====" % idx)
            config_in = config_out
            layer_configs[idx + 1] = mc
    dev_mgr.on_reconf(conf)

    tcpl_cap = net.TCPListenCap(net.TCPCap(net.NetCap(env.cap)))

    tmf_store = respnet.tmf.SOStore()

    def _on_http_accept(server):
        server.cb_install(_on_http_server_request, _on_http_server_error)

    def _on_http_server_request(server, request, respond):
        path_elements = request.path.split("/")
        if len(path_elements) > 1 and path_elements[1] == "tmf-api":
            # GET /tmf-api/serviceOrdering/v4/serviceOrder/{id}
            if request.method == "GET":
                if len(path_elements) == 5 and path_elements[2] == "serviceOrdering" and path_elements[3] == "v4" and path_elements[4] == "serviceOrder":
                    res = []
                    for so in tmf_store.get_service_orders():
                        res.append(so.to_json())
                    respond(200, {}, json.encode({"items": res}))
                    return

                elif len(path_elements) == 6 and path_elements[2] == "serviceOrdering" and path_elements[3] == "v4" and path_elements[4] == "serviceOrder":
                    try:
                        so_id = path_elements[5]
                        sr = tmf_store.get_service_order(so_id)
                        if sr is not None:
                            respond(200, {}, json.encode(sr.to_json()))
                            return
                        else:
                            respond(404, {}, "Not found")
                            return
                    except Exception as e:
                        respond(400, {}, "Error getting service order: %s" % str(e))
                        return

            # POST /tmf-api/serviceOrdering/v4/serviceOrder
            if request.method == "POST":
                if len(path_elements) > 3 and path_elements[2] == "serviceOrdering" and path_elements[3] == "v4" and path_elements[4] == "serviceOrder":
                    so_in = json.decode(request.body.decode())
                    try:
                        sr = tmf_store.create_service_order(so_in)
                        sr_diff = sr.diff
                        if sr_diff is not None:
                            conf(sr_diff)
                        respond(200, {}, "OK")
                        return
                    except Exception as e:
                        respond(400, {}, "Error creating service order: %s" % str(e))
                        return

            # no more tmf-api
            respond(404, {}, "Not found")
            return

        if request.method == "GET":
            if len(path_elements) > 1 and path_elements[1] == "reconf":
                conf()
                respond(200, {}, "OK")
                return
            elif len(path_elements) > 3 and path_elements[1] == "device":
                try:
                    dev_name = path_elements[2]
                    dev = dev_mgr.get(dev_name)
                    if path_elements[3] == "capabilities":
                        respond(200, {}, str(dev.get_capabilities()))
                        return
                    if path_elements[3] == "modules":
                        txt = "{"
                        mods = dev.get_modules()
                        for mod in mods.values():
                            txt += '{"name": %s, "namespace": %s, "revision": %s, "feature": %s}, ' % (mod.name, mod.namespace, optional_str(mod.revision), optional_str(mod.feature))
                        txt += "}"
                        respond(200, {}, txt)
                        return
                    respond(404, {}, "Not found")
                    return
                except Exception as e:
                    respond(404, {}, "Not found")
                    return
            elif len(path_elements) == 3 and path_elements[1] == "layer":
                ys = [respnet.layers.y_0.to_json]
                try:
                    layer_idx = int(path_elements[2])
                    try:
                        layer_config: yang.gdata.Node = layer_configs[layer_idx]
                        content = ""
                        if request.headers.get("accept") == "application/yang-data+json":
                            if isinstance(layer_config, yang.gdata.Root):
                                # TODO: bah, why can't we pick function from ys list?
                                if layer_idx == 0:
                                    content = json.encode(respnet.layers.y_0.to_json(layer_config))
                                elif layer_idx == 1:
                                    content = json.encode(respnet.layers.y_1.to_json(layer_config))
                                elif layer_idx == 2:
                                    content = json.encode(respnet.layers.y_2.to_json(layer_config))
                                else:
                                    respond(404, {}, "Unknown layer")
                                    return
                        if request.headers.get("accept") == "application/yang-data+xml":
                            content = layer_config.to_xmlstr()
                        respond(200, {}, content)
                        return
                    except KeyError:
                        respond(404, {}, "Not found")
                        return
                except ValueError:
                    respond(400, {}, "Bad request, layer index must be an integer")
                    return
            else:
                respond(404, {}, "Not found")
                return
        elif request.method == "DELETE":
            p = split_restconf_path(request.path)
            if p[0] == "restconf":
                input_config = respnet.layers.y_0.from_json_path({}, p[1:], "remove")
                conf(input_config)
                respond(200, {}, "OK")
                return
            respond(404, {}, "")
            return
        elif request.method in {"POST", "PUT"}:
            path_segments = request.path.split("/")
            if len(path_segments) >= 1 and path_segments[1] == "restconf":
                if request.headers.get("content-type") == "application/yang-data+json":
                    json_in = json.decode(request.body.decode())
                    p = split_restconf_path(request.path)[1:]
                    input_config = respnet.layers.y_0.from_json_path(json_in, p)
                    conf(input_config)
                    respond(200, {}, "OK")
                    return
                elif request.headers.get("content-type") == "application/yang-data+xml":
                    xml_in = xml.decode(request.body.decode())
                    input_config = cfs_root.from_xml(xml_in).to_gdata()
                    conf(input_config)
                    respond(200, {}, "OK")
                    return
                else:
                    respond(415, {}, "Unsupported media type")
                    return
            respond(404, {}, "")
            return
        else:
            respond(405, {}, "Method not allowed")
            return

    def _on_http_server_error(server, error):
        print("Error: %s" % error)

    server = http.Listener(tcpl_cap, "0.0.0.0", 80, _on_http_accept, log_handler=logh_http)

    configs = []
    env_exit_on_done = env.getenv("EXIT_ON_DONE")
    exit_on_done = env_exit_on_done if env_exit_on_done is not None else ""

    def _conf_file():
        # Grab the first config
        print("Applying config file..")
        try:
            nb_input = configs.pop(0)
            conf_xml(nb_input)
            print("Config file applied, waiting 3 seconds before applying the next..")
            after 3: _conf_file()
        except IndexError:
            print("All config files applied")
            # TODO: exit_on_done.lower() once Acton bug is fixed!?
            if exit_on_done in ["1", "true", "yes"]:
                print("No more config files to apply, exiting..")
                after 3: _exit()

    def _exit():
        env.exit(0)

    if len(env.argv) > 1:
        # Read and apply config files, but paced
        for i in range(1, len(env.argv)):
            if i > 0:
                filename = env.argv[i]
                f = file.ReadFile(rfcap, filename)
                nb_input = await async f.read()
                f.close()
                try:
                    configs.append(xml.decode(nb_input.decode()))
                except Exception as e:
                    print("Error reading config file %s: %s" % (filename, str(e)))
                    env.exit(1)

        # start to apply..
        after 0.5: _conf_file()

    print("Orchestron/respnet running..")



def split_restconf_path(text: str) -> list[str]:
    # First split by slash
    parts = text.split('/')
    # Create a new list to store all elements
    result = []
    # For each part, split by equals if it exists
    for part in parts:
        if '=' in part:
            result.extend(part.split('=', 1))
        elif part != '':
            result.append(part)
    return result
